package vaulsys.webservice.walletcardmgmtwebservice.component;


import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.WebResource;
import org.apache.commons.lang.WordUtils;
import org.hibernate.LockMode;
import vaulsys.calendar.DateTime;
import vaulsys.cms.base.*;
import vaulsys.cms.base.CMSActivityLog;
import vaulsys.config.SystemConfig;
import vaulsys.customer.CustomerService;
import vaulsys.entity.Tax;
import vaulsys.entity.TaxType;
import vaulsys.entity.impl.IMD;
import vaulsys.entity.impl.TransactionCharges;
import vaulsys.network.channel.base.Channel;
import vaulsys.persistence.GeneralDao;
import vaulsys.protocols.PaymentSchemes.EMV.EMVTags;
import vaulsys.protocols.PaymentSchemes.base.ChannelCodes;
import vaulsys.protocols.PaymentSchemes.base.ISOPOSEntryMode;
import vaulsys.protocols.PaymentSchemes.base.ISOResponseCodes;
import vaulsys.protocols.ifx.enums.AccType;
import vaulsys.security.hsm.HardwareSecurityModule;
import vaulsys.util.MyDateFormatNew;
import vaulsys.util.Util;
import vaulsys.util.WebServiceUtil;
import vaulsys.wallet.base.ledgers.CMSEMIAccountCollection;
import vaulsys.wallet.components.FinanceManager;
import vaulsys.wallet.components.TxnFlag;
import vaulsys.webservice.walletcardmgmtwebservice.entity.SwitchTransactionCodes;
import vaulsys.webservice.walletcardmgmtwebservice.entity.WalletCMSWsEntity;
import vaulsys.webservice.walletcardmgmtwebservice.entity.WalletCMSWsListingEntity;
import vaulsys.webservice.walletcardmgmtwebservice.model.*;
import vaulsys.wfe.GlobalContext;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.DateUtils;
import org.apache.log4j.Logger;
import org.hibernate.Query;
import vaulsys.customer.Currency;

import javax.transaction.Transactional;
import javax.ws.rs.core.MediaType;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.temporal.ChronoUnit;
import java.util.*;

/**
 * Created by Raza on 29-Jan-18.
 */
public class WSOperation {
    private static final Logger logger = Logger.getLogger(WSOperation.class);

    public static WalletCMSWsEntity ExecuteCheckCnic(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing CheckCnic Request...");
            String dbQuery;
            boolean customerregistered = false, walletcreated = false; //, inactiveaccount = false;
            Map<String, Object> params;

            List<CMSCustomer> custlist = null;
            params = new HashMap<String, Object>();
            dbQuery = "from " + CMSCustomer.class.getName() + " c where c.cnic= :CNIC";
            params = new HashMap<String, Object>();
            params.put("CNIC", wsmodel.getCnic());

            custlist = GeneralDao.Instance.find(dbQuery, params);

            if (custlist != null && custlist.size() > 0) //CNIC Check
            {
                customerregistered = true;
                for (CMSCustomer c : custlist) //Compare Mobile Number for all record of a single CNIC
                {
                    List<CMSAccount> acctlist = null;
                    params = new HashMap<String, Object>();
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.customer.id= :custid "; //No Need for BankCode
                    params = new HashMap<String, Object>();
                    params.put("custid", c.getId()); //.toString());
                    acctlist = GeneralDao.Instance.find(dbQuery, params);
                    if (acctlist != null && acctlist.size() > 0) {
                        //CMSAccount account = acctlist.get(0);
                        for (CMSAccount account : acctlist) {
                            if (account.getCategory().equals(AccType.CAT_WALLET_VALUE) && !account.getStatus().equals("10")) { // Asim Shahzad, Date : 11th March 2021, Tracking ID : VP-NAP-202103111 / VC-NAP-202103111

                                walletcreated = true; //irrespective of currency.
                            }
                        }
                    }
                }

                if (customerregistered) {
                    if (walletcreated)  //&& inactiveaccount)
                    {
                        logger.error("NayaPay customer already registered! rejecting transaction...");
                        wsmodel.setAllowed("FALSE");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else { //in what case? TimeOut?
                        logger.error("Customer Registered but Wallet not found, registering...");
                        wsmodel.setAllowed("TRUE");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    }
                } else {
                    logger.info("Customer not registered, registering...");
                    wsmodel.setAllowed("TRUE");
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                }

            } else {
                logger.info("Customer not Registered, allowed...");
                wsmodel.setAllowed("TRUE");
                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing CheckCnic..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteCreateWallet(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing CreateWallet Request...");
            String dbQuery;
            Map<String, Object> params;


            //Check Dublicate Cnic & Mobile Number start
            if (Util.hasText(wsmodel.getMobilenumber())) {
                dbQuery = "from " + CMSCustomer.class.getName() + " c where c.MobileNumber= :MOBNUM";
                params = new HashMap<String, Object>();
                params.put("MOBNUM", wsmodel.getMobilenumber());

                CMSCustomer customer = (CMSCustomer) GeneralDao.Instance.findObject(dbQuery, params);

                //m.rehman: 06-05-2021 - VC-NAP-202104272 - Wallet Re-creation issue after wallet closure
                //adding check for close wallet (status 10)
                if (customer != null && !customer.getStatus().equals("07") && !customer.getStatus().equals("10")) {
                    logger.error("mobilenumber [" + wsmodel.getMobilenumber() + "] already registered, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_ALREADY_EXIST); //27 Duplicate Customer/Account Refer to Doc 02-07-2019
                    return wsmodel;
                }
            }

            if (Util.hasText(wsmodel.getCnic())) {
                dbQuery = "from " + CMSCustomer.class.getName() + " c where c.cnic= :CNIC";
                params = new HashMap<String, Object>();
                params.put("CNIC", wsmodel.getCnic());

                CMSCustomer customer = (CMSCustomer) GeneralDao.Instance.findObject(dbQuery, params);

                //m.rehman: 06-05-2021 - VC-NAP-202104272 - Wallet Re-creation issue after wallet closure
                //adding check for close wallet (status 10)
                if (customer != null && !customer.getStatus().equals("07") && !customer.getStatus().equals("10")) {
                    logger.error("cnic [" + wsmodel.getCnic() + "] already registered, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_ALREADY_EXIST); //27 Duplicate Customer/Account Refer to Doc 02-07-2019
                    return wsmodel;
                }
            }
            //Check Dublicate Cnic & Mobile Number end

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                logger.info("NayaPay Relation found for UserId [" + wsmodel.getUserid() + "]");

                if (nprel.getAccount().getStatus().equals("07") && (nprel.getAccount().getCustomer().getStatus().equals("07"))) {
                    logger.info("Customer Soft Deleted, Re-registering...");
                    if (WalletCMSFunctions.CreateAccountProfile(wsmodel, nprel.getAccount())) {
                        logger.info("Account Profile Created Successfully for customer UserId [" + wsmodel.getUserid() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        logger.error("Unable to Create Account Profile for customer UserId [" + wsmodel.getUserid() + "]");
                        //wsmodel.setRespcode(ISOResponseCodes.INTERNAL_DATABASE_ERROR); //13 - Internal DataBase Error
                        return wsmodel;
                    }
                }
                // Asim Shahzad, Date : 16th March 2021, Tracking ID : VP-NAP-202103111 / VC-NAP-202103111
                else if (nprel.getAccount().getStatus().equals("10")) {
                    logger.info("Customer Wallet is closed, Creating new wallet...");
                    if (WalletCMSFunctions.ReCreateAccountProfile(wsmodel, nprel.getAccount())) {
                        logger.info("Account Profile Created Successfully for customer UserId [" + wsmodel.getUserid() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        logger.error("Unable to Create Account Profile for customer UserId [" + wsmodel.getUserid() + "]");
                        //wsmodel.setRespcode(ISOResponseCodes.INTERNAL_DATABASE_ERROR); //13 - Internal DataBase Error
                        return wsmodel;
                    }
                }
                // =======================================================================================
                else {
                    logger.error("Inactive Account or Customer Status Found, rejecting");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //27 Duplicate Customer/Account Refer to Doc 02-07-2019
                    return wsmodel;
                }
            } else {
                logger.info("Customer not Registered, registering...");

//                logger.info("Verifying Mobile Number...");
//                dbQuery = "from " + CMSCustomer.class.getName() + " c where c.MobileNumber= :mobnum";
//                params = new HashMap<String, Object>();
//                params.put("mobnum", wsmodel.getMobilenumber());
//
//                custlist = GeneralDao.Instance.find(dbQuery, params);
//
//                if(custlist != null && custlist.size() > 0)
//                {
//                    logger.error("Invalid Mobile Number, Already used by other customer! rejecting..");
//                    wsmodel.setRespcode(ISOResponseCodes.ERROR_MOBILENUM);
//                    return wsmodel;
//                }
//                logger.info("Mobile Number Verified!");

                if (WalletCMSFunctions.CreateAccountProfile(wsmodel, null)) {
                    logger.info("Account Profile Created Successfully for customer [" + wsmodel.getCnic() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                } else {
                    logger.error("Unable to Create Account Profile for customer [" + wsmodel.getCnic() + "]");
                    //wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //46 - Unable to Process
                    return wsmodel;
                }
            }
            //new end








            /*
            List<CMSCustomer> custlist = null;
            params = new HashMap<String, Object>();
            dbQuery = "from " + CMSCustomer.class.getName() + " c where c.cnic= :CNIC";
            params = new HashMap<String, Object>();
            params.put("CNIC", wsmodel.getCnic());

            custlist = GeneralDao.Instance.find(dbQuery, params);

            if (custlist != null && custlist.size() > 0) //CNIC Check
            {
                for (CMSCustomer c : custlist) //Compare Mobile Number for all record of a single CNIC
                {
                    if (!(c.getMobileNumber().equals(wsmodel.getMobilenumber()))) {
                        logger.error("Wrong Mobile Number for CNIC, rejecting transaction...");
                        wsmodel.setRespcode(ISOResponseCodes.ERROR_INVALIDMOBILENUMBER);
                        return wsmodel;
                    }

                    if (c.getCustomerId().equals(wsmodel.getCnic())) {
                        customer = c;
                        customerregistered = true;

                        List<CMSAccount> acctlist = null;

                        params = new HashMap<String, Object>();
                        dbQuery = "from " + CMSAccount.class.getName() + " c where c.CustomerID= :custid "; //No Need for BankCode
                        params = new HashMap<String, Object>();
                        params.put("custid", c.getId().toString());
                        acctlist = GeneralDao.Instance.find(dbQuery, params);
                        if (acctlist != null && acctlist.size() > 0) {

                            walletcreated = true; //irrespective of currency.
//                            for (CMSAccount a : acctlist) {
//                                if (!a.getStatus().equals("00")) {
//                                    inactiveaccount = true;
//                                    break;
//                                }
//                            }
                        }
                    }
                }

                if (customerregistered) {
                    if (walletcreated)  //&& inactiveaccount)
                    {
                        logger.error("NayaPay customer already registered! rejecting transaction...");
                        wsmodel.setRespcode(ISOResponseCodes.ERROR_DUPLICATECUSTOMER);
                        return wsmodel;
                    } else {
                        logger.error("Customer Registered but Wallet Currency not found, registering...");
                    }
                } else {
                    logger.info("Customer not registered, registering...");
                    customer = new CMSCustomer();
                }

                if (WalletCMSFunctions.CreateAccountProfile(wsmodel, customer)) {
                     logger.info("Account Profile Created Successfully for customer [" + wsmodel.getCnic() + "]");
                     wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                     return wsmodel;
                } else {
                     logger.error("Unable to Create Account Profile for customer [" + wsmodel.getCnic() + "]");
                     wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                     return wsmodel;
                }
            } else {
                logger.info("Customer not Registered, registering...");

                logger.info("Verifying Mobile Number...");
                dbQuery = "from " + CMSCustomer.class.getName() + " c where c.MobileNumber= :mobnum";
                params = new HashMap<String, Object>();
                params.put("mobnum", wsmodel.getMobilenumber());

                custlist = GeneralDao.Instance.find(dbQuery, params);

                if(custlist != null && custlist.size() > 0)
                {
                    logger.error("Invalid Mobile Number, Already used by other customer! rejecting..");
                    wsmodel.setRespcode(ISOResponseCodes.ERROR_MOBILENUM);
                    return wsmodel;
                }
                logger.info("Mobile Number Verified!");

                if(WalletCMSFunctions.CreateAccountProfile(wsmodel,customer))
                {
                    logger.info("Account Profile Created Successfully for customer [" + wsmodel.getCnic() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                }
                else
                {
                    logger.error("Unable to Create Account Profile for customer [" + wsmodel.getCnic() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                    return wsmodel;
                }
            }*/
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing CreateWallet..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //46 - Unable to Process
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteCreateWalletPIN(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing CreateWalletPIN Request...");
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                logger.info("NayaPay Relation found for UserId [" + wsmodel.getUserid() + "]");

                if (nprel.getAccount().getStatus().equals("08") && (nprel.getAccount().getCustomer().getStatus().equals("08"))) {
                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation ";
                    params = new HashMap<String, Object>();
                    params.put("relation", nprel.getAccount().getAccountNumber());

                    List<CMSAuth> listcardrelation = GeneralDao.Instance.find(dbQuery, params);

                    if (listcardrelation != null && listcardrelation.size() > 0) {
                        logger.info("Generating PIN for Customer Wallet...");
                        if (WalletCMSFunctions.GeneratePIN(wsmodel, listcardrelation)) //Raza Generate PIN for 1 Channel then map same to all
                        {
                            logger.info("Account Profile Created Successfully for customer [" + wsmodel.getCnic() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                            return wsmodel;
                        } else {
                            logger.error("Unable to Create Account Profile for customer [" + wsmodel.getCnic() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.NP_BAD_PIN);
                            return wsmodel;
                        }
                    } else {
                        //logger.error("Card Relation not found for relation [" + WebServiceUtil.getMaskedValue(nprel.getAccount().getAccountNumber()) + "], rejecting...");
                        logger.error("Card Relation not found for relation [" + nprel.getAccount().getAccountNumber() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND); //90 - Customer Not Found ; Refer to Doc
                        return wsmodel;
                    }
                } else {
                    logger.error("Inactive Account or Customer Status Found, rejecting");
                    wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //32 Inactive Customer/Account ; refer NayaPay Doc
                    return wsmodel;
                }
            } else {
                logger.error("No NayaPay Relation found for UserId [" + wsmodel.getUserid() + "], rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer Not Found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing CreateWalletPIN..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    // Asim Shahzad, Date : 9th March 2021, Tracking ID : VP-NAP-202103112 / VC-NAP-202103112
    public static WalletCMSWsEntity ExecuteCreateWalletPINWithSecretQuestions(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing ExecuteCreateWalletPINWithSecretQuestions Request...");
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                logger.info("NayaPay Relation found for UserId [" + wsmodel.getUserid() + "]");

                if (nprel.getAccount().getStatus().equals("08") && (nprel.getAccount().getCustomer().getStatus().equals("08"))) {
                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation ";
                    params = new HashMap<String, Object>();
                    params.put("relation", nprel.getAccount().getAccountNumber());

                    List<CMSAuth> listcardrelation = GeneralDao.Instance.find(dbQuery, params);

                    if (listcardrelation != null && listcardrelation.size() > 0) {
                        logger.info("Generating PIN for Customer Wallet...");
                        if (WalletCMSFunctions.GeneratePIN(wsmodel, listcardrelation)) //Raza Generate PIN for 1 Channel then map same to all
                        {
                            logger.info("Adding Security Questions...");
                            if (!WalletCMSFunctions.AddSecurityQuestions(wsmodel, listcardrelation.get(0).getCustomer())) {
                                logger.error("Unable to Add Security Questions for cnic [" + listcardrelation.get(0).getCustomer().getCnic() + "]");
                                wsmodel.setRespcode(ISOResponseCodes.INTERNAL_DATABASE_ERROR);
                                GeneralDao.Instance.clear();
                                GeneralDao.Instance.saveOrUpdate(wsmodel);
                                return wsmodel;
                            }
                            logger.info("Account Profile Created Successfully for customer [" + wsmodel.getCnic() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                            return wsmodel;
                        } else {
                            logger.error("Unable to Create Account Profile for customer [" + wsmodel.getCnic() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.NP_BAD_PIN);
                            return wsmodel;
                        }
                    } else {
                        //logger.error("Card Relation not found for relation [" + WebServiceUtil.getMaskedValue(nprel.getAccount().getAccountNumber()) + "], rejecting...");
                        logger.error("Card Relation not found for relation [" + nprel.getAccount().getAccountNumber() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND); //90 - Customer Not Found ; Refer to Doc
                        return wsmodel;
                    }
                } else {
                    logger.error("Inactive Account or Customer Status Found, rejecting");
                    wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //32 Inactive Customer/Account ; refer NayaPay Doc
                    return wsmodel;
                }
            } else {
                logger.error("No NayaPay Relation found for UserId [" + wsmodel.getUserid() + "], rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer Not Found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);
            logger.error("Exception caught while Executing ExecuteCreateWalletPINWithSecretQuestions..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }
    // =====================================================================================================

    public static WalletCMSWsEntity ExecuteDeleteProvisionalWallet(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing DeleteProvisionalWallet Request...");
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                logger.info("NayaPay Relation found for UserId [" + wsmodel.getUserid() + "]");

                if (!nprel.getAccount().getStatus().equals("00") || (!nprel.getAccount().getCustomer().getStatus().equals("00"))) {
                    logger.error("Inactive Account or Customer Status Found, rejecting");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //03 for Account Inactive ; refer NayaPay Doc
                    return wsmodel;
                } else if (!nprel.getAccount().getLevel().equals(AccType.LEVEL_ZERO.toString()) || !nprel.getAccount().getCategory().equals(AccType.CAT_PROV.StringValue())) {
                    logger.error("Inactive Account or Customer category Found , rejecting");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //67 Invalid Account Status ; refer NayaPay Doc
                    return wsmodel;
                } else {
                    if (WalletCMSFunctions.SoftDeleteWalletProfile(wsmodel, nprel.getAccount())) {
                        logger.info("Account Profile Soft Deleted Successfully for customer [" + wsmodel.getUserid() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        logger.error("Unable to Soft Delete Account Profile for customer [" + wsmodel.getUserid() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                        return wsmodel;
                    }
                }
            } else {
                logger.error("No NayaPay Relation found for UserId [" + wsmodel.getUserid() + "], rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer Not Found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing DeleteProvisionalWallet..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteActivateProvisionalWallet(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing ActivateProvisionalWallet Request...");
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                logger.info("NayaPay Relation found for UserId [" + wsmodel.getUserid() + "]");

                if (!nprel.getAccount().getStatus().equals("00") || (!nprel.getAccount().getCustomer().getStatus().equals("00"))) {
                    logger.error("Inactive Account or Customer Status Found, rejecting");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 - Inactive Customer/Account Status ; refer NayaPay Doc
                    return wsmodel;
                } else if (!nprel.getAccount().getCategory().equals(AccType.CAT_PROV.StringValue())) {
                    logger.error("Invalid Account Category Found, rejecting");
                    wsmodel.setRespcode(ISOResponseCodes.WALLET_IN_PROVISIONAL_STATE); //31 - Invalid Account Category ; refer NayaPay Doc
                    return wsmodel;
                } else {
                    if (WalletCMSFunctions.ActivateLevelZeroWalletProfile(nprel.getAccount())) {
                        logger.info("Account Profile Activated Successfully for customer [" + wsmodel.getUserid() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {

                        logger.error("Unable to Activate Account Profile for customer [" + wsmodel.getUserid() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                        return wsmodel;
                    }
                }
            } else {
                logger.error("No NayaPay Relation found for UserId [" + wsmodel.getUserid() + "], rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer Not Found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing ActivateProvisionalWallet..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteCreateWalletLevelOne(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing CreateWalletLevelOne Request...");
            CMSCustomer customer = null;
            String dbQuery;
            Map<String, Object> params;
            List<CMSCustomer> custlist = null;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                logger.info("NayaPay Relation found for UserId [" + wsmodel.getUserid() + "]");

                if (!(nprel.getAccount().getStatus().equals("00")) || (!nprel.getAccount().getCustomer().getStatus().equals("00"))) {
                    logger.info("Customer or Account Profile not active or invalid category, cannot upgrade wallet. Rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 for Inactive Account Status - refer NayaPay Doc
                    return wsmodel;
                } else if ((!nprel.getAccount().getCategory().equals(AccType.CAT_WALLET.StringValue()))) {
                    logger.info("Invalid category, cannot upgrade wallet. Rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //31 Invalid Category - refer NayaPay Doc
                    return wsmodel;
                } else {
                    if (WalletCMSFunctions.UpgradeAccountProfile(nprel.getAccount(), wsmodel.getServicename())) {
                        logger.info("Account Profile Created Successfully for customer [" + wsmodel.getCnic() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        logger.error("Unable to Create Account Profile for customer [" + wsmodel.getCnic() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot upgrade wallet to Level 1. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
            //new end
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing CreateWalletLevelOne..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteCustomerEnableWalletAccountRequest(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing CustomerEnableWalletAccount Request...");
            String dbQuery, prevStatus;
            Map<String, Object> params;
            CMSActivityLog cmsActivityLog;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                if (!nprel.getAccount().getStatus().equals("00") && !nprel.getAccount().getStatus().equals("01")) {
                    logger.error("Invalid Account or Customer Status, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Inactive Account/Customer ; refer NayaPay Doc
                    return wsmodel;
                }

                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", nprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + nprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //93-Customer Relation Not Found ; Raza update THIS
                    return wsmodel;
                }

                if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                    logger.error("PIN validation failed, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_BAD_PIN); //24-BAD PIN; refer to Doc
                    return wsmodel;
                }


                if (wsmodel.getEnableflag().equals("true")) {
                    //account enable/block/softdelete, reject txn
                    if (nprel.getAccount().getStatus().equals("00") || nprel.getAccount().getStatus().equals("90") || nprel.getAccount().getStatus().equals("80")
                            || nprel.getAccount().getStatus().equals("07") || nprel.getAccount().getStatus().equals("09")) {
                        logger.error("Invalid Account or Customer Status, not updating Status! rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //32 Inactive Account/Customer ; refer NayaPay Doc
                        return wsmodel;
                    } else {
                        logger.info("Enabling Wallet Account...");
                        prevStatus = nprel.getAccount().getStatus();
                        nprel.getAccount().setStatus("00");
                        nprel.getAccount().setLastUpdateDate(new Date());
                        GeneralDao.Instance.saveOrUpdate(nprel.getAccount());
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        logger.info("Saving wallet activity ....");
                        cmsActivityLog = new CMSActivityLog();
                        cmsActivityLog.setRelation(nprel.getAccount().getAccountNumber());
                        cmsActivityLog.setPreviousStatus(prevStatus);
                        cmsActivityLog.setCurrentStatus(nprel.getAccount().getStatus());
                        cmsActivityLog.setSourceType("API");
                        cmsActivityLog.setSourceName(wsmodel.getServicename());
                        cmsActivityLog.setActivityDateTime(DateTime.now());
                        GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                        return wsmodel;
                    }
                } else //This will always be false/disable - preverified by webservice validation
                {
                    if (nprel.getAccount().getStatus().equals("90") || nprel.getAccount().getStatus().equals("07")
                            || nprel.getAccount().getStatus().equals("09") || nprel.getAccount().getStatus().equals("01") || nprel.getAccount().getStatus().equals("08")) {
                        logger.error("Account in blocked/Softdelete state, not updating Status! rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //32 Invalid Customer/Account Status
                        return wsmodel;
                    } else {
                        logger.info("Disabling Wallet Account...");
                        prevStatus = nprel.getAccount().getStatus();
                        nprel.getAccount().setStatus("01");     //01 --> Warn/Temporary Block
                        nprel.getAccount().setLastUpdateDate(new Date());
                        GeneralDao.Instance.saveOrUpdate(nprel.getAccount());
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        logger.info("Saving wallet activity ....");
                        cmsActivityLog = new CMSActivityLog();
                        cmsActivityLog.setRelation(nprel.getAccount().getAccountNumber());
                        cmsActivityLog.setPreviousStatus(prevStatus);
                        cmsActivityLog.setCurrentStatus(nprel.getAccount().getStatus());
                        cmsActivityLog.setSourceType("API");
                        cmsActivityLog.setSourceName(wsmodel.getServicename());
                        cmsActivityLog.setActivityDateTime(DateTime.now());
                        GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot enable/disable wallet. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing CustomerEnableWalletAccount..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteUpdateUserProfile(WalletCMSWsEntity wsmodel) {
        logger.info("Executing UpdateUserProfile Request...");
        try {
            String dbQuery;
            Map<String, Object> params;

            List<CMSCustomer> custlist = null;

            params = new HashMap<String, Object>();
            dbQuery = "from " + CMSCustomer.class.getName() + " c where c.cnic= :CNIC";
            params = new HashMap<String, Object>();
            params.put("CNIC", wsmodel.getCnic());

            custlist = GeneralDao.Instance.find(dbQuery, params);

            if (custlist != null && custlist.size() > 0) {
                logger.info("Customer found for CNIC [" + wsmodel.getCnic() + "]");
                CMSCustomer customer = custlist.get(0); //Raza It will always be 1 as it is unique
                /*if(!customer.getMobileNumber().equals(wsmodel.getMobilenumber())) //Raza Mobile Number can be changed
                {
                    logger.error("Invalid Mobile Number received for NayaPayId [" + wsmodel.getNayapayid() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.ERROR_INVALIDMOBILENUMBER);
                    return wsmodel;
                }
                else*/
                if (!customer.getCnic().equals(wsmodel.getCnic())) {
                    logger.error("Invalid CNIC received for CNIC [" + wsmodel.getCnic() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.ERROR_INVALIDCNIC);
                    return wsmodel;
                } else if (!customer.getStatus().equals("00")) {
                    logger.error("Customer is not active for CNIC [" + wsmodel.getCnic() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Inactive Account/Customer ; refer NayaPay Doc
                    return wsmodel;
                } else {
                    //Get and Update Account start
                    params = new HashMap<String, Object>();
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.CustomerID= :CNIC " + " and c.AccountType = :acctype and c.BranchId= :bankcode";
                    params = new HashMap<String, Object>();
                    params.put("CNIC", customer.getId() + "");
                    params.put("acctype", AccType.WALLET.toString());
                    params.put("bankcode", wsmodel.getBank());

                    CMSAccount account = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                    if (account == null) {
                        logger.error("No Account found for [" + wsmodel.getAccountnumber() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //Raza '02' for invalid account refer to document
                        return wsmodel;
                    } else if (!(account.getStatus().equals("00"))) {
                        logger.error("Inactive Account found for [" + wsmodel.getAccountnumber() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Inactive Account/Customer ; refer NayaPay Doc
                        return wsmodel;
                    }
                    //Get and Update Account end

                    customer.setMobileNumber(wsmodel.getMobilenumber());
                    customer.setFirstname(wsmodel.getCustomername());
                    customer.setCnic(wsmodel.getCnic());
                    customer.setCustomerId(wsmodel.getCnic());
                    customer.setMotherName(wsmodel.getMothername());
                    Date d = WebServiceUtil.dobdFormat.parse(wsmodel.getDateofbirth());
                    customer.setDateofBirth(d);
//                customer.setCnicpictureFront(wsmodel.getCnicpicturefront());
//                customer.setCnicpictureBack(wsmodel.getCnicpictureback());
//                customer.setCustomerpicture(wsmodel.getCustomerpicture());
                    //customer.setBankcode(wsmodel.getBank());
                    customer.setFatherName(wsmodel.getFathername());
                    customer.setProvince(wsmodel.getProvince());
                    customer.setCnicexpiry(wsmodel.getCnicexpiry());
                    customer.setPlaceofbirth(wsmodel.getPlaceofbirth());
                    customer.setTsp(wsmodel.getTsp());
                    customer.setLastUpdateDate(new Date());
                    GeneralDao.Instance.saveOrUpdate(customer);
                    logger.info("Customer Profile Update Done, replying..");
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                }
            } else {
                logger.error("Customer not found for CNIC [" + wsmodel.getCnic() + "]");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //Raza 90 for Customer not found refer Doc
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing UpdateUserProfile..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteChangeWalletPin(WalletCMSWsEntity wsmodel) {
        logger.info("Executing ChangeWalletPin Request...");

        try {
            String dbQuery, question1Retries = "", question2Retries = ""; // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
            Map<String, Object> params;

            // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301	/ VC-NAP-202009301
            dbQuery = "from " + SystemConfig.class.getName() + " c where c.identifier in (:IDENTIFIER)"; // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
            params = new HashMap<String, Object>();

            // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
            List<String> identifiers = new ArrayList<>();
            identifiers.add("SEC_QUES_1_RETRIES");
            identifiers.add("SEC_QUES_2_RETRIES");
            params.put("IDENTIFIER", identifiers);

            List<SystemConfig> list_obj_SystemConfig = GeneralDao.Instance.find(dbQuery, params);

            if (list_obj_SystemConfig.size() > 0) {
                for (int i = 0; i < list_obj_SystemConfig.size(); i++) {
                    if (list_obj_SystemConfig.get(i).getIdentifier().equals("SEC_QUES_1_RETRIES"))
                        question1Retries = list_obj_SystemConfig.get(i).getValue();
                    if (list_obj_SystemConfig.get(i).getIdentifier().equals("SEC_QUES_2_RETRIES"))
                        question2Retries = list_obj_SystemConfig.get(i).getValue();
                }
            } else {
                logger.error("Secret Questions retries not found in DB...");
            }
            // ===============================================================

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


            if (nprel != null) {
                //Change Wallet PIN
                if (!nprel.getAccount().getStatus().equals("00") || !nprel.getAccount().getCustomer().getStatus().equals("00")) {
                    logger.error("Invalid Wallet Account or Customer Status, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Inactive Account/Customer ; refer NayaPay Doc
                    return wsmodel;
                }

                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", nprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + nprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //93-Customer Relation Not Found ; Raza update THIS
                    return wsmodel;
                }

                if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                    logger.error("PIN validation failed, rejecting...");
                    //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                    return wsmodel;
                }
                logger.info("PIN validated successfully");


                List<CMSAuth> lstcardrelation = null;
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation ";  //+ " and c.channel = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", nprel.getAccount().getAccountNumber());
                //params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                lstcardrelation = GeneralDao.Instance.find(dbQuery, params);

                if (lstcardrelation == null || lstcardrelation.size() <= 0) {
                    logger.error("Card Relation not found for relation [" + wsmodel.getUserid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                }


                if (!WalletCMSFunctions.ChangePIN(wsmodel, lstcardrelation)) {
                    logger.error("PIN change failed, rejecting...");
                    //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                    return wsmodel;
                }
                logger.info("PIN changed successfully");

                // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301	/ VC-NAP-202009301
                // Refreshing the secret question retries
                logger.info("Refreshing the secret question retries for the customer...");

                // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
                if (Util.hasText(question1Retries))
                    cardrelation.getCustomer().setSecretQuestion1Retries(question1Retries);
                if (Util.hasText(question2Retries))
                    cardrelation.getCustomer().setSecretQuestion2Retries(question2Retries);

                GeneralDao.Instance.saveOrUpdate(cardrelation.getCustomer());
                // ===============================================================

                /*TODO: Raza commenting Temporary
                if(HardwareSecurityModule.getInstance().PINValidation(wsmodel, cardrelation))
                {
                    logger.info("Wallet Pin validated updated through HSM.");
                }
                else
                {
                    logger.error("Failed to validate Wallet Pin, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD);
                    return wsmodel;
                }

                if(HardwareSecurityModule.getInstance().PINChange(wsmodel, cardrelation))
                {
                    logger.info("Wallet Pin successfully updated through HSM.");
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                }
                else
                {
                    logger.error("Failed to update Wallet Pin, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD);
                    return wsmodel;
                }*/
                //m.rehman: for NayaPay
                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                //wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return wsmodel;
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing ChangeWalletPin..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteVerifyWalletPin(WalletCMSWsEntity wsmodel) {
        logger.info("Executing VerifyWalletPin Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


            if (nprel != null) {
                if (!nprel.getAccount().getStatus().equals("00") || !nprel.getAccount().getCustomer().getStatus().equals("00")) {
                    logger.error("Invalid Wallet Account or Customer Status, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Inactive Account/Customer ; refer NayaPay Doc
                    return wsmodel;
                }

                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", nprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + nprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //93-Customer Relation not Found ; Raza update THIS
                    return wsmodel;
                }

                if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                    logger.error("PIN validation failed, rejecting...");
                    wsmodel.setVerifiedflag("false");
                    wsmodel.setRespcode(ISOResponseCodes.NP_BAD_PIN); //24-BAD PIN; refer to Doc
                    return wsmodel;
                }
                logger.info("PIN validated successfully");
                wsmodel.setVerifiedflag("true");
                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return wsmodel;
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot verify wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing VerifyWalletPin..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteDebitCardRequest(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing DebitCardRequest Request...");
            String dbQuery;
            Map<String, Object> params;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);
            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

            if (nprel != null) {
                //no need to check for prov wallet as there will be no category of prov wallet
                /*
                if (nprel.getAccount().getCategory().equals(AccType.CAT_PROV.StringValue())) {
                    if (nprel.getAccount().getStatus().equals("00")) {
                        logger.error("Wallet Account in Provisional State, cannot Link Account rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.WALLET_IN_PROVISIONAL_STATE); //31 Account-In-Provisional State refer to Doc
                        return wsmodel;
                    } else {
                        logger.error("Wallet Account in Provisional State, & with invalid status [" + nprel.getAccount().getStatus() + "] cannot Link Account rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //67 Invalid Account Status refer to Doc
                        return wsmodel;
                    }
                }*/

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                nprel.setAccount((CMSAccount) GeneralDao.Instance.getCurrentSession().get(CMSAccount.class, nprel.getAccount().getId(), LockMode.UPGRADE));
                GeneralDao.Instance.getCurrentSession().refresh(nprel.getAccount());
                ////////////////////////////////////////////////////////////////////////////////////

                if ((!nprel.getAccount().getStatus().equals("00")) || (!nprel.getAccount().getCustomer().getStatus().equals("00"))) {
                    logger.error("Invalid Wallet State or Status, card request not allowed, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Inactive Account/Customer ; refer NayaPay Doc
                    return wsmodel;
                }

                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", nprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + nprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //93 ; Raza update THIS
                    return wsmodel;
                }

                if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                    logger.error("PIN validation failed, rejecting...");
                    //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                    return wsmodel;
                }
                logger.info("Wallet Pin verified through HSM. Requesting Debit Card.");

                //m.rehman: 21-01-2020, VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 - VISA (Switch-Middleware Integration document v 4.7.6) - Release 3
                //changing logic below for paypak physical/visa physical/visa virtual cards
                //Check Card of Customer if any start
                dbQuery = "from " + CMSCard.class.getName() + " c where c.customer= :CUSTOMER order by c.id desc ";
                params = new HashMap<String, Object>();
                params.put("CUSTOMER", nprel.getAccount().getCustomer()); //.getCustomerId());
                List<CMSCard> prevcardList = GeneralDao.Instance.find(dbQuery, params);

                for (CMSCard prevcard : prevcardList) {
                    if (Util.hasText(wsmodel.getCardtype()) &&
                            (wsmodel.getCardtype().equals("paypak_physical")
                                    &&
                                    prevcard != null &&
                                    //m.rehman: 24-02-2021, VC-NAP-202102241 - Physical / Virtual card status & ordering - adding more checks
                                    ((prevcard.getProduct().getProductType().equals("CARD_LVL0") && (!prevcard.getCardStatus().equals("90") && !prevcard.getCardStatus().equals("02")))
                                            || (prevcard.getProduct().getProductType().equals("CARD_LVL1") && (!prevcard.getCardStatus().equals("90") && !prevcard.getCardStatus().equals("02")))
                                            //m.rehman: 15-11-2021, VC-NAP-202111151 - Allow PayPak physical card over Disabled Visa physical card
                                            //adding check for visa card, if visa card is disabled then allow paypak physical card
                                            || (prevcard.getProduct().getProductType().equals("VISA_DEBIT") && !prevcard.getCardStatus().equals("90") && !prevcard.getCardStatus().equals("02"))))
                            ||
                            (wsmodel.getCardtype().equals("visa_physical")
                                    &&
                                    prevcard != null &&
                                    //m.rehman: 24-02-2021, VC-NAP-202102241 - Physical / Virtual card status & ordering - adding more checks
                                    ((prevcard.getProduct().getProductType().equals("CARD_LVL0") && (!prevcard.getCardStatus().equals("90") && !prevcard.getCardStatus().equals("02")))
                                            || (prevcard.getProduct().getProductType().equals("CARD_LVL1") && (!prevcard.getCardStatus().equals("90") && !prevcard.getCardStatus().equals("02")))
                                            || (prevcard.getProduct().getProductType().equals("VISA_DEBIT") && (!prevcard.getCardStatus().equals("90") && !prevcard.getCardStatus().equals("02")))
                                            //|| (prevcard.getProduct().getProductType().equals("VISA_VIRTUAL") && !prevcard.getCardStatus().equals("90"))
                                    ))
                            ||
                            (wsmodel.getCardtype().equals("visa_virtual")
                                    &&
                                    prevcard != null &&
                                    //m.rehman: 24-02-2021, VC-NAP-202102241 - Physical / Virtual card status & ordering - adding check for disable virtual card
                                    ((prevcard.getProduct().getProductType().equals("VISA_VIRTUAL") && (!prevcard.getCardStatus().equals("90") && !prevcard.getCardStatus().equals("02")))
                                            //Bilal against : Date : 26 -apr-2021  against VC-NAP-202104211  Customer can have both VISA physical and VISA virtual card together
                                            //|| (prevcard.getProduct().getProductType().equals("VISA_DEBIT") && !prevcard.getCardStatus().equals("90"))
                                    ))
                    ) {
                        logger.error("PayPak Physical/Visa Physical/Visa Virtual Card already created for Customer [" + wsmodel.getUserid() + "] cannot request card, rejecting....");
                        wsmodel.setRespcode(ISOResponseCodes.NP_ALREADY_EXIST); //08 Invalid Card Record, refer to Doc
                        return wsmodel;

                    }

                    //m.rehman: 24-02-2021, VC-NAP-202102241 - Physical / Virtual card status & ordering - blocking prev card conditions
                    //if previous card is payapak and in disable state, and if new card type is paypak or visa physical, block previous card
//                    boolean prevCardStatusUpdateFlag = false;
//                    if ((prevcard.getProduct().getProductType().equals("CARD_LVL0") || prevcard.getProduct().getProductType().equals("CARD_LVL1")) && prevcard.getCardStatus().equals("02")) {
//                        if (Util.hasText(wsmodel.getCardtype()) && (wsmodel.getCardtype().equals("paypak_physical") || wsmodel.getCardtype().equals("visa_physical"))) {
//                            logger.error("Blocking existing disabled PayPak Physical card ...");
//                            prevcard.setCardStatus("90");
//                            prevCardStatusUpdateFlag = true;
//                        }
//                    }
//                    //if previous card is visa physical and in disable state, and if new card type is visa physical, block previous card
//                    else if (prevcard.getProduct().getProductType().equals("VISA_DEBIT") && prevcard.getCardStatus().equals("02")) {
//                        if (Util.hasText(wsmodel.getCardtype()) && wsmodel.getCardtype().equals("visa_physical")) {
//                            logger.error("Blocking existing disabled Visa Physical card ...");
//                            prevcard.setCardStatus("90");
//                            prevCardStatusUpdateFlag = true;
//                        }
//                    }
//                    //if previous card is visa virtual and in disable state, and if new card type is visa virtual, block previous card
//                    else if (prevcard.getProduct().getProductType().equals("VISA_VIRTUAL") && prevcard.getCardStatus().equals("02")) {
//                        if (Util.hasText(wsmodel.getCardtype()) && wsmodel.getCardtype().equals("visa_virtual")) {
//                            logger.error("Blocking existing disabled Visa Virtual card ...");
//                            prevcard.setCardStatus("90");
//                            prevCardStatusUpdateFlag = true;
//                        }
//                    }
//
//                    if (prevCardStatusUpdateFlag) {
//                        logger.error("Saving existing card status ...");
//                        GeneralDao.Instance.saveOrUpdate(prevcard);
//                        break;
//                    }
                    ////////////////////////////////////////////////////////////////////////////////////////////////////
                }

                //Arsalan Akhter, Date: 08_Apr_2021, Ticket# VP-NAP-202103291_VC-NAP-202103291 Change in Debit card charges
                String productType = "";
                if (Util.hasText(wsmodel.getCardtype())) {
                    if (wsmodel.getCardtype().equals("visa_virtual")) {
                        productType = "VISA_VIRTUAL";
                    } else if (wsmodel.getCardtype().equals("visa_physical")) {
                        productType = "VISA_DEBIT";
                    } else if (wsmodel.getCardtype().equals("paypak_physical")) {
                        if (nprel.getAccount().getLevel().equals("0")) {
                            productType = "CARD_LVL0";
                        } else {
                            productType = "CARD_LVL1";
                        }
                    }
                }
                //////////////////////////////////////////////////////////////////

                //if COD flag is false, need to calculate charges and deduct from wallet
                //m.rehman: 21-01-2020, VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 - VISA (Switch-Middleware Integration document v 4.7.6) - Release 3
                //applying charges if any physical card requested or virtual card requested more than once, changing below check
                dbQuery = "from " + CMSCard.class.getName() + " c where " +
                        " c.customer= :CUSTOMER " +
                        //" and c.product.productType = 'VISA_VIRTUAL' " +
                        " and c.product.productType = :PRODUCT_TYPE " +
                        " order by c.id desc ";
                params = new HashMap<String, Object>();
                params.put("CUSTOMER", nprel.getAccount().getCustomer()); //.getCustomerId());
                params.put("PRODUCT_TYPE", productType);
                List<CMSCard> existingCard = GeneralDao.Instance.find(dbQuery, params);

                /*
                if (Util.hasText(wsmodel.getCardtype()) && !wsmodel.getCardtype().equals("visa_virtual")) {
                    if (Util.hasText(wsmodel.getCodflag()) && wsmodel.getCodflag().equals("false")) {
                        logger.info("COD flag is false, need to calculate card issuance charges, if any, and deduct from wallet ...");

                        //m.rehman: Euronet integration, add local/international flag in charges
                        //getting transaction charges
                        FetchTransactionCharge(wsmodel, nprel.getAccount().getProduct(), "0");      //0-false

                        //deduct from wallet
                        if (!FinanceManager.DebitCardRequest(wsmodel, nprel.getAccount())) {
                            logger.error("Unable to apply charges for Debit Card Request ...");
                            return wsmodel;
                        }

                    } else {
                        logger.info("COD flag is true, no need to calculate card issuance charges ...");
                    }
                } else {

                    if (Util.hasText(wsmodel.getCardtype()) && wsmodel.getCardtype().equals("visa_virtual")
                            && existingCard != null && existingCard.size() > 0) {
                        logger.info("Applying charges for Visa Virtual Card as Virtual Card is requested again from Customer ...");
                        //no need to check COD flag in case of Visa Virtual Card
                        //m.rehman: Euronet integration, add local/international flag in charges
                        //getting transaction charges
                        FetchTransactionCharge(wsmodel, nprel.getAccount().getProduct(), "0");      //0-false

                        //deduct from wallet
                        if (!FinanceManager.DebitCardRequest(wsmodel, nprel.getAccount())) {
                            logger.error("Unable to apply charges for Visa Virtual Card Request ...");
                            return wsmodel;
                        }
                    }
                }
                */

                if (Util.hasText(wsmodel.getCodflag()) && wsmodel.getCodflag().equals("false")) {
                    if (existingCard != null && existingCard.size() > 0) {      //previous card exists
                        logger.info("Previous card exists for card type [" + wsmodel.getCardtype() + "]");
                        FetchTransactionCharge(wsmodel, existingCard.get(0).getProduct(), "0", "1");
                    } else {
                        logger.info("No Previous card exists for card type [" + wsmodel.getCardtype() + "]");

                        dbQuery = "from " + CMSProduct.class.getName() + " p where " +
                                " p.productType = :PRODUCT_TYPE " +
                                " order by p.id desc ";
                        params = new HashMap<String, Object>();
                        params.put("PRODUCT_TYPE", productType);
                        CMSProduct product = (CMSProduct) GeneralDao.Instance.findObject(dbQuery, params);

                        FetchTransactionCharge(wsmodel, product, "0", "0");
                    }

                    //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                    wsmodel.setIncludeinstatement(1);
                    ////////////////////////////////////////////////////////////////////////////////////////////////////
                }

                //deduct from wallet
                if (!FinanceManager.DebitCardRequest(wsmodel, nprel.getAccount())) {
                    logger.error("Unable to apply charges for card type [" + wsmodel.getCardtype() + "] Request ...");
                    return wsmodel;
                }
                //**************************************************************************************


                //Check Card of Customer if any end
                if (WalletCMSFunctions.CreateCardProfile(wsmodel, nprel.getAccount())) {
                    logger.info("Account Profile Created Successfully for customer [" + wsmodel.getCnic() + "]");


                    //Create Fraud Profile...

                    // Asim Shahzad, Date : 4th Feb 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 (Release # 3)

                    wsmodel.setCardtype(wsmodel.getCardtype());

                    // ========================================================================================================

                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                    //m.rehman: 15-11-2021, VC-NAP-202111151 - VC-NAP-202111151 - Allow PayPak physical card over Disabled Visa physical card
                    CMSActivityLog cmsActivityLog;
                    String prevStatus = "";

                    //Arsalan Akhter, Date: 13-Apr-2021
                    //m.rehman: 24-02-2021, VC-NAP-202102241 - Physical / Virtual card status & ordering - blocking prev card conditions
                    //if previous card is payapak and in disable state, and if new card type is paypak or visa physical, block previous card

                    for (CMSCard prevcard : prevcardList) {
                        boolean prevCardStatusUpdateFlag = false;
                        if ((prevcard.getProduct().getProductType().equals("CARD_LVL0") || prevcard.getProduct().getProductType().equals("CARD_LVL1")) && prevcard.getCardStatus().equals("02")) {
                            if (Util.hasText(wsmodel.getCardtype()) && (wsmodel.getCardtype().equals("paypak_physical") || wsmodel.getCardtype().equals("visa_physical"))) {
                                logger.error("Blocking existing disabled PayPak Physical card ...");

                                //m.rehman: 15-11-2021, VC-NAP-202111151 - Allow PayPak physical card over Disabled Visa physical card
                                //saving previous status of card to save in activity log
                                prevStatus = prevcard.getCardStatus();

                                prevcard.setCardStatus("90");
                                prevCardStatusUpdateFlag = true;
                            }
                        }
                        //if previous card is visa physical and in disable state, and if new card type is visa physical, block previous card
                        else if (prevcard.getProduct().getProductType().equals("VISA_DEBIT") && prevcard.getCardStatus().equals("02")) {
                            //m.rehman: 15-11-2021, VC-NAP-202111151 - Allow PayPak physical card over Disabled Visa physical card
                            //adding check for paypak_physical, if visa physical is disabled, and request card is paypak_physical, block visa physical
                            if (Util.hasText(wsmodel.getCardtype()) && (wsmodel.getCardtype().equals("visa_physical") || wsmodel.getCardtype().equals("paypak_physical"))) {
                                logger.error("Blocking existing disabled Visa Physical card ...");

                                //m.rehman: 15-11-2021, VC-NAP-202111151 - Allow PayPak physical card over Disabled Visa physical card
                                //saving previous status of card to save in activity log
                                prevStatus = prevcard.getCardStatus();

                                prevcard.setCardStatus("90");
                                prevCardStatusUpdateFlag = true;
                            }
                        }
                        //if previous card is visa virtual and in disable state, and if new card type is visa virtual, block previous card
                        else if (prevcard.getProduct().getProductType().equals("VISA_VIRTUAL") && prevcard.getCardStatus().equals("02")) {
                            if (Util.hasText(wsmodel.getCardtype()) && wsmodel.getCardtype().equals("visa_virtual")) {
                                logger.error("Blocking existing disabled Visa Virtual card ...");

                                //m.rehman: 15-11-2021, VC-NAP-202111151 - Allow PayPak physical card over Disabled Visa physical card
                                //saving previous status of card to save in activity log
                                prevStatus = prevcard.getCardStatus();

                                prevcard.setCardStatus("90");
                                prevCardStatusUpdateFlag = true;
                            }
                        }

                        if (prevCardStatusUpdateFlag) {
                            logger.error("Saving existing card status ...");
                            GeneralDao.Instance.saveOrUpdate(prevcard);
                            //m.rehman: 15-11-2021, VC-NAP-202111151 - Allow PayPak physical card over Disabled Visa physical card
                            //commenting break; as we need to verify all the cards available, and adding logging activity
                            //break;
                            logger.info("Saving card activity ....");
                            cmsActivityLog = new CMSActivityLog();
                            cmsActivityLog.setRelation(prevcard.getCardNumber());
                            cmsActivityLog.setPreviousStatus(prevStatus);
                            cmsActivityLog.setCurrentStatus(prevcard.getCardStatus());
                            cmsActivityLog.setSourceType("API");
                            cmsActivityLog.setSourceName(wsmodel.getServicename());
                            cmsActivityLog.setActivityDateTime(DateTime.now());
                            GeneralDao.Instance.saveOrUpdate(cmsActivityLog);
                        }
                        ////////////////////////////////////////////////////////////////////////////////////////////////////
                    }
                    ////////////////////////////////////////////////////////////////////////////////////////////////////

                    return wsmodel;

                } else {
                    logger.error("Unable to Create Account Profile for customer [" + wsmodel.getCnic() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                    return wsmodel;
                }

//                } //TODO: Raza commenting temporarily
//                else
//                {
//                    logger.error("Failed to validate Wallet Pin, rejecting...");
//                    wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD);
//                    return wsmodel;
//                } //TODO: Raza commenting temporarily
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot verify wallet Pin. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error(WebServiceUtil.getStrException(e));
            logger.error("Exception caught while Executing DebitCardRequest ..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    public static WalletCMSWsEntity ExecuteEnableDebitCard(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing EnableDebitCard Request...");
            String dbQuery, prevStatus;
            Map<String, Object> params;
            CMSActivityLog cmsActivityLog;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                //no need to check for prov wallet as there will be no category of prov wallet
                //if ((nprel.getAccount().getCategory().equals(AccType.CAT_PROV.StringValue())) || (!nprel.getAccount().getStatus().equals("00")) || (!nprel.getAccount().getCustomer().getStatus().equals("00"))) {
                if ((!nprel.getAccount().getStatus().equals("00")) || (!nprel.getAccount().getCustomer().getStatus().equals("00"))) {
                    logger.error("Invalid Wallet State or Status, card request not allowed, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Inactive Account/Customer ; refer NayaPay Doc
                    return wsmodel;
                }

                //Change Wallet PIN
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", nprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + nprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //93
                    return wsmodel;
                }

                //TODO: Raza commenting temporarily
                //if(HardwareSecurityModule.getInstance().PINValidation(wsmodel, cardrelation)) //Validate PIN, then process request DebitCard
                //{
                //  logger.info("Wallet Pin verified through HSM. Requesting DebitCard.");

                dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO order by c.id desc ";
                params = new HashMap<String, Object>();
                params.put("CARDNO", wsmodel.getCardnumber());
                CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);

                if (card != null) {

                    //m.rehman: setting last digits in WSEntity object for verification after decryption
                    //wsmodel.setCardnolastdigits(card.getCardnolastdigits());

                    //Verify WalletPIN
                    //if(!WalletCMSFunctions.ValidateCardPIN(wsmodel,cardrelation))
                    if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                        logger.error("PIN validation failed, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_BAD_PIN); //24-BAD PIN; refer to Doc
                        return wsmodel;
                    }

                    //if (wsmodel.getEnableflag().equals("true")) {
                    if (card.getCardStatus().equals("00") || !card.getCardStatus().equals("02")) //Raza only do if 02
                    {
                        logger.error("Card already in Active/Blocked State, cannot Enable Card. rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //32 Inactive Account/Customer ; refer NayaPay Doc
                        return wsmodel;

                    } else {
                        logger.info("Enabling Card ...");
                        prevStatus = card.getCardStatus();
                        card.setCardStatus("00");
                        card.setActivationDate(WebServiceUtil.dateFormat.format(new Date()));
                        GeneralDao.Instance.saveOrUpdate(card);
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        logger.info("Saving card activity ....");
                        cmsActivityLog = new CMSActivityLog();
                        cmsActivityLog.setRelation(card.getCardNumber());
                        cmsActivityLog.setPreviousStatus(prevStatus);
                        cmsActivityLog.setCurrentStatus(card.getCardStatus());
                        cmsActivityLog.setSourceType("API");
                        cmsActivityLog.setSourceName(wsmodel.getServicename());
                        cmsActivityLog.setActivityDateTime(DateTime.now());
                        GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                        return wsmodel;
                    }
                    //}
                    //else //will always be false
                    //{
                    //    if (!card.getCardStatus().equals("00")) //90 also covered Block
                    //    {
                    //        logger.error("Card already in Inactive/Blocked State, cannot Disbale Card. rejecting...");
                    //        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Inactive Account/Customer ; refer NayaPay Doc
                    //        return wsmodel;
                    //    } else {
                    //        logger.info("Disabling Card ...");
                    //        card.setCardStatus("02");
                    //        GeneralDao.Instance.saveOrUpdate(card);
                    //        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    //        return wsmodel;
                    //    }
                    //}

                } else {
                    logger.error("Card not found for UserId [" + wsmodel.getUserid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //05 Card not found refer to Document
                    return wsmodel;
                }

//                } //TODO: Raza commenting temporarily
//                else
//                {
//                    logger.error("Failed to validate Wallet Pin, rejecting...");
//                    wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD);
//                    return wsmodel;
//                } //TODO: Raza commenting temporarily
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot verify wallet Pin. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing EnableDebitCard ..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteSupportPortalEnableDebitCard(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing SupportPortalEnableDebitCard Request...");
            String dbQuery, prevStatus;
            Map<String, Object> params;
            CMSActivityLog cmsActivityLog;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                //no need to check for prov wallet as there will be no category of prov wallet
                //if((nprel.getAccount().getCategory().equals(AccType.CAT_PROV.StringValue())) || (!nprel.getAccount().getStatus().equals("00")) || (!nprel.getAccount().getCustomer().getStatus().equals("00")))
                //if((!nprel.getAccount().getStatus().equals("00")) || (!nprel.getAccount().getCustomer().getStatus().equals("00")))
                //{
                //    logger.error("Invalid Wallet State or Status, card request not allowed, rejecting...");
                //    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Inactive Account/Customer ; refer NayaPay Doc
                //    return wsmodel;
                //}

                //Change Wallet PIN
                //dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                //params = new HashMap<String, Object>();
                //params.put("relation", nprel.getAccount().getAccountNumber());
                //params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                //CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                //if(cardrelation == null)
                //{
                //    logger.error("Card Relation not found for relation [" + nprel.getAccount().getAccountNumber() + "], rejecting...");
                //    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                //    return wsmodel;
                //}


                logger.info("wsmodel DateOfBirth [" + wsmodel.getDateofbirth() + "] DB DateOfBirth [" + WebServiceUtil.dobdFormat.format(nprel.getAccount().getCustomer().getDateofBirth()) + "]");
                logger.info("wsmodel Cnic [" + wsmodel.getCnic() + "] DB Cnic [" + nprel.getAccount().getCustomer().getCnic() + "]");
                if ((!wsmodel.getDateofbirth().equals(WebServiceUtil.dobdFormat.format(nprel.getAccount().getCustomer().getDateofBirth())))
                        || !wsmodel.getCnic().equals(nprel.getAccount().getCustomer().getCnic())) {
                    logger.error("Invalid Input Fields, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //02 for Invalid Account refer NayaPay Doc
                    return wsmodel;
                }

                dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO order by c.id desc ";
                params = new HashMap<String, Object>();
                params.put("CARDNO", wsmodel.getCardnumber());
                CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);


                if (card != null) {

                    //Verify WalletPIN
                    /*if(!WalletCMSFunctions.ValidateCardPIN(wsmodel,cardrelation))
                    {
                        logger.error("PIN validation failed, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                        return wsmodel;
                    }*/


                    if (wsmodel.getEnableflag().equals("true")) {
                        if (!card.getCardStatus().equals("02")) //Raza only do if 02
                        {
                            logger.error("Card already in Active/Blocked State, cannot Enable Card. rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //32 Inactive Account/Customer ; refer NayaPay Doc
                            //return wsmodel;
                        } else {
                            logger.info("Enabling Card ...");
                            prevStatus = card.getCardStatus();
                            card.setCardStatus("00");
                            card.setActivationDate(WebServiceUtil.dateFormat.format(new Date()));
                            GeneralDao.Instance.saveOrUpdate(card);
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            logger.info("Saving card activity ....");
                            cmsActivityLog = new CMSActivityLog();
                            cmsActivityLog.setRelation(card.getCardNumber());
                            cmsActivityLog.setPreviousStatus(prevStatus);
                            cmsActivityLog.setCurrentStatus(card.getCardStatus());
                            cmsActivityLog.setSourceType("API");
                            cmsActivityLog.setSourceName(wsmodel.getServicename());
                            cmsActivityLog.setActivityDateTime(DateTime.now());
                            GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                            //return wsmodel;
                        }
                    } else //will always be false
                    {
                        if (!card.getCardStatus().equals("00")) //90 also covered Block
                        {
                            logger.error("Card already in Inactive/Blocked State, cannot Disable Card. rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //32 Inactive Account/Customer ; refer NayaPay Doc
                            //return wsmodel;
                        } else {
                            logger.info("Disabling Card ...");
                            prevStatus = card.getCardStatus();
                            card.setCardStatus("02");
                            GeneralDao.Instance.saveOrUpdate(card);
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            logger.info("Saving card activity ....");
                            cmsActivityLog = new CMSActivityLog();
                            cmsActivityLog.setRelation(card.getCardNumber());
                            cmsActivityLog.setPreviousStatus(prevStatus);
                            cmsActivityLog.setCurrentStatus(card.getCardStatus());
                            cmsActivityLog.setSourceType("API");
                            cmsActivityLog.setSourceName(wsmodel.getServicename());
                            cmsActivityLog.setActivityDateTime(DateTime.now());
                            GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                            //return wsmodel;
                        }
                    }

                } else {
                    logger.error("Card not found for UserId [" + wsmodel.getUserid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //05 Card not found refer to Document
                    //return wsmodel;
                }

                //wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return wsmodel;
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot verify wallet Pin. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing SupportPortalEnableDebitCard ..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteChangeDebitCardPin(WalletCMSWsEntity wsmodel) {
        logger.info("Executing ChangeDebitCardPin Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


            if (nprel != null) {
                //Change Wallet PIN
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", nprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + nprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //93
                    return wsmodel;
                }

                dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO order by c.id desc ";
                params = new HashMap<String, Object>();
                params.put("CARDNO", wsmodel.getCardnumber());
                CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);


                if (card == null) {
                    logger.error("Card not found for Customer [" + nprel.getAccount().getCustomer().getCustomerId() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //05-Invalid Card
                    return wsmodel;
                } else {
                    if (!card.getCustomer().equals(nprel.getAccount().getCustomer())) {
                        logger.error("Invalid Card Number [" + wsmodel.getCardnumber() + "] for UserId [" + wsmodel.getUserid() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //05-Invalid Card
                        return wsmodel;
                    }

                    //m.rehman: 24-08-2020, VC-NAP-202008192 - Process to reset Debit Card PIN
                    if (Util.hasText(card.getCardStatus()) && card.getCardStatus().equals("90")) {
                        logger.error("Unable to change/reset pin, card is permanently blocked, rejecting ...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_BLOCKED);
                        return wsmodel;
                    }

                    //Validate Wallet Pin
                    if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                        logger.error("Wallet PIN validation failed, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_BAD_PIN); //24-BAD PIN; refer to Doc
                        return wsmodel;
                    }

                    //m.rehman: setting last digits in WSEntity object for verification after decryption
                    //wsmodel.setCardnolastdigits(card.getCardnolastdigits());

                    //Validate Card Pin
                    cardrelation = null;
                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                    params = new HashMap<String, Object>();
                    params.put("relation", card.getCardNumberExpiryRelation());
                    params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                    cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                    if (cardrelation == null) {
                        logger.error("Card Relation not found for relation [" + card.getCardNumberExpiryRelation() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //93
                        return wsmodel;
                    }

                    //m.rehman: setting last digits in WSEntity object for verification after decryption
                    //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                    wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                    //===============================================================================================================
                    //m.rehman: commneting below snippet on request of nayapay,
                    //current card pin will not be available in this call
                    /*
                    if(!WalletCMSFunctions.ValidateCardPIN(wsmodel,cardrelation))
                    {
                        logger.error("Card PIN validation failed, rejecting...");
                        //wsmodel.setRespcode(ISOResponseCodes.NP_BAD_CARD_PIN); //24-BAD PIN; refer to Doc
                        return wsmodel;
                    }
                    */

                    //m.rehman: change card pin for all channels
                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation ";
                    params = new HashMap<String, Object>();
                    params.put("relation", card.getCardNumberExpiryRelation());
                    List<CMSAuth> cardrelationList = GeneralDao.Instance.find(dbQuery, params);
                    if (!WalletCMSFunctions.ChangeCardPIN(wsmodel, cardrelationList)) {
                        logger.error("Card PIN validation failed, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_BAD_CARD_PIN); //24-BAD PIN; refer to Doc
                        return wsmodel;
                    }

                    //m.rehman: 24-08-2020, VC-NAP-202008192 - Process to reset Debit Card PIN
                    card.setCardStatus("00");
                    GeneralDao.Instance.saveOrUpdate(card);

                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                    //TODO: Raza commenting temporarily
//                if(HardwareSecurityModule.getInstance().PINValidation(wsmodel, cardrelation)) //Validate PIN first
//                {
//                    logger.info("Wallet Pin validated updated through HSM.");
//                }
//                else
//                {
//                    logger.error("Failed to validate Wallet Pin, rejecting...");
//                    wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD);
//                    return wsmodel;
//                }
//
//
//                if(HardwareSecurityModule.getInstance().PINChange(wsmodel, cardrelation))
//                {
//                    logger.info("Wallet Pin successfully updated through HSM.");
//                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
//                    return wsmodel;
//                }
//                else
//                {
//                    logger.error("Failed to update Wallet Pin, rejecting...");
//                    wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD);
//                    return wsmodel;
//                }
//TODO: Raza commenting temporarily
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing ChangeDebitCardPin..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteLinkBankAccountInquiry(WalletCMSWsEntity wsmodel) {
        logger.info("Executing LinkBankAccountInquiry Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            List<String> catlist = new ArrayList<>();
            catlist.add(AccType.CAT_WALLET.StringValue());
            //catlist.add(AccType.CAT_PROV.StringValue());

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category in (:CAT) ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", catlist);

            List<CMSAccount> acctlist = GeneralDao.Instance.find(dbQuery, params);
            CMSAccount userwallet = null;
            if (acctlist != null && acctlist.size() == 1 && acctlist.get(0).getCategory().equals(AccType.CAT_WALLET.StringValue())) {
                userwallet = acctlist.get(0);
            }
            //no need to check for prov wallet as there will be no category of prov wallet
            /*
            else if(acctlist != null && acctlist.size() == 1 && acctlist.get(0).getCategory().equals(AccType.CAT_PROV.StringValue()))
            {
                logger.error("Wallet Account in Provisional State, cannot Link Account rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.WALLET_IN_PROVISIONAL_STATE); //31 Account-In-Provisional State refer to Doc
                return wsmodel;
            }
            */
            else if (acctlist != null && acctlist.size() > 1) {
                for (CMSAccount acct : acctlist) {
                    if (acct.getCategory().equals(AccType.CAT_WALLET.StringValue())) {
                        userwallet = acct;
                        break;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [" + wsmodel.getUserid() + "], cannot verify wallet for linkaccount. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }

            if (userwallet == null) {
                logger.error("Wallet Account in Provisional State, cannot Link Account rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //31 Account-In-Provisional State refer to Doc
                return wsmodel;
            }


            if (userwallet != null && userwallet.getStatus().equals("00") && userwallet.getCustomer().getStatus().equals("00")) {
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", userwallet.getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for account [" + userwallet.getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //93 - Customer Relation not found ; Refer to Doc
                    return wsmodel;
                } else {
                    //TODO: Verify LoadWallet TransactionPermission
                    //TODO: Validate PIN
                    logger.info("Verifying Linked Account...");
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.acctId = :ACCTID " + " and c.category = :CAT ";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getUserid());
                    params.put("ACCTID", wsmodel.getAcctid());
                    params.put("CAT", AccType.CAT_LINKED.StringValue());

                    CMSAccount linkedaccount = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                    if (linkedaccount != null && linkedaccount.getStatus().equals("00")) {
                        //TODO Verify PIN
                        logger.error("Linked Account already linked with wallet, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_ALREADY_EXIST); //27 Duplicate Account ; -- refer to Document
                        return wsmodel;
                    } else {
                        //Raza also verify if this account number is alreay linked with some other wallet.
                        logger.info("Getting Linked Account from DB AcctNum [" + wsmodel.getAccountnumber() + "] BankCode [" + wsmodel.getBankcode() + "]");
                        dbQuery = "from " + CMSAccount.class.getName() + " c where c.AccountNumber= :ACCTNUM" + " and c.BranchId = :BANK ";
                        params = new HashMap<String, Object>();
                        params.put("ACCTNUM", wsmodel.getAccountnumber());
                        params.put("BANK", GlobalContext.getInstance().getBinByBankCode(wsmodel.getBankcode()));

                        CMSAccount dbaccount = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                        //if(dbaccount != null && !dbaccount.getUserId().equals(wsmodel.getUserid()) && !dbaccount.getStatus().equals("DL"))
                        if (dbaccount != null && !dbaccount.getUserId().equals(wsmodel.getUserid()) && dbaccount.getStatus().equals("00")) {
                            logger.error("Account already linked with other wallet, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_ALREADY_EXIST); //02 Invalid Account -- refer to Document
                            return wsmodel;
                        }

                        if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                            logger.error("PIN validation failed, rejecting...");
                            //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                            return wsmodel;
                        }

                        Boolean previousflag = false;
                        if (dbaccount != null && dbaccount.getUserId().equals(wsmodel.getUserid())
                                && (dbaccount.getStatus().equals("DL") || dbaccount.getStatus().equals("ROTP"))) {
                            logger.info("Account already exist with D-Link/ROTP status, setting Account Status flag to DL ...");
                            wsmodel.setStatus("DL");
                            previousflag = true;
                            //wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                            //return wsmodel;
                        } else if (dbaccount != null && dbaccount.getUserId().equals(wsmodel.getUserid()) && dbaccount.getStatus().equals("OTP")) {
                            logger.info("Account already exist with OTP status, setting Account Status flag to OTP ...");
                            wsmodel.setStatus("OTP");
                            previousflag = true;
                        }


                        if (previousflag) {
                            logger.info("Getting NayapayRelation for AcctId [" + dbaccount.getAcctId() + "] and updating with New AcctId [" + wsmodel.getAcctid() + "]");

                            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :ACCTID";
                            params = new HashMap<String, Object>();
                            params.put("ACCTID", dbaccount.getAcctId());


                            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

                            if (usernprel != null) {
                                usernprel.setUser_Acct_Id(wsmodel.getAcctid());
                                dbaccount.setAcctId(wsmodel.getAcctid());
                                GeneralDao.Instance.saveOrUpdate(usernprel);
                                GeneralDao.Instance.saveOrUpdate(dbaccount);
                            }
                        }

                        logger.info("Linking Account [" + wsmodel.getAccountnumber() + "], will be performed after OTP Confirmation...!");
                        wsmodel.setCnic(userwallet.getCustomer().getCnic());
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    }
                }
            } else if (userwallet != null && (!userwallet.getStatus().equals("00") || !userwallet.getCustomer().getStatus().equals("00"))) {
                logger.error("Invalid Account Status Found for UserId [" + wsmodel.getUserid() + "], cannot verify wallet for linkaccount. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //03 Account Inactive
                return wsmodel;
            } else {
                logger.error("No Account Relation Found for UserId [" + wsmodel.getUserid() + "], cannot verify wallet for linkaccount. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //93 Customer Relation not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing LinkBankAccountInquiry..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //46 - Unable to Process - Refer to Doc
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteLinkBankAccount(WalletCMSWsEntity wsmodel) {
        logger.info("Executing LinkBankAccount Request...");

        try {
            String dbQuery;
            Map<String, Object> params;
            CMSAccount alreadylnkedacct = null;
            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


            if (usernprel != null && usernprel.getAccount().getStatus().equals("00") && usernprel.getAccount().getCustomer().getStatus().equals("00")) {
                //m.rehman: for NayaPay, checking any account already present with primary flag true for userid
                //if any account found primary for this userid, reject transaction
                if (wsmodel.getIsprimary().equals("true")) {
                    Boolean isPrimaryFound = Boolean.FALSE;
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getUserid());
                    List<CMSAccount> cmsAccountList = GeneralDao.Instance.find(dbQuery, params);
                    for (CMSAccount cmsAccount : cmsAccountList) {
                        if (cmsAccount.getIsprimary().equals("1") && cmsAccount.getCategory().equals(AccType.CAT_LINKED.StringValue()) && cmsAccount.getStatus().equals("00"))
                            isPrimaryFound = Boolean.TRUE;
                    }
                    if (isPrimaryFound) {
                        logger.error("Primary account already exist against User ID [" + wsmodel.getUserid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_ALREADY_EXIST); //33 - Duplicate Linked Account Refer to Doc
                        return wsmodel;
                    }
                }

                //m.rehman: for NayaPay, checking any account already present against same bank
                //if any account found against same bank, reject transaction
                Boolean isSameAcctExist = Boolean.FALSE;
                dbQuery = "from " + CMSAccount.class.getName() + " c where c.AccountNumber= :ACCTNO " +
                        " and c.BranchId= :BANKCODE";
                params = new HashMap<String, Object>();
                params.put("ACCTNO", wsmodel.getAccountnumber());
                params.put("BANKCODE", GlobalContext.getInstance().getBinByBankCode(wsmodel.getBankcode()));
                List<CMSAccount> cmsAccountList = GeneralDao.Instance.find(dbQuery, params);
                for (CMSAccount cmsAccount : cmsAccountList) { //Raza This list will max have 1 record
                    if (cmsAccount.getAccountNumber().equals(wsmodel.getAccountnumber()) && (!cmsAccount.getStatus().equals("OTP") || !cmsAccount.getStatus().equals("ROTP") || !cmsAccount.getStatus().equals("DL")))
                        isSameAcctExist = Boolean.TRUE;
                    else if (cmsAccount.getUserId().equals(wsmodel.getUserid()))
                        alreadylnkedacct = cmsAccount;
                }
                if (isSameAcctExist) {
                    logger.error("Account Number [" + wsmodel.getAccountnumber() + "] already exist against Bank Code [" +
                            wsmodel.getBankcode() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_ALREADY_EXIST); //33 - Duplicate Linked Account Refer to Doc
                    return wsmodel;
                }
                ////////////////////////////////////////////////////////////////////////////////////////////////////////

                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", usernprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //40-Customer Not Found
                    return wsmodel;
                } else {
                    //Validate PIN start
                    if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                        logger.error("PIN validation failed, rejecting...");
                        //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                        return wsmodel;
                    }
                    //Validate PIN end


                    //TODO: Raza Check Txn Permission...
                    dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getAcctid());

                    NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

                    if (nprel != null && nprel.getAccount().getStatus().equals("00") && usernprel.getAccount().getCustomer().equals(nprel.getAccount().getCustomer())) {
                        logger.error("AcctId already Linked, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_ALREADY_EXIST); //33 - Duplicate Linked Account Refer to Doc
                        return wsmodel;
                    } else if (nprel != null && (nprel.getAccount().getStatus().equals("DL"))) {
                        logger.info("Linking De-Linked Account, awaiting OTP....");
                        nprel.getAccount().setStatus("ROTP"); //Raza as OTP will always be required nprel.getAccount().setStatus("00");
                        GeneralDao.Instance.saveOrUpdate(nprel.getAccount());
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else if (nprel != null
                            && (nprel.getAccount().getStatus().equals("OTP") || nprel.getAccount().getStatus().equals("ROTP"))) {
                        logger.info("Account status OTP/ROTP, awaiting OTP....");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else if (nprel == null && alreadylnkedacct != null) {
                        logger.info("Reassigning previously linked account with AcctID [" + alreadylnkedacct.getAcctId() + "] to new AcctID [" +
                                wsmodel.getAcctid() + "]");

                        alreadylnkedacct.setAcctId(wsmodel.getAcctid());
                        GeneralDao.Instance.saveOrUpdate(alreadylnkedacct);
                        //wsmodel.setAcctStatus("OTP");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        if (WalletCMSFunctions.LinkAccount(wsmodel, usernprel.getAccount())) {
                            logger.info("Account Profile Created Successfully for customer [" + wsmodel.getCnic() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                            return wsmodel;
                        } else {
                            logger.error("Unable to Create Account Profile for customer [" + wsmodel.getCnic() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //46- Unable to Process
                            return wsmodel;
                        }
                    }

                }
            } else if (usernprel != null && (!usernprel.getAccount().getStatus().equals("00") || !usernprel.getAccount().getCustomer().getStatus().equals("00"))) {
                logger.info("Invalid Account Status Found for UserId [ " + wsmodel.getUserid() + ", cannot LinkAccount. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //03 Account Inactive
                return wsmodel;
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot LinkAccount. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing LinkBankAccount..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //46- Unable to Process
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteLinkBankAccountOTP(WalletCMSWsEntity wsmodel) {
        logger.info("Executing LinkBankAccountOTP Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


            if (usernprel != null) {

                if (!usernprel.getAccount().getStatus().equals("00") || !usernprel.getAccount().getCustomer().getStatus().equals("00")) {
                    logger.error("Invalid Wallet Account or Customer Status, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Inactive Account/Customer ; refer NayaPay Doc
                    return wsmodel;
                }

                if (wsmodel.getIsprimary().equals("true")) {
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getUserid());
                    List<CMSAccount> cmsAccountList = GeneralDao.Instance.find(dbQuery, params);
                    for (CMSAccount cmsAccount : cmsAccountList) {
                        if (cmsAccount.getIsprimary().equals("1") && cmsAccount.getCategory().equals(AccType.CAT_LINKED.StringValue()) && cmsAccount.getStatus().equals("00")) {
                            logger.error("Primary account already exist against User ID [" + wsmodel.getUserid() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_ALREADY_EXIST); //33 - Duplicate Linked Account Refer to Doc
                            return wsmodel;
                        }
                    }
                }

                //m.rehman: for NayaPay, checking any account already present against same bank
                //if any account found against same bank, reject transaction
                dbQuery = "from " + CMSAccount.class.getName() + " c where c.AccountNumber= :ACCTNO " +
                        " and c.BranchId= :BANKCODE";
                params = new HashMap<String, Object>();
                params.put("ACCTNO", wsmodel.getAccountnumber());
                params.put("BANKCODE", GlobalContext.getInstance().getBinByBankCode(wsmodel.getBankcode()));
                CMSAccount dblinkedacct = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
                if (dblinkedacct != null && dblinkedacct.getStatus().equals("00")) {
                    logger.error("Account Number [" + wsmodel.getAccountnumber() + "] already exist against Bank Code [" +
                            wsmodel.getBankcode() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_ALREADY_EXIST); //33 - Duplicate Linked Account Refer to Doc
                    return wsmodel;
                }
                ////////////////////////////////////////////////////////////////////////////////////////////////////////

                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", usernprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //93-Customer Relation not found ; Refer to Doc
                    return wsmodel;
                } else {
                    //TODO: Raza Check Txn Permission...

                    if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                        logger.error("PIN validation failed, rejecting...");
                        //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                        return wsmodel;
                    }


                    dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getAcctid());

                    NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


                    if (nprel != null && nprel.getAccount().getStatus().equals("00") && usernprel.getAccount().getCustomer().equals(nprel.getAccount().getCustomer())) {
                        logger.error("AcctId already Linked, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_ALREADY_EXIST); //33 - Duplicate Linked Account Refer to Doc
                        return wsmodel;
                    } else if (nprel != null && (nprel.getAccount().getStatus().equals("DL"))) {
                        logger.info("Linking De-Linked Account, awaiting OTP....");
                        nprel.getAccount().setStatus("ROTP"); //Raza as OTP will always be required nprel.getAccount().setStatus("00");
                        GeneralDao.Instance.saveOrUpdate(nprel.getAccount());
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else if (nprel != null
                            && (nprel.getAccount().getStatus().equals("OTP") || nprel.getAccount().getStatus().equals("ROTP"))) {
                        logger.info("Account status OTP/ROTP, awaiting OTP....");
                        //nprel.getAccount().setStatus("OTP"); //Raza as OTP will always be required nprel.getAccount().setStatus("00");
                        //GeneralDao.Instance.saveOrUpdate(nprel.getAccount());
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        if (WalletCMSFunctions.LinkAccountOTP(wsmodel, usernprel.getAccount())) {
                            logger.info("Account Profile Created Successfully for customer [" + wsmodel.getCnic() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                            return wsmodel;
                        } else {
                            logger.error("Unable to Create Account Profile for customer [" + wsmodel.getCnic() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //46-Unable to Process ; Refer to Doc
                            return wsmodel;
                        }
                    }

                }

            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot LinkAccount. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //29 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing LinkBankAccountOTP..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //46-Unable to Process ; Refer to Doc
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteVerifyLinkAccountOTP(WalletCMSWsEntity wsmodel) {
        logger.info("Executing VerifyLinkAccountOTP Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (usernprel != null && usernprel.getAccount().getStatus().equals("00") && usernprel.getAccount().getCustomer().getStatus().equals("00")) {
                CMSAccount linkedaccount = null;
                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getUserid());
                List<CMSAccount> cmsAccountList = GeneralDao.Instance.find(dbQuery, params);
                for (CMSAccount cmsAccount : cmsAccountList) {
                    if ((Util.hasText(cmsAccount.getAcctId()) && cmsAccount.getAcctId().equals(wsmodel.getAcctid()))) {
                        if (cmsAccount.getStatus().equals("OTP")) {
                            linkedaccount = cmsAccount;
                        } else if (cmsAccount.getStatus().equals("ROTP")) {
                            linkedaccount = cmsAccount;
                            //wsmodel.setAcctStatus("DL");
                            wsmodel.setStatus("DL");
                        } else {
                            logger.error("Invalid LinkAccount Status [" + cmsAccount.getStatus() + "] for Confrim LinkAccount OTP txn, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //67-Invalid Account Status ; Refer to Doc
                            return wsmodel;
                        }
                    }
                }
                if (linkedaccount != null) {
                    logger.info("Linked Account found with pending OTP Confirmation for UserId [" + wsmodel.getUserid() + "]");
                    logger.info("LinkAccountReq verified for AcctId [" + wsmodel.getAcctid() + "], awaiting OTP Confirmation...!");
                    wsmodel.setCnic(linkedaccount.getCustomer().getCnic());
                    wsmodel.setAccountnumber(linkedaccount.getAccountNumber());
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED); //Invalid Account Record ; Raza update THIS
                    return wsmodel;
                } else {
                    logger.error("No Linked Account Found with pending OTP Confirmation, rejecting...");
                    wsmodel.setAcctid(null); //Raza for middleware
                    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //Invalid Account Record ; Raza update THIS
                    return wsmodel;
                }
            } else if (usernprel != null && (!usernprel.getAccount().getStatus().equals("00") && usernprel.getAccount().getCustomer().getStatus().equals("00"))) {
                logger.info("Invalid Account Status Found for UserId [ " + wsmodel.getUserid() + ", cannot VerifyLinkAccountReq. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //03 Account nactive
                wsmodel.setAcctid(null); //Raza for middleware
                return wsmodel;
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot VerifyLinkAccountReq. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //29 Customer not found
                wsmodel.setAcctid(null); //Raza for middleware
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing VerifyLinkAccountOTP..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //46-Unable to Process ; Refer to Doc
            wsmodel.setAcctid(null); //Raza for middleware
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteConfirmLinkBankAccountOTP(WalletCMSWsEntity wsmodel) {
        logger.info("Executing ConfirmLinkBankAccountOTP Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (usernprel != null && usernprel.getAccount().getStatus().equals("00") && usernprel.getAccount().getCustomer().getStatus().equals("00")) {
                CMSAccount linkedaccount = null;
                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getUserid());
                List<CMSAccount> cmsAccountList = GeneralDao.Instance.find(dbQuery, params);
                for (CMSAccount cmsAccount : cmsAccountList) {
                    if ((Util.hasText(cmsAccount.getAcctId()) && cmsAccount.getAcctId().equals(wsmodel.getAcctid()))
                            && (cmsAccount.getStatus().equals("OTP") || cmsAccount.getStatus().equals("ROTP")))
                        linkedaccount = cmsAccount;
                }
                if (linkedaccount != null) {
                    logger.error("Confirming Linked Account after OTP Confimation for UserId [" + wsmodel.getUserid() + "]");
                    linkedaccount.setStatus("00");
                    GeneralDao.Instance.saveOrUpdate(linkedaccount);
                    logger.error("Account Linked for AcctId [" + wsmodel.getAcctid() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED); //Invalid Account Record ; Raza update THIS
                } else {
                    logger.error("No Linked Account Found with pending OTP Confirmation, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //Invalid Account Record ; Raza update THIS
                }
            } else if (usernprel != null && (!usernprel.getAccount().getStatus().equals("00") || !usernprel.getAccount().getCustomer().getStatus().equals("00"))) {
                logger.error("Invalid Account Status for Account with UserId [ " + wsmodel.getUserid() + ", cannot VerifyLinkAccountReq. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //03 Account Inactive
                return wsmodel;
            } else {
                logger.error("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot VerifyLinkAccountReq. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //29 Customer not found
                return wsmodel;
            }
            wsmodel.setAcctid(null); //Raza for middleware
            return wsmodel;
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing ConfirmLinkBankAccountOTP..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //46 - Unable to Process ; Refer to Doc
            wsmodel.setAcctid(null); //Raza for middleware
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteUnLinkBankAccountInquiry(WalletCMSWsEntity wsmodel) {
        logger.info("Executing UnLinkBankAccountInquiry Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET.StringValue()); //Raza uncommenting 20-08-2019

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null && userwallet.getStatus().equals("00") && userwallet.getCustomer().getStatus().equals("00")) {
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", userwallet.getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for account [" + userwallet.getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND); //29-Customer not Found ; Refer to Doc
                    return wsmodel;
                } else {
                    logger.info("Verifying Linked Account by UserId & AcctId...");
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.acctId = :ACCTID " + " and c.category = :CAT ";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getUserid());
                    params.put("ACCTID", wsmodel.getAcctid());
                    params.put("CAT", AccType.CAT_LINKED.StringValue());

                    CMSAccount linkedaccount = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                    if (linkedaccount != null && linkedaccount.getStatus().equals("00")) {
                        //TODO Verify PIN
                        if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                            logger.error("PIN validation failed, rejecting...");
                            //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                            return wsmodel;
                        }

                        logger.error("Linked Account found for UnLinkAccountInquiry, replying...");
                        wsmodel.setAccountnumber(linkedaccount.getAccountNumber());
                        wsmodel.setCnic(linkedaccount.getCustomer().getCnic());
                        wsmodel.setBankcode(GlobalContext.getInstance().getBankCodeByBin(linkedaccount.getBranchId()));
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        logger.error("No Linked Account found for UserId [" + wsmodel.getUserid() + "], AcctId [" + wsmodel.getAcctid() + "] , rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //02 Invalid Account -- refer to Document
                        return wsmodel;
                    }
                }
            } else if (userwallet != null && (!userwallet.getStatus().equals("00") || !userwallet.getCustomer().getStatus().equals("00"))) {
                logger.error("Invalid Account status for UserId [" + wsmodel.getUserid() + "], AcctId [" + wsmodel.getAcctid() + "] , rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //03 Inactive Account -- refer to Document
                return wsmodel;
            } else {
                logger.info("No Account Relation Found for UserId [" + wsmodel.getUserid() + "], cannot verify wallet for linkaccount. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //29 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing UnLinkBankAccountInquiry..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //46-Unable to Process
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteUnLinkBankAccount(WalletCMSWsEntity wsmodel) {
        logger.info("Executing UnLinkBankAccount Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


            if (usernprel != null) {
                if (!usernprel.getAccount().getStatus().equals("00") || !usernprel.getAccount().getCustomer().getStatus().equals("00")) {
                    logger.error("Invalid Wallet Account or Customer Status, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Inactive Account/Customer ; refer NayaPay Doc
                    return wsmodel;
                }


                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", usernprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //40-Customer Relation not Found ; Refer to Doc
                    return wsmodel;
                } else {
                    if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                        logger.error("PIN validation failed, rejecting...");
                        //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                        return wsmodel;
                    }

                    dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getAcctid());

                    NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


                    if (nprel != null && nprel.getAccount().getStatus().equals("00") && usernprel.getAccount().getCustomer().equals(nprel.getAccount().getCustomer())) {
                        logger.info("De-Linking AcctId...");
                        nprel.getAccount().setStatus("DL"); //Raza Update THIS
                        GeneralDao.Instance.saveOrUpdate(nprel.getAccount());
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        logger.error("No Linked Account found for [" + wsmodel.getAcctid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_NO_LINKED_ACCOUNT); //02 Invalid Account -- refer to Document
                        return wsmodel;
                    }

                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //29 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing LinkBankAccount..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //46-Unable to Process
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteUpdateLinkedAccountAlias(WalletCMSWsEntity wsmodel) {
        logger.info("Executing UpdateLinkedAccountAlias Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


            if (usernprel != null) {
                if (!usernprel.getAccount().getStatus().equals("00") || !usernprel.getAccount().getCustomer().getStatus().equals("00")) {
                    logger.error("Invalid Wallet Account or Customer Status, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Inactive Account/Customer ; refer NayaPay Doc
                    return wsmodel;
                }


                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", usernprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                } else {
                    if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                        logger.error("PIN validation failed, rejecting...");
                        //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                        return wsmodel;
                    }


                    dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getAcctid());

                    NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


                    if (nprel != null && nprel.getAccount().getStatus().equals("00") && usernprel.getAccount().getCustomer().equals(nprel.getAccount().getCustomer())) {
                        logger.info("Updating Linked Account Alias...");
                        nprel.getAccount().setAcctalias(wsmodel.getAcctalias());
                        GeneralDao.Instance.saveOrUpdate(nprel.getAccount());
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        logger.error("No Linked Account found for [" + wsmodel.getAcctid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //02 Invalid Account -- refer to Document
                        return wsmodel;
                    }

                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing UpdateLinkedAccountAlias..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteSetPrimaryLinkedAccount(WalletCMSWsEntity wsmodel) {
        logger.info("Executing SetPrimaryLinkedAccount Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


            if (usernprel != null) {
                if (!usernprel.getAccount().getStatus().equals("00") || !usernprel.getAccount().getCustomer().getStatus().equals("00")) {
                    logger.error("Invalid Wallet Account or Customer Status, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Inactive Account/Customer ; refer NayaPay Doc
                    return wsmodel;
                }

                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getUserid());
                List<CMSAccount> cmsAccountList = GeneralDao.Instance.find(dbQuery, params);
                for (int i = 0; i < cmsAccountList.size(); i++) {
                    if (cmsAccountList.get(i).getIsprimary().equals("1")) {
                        cmsAccountList.get(i).setIsprimary("0");
                        GeneralDao.Instance.saveOrUpdate(cmsAccountList.get(i));
                    }
                }
                ///////////////////////////////////////////////////////////////////////////////////////////////////////

                //Change Wallet PIN
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", usernprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                } else {
                    if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                        logger.error("PIN validation failed, rejecting...");
                        //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                        return wsmodel;
                    }

                    dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getAcctid());

                    NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

                    if (nprel != null && nprel.getAccount().getStatus().equals("00") && usernprel.getAccount().getCustomer().equals(nprel.getAccount().getCustomer())) {
                        logger.info("Setting Linked Account as Primary...");
                        nprel.getAccount().setIsprimary("1");
                        GeneralDao.Instance.saveOrUpdate(nprel.getAccount());
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        logger.error("No Linked Account found for [" + wsmodel.getAcctid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //02 Invalid Account -- refer to Document
                        return wsmodel;
                    }

                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing SetPrimaryLinkedAccount..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetUserToken(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetUserToken Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            logger.info("verifying AccessToken...");

            //new start
            //dbQuery = "from " + AccessToken.class.getName() + " c where c.userid= :USERID " + " and c.expireDate > to_char(:EXPIRY_DATETIME, " + WebServiceUtil.StrAccessTokendateFormat + ") ";
            dbQuery = "from " + AccessToken.class.getName() + " c where c.userid= :USERID " + " and c.expireDate > :EXPIRY " + " and c.isExpired = :ISEXPIRED " + " order by expireDate desc ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("ISEXPIRED", false);
            params.put("EXPIRY", Long.parseLong(WebServiceUtil.tokenFormat.format(new Date())));
            //params.put("EXPIRY_DATETIME", WebServiceUtil.AccessTokendateFormat.format(new Date()));

            List<AccessToken> tokenlist = GeneralDao.Instance.find(dbQuery, params);

            if (tokenlist != null && tokenlist.size() > 0) {
                tokenlist.get(0).setExpired(true);
                tokenlist.get(0).setManualexpiredate(Long.parseLong((WebServiceUtil.tokenFormat.format(new Date()))));
                logger.error("User already have a active access token, marking expired, generating new...");
                GeneralDao.Instance.saveOrUpdate(tokenlist.get(0));
                //wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //26 - User Token Expired
                //return wsmodel;
            }

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);
            AccessToken token;
            if (usernprel != null) {

                if (!usernprel.getAccount().getStatus().equals("00") || !usernprel.getAccount().getCustomer().getStatus().equals("00")) {
                    logger.error("Invalid Wallet Account or Customer Status, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Inactive Account/Customer ; refer NayaPay Doc
                    return wsmodel;
                }

                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", usernprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                }

                if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                    logger.error("PIN validation failed, rejecting...");
                    return wsmodel;
                }


                token = new AccessToken();
                token.setUserid(wsmodel.getUserid());
                token.setCreateDate(Long.parseLong(WebServiceUtil.dateFormat.format(new Date())));
                //change request from Nayapay to set token time from 5 to 10
                //token.setExpireDate(Long.parseLong(WebServiceUtil.dateFormat.format(DateUtils.addMinutes(new Date(), 5))));
                token.setExpireDate(Long.parseLong(WebServiceUtil.dateFormat.format(DateUtils.addMinutes(new Date(), 10))));
                token.setExpired(false);
                String tvalue = "";
                for (int i = 0; i < 12; i++) {
                    Random rnd = new Random();
                    int a = rnd.nextInt(10);
                    tvalue += a;
                }
                token.setTokenId(tvalue);


                /*Random rnd = new Random();
                token.setTokenId("" + 100000 + rnd.nextInt(900000));*/
                token.setCustomer(usernprel.getAccount().getCustomer());
                GeneralDao.Instance.saveOrUpdate(token);
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }

            wsmodel.setAccesstoken(token.getTokenId());
            logger.info("TokenId [" + wsmodel.getAccesstoken() + "] for UserId [" + wsmodel.getUserid() + "]");
            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
            return wsmodel;
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetUserToken..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetUserWallet(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetUserWallet Request...");

        try {
            String dbQuery;
            Map<String, Object> params;
            List<CMSDebitRemainingLimit> cmsDebitRemainingLimits;
            List<CMSCreditRemainingLimit> cmsCreditRemainingLimits;
            List<NayaPayLimit> nayaPayLimitList;
            NayaPayLimit nl, nll;
            List<CMSProductDebitLimit> cmsProductDebitLimits;
            List<CMSProductCreditLimit> cmsProductCreditLimits;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


            if (usernprel != null) {
                //Change Wallet PIN
                //dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                //params = new HashMap<String, Object>();
                //params.put("relation", usernprel.getAccount().getAccountNumber());
                //params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                //CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                //if(cardrelation == null)
                //{
                //    logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                //    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //93-Customer Relation not Found ; Refer to Doc
                //    return wsmodel;
                //}
                //else
                //{
                if (usernprel != null && usernprel.getAccount().getStatus().equals("00") && usernprel.getAccount().getCustomer().getStatus().equals("00")) {
                    //Get and Verify Access Token start
                    logger.info("verifying AccessToken...");
                    dbQuery = "from " + AccessToken.class.getName() + " c where c.userid= :USERID " + " and c.tokenId= :TOKEN " + " and c.isExpired = :ISEXPIRED " + " and c.expireDate > :EXPIRY ";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getUserid());
                    params.put("TOKEN", wsmodel.getAccesstoken());
                    params.put("ISEXPIRED", false);
                    params.put("EXPIRY", Long.parseLong(WebServiceUtil.dateFormat.format(new Date())));

                    AccessToken token = (AccessToken) GeneralDao.Instance.findObject(dbQuery, params);

                    if (token == null) {
                        logger.error("No AccessToken found for customer, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_ACCESS_TOKEN_EXPIRED_MISSING); //26-Access Token not found Refer to Doc
                        return wsmodel;
                    }
                    logger.info("AccessToken verified OK");
                    //Get and Verify Access Token end

                    logger.info("Getting User Wallet...");
                    nayaPayLimitList = new ArrayList<NayaPayLimit>();
                    //m.rehman: 30-08-2021, VC-NAP-202108021 - Limit Structure update
                    //updating query below
                    dbQuery = "from " + CMSDebitRemainingLimit.class.getName() + " c where c.relation= :ACCTNUMBER and c.limitId.isActive='1' ";
                    params = new HashMap<String, Object>();
                    params.put("ACCTNUMBER", usernprel.getAccount().getAccountNumber());
                    cmsDebitRemainingLimits = GeneralDao.Instance.find(dbQuery, params);

                    if (cmsDebitRemainingLimits != null && cmsDebitRemainingLimits.size() > 0) {
                        for (CMSDebitRemainingLimit al : cmsDebitRemainingLimits) {
                            if (al.getLimitId().getProductId().equals(usernprel.getAccount().getProduct())) {
                                nl = new NayaPayLimit();
                                if (Util.hasText(al.getLimitId().getDescription())) {
                                    logger.info(al.getLimitId().getDescription());
                                    nl.setTransaction(al.getLimitId().getDescription());
                                } else {
                                    logger.info(al.getLimitId().getTransactionType().getServicename());
                                    nl.setTransaction(al.getLimitId().getTransactionType().getServicename());
                                }
                                //Arsalan Akhter, Date: 12-Oct-2021, Ticket: VC-NAP-202110121(Issue in daily wallet transaction limit)
                                if (al.getIndividualLimitId() != null) {
                                    nl.setAmount(al.getIndividualLimitId().getAmount());
                                } else {
                                    nl.setAmount(al.getLimitId().getAmount());
                                }
                                //====================================================================================================

                                // Asim, Logging to be removed
                                logger.info("Current cycle date : [" + al.getCycleEndDate() + "]");
                                logger.info("Checking for month : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6) + "]");
                                logger.info("Checking for year : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4) + "]");
                                logger.info("Checking for current date : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()) + "]");
                                // =================================

                                // Asim Shahzad, Date : 6th Oct 2020, Tracking ID : VC-NAP-202009231
                                CMSLimitCycleType cmsLimitCycleType = new CMSLimitCycleType(Integer.parseInt(al.getLimitId().getCycleLengthType()));

                                if (cmsLimitCycleType.equals(CMSLimitCycleType.DAILY)) {
                                    if (WebServiceUtil.limitcycleDateFormat.format(new Date()).equals(al.getCycleEndDate())) {
                                        nl.setAvaillimit(al.getRemainingAmount());
                                        nl.setAvaillimitfreq(al.getRemainingFrequency());

                                        logger.info("Executing Daily Limit flow...");
                                        logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                    } else {
                                        //Arsalan Akhter, Date: 12-Oct-2021, Ticket: VC-NAP-202110121(Issue in daily wallet transaction limit)
                                        if (al.getIndividualLimitId() != null) {
                                            nl.setAvaillimit(al.getIndividualLimitId().getAmount());
                                            nl.setAvaillimitfreq(al.getIndividualLimitId().getFrequencyLength());

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Current Debit Limit : [" + al.getId() + "]");
                                            logger.info("Debit Limit : [" + al.getIndividualLimitId().getId() + "]");
                                            logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                        } else {
                                            nl.setAvaillimit(al.getLimitId().getAmount());
                                            nl.setAvaillimitfreq(al.getLimitId().getFrequencyLength());

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Current Debit Limit : [" + al.getId() + "]");
                                            logger.info("Debit Limit : [" + al.getLimitId().getId() + "]");
                                            logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                        }
                                        //====================================================================================================
                                    }
                                }
                                if (cmsLimitCycleType.equals(CMSLimitCycleType.MONTHLY)) {
                                    if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6).equals(al.getCycleEndDate().substring(4, 6))) {
                                        nl.setAvaillimit(al.getRemainingAmount());
                                        nl.setAvaillimitfreq(al.getRemainingFrequency());

                                        logger.info("Executing Monthly Limit flow...");
                                        logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                    } else {
                                        //Arsalan Akhter, Date: 12-Oct-2021, Ticket: VC-NAP-202110121(Issue in daily wallet transaction limit)
                                        if (al.getIndividualLimitId() != null) {
                                            nl.setAvaillimit(al.getIndividualLimitId().getAmount());
                                            nl.setAvaillimitfreq(al.getIndividualLimitId().getFrequencyLength());

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Current Debit Limit : [" + al.getId() + "]");
                                            logger.info("Debit Limit : [" + al.getIndividualLimitId().getId() + "]");
                                            logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                        } else {
                                            nl.setAvaillimit(al.getLimitId().getAmount());
                                            nl.setAvaillimitfreq(al.getLimitId().getFrequencyLength());

                                            logger.info("Executing Monthly Limit flow...");
                                            logger.info("Current Debit Limit : [" + al.getId() + "]");
                                            logger.info("Debit Limit : [" + al.getLimitId().getId() + "]");
                                            logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                        }
                                        //====================================================================================================
                                    }
                                }
                                if (cmsLimitCycleType.equals(CMSLimitCycleType.YEARLY)) {
                                    if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4).equals(al.getCycleEndDate().substring(2, 4))) {
                                        nl.setAvaillimit(al.getRemainingAmount());
                                        nl.setAvaillimitfreq(al.getRemainingFrequency());

                                        logger.info("Executing Yearly Limit flow...");
                                        logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                    } else {
                                        //Arsalan Akhter, Date: 12-Oct-2021, Ticket: VC-NAP-202110121(Issue in daily wallet transaction limit)
                                        if (al.getIndividualLimitId() != null) {
                                            nl.setAvaillimit(al.getIndividualLimitId().getAmount());
                                            nl.setAvaillimitfreq(al.getIndividualLimitId().getFrequencyLength());

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Current Debit Limit : [" + al.getId() + "]");
                                            logger.info("Debit Limit : [" + al.getIndividualLimitId().getId() + "]");
                                            logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                        } else {
                                            nl.setAvaillimit(al.getLimitId().getAmount());
                                            nl.setAvaillimitfreq(al.getLimitId().getFrequencyLength());

                                            logger.info("Executing Yearly Limit flow...");
                                            logger.info("Current Debit Limit : [" + al.getId() + "]");
                                            logger.info("Debit Limit : [" + al.getLimitId().getId() + "]");
                                            logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                        }
                                        //====================================================================================================
                                    }
                                }
                                // ================================================================

                                nayaPayLimitList.add(nl);

                                /*
                                dbQuery = "from " + CMSProductDebitLimit.class.getName() + " c where c.parentLimitId = :LIMIT";
                                params = new HashMap<String, Object>();
                                params.put("LIMIT", al.getLimitId());
                                cmsProductDebitLimits = GeneralDao.Instance.find(dbQuery, params);

                                if (cmsProductDebitLimits != null && cmsProductDebitLimits.size() > 0) {
                                    logger.info("Debit Shared limit found ...");
                                    nl = new NayaPayLimit();
                                    nl.setTransaction("Shared");
                                    nl.setAmount(al.getLimitId().getAmount());
                                    nl.setAvaillimit(al.getRemainingAmount());
                                    nl.setAvaillimitfreq(al.getRemainingFrequency());
                                    nl.setSharedflag("true");
                                    nl.setSharedlimits(new ArrayList<NayaPayLimit>());

                                    for (CMSProductDebitLimit cmsProductDebitLimit : cmsProductDebitLimits) {
                                        nll = new NayaPayLimit();
                                        SwitchTransactionCodes switchTransactionCodes = cmsProductDebitLimit.getTransactionType();
                                        nll.setTransaction(switchTransactionCodes.getServicename());
                                        nll.setAmount(cmsProductDebitLimit.getAmount());
                                        nll.setAvaillimit(cmsProductDebitLimit.getAmount());
                                        nll.setAvaillimitfreq(cmsProductDebitLimit.getFrequencyLength());
                                        nll.setSharedflag("false");
                                        nl.getSharedlimits().add(nll);
                                    }

                                } else {
                                    nl = new NayaPayLimit();
                                    SwitchTransactionCodes switchTransactionCodes = al.getLimitId().getTransactionType();
                                    nl.setTransaction(switchTransactionCodes.getServicename());
                                    nl.setAmount(al.getLimitId().getAmount());
                                    nl.setAvaillimit(al.getRemainingAmount());
                                    nl.setAvaillimitfreq(al.getRemainingFrequency());
                                    nl.setSharedflag("false");
                                }
                                nayaPayLimitList.add(nl);
                                */
                            }
                        }
                        //wsmodel.setNayapaylimits(nayaPayLimitList);
                    }

                    dbQuery = "from " + CMSCreditRemainingLimit.class.getName() + " c where c.relation= :ACCTNUMBER and c.limitId.isActive='1' ";
                    params = new HashMap<String, Object>();
                    params.put("ACCTNUMBER", usernprel.getAccount().getAccountNumber());
                    cmsCreditRemainingLimits = GeneralDao.Instance.find(dbQuery, params);

                    if (cmsCreditRemainingLimits != null && cmsCreditRemainingLimits.size() > 0) {
                        for (CMSCreditRemainingLimit cmsCreditRemainingLimit : cmsCreditRemainingLimits) {
                            if (cmsCreditRemainingLimit.getLimitId().getProductId().equals(usernprel.getAccount().getProduct())) {
                                nl = new NayaPayLimit();
                                if (Util.hasText(cmsCreditRemainingLimit.getLimitId().getDescription())) {
                                    logger.info(cmsCreditRemainingLimit.getLimitId().getDescription());
                                    nl.setTransaction(cmsCreditRemainingLimit.getLimitId().getDescription());
                                } else {
                                    logger.info(cmsCreditRemainingLimit.getLimitId().getTransactionType().getServicename());
                                    nl.setTransaction(cmsCreditRemainingLimit.getLimitId().getTransactionType().getServicename());
                                }
                                //Arsalan Akhter, Date: 12-Oct-2021, Ticket: VC-NAP-202110121(Issue in daily wallet transaction limit)
                                if (cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                    nl.setAmount(cmsCreditRemainingLimit.getIndividualLimitId().getAmount());
                                } else {
                                    nl.setAmount(cmsCreditRemainingLimit.getLimitId().getAmount());
                                }
                                //====================================================================================================

                                // Asim, Logging to be removed
                                logger.info("Current cycle date : [" + cmsCreditRemainingLimit.getCycleEndDate() + "]");
                                logger.info("Checking for month : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6) + "]");
                                logger.info("Checking for year : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4) + "]");
                                logger.info("Checking for current date : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()) + "]");
                                // =================================

                                // Asim Shahzad, Date : 6th Oct 2020, Tracking ID : VC-NAP-202009231
                                CMSLimitCycleType cmsLimitCycleType = new CMSLimitCycleType(Integer.parseInt(cmsCreditRemainingLimit.getLimitId().getCycleLengthType()));

                                if (cmsLimitCycleType.equals(CMSLimitCycleType.DAILY)) {
                                    if (WebServiceUtil.limitcycleDateFormat.format(new Date()).equals(cmsCreditRemainingLimit.getCycleEndDate())) {
                                        nl.setAvaillimit(cmsCreditRemainingLimit.getRemainingAmount());
                                        nl.setAvaillimitfreq(cmsCreditRemainingLimit.getRemainingFrequency());

                                        logger.info("Executing Daily Limit flow...");
                                        logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                    } else {
                                        //Arsalan Akhter, Date: 12-Oct-2021, Ticket: VC-NAP-202110121(Issue in daily wallet transaction limit)
                                        if (cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                            nl.setAvaillimit(cmsCreditRemainingLimit.getIndividualLimitId().getAmount());
                                            nl.setAvaillimitfreq(cmsCreditRemainingLimit.getIndividualLimitId().getFrequencyLength());

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Current Debit Limit : [" + cmsCreditRemainingLimit.getId() + "]");
                                            logger.info("Debit Limit : [" + cmsCreditRemainingLimit.getIndividualLimitId().getId() + "]");
                                            logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                        } else {
                                            nl.setAvaillimit(cmsCreditRemainingLimit.getLimitId().getAmount());
                                            nl.setAvaillimitfreq(cmsCreditRemainingLimit.getLimitId().getFrequencyLength());

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Current Debit Limit : [" + cmsCreditRemainingLimit.getId() + "]");
                                            logger.info("Debit Limit : [" + cmsCreditRemainingLimit.getLimitId().getId() + "]");
                                            logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                        }
                                        //====================================================================================================
                                    }
                                }

                                if (cmsLimitCycleType.equals(CMSLimitCycleType.MONTHLY)) {
                                    if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6).equals(cmsCreditRemainingLimit.getCycleEndDate().substring(4, 6))) {
                                        nl.setAvaillimit(cmsCreditRemainingLimit.getRemainingAmount());
                                        nl.setAvaillimitfreq(cmsCreditRemainingLimit.getRemainingFrequency());

                                        logger.info("Executing Daily Limit flow...");
                                        logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                    } else {
                                        //Arsalan Akhter, Date: 12-Oct-2021, Ticket: VC-NAP-202110121(Issue in daily wallet transaction limit)
                                        if (cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                            nl.setAvaillimit(cmsCreditRemainingLimit.getIndividualLimitId().getAmount());
                                            nl.setAvaillimitfreq(cmsCreditRemainingLimit.getIndividualLimitId().getFrequencyLength());

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Current Debit Limit : [" + cmsCreditRemainingLimit.getId() + "]");
                                            logger.info("Debit Limit : [" + cmsCreditRemainingLimit.getIndividualLimitId().getId() + "]");
                                            logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                        } else {
                                            nl.setAvaillimit(cmsCreditRemainingLimit.getLimitId().getAmount());
                                            nl.setAvaillimitfreq(cmsCreditRemainingLimit.getLimitId().getFrequencyLength());

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Current Debit Limit : [" + cmsCreditRemainingLimit.getId() + "]");
                                            logger.info("Debit Limit : [" + cmsCreditRemainingLimit.getLimitId().getId() + "]");
                                            logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                        }
                                        //====================================================================================================
                                    }
                                }

                                if (cmsLimitCycleType.equals(CMSLimitCycleType.YEARLY)) {
                                    if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4).equals(cmsCreditRemainingLimit.getCycleEndDate().substring(2, 4))) {
                                        nl.setAvaillimit(cmsCreditRemainingLimit.getRemainingAmount());
                                        nl.setAvaillimitfreq(cmsCreditRemainingLimit.getRemainingFrequency());

                                        logger.info("Executing Daily Limit flow...");
                                        logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                    } else {
                                        //Arsalan Akhter, Date: 12-Oct-2021, Ticket: VC-NAP-202110121(Issue in daily wallet transaction limit)
                                        if (cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                            nl.setAvaillimit(cmsCreditRemainingLimit.getIndividualLimitId().getAmount());
                                            nl.setAvaillimitfreq(cmsCreditRemainingLimit.getIndividualLimitId().getFrequencyLength());

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Current Debit Limit : [" + cmsCreditRemainingLimit.getId() + "]");
                                            logger.info("Debit Limit : [" + cmsCreditRemainingLimit.getIndividualLimitId().getId() + "]");
                                            logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                        } else {
                                            nl.setAvaillimit(cmsCreditRemainingLimit.getLimitId().getAmount());
                                            nl.setAvaillimitfreq(cmsCreditRemainingLimit.getLimitId().getFrequencyLength());

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Current Debit Limit : [" + cmsCreditRemainingLimit.getId() + "]");
                                            logger.info("Debit Limit : [" + cmsCreditRemainingLimit.getLimitId().getId() + "]");
                                            logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                        }
                                        //====================================================================================================
                                    }
                                }
                                // ================================================================

                                nayaPayLimitList.add(nl);

                                /*
                                dbQuery = "from " + CMSProductCreditLimit.class.getName() + " s where s.parentLimitId= :LIMIT";
                                params = new HashMap<String, Object>();
                                params.put("LIMIT", cmsCreditRemainingLimit.getLimitId());
                                cmsProductCreditLimits = GeneralDao.Instance.find(dbQuery, params);

                                if (cmsProductCreditLimits != null && cmsProductCreditLimits.size() > 0){
                                    logger.info("Credit Shared limit found ...");
                                    nl = new NayaPayLimit();
                                    nl.setTransaction("Shared");
                                    nl.setAmount(cmsCreditRemainingLimit.getLimitId().getAmount());
                                    nl.setAvaillimit(cmsCreditRemainingLimit.getRemainingAmount());
                                    nl.setAvaillimitfreq(cmsCreditRemainingLimit.getRemainingFrequency());
                                    nl.setSharedflag("true");
                                    nl.setSharedlimits(new ArrayList<NayaPayLimit>());

                                    for (CMSProductCreditLimit cmsProductCreditLimit : cmsProductCreditLimits) {
                                        nll = new NayaPayLimit();
                                        SwitchTransactionCodes switchTransactionCodes = cmsProductCreditLimit.getTransactionType();
                                        nll.setTransaction(switchTransactionCodes.getServicename());
                                        nll.setAmount(cmsProductCreditLimit.getAmount());
                                        nll.setAvaillimit(cmsProductCreditLimit.getAmount());
                                        nll.setAvaillimitfreq(cmsProductCreditLimit.getFrequencyLength());
                                        nll.setSharedflag("false");
                                        nl.getSharedlimits().add(nll);
                                    }

                                } else {
                                    nl = new NayaPayLimit();
                                    SwitchTransactionCodes switchTransactionCodes = cmsCreditRemainingLimit.getLimitId().getTransactionType();
                                    nl.setTransaction(switchTransactionCodes.getServicename());
                                    nl.setAmount(cmsCreditRemainingLimit.getLimitId().getAmount());
                                    nl.setAvaillimit(cmsCreditRemainingLimit.getRemainingAmount());
                                    nl.setAvaillimitfreq(cmsCreditRemainingLimit.getRemainingFrequency());
                                    nl.setSharedflag("false");
                                }
                                nayaPayLimitList.add(nl);
                                */
                            }
                        }
                    }

                    wsmodel.setNayapaylimits(nayaPayLimitList);

                    if (nayaPayLimitList != null && nayaPayLimitList.size() > 0) {
                        wsmodel.setAcctbalance(StringUtils.leftPad(usernprel.getAccount().getAvailableBalance(), 12, "0"));
                        logger.info("Curr [" + usernprel.getAccount().getCurrency() + "] State [" + usernprel.getAccount().getCategory() + "]");

                        Currency currency = GlobalContext.getInstance().getCurrency(Integer.parseInt(usernprel.getAccount().getCurrency()));
                        if (currency != null) {
                            wsmodel.setAccountcurrency(currency.getName());
                        } else {
                            wsmodel.setAccountcurrency(GlobalContext.getInstance().getBaseCurrency().getName());
                        }
                        //wsmodel.setCurrency(GlobalContext.getInstance().getCurrency(Integer.parseInt(usernprel.getAccount().getCurrency())).getName());

                        wsmodel.setState(usernprel.getAccount().getCategory() + "_" + usernprel.getAccount().getLevel());
                        //wsmodel.setAcctlevel(usernprel.getAccount().getLevel());
                        //wsmodel.setAcctStatus(usernprel.getAccount().getStatus());
                        wsmodel.setStatus(usernprel.getAccount().getStatus());
                        wsmodel.setEnableflag("true"); //Raza CHECK and Update
                        wsmodel.setAccountnumber(usernprel.getAccount().getAccountNumber()); //Raza Setting Account Number for Response -- Middleware 2.0 PIN BLOCK required form Middleware
                        wsmodel.setIban(usernprel.getAccount().getiBan()); // Asim Shahzad, Date : 1st July 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        // Asim Shahzad, Date : 8th Jan 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071
//                            wsmodel.setAtlStatus(usernprel.getAccount().getCustomer().getATLActive());
                        // ========================================================================================================

                        return wsmodel;
                    } else {
                        logger.error("No Wallet Limit record found, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                        return wsmodel;
                    }
                } else if (usernprel != null && (!usernprel.getAccount().getStatus().equals("00") || !usernprel.getAccount().getCustomer().getStatus().equals("00"))) {
                    logger.error("Invalid Account Status found for [" + wsmodel.getAcctid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Account Inactive -- refer to Document
                    return wsmodel;
                } else {
                    logger.error("No Linked Account found for [" + wsmodel.getAcctid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //03 Account Inactive -- refer to Document
                    return wsmodel;
                }
                //}
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetUserWallet..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetUserDebitCard(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetUserDebitCard Request...");

        try {
            String dbQuery;
            Map<String, Object> params;
            CardObject cardObject;
            List<CardObject> cardObjectList;

            // Asim Shahzad, Date : 18th Jan 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 (Release # 2)
//            HardwareSecurityModule hsm = new HardwareSecurityModule();
            // ========================================================================================================

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


            if (usernprel != null) {
                //Change Wallet PIN
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", usernprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                } else {
                    if (usernprel != null && usernprel.getAccount().getStatus().equals("00") && usernprel.getAccount().getCustomer().equals(usernprel.getAccount().getCustomer())) {
                        //Get and Verify Access Token start
                        // Asim Shahzad, Date : 18th Jan 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 (Release # 2)
//                        logger.info("verifying AccessToken...");
//                        dbQuery = "from " + AccessToken.class.getName() + " c where c.userid= :USERID " + " and c.tokenId= :TOKEN " + " and c.isExpired = :ISEXPIRED "  + " and c.expireDate > :EXPIRY ";
//                        params = new HashMap<String, Object>();
//                        params.put("USERID", wsmodel.getUserid());
//                        params.put("TOKEN", wsmodel.getAccesstoken());
//                        params.put("ISEXPIRED", false);
//                        params.put("EXPIRY", Long.parseLong(WebServiceUtil.dateFormat.format(new Date())));
//
//                        AccessToken token = (AccessToken)GeneralDao.Instance.findObject(dbQuery, params);
//
//                        if(token == null)
//                        {
//                            logger.error("No AccessToken found for customer, rejecting...");
//                            wsmodel.setRespcode(ISOResponseCodes.NP_ACCESS_TOKEN_EXPIRED_MISSING); //26-Access Token error Refer to Doc
//                            return wsmodel;
//                        }
//                        logger.info("AccessToken verified OK");
                        //Get and Verify Access Token end
                        // ==============================================================================================================

                        logger.info("Getting User Debit Card...");

                        dbQuery = "from " + CMSCard.class.getName() + " c where c.customer= :custID ";
                        params = new HashMap<String, Object>();
                        params.put("custID", usernprel.getAccount().getCustomer());
                        List<CMSCard> cardList = GeneralDao.Instance.find(dbQuery, params);

                        if (cardList != null && cardList.size() > 0) {
                            cardObjectList = new ArrayList<CardObject>();
                            for (CMSCard cmsCard : cardList) {
                                cardObject = new CardObject();
                                cardObject.setId(cmsCard.getId().toString());
                                cardObject.setCardnumber(cmsCard.getCardNumber());
                                cardObject.setCardexpiry((Util.hasText(cmsCard.getExpiryDate())) ? cmsCard.getExpiryDate().substring(2, 6) : "");
                                cardObject.setCreationdate((Util.hasText(cmsCard.getRequestDate())) ? cmsCard.getRequestDate().substring(0, 8) : "");
                                cardObject.setCardstatus(cmsCard.getCardStatus());
                                cardObject.setCardnumberlastdigits(cmsCard.getCardNoLastDigits());
                                cardObject.setActivationdate((Util.hasText(cmsCard.getActivationDate())) ? cmsCard.getActivationDate().substring(0, 8) : "");
                                cardObject.setNayapaylimits(new ArrayList<NayaPayLimit>());

                                //m.rehman: 30-08-2021, VC-NAP-202108021 - Limit Structure update
                                //commenting below logic and adding update logic for limits
                                /*
                                //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                //updaintg query
                                dbQuery = "from " + CMSDebitRemainingLimit.class.getName() + " c where c.relation= :ACCTNUMBER or c.relation= :CARD_NO ";
                                params = new HashMap<String, Object>();

                                //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                params.put("CARD_NO", cardObject.getCardnumber());
                                params.put("ACCTNUMBER", usernprel.getAccount().getAccountNumber());
                                ////////////////////////////////////////////////////////////////////////////////////////////////

                                List<CMSDebitRemainingLimit> debitRemainingLimits = GeneralDao.Instance.find(dbQuery, params);
                                if (debitRemainingLimits != null && debitRemainingLimits.size() > 0) {
                                    for (CMSDebitRemainingLimit debitRemainingLimit : debitRemainingLimits) {
                                        //m.rehman: 21-01-2020, VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 - VISA (Switch-Middleware Integration document v 4.7.6) - Release 4
                                        //adding conditions for cash withdrawal and ecommerce transaction
                                        if ((debitRemainingLimit.getLimitId().getTransactionType() == null &&
                                                (debitRemainingLimit.getLimitId().getDescription().toUpperCase().contains("ECOMMERCE")))
                                                ||
                                                (debitRemainingLimit.getLimitId().getTransactionType() == null
                                                        && debitRemainingLimit.getLimitId().getDescription().toUpperCase().contains("CASHWITHDRAWALLIMIT"))
                                                ||
                                                (debitRemainingLimit.getLimitId().getTransactionType() == null
                                                        && debitRemainingLimit.getLimitId().getDescription().toUpperCase().contains("GLOBALCARDLIMIT"))
                                                ||
                                                (debitRemainingLimit.getLimitId().getTransactionType() == null
                                                        && debitRemainingLimit.getLimitId().getDescription().toUpperCase().contains("PURCHASELIMIT")))
                                        {

                                            //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                            //if visa virtual card, only show online and global limit
                                            if (cmsCard.getProduct().getProductType().equals("VISA_VIRTUAL")
                                                    &&
                                                    !((debitRemainingLimit.getLimitId().getTransactionType() == null &&
                                                            (debitRemainingLimit.getLimitId().getDescription().toUpperCase().contains("ECOMMERCE")))
                                                            ||
                                                            (debitRemainingLimit.getLimitId().getTransactionType() == null
                                                                    && (debitRemainingLimit.getLimitId().getDescription().toUpperCase().contains("GLOBALCARDLIMIT"))))) {
                                                continue;
                                            }

                                            NayaPayLimit nayaPayLimit = new NayaPayLimit();

                                            //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                            //adding check for transaction description
                                            //nayaPayLimit.setTransaction(debitRemainingLimit.getLimitId().getTransactionType().getTxndesc());
                                            if (Util.hasText(debitRemainingLimit.getLimitId().getDescription())) {
                                                nayaPayLimit.setTransaction(debitRemainingLimit.getLimitId().getDescription());
                                            } else {
                                                nayaPayLimit.setTransaction(debitRemainingLimit.getLimitId().getTransactionType().getTxndesc());
                                            }
                                            /////////////////////////////////////////////////////////////////////////////////////////////////////

                                            // Asim, Logging to be removed
                                            logger.info("Current cycle date : [" + debitRemainingLimit.getCycleEndDate() + "]");
                                            logger.info("Checking for month : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4,6) + "]");
                                            logger.info("Checking for year : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2,4) + "]");
                                            logger.info("Checking for current date : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()) + "]");
                                            // =================================

                                            // Asim Shahzad, Date : 6th Oct 2020, Tracking ID : VC-NAP-202009231
                                            CMSLimitCycleType cmsLimitCycleType = new CMSLimitCycleType(Integer.parseInt(debitRemainingLimit.getLimitId().getCycleLengthType()));

                                            //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                            //Long amount = 0L;
                                            //if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                            //        && debitRemainingLimit.getIndividualLimitId() != null) {
                                            //    amount = Long.parseLong(debitRemainingLimit.getIndividualLimitId().getAmount())
                                            //            - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                            //} else {
                                            //    amount = Long.parseLong(debitRemainingLimit.getLimitId().getAmount())
                                            //            - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                            //}
                                            //nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                            /////////////////////////////////////////////////////////////////////////////////////

                                            if(cmsLimitCycleType.equals(CMSLimitCycleType.DAILY)) {
                                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).equals(debitRemainingLimit.getCycleEndDate())) {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                    //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                                    Long amount = 0L;
                                                    if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                            && debitRemainingLimit.getIndividualLimitId() != null) {
                                                        amount = Long.parseLong(debitRemainingLimit.getIndividualLimitId().getAmount())
                                                                - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                                    } else {
                                                        amount = Long.parseLong(debitRemainingLimit.getLimitId().getAmount())
                                                                - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                                    }
                                                    nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                                    logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                                    /////////////////////////////////////////////////////////////////////////////////////

                                                } else {
                                                    //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                                    if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                            && debitRemainingLimit.getIndividualLimitId() != null) {
                                                        nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                    } else {
                                                        nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                                    }
                                                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                                    //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                                    nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                                    logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                                    /////////////////////////////////////////////////////////////////////////////////////

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                                    logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                                }
                                            }

                                            if(cmsLimitCycleType.equals(CMSLimitCycleType.MONTHLY)) {
                                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6).equals(debitRemainingLimit.getCycleEndDate().substring(4, 6))) {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                    //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                                    Long amount = 0L;
                                                    if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                            && debitRemainingLimit.getIndividualLimitId() != null) {
                                                        amount = Long.parseLong(debitRemainingLimit.getIndividualLimitId().getAmount())
                                                                - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                                    } else {
                                                        amount = Long.parseLong(debitRemainingLimit.getLimitId().getAmount())
                                                                - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                                    }
                                                    nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                                    logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                                    /////////////////////////////////////////////////////////////////////////////////////

                                                } else {
                                                    //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                                    if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                            && debitRemainingLimit.getIndividualLimitId() != null) {
                                                        nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                    } else {
                                                        nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                                    }

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                                    logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                    //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                                    nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                                    logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                                    /////////////////////////////////////////////////////////////////////////////////////
                                                }
                                            }

                                            if(cmsLimitCycleType.equals(CMSLimitCycleType.YEARLY)) {
                                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4).equals(debitRemainingLimit.getCycleEndDate().substring(2, 4))) {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                    //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                                    Long amount = 0L;
                                                    if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                            && debitRemainingLimit.getIndividualLimitId() != null) {
                                                        amount = Long.parseLong(debitRemainingLimit.getIndividualLimitId().getAmount())
                                                                - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                                    } else {
                                                        amount = Long.parseLong(debitRemainingLimit.getLimitId().getAmount())
                                                                - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                                    }
                                                    nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                                    logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                                    /////////////////////////////////////////////////////////////////////////////////////
                                                } else {
                                                    //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                                    if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                            && debitRemainingLimit.getIndividualLimitId() != null) {
                                                        nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                    } else {
                                                        nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                                    }

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                                    logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                    //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                                    nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                                    logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                                    /////////////////////////////////////////////////////////////////////////////////////
                                                }
                                            }
                                            // ================================================================

                                            //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                            //nayaPayLimit.setAmount(debitRemainingLimit.getTxnAmount());

                                            //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                            if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                && debitRemainingLimit.getIndividualLimitId() != null) {
                                                nayaPayLimit.setCustomlimitflag("true");
                                            } else {
                                                nayaPayLimit.setCustomlimitflag("false");
                                            }
                                            ///////////////////////////////////////////////////////////////////////////////////////////////////////

                                            cardObject.getNayapaylimits().add(nayaPayLimit);
                                        }
                                    }
                                }
                                */

                                dbQuery = "from " + CMSDebitRemainingLimit.class.getName() + " c where (c.relation= :ACCTNUMBER or c.relation= :CARD_NO) and c.limitId.isActive= '1' ";
                                params = new HashMap<String, Object>();

                                params.put("CARD_NO", cardObject.getCardnumber());
                                params.put("ACCTNUMBER", usernprel.getAccount().getAccountNumber());

                                List<CMSDebitRemainingLimit> debitRemainingLimits = GeneralDao.Instance.find(dbQuery, params);
                                if (debitRemainingLimits != null && debitRemainingLimits.size() > 0) {
                                    for (CMSDebitRemainingLimit debitRemainingLimit : debitRemainingLimits) {

                                        NayaPayLimit nayaPayLimit = new NayaPayLimit();

                                        if (Util.hasText(debitRemainingLimit.getLimitId().getDescription())) {
                                            nayaPayLimit.setTransaction(debitRemainingLimit.getLimitId().getDescription());
                                        } else {
                                            nayaPayLimit.setTransaction(debitRemainingLimit.getLimitId().getTransactionType().getTxndesc());
                                        }

                                        logger.info("Current cycle date : [" + debitRemainingLimit.getCycleEndDate() + "]");
                                        logger.info("Checking for month : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6) + "]");
                                        logger.info("Checking for year : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4) + "]");
                                        logger.info("Checking for current date : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()) + "]");

                                        CMSLimitCycleType cmsLimitCycleType = new CMSLimitCycleType(Integer.parseInt(debitRemainingLimit.getLimitId().getCycleLengthType()));

                                        if (cmsLimitCycleType.equals(CMSLimitCycleType.DAILY)) {
                                            if (WebServiceUtil.limitcycleDateFormat.format(new Date()).equals(debitRemainingLimit.getCycleEndDate())) {
                                                nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                                nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                                logger.info("Executing Daily Limit flow...");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                Long amount = 0L;
                                                if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                        && debitRemainingLimit.getIndividualLimitId() != null) {
                                                    amount = Long.parseLong(debitRemainingLimit.getIndividualLimitId().getAmount())
                                                            - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                                } else {
                                                    amount = Long.parseLong(debitRemainingLimit.getLimitId().getAmount())
                                                            - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                                }
                                                nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                                logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                            } else {
                                                if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                        && debitRemainingLimit.getIndividualLimitId() != null) {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                } else {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                                }

                                                nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                                logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                                logger.info("Executing Daily Limit flow...");
                                                logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                                logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                            }
                                        }

                                        if (cmsLimitCycleType.equals(CMSLimitCycleType.MONTHLY)) {
                                            if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6).equals(debitRemainingLimit.getCycleEndDate().substring(4, 6))) {
                                                nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                                nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                                logger.info("Executing Daily Limit flow...");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                Long amount = 0L;
                                                if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                        && debitRemainingLimit.getIndividualLimitId() != null) {
                                                    amount = Long.parseLong(debitRemainingLimit.getIndividualLimitId().getAmount())
                                                            - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                                } else {
                                                    amount = Long.parseLong(debitRemainingLimit.getLimitId().getAmount())
                                                            - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                                }
                                                nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                                logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                            } else {
                                                if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                        && debitRemainingLimit.getIndividualLimitId() != null) {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                } else {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                                }

                                                logger.info("Executing Daily Limit flow...");
                                                logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                                logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                                logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                            }
                                        }

                                        if (cmsLimitCycleType.equals(CMSLimitCycleType.YEARLY)) {
                                            if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4).equals(debitRemainingLimit.getCycleEndDate().substring(2, 4))) {
                                                nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                                nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                                logger.info("Executing Daily Limit flow...");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                Long amount = 0L;
                                                if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                        && debitRemainingLimit.getIndividualLimitId() != null) {
                                                    amount = Long.parseLong(debitRemainingLimit.getIndividualLimitId().getAmount())
                                                            - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                                } else {
                                                    amount = Long.parseLong(debitRemainingLimit.getLimitId().getAmount())
                                                            - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                                }
                                                nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                                logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                            } else {
                                                //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                                if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                        && debitRemainingLimit.getIndividualLimitId() != null) {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                } else {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                                }

                                                logger.info("Executing Daily Limit flow...");
                                                logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                                logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                                logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                            }
                                        }

                                        if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                && debitRemainingLimit.getIndividualLimitId() != null) {
                                            nayaPayLimit.setCustomlimitflag("true");
                                        } else {
                                            nayaPayLimit.setCustomlimitflag("false");
                                        }

                                        cardObject.getNayapaylimits().add(nayaPayLimit);

                                    }
                                }

                                dbQuery = "from " + CMSCreditRemainingLimit.class.getName() + " c where (c.relation= :ACCTNUMBER or c.relation= :CARD_NO) and c.limitId.isActive='1' ";
                                params = new HashMap<String, Object>();
                                params.put("CARD_NO", cardObject.getCardnumber());
                                params.put("ACCTNUMBER", usernprel.getAccount().getAccountNumber());
                                List<CMSCreditRemainingLimit> cmsCreditRemainingLimits = GeneralDao.Instance.find(dbQuery, params);

                                if (cmsCreditRemainingLimits != null && cmsCreditRemainingLimits.size() > 0) {
                                    for (CMSCreditRemainingLimit cmsCreditRemainingLimit : cmsCreditRemainingLimits) {
                                        if (cmsCreditRemainingLimit.getLimitId().getProductId().equals(usernprel.getAccount().getProduct())) {
                                            NayaPayLimit nayaPayLimit = new NayaPayLimit();

                                            if (Util.hasText(cmsCreditRemainingLimit.getLimitId().getDescription())) {
                                                nayaPayLimit.setTransaction(cmsCreditRemainingLimit.getLimitId().getDescription());
                                            } else {
                                                nayaPayLimit.setTransaction(cmsCreditRemainingLimit.getLimitId().getTransactionType().getTxndesc());
                                            }

                                            logger.info("Current cycle date : [" + cmsCreditRemainingLimit.getCycleEndDate() + "]");
                                            logger.info("Checking for month : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6) + "]");
                                            logger.info("Checking for year : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4) + "]");
                                            logger.info("Checking for current date : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()) + "]");

                                            CMSLimitCycleType cmsLimitCycleType = new CMSLimitCycleType(Integer.parseInt(cmsCreditRemainingLimit.getLimitId().getCycleLengthType()));

                                            if (cmsLimitCycleType.equals(CMSLimitCycleType.DAILY)) {
                                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).equals(cmsCreditRemainingLimit.getCycleEndDate())) {
                                                    nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getRemainingAmount());
                                                    nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getRemainingFrequency());

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                    Long amount = 0L;
                                                    if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                            && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                        amount = Long.parseLong(cmsCreditRemainingLimit.getIndividualLimitId().getAmount())
                                                                - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                                    } else {
                                                        amount = Long.parseLong(cmsCreditRemainingLimit.getLimitId().getAmount())
                                                                - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                                    }
                                                    nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                                    logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                                } else {
                                                    if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                            && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                        nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getIndividualLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                    } else {
                                                        nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getLimitId().getFrequencyLength());
                                                    }

                                                    nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                                    logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Current Debit Limit : [" + cmsCreditRemainingLimit.getId() + "]");
                                                    logger.info("Debit Limit : [" + cmsCreditRemainingLimit.getLimitId().getId() + "]");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                                }
                                            }

                                            if (cmsLimitCycleType.equals(CMSLimitCycleType.MONTHLY)) {
                                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6).equals(cmsCreditRemainingLimit.getCycleEndDate().substring(4, 6))) {
                                                    nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getRemainingAmount());
                                                    nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getRemainingFrequency());

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                    Long amount = 0L;
                                                    if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                            && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                        amount = Long.parseLong(cmsCreditRemainingLimit.getIndividualLimitId().getAmount())
                                                                - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                                    } else {
                                                        amount = Long.parseLong(cmsCreditRemainingLimit.getLimitId().getAmount())
                                                                - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                                    }
                                                    nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                                    logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                                } else {
                                                    if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                            && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                        nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getIndividualLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                    } else {
                                                        nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getLimitId().getFrequencyLength());
                                                    }

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Current Debit Limit : [" + cmsCreditRemainingLimit.getId() + "]");
                                                    logger.info("Debit Limit : [" + cmsCreditRemainingLimit.getLimitId().getId() + "]");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                    nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                                    logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                                }
                                            }

                                            if (cmsLimitCycleType.equals(CMSLimitCycleType.YEARLY)) {
                                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4).equals(cmsCreditRemainingLimit.getCycleEndDate().substring(2, 4))) {
                                                    nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getRemainingAmount());
                                                    nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getRemainingFrequency());

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                    Long amount = 0L;
                                                    if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                            && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                        amount = Long.parseLong(cmsCreditRemainingLimit.getIndividualLimitId().getAmount())
                                                                - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                                    } else {
                                                        amount = Long.parseLong(cmsCreditRemainingLimit.getLimitId().getAmount())
                                                                - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                                    }
                                                    nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                                    logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                                } else {
                                                    //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                                    if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                            && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                        nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getIndividualLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                    } else {
                                                        nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getLimitId().getFrequencyLength());
                                                    }

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Current Debit Limit : [" + cmsCreditRemainingLimit.getId() + "]");
                                                    logger.info("Debit Limit : [" + cmsCreditRemainingLimit.getLimitId().getId() + "]");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                    nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                                    logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                                }
                                            }

                                            if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                    && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                nayaPayLimit.setCustomlimitflag("true");
                                            } else {
                                                nayaPayLimit.setCustomlimitflag("false");
                                            }

                                            cardObject.getNayapaylimits().add(nayaPayLimit);
                                        }
                                    }
                                }
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////


                                // Asim Shahzad, Date : 14th Jan 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 (Release # 1)

                                dbQuery = "from " + CMSCardControlConfig.class.getName() + " c where c.card= :card ";
                                params = new HashMap<String, Object>();
                                params.put("card", cmsCard);
                                CMSCardControlConfig obj_CardControlConfig = (CMSCardControlConfig) GeneralDao.Instance.findObject(dbQuery, params);

                                //m.rehman: 16-02-2021, in case card control not found, set default controls
                                if (obj_CardControlConfig == null) {
                                    obj_CardControlConfig = new CMSCardControlConfig();
                                    obj_CardControlConfig.setOnlineEnabled(true);
                                    obj_CardControlConfig.setNFCEnabled(true);
                                    obj_CardControlConfig.setMagStripeEnabled(true);
                                    obj_CardControlConfig.setInternationalTxnsEnabled(true);
                                    obj_CardControlConfig.setCashWithdrawalEnabled(true);
                                    obj_CardControlConfig.setChipPinEnabled(true);
                                }

                                cardObject.setIsChipPinEnabled((obj_CardControlConfig.getChipPinEnabled() ? "true" : "false"));
                                cardObject.setIsMagStripeEnabled((obj_CardControlConfig.getMagStripeEnabled() ? "true" : "false"));
                                cardObject.setIsCashWithdrawalEnabled((obj_CardControlConfig.getCashWithdrawalEnabled() ? "true" : "false"));
                                cardObject.setIsNFCEnabled((obj_CardControlConfig.getNFCEnabled() ? "true" : "false"));
                                cardObject.setIsOnlineEnabled((obj_CardControlConfig.getOnlineEnabled() ? "true" : "false"));
                                cardObject.setIsInternationalTxnsEnabled((obj_CardControlConfig.getInternationalTxnsEnabled() ? "true" : "false"));

                                // ========================================================================================================

                                // Asim Shahzad, Date : 18th Jan 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 (Release # 2)
//                                String pan = WebServiceUtil.getPANDecryptedValue(cardObject.getCardnumber());
//                                String systemGeneratedCVV2 = hsm.CVVGeneration(cmsCard.getProduct().getProductDetail().getServiceCode(), pan, cmsCard.getExpiryDate(), cmsCard.getProduct().getProductKeys(), false, false);
//
//                                String encrypted_Cvv2 = WebServiceUtil.getPANEncryptedValue(systemGeneratedCVV2);
//                                wsmodel.setCvv2(encrypted_Cvv2);

                                dbQuery = "from " + CMSActivityLog.class.getName() +
                                        " c where c.relation= :CARDNO " +
                                        " order by c.id desc ";
                                params = new HashMap<String, Object>();
                                params.put("CARDNO", cmsCard.getCardNumber());
                                List<CMSActivityLog> cardActivityList = GeneralDao.Instance.find(dbQuery, params);

                                if (cardActivityList != null && cardActivityList.size() > 0) {
                                    cardObject.setLastStatusChangeDate(String.valueOf(cardActivityList.get(0).getActivityDateTime().getDateTimeLong()).substring(0, 8));
                                } else {
                                    logger.error("No card status change activity record found....");
                                }

                                // ========================================================================================================

                                // Asim Shahzad, Date : 4th Feb 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 (Release # 3)

                                if (cmsCard.getProduct().getProductType().equals("CARD_LVL0") || cmsCard.getProduct().getProductType().equals("CARD_LVL1")) {
                                    cardObject.setCardtype("paypak_physical");
                                }
                                if (cmsCard.getProduct().getProductType().equals("VISA_DEBIT")) {
                                    cardObject.setCardtype("visa_physical");
                                }
                                if (cmsCard.getProduct().getProductType().equals("VISA_VIRTUAL")) {
                                    cardObject.setCardtype("visa_virtual");
                                }

                                // ========================================================================================================
                                //Arsalan Akhter, Date: 12_March_2021, Tracking ID: VP-NAP-202103114_VC-NAP-202103114
                                if (cmsCard.getProduct().getProductType().equals("VISA_DEBIT") ||
                                        cmsCard.getProduct().getProductType().equals("CARD_LVL0") ||
                                        cmsCard.getProduct().getProductType().equals("CARD_LVL1")) {
                                    cardObject.setPersonalizationstatus(cmsCard.getIsExported());
                                }
                                //*************************************************************************
                                cardObjectList.add(cardObject);
                            }

                            if (cardObjectList != null && cardObjectList.size() > 0) {
                                wsmodel.setCardobjectlist(cardObjectList);
                            }

                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                            return wsmodel;
                        } else {
                            logger.error("No Card Record found, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //05 Invalid Card refer To Document Update THIS
                            return wsmodel;
                        }
                    } else {
                        logger.error("No Linked Account found for [" + wsmodel.getAcctid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //03 Account Inactive -- refer to Document
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(WebServiceUtil.getStrException(e));
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetUserDebitCard..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetUserLinkedAccountList(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetUserLinkedAccountList Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


            if (usernprel != null) {
                //Change Wallet PIN
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", usernprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                } else {
                    dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
                    params = new HashMap<String, Object>();
                    //m.rehman: setting user id
                    //params.put("USERID", wsmodel.getAcctid());
                    params.put("USERID", wsmodel.getUserid());

                    NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


                    if (nprel != null && nprel.getAccount().getStatus().equals("00") && usernprel.getAccount().getCustomer().equals(nprel.getAccount().getCustomer())) {
                        //Get and Verify Access Token start
                        logger.info("verifying AccessToken...");
                        dbQuery = "from " + AccessToken.class.getName() + " c where c.userid= :USERID " + " and c.tokenId= :TOKEN " + " and c.isExpired = :ISEXPIRED " + " and c.expireDate > :EXPIRY ";
                        params = new HashMap<String, Object>();
                        params.put("USERID", wsmodel.getUserid());
                        params.put("TOKEN", wsmodel.getAccesstoken());
                        params.put("ISEXPIRED", false);
                        params.put("EXPIRY", Long.parseLong(WebServiceUtil.dateFormat.format(new Date())));

                        AccessToken token = (AccessToken) GeneralDao.Instance.findObject(dbQuery, params);

                        if (token == null) {
                            logger.error("No AccessToken found for customer, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_ACCESS_TOKEN_EXPIRED_MISSING); //26-Invalid/Expired Token Refer to Doc
                            return wsmodel;
                        }
                        logger.info("AccessToken verified OK");
                        //Get and Verify Access Token end


                        logger.info("Getting User Linked Accounts...");

                        dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID ";
                        params = new HashMap<String, Object>();
                        params.put("USERID", wsmodel.getUserid());
                        List<CMSAccount> accountList = GeneralDao.Instance.find(dbQuery, params);

                        if (accountList != null && accountList.size() > 0) {
                            List<NayaPayLinkedAccount> linkedAccounts = new ArrayList<NayaPayLinkedAccount>();

                            for (CMSAccount acct : accountList) {
                                if (acct.getCategory().equals(AccType.CAT_LINKED.StringValue()) && acct.getStatus().equals("00")) //Raza adding 23-06-2019 on NayaPay Request
                                {
                                    NayaPayLinkedAccount npla = new NayaPayLinkedAccount();
                                    npla.setAccountid(acct.getAcctId());
                                    npla.setBankcode(GlobalContext.getInstance().getBankCodeByBin(acct.getBranchId())); //acct.getBranchId());
                                    npla.setAccountnumber(acct.getAccountNumber().substring(acct.getAccountNumber().length() - 4, acct.getAccountNumber().length()));
                                    npla.setAlias(acct.getAcctalias());

                                    Currency currency = GlobalContext.getInstance().getCurrency(Integer.parseInt(acct.getCurrency()));
                                    if (currency != null) {
                                        npla.setCurrency(currency.getName());
                                    } else {
                                        npla.setCurrency(GlobalContext.getInstance().getBaseCurrency().getName());
                                    }
                                    //npla.setCurrency(GlobalContext.getInstance().getCurrency(Integer.parseInt(acct.getCurrency())).getName());

                                    npla.setPrimary(acct.getIsprimary());
                                    npla.setState(acct.getCategory() + "_" + acct.getLevel());
                                    npla.setCreationtime(WebServiceUtil.dateFormat.format(acct.getCreateDate()));
                                    linkedAccounts.add(npla);
                                }
                            }
                            wsmodel.setLinkedaccounts(linkedAccounts);
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                            return wsmodel;
                        } else {
                            logger.error("No Account Record found, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //02 Invalid Account -- refer to Document
                            return wsmodel;
                        }
                    } else {
                        logger.error("No Linked Account found for [" + wsmodel.getAcctid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //03 Account Inactive -- refer to Document
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetUserLinkedAccountList..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetUserLinkedAccountListWithoutToken(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetUserLinkedAccountListWithoutToken Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


            if (usernprel != null) {
                //Change Wallet PIN
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", usernprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                } else {
                    dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
                    params = new HashMap<String, Object>();
                    //m.rehman: setting user id
                    //params.put("USERID", wsmodel.getAcctid());
                    params.put("USERID", wsmodel.getUserid());

                    NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


                    if (nprel != null && nprel.getAccount().getStatus().equals("00") && usernprel.getAccount().getCustomer().equals(nprel.getAccount().getCustomer())) {
                        logger.info("Getting User Linked Accounts...");

                        dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID ";
                        params = new HashMap<String, Object>();
                        params.put("USERID", wsmodel.getUserid());
                        List<CMSAccount> accountList = GeneralDao.Instance.find(dbQuery, params);

                        if (accountList != null && accountList.size() > 0) {
                            List<NayaPayLinkedAccount> linkedAccounts = new ArrayList<NayaPayLinkedAccount>();

                            for (CMSAccount acct : accountList) {
                                if (acct.getCategory().equals(AccType.CAT_LINKED.StringValue()) && acct.getStatus().equals("00")) //Raza adding 23-06-2019 on NayaPay Request
                                {
                                    NayaPayLinkedAccount npla = new NayaPayLinkedAccount();
                                    npla.setAccountid(acct.getAcctId());
                                    npla.setBankcode(GlobalContext.getInstance().getBankCodeByBin(acct.getBranchId())); //acct.getBranchId());
                                    npla.setAccountnumber(acct.getAccountNumber().substring(acct.getAccountNumber().length() - 4, acct.getAccountNumber().length()));
                                    npla.setAlias(acct.getAcctalias());

                                    Currency currency = GlobalContext.getInstance().getCurrency(Integer.parseInt(acct.getCurrency()));
                                    if (currency != null) {
                                        npla.setCurrency(currency.getName());
                                    } else {
                                        npla.setCurrency(GlobalContext.getInstance().getBaseCurrency().getName());
                                    }
                                    //npla.setCurrency(GlobalContext.getInstance().getCurrency(Integer.parseInt(acct.getCurrency())).getName());

                                    npla.setPrimary(acct.getIsprimary());
                                    npla.setState(acct.getCategory() + "_" + acct.getLevel());
                                    npla.setCreationtime(WebServiceUtil.dateFormat.format(acct.getCreateDate()));
                                    linkedAccounts.add(npla);
                                }
                            }
                            wsmodel.setLinkedaccounts(linkedAccounts);
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                            return wsmodel;
                        } else {
                            logger.error("No Account Record found, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //02 Invalid Account -- refer to Document
                            return wsmodel;
                        }
                    } else {
                        logger.error("No Linked Account found for [" + wsmodel.getAcctid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //03 Account Inactive -- refer to Document
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetUserLinkedAccountListWithoutToken..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetUserTransaction(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetUserTransaction Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (usernprel != null) {
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", usernprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //93-Customer Relation not Found ; Refer to Doc
                    return wsmodel;
                } else {
                    if (!usernprel.getAccount().getStatus().equals("00") || !usernprel.getAccount().getCustomer().getStatus().equals("00")) {
                        logger.error("Invalid Account or Customer Status, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //03 Account/Customer Inactive ; refer NayaPay Doc
                        return wsmodel;
                    } else {
                        //Get and Verify Access Token start
                        logger.info("verifying AccessToken...");
                        dbQuery = "from " + AccessToken.class.getName() + " c where c.userid= :USERID " + " and c.tokenId= :TOKEN " + " and c.isExpired = :ISEXPIRED " + " and c.expireDate > :EXPIRY ";
                        params = new HashMap<String, Object>();
                        params.put("USERID", wsmodel.getUserid());
                        params.put("TOKEN", wsmodel.getAccesstoken());
                        params.put("ISEXPIRED", false);
                        params.put("EXPIRY", Long.parseLong(WebServiceUtil.dateFormat.format(new Date())));

                        AccessToken token = (AccessToken) GeneralDao.Instance.findObject(dbQuery, params);

                        if (token == null) {
                            logger.error("No AccessToken found for customer, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_ACCESS_TOKEN_EXPIRED_MISSING); //26-Token Expired/not Found Refer to Doc
                            return wsmodel;
                        }
                        logger.info("AccessToken verified OK");
                        //Get and Verify Access Token end

                        //m.rehman: 10-11-2021 - Nayapay Optimization
                        //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                        dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                " (c.userid= :USERID or c.destuserid= :USERID) " +
                                " and c.tranrefnumber = :TRANREF " +
                                " order by c.id desc ";
                        params = new HashMap<String, Object>();
                        params.put("USERID", wsmodel.getUserid());
                        //params.put("TRANREF", wsmodel.getNayapaytxnid());
                        params.put("TRANREF", wsmodel.getOrigdataelement());

                        //m.rehman: 10-11-2021 - Nayapay Optimization
                        //List<MVFinancialLog> tranlist = GeneralDao.Instance.find(dbQuery, params); // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                        List<WalletCMSWsListingEntity> tranlist = GeneralDao.Instance.find(dbQuery, params);

                        TransactionDetail td = new TransactionDetail();
                        if (tranlist != null && tranlist.size() > 0) {
                            /*
                            if(tranlist.size() > 1)
                            {
                                logger.error("Multiple Records Found for TxnId [" + wsmodel.getNayapaytxnid() + "]");
                                wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                                return wsmodel;
                            }
                            */

                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //MVFinancialLog tran = tranlist.get(0); // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            WalletCMSWsListingEntity tran = tranlist.get(0);

                            //TransactionDetail td = new TransactionDetail();
                            td.setTransrefnum(tran.getTranrefnumber());
                            //Arsalan Akhter, Date: 03-Aug-2021, Tikcet: VC-NAP-202107301 (Get Transaction details of a reversal transaction)
                            //td.setNayapaytype(Util.hasText(tran.getNayapaytrantype()) ? tran.getNayapaytrantype() : tran.getServicename());
                            if (tran.getServicename().contains("Reversal")) {
                                td.setNayapaytype(tran.getServicename());
                            } else {
                                td.setNayapaytype(Util.hasText(tran.getNayapaytrantype()) ? tran.getNayapaytrantype() : tran.getServicename());
                            }
                            //========================================================================================
                            //td.setAcctid(tran.getAcctid());
                            td.setAcctalias(tran.getAcctalias());
                            td.setSrcid(tran.getUserid());

                            // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                            if (Util.hasText(tran.getUsername())) {
                                td.setSrcname(tran.getUsername());
                            } else {
                                td.setSrcname(tran.getCustomername());
                            }
                            // =====================================================================================

                            td.setSrcnayapayid(tran.getNayapayid());
                            //td.setDestid(tran.getMerchantid());
                            td.setDestid(tran.getDestuserid());
                            //td.setDestname(tran.getMerchantname());
                            td.setDestname(tran.getDestusername());
                            td.setDestnayapayid(tran.getDestnayapayid());
                            td.setParentid(tran.getParentid());
                            td.setReferencenumber(tran.getReferencenumber());
                            td.setInvoiceid(tran.getInvoiceid());
                            td.setCurrency(tran.getCurrency());

                            //m.rehman: 26-02-2021, Euronet Integration
                            //td.setAmount(tran.getAmounttransaction());
                            td.setAmount((Util.hasText(tran.getCbillamount())) ? tran.getCbillamount() : tran.getAmounttransaction());
                            /////////////////////////////////////////////////////////////////////////////////////////

                            td.setTransdatetime(tran.getTransdatetime());
                            td.setMapid(tran.getMapid());
                            td.setPosinvoiceref(tran.getPosinvoiceref());
                            td.setTerminalid(tran.getTerminalid());
                            td.setAgentid(tran.getAgentid());
                            td.setStan(tran.getStan());
                            td.setDisputeflag(tran.getDisputeflag());
                            td.setSrccharge(tran.getSrcchargeamount());
                            td.setBankcharge(tran.getNayapaycharges());
                            td.setDepositorname(tran.getCustomername());
                            td.setTerminalloc(tran.getTermloc());
                            td.setOriginaltransactionid(tran.getOrigdataelement());

                            // Asim Shahzad, Date : 12th Nov 2020, Tracking ID : VP-NAP-202010271
                            td.setBankimd(tran.getAcqbin());
                            // ==================================================================

                            // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                            if (Util.hasText(tran.getBenebankaccountno())) {
                                // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                //td.setAccountnumber(Util.hasText(tran.getBenebankaccountno()) ? tran.getBenebankaccountno().substring(tran.getBenebankaccountno().length()-4, tran.getBenebankaccountno().length()) : "");
                                td.setAccountnumber(Util.hasText(tran.getBenebankaccountno()) ? tran.getBenebankaccountno() : "");
                                // =====================================================================================
                            } else {
                                // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                //td.setAccountnumber(Util.hasText(tran.getAccountnumber()) ? tran.getAccountnumber().substring(tran.getAccountnumber().length() - 4, tran.getAccountnumber().length()) : "");
                                td.setAccountnumber(Util.hasText(tran.getAccountnumber()) ? tran.getAccountnumber() : "");
                                // =====================================================================================
                            }
                            //==========================================================================

                            // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                            //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                            if (Util.hasText(tran.getCardlastdigits())) {
                                td.setCardlastdigits(tran.getCardlastdigits());
                            }
                            //===============================================================================================================
                            if (Util.hasText(tran.getCardscheme())) {
                                td.setCardscheme(tran.getCardscheme());
                            }
                            if (Util.hasText(tran.getPosentrymode())) {
                                td.setPosentrymode(tran.getPosentrymode());
                            }
                            if (Util.hasText(tran.getCategoryid())) {
                                td.setMerchantcategorycode(tran.getCategoryid());
                            }
                            td.setDestcharge(tran.getDestchargeamount());
                            // =====================================================================================

                            td.setBranchname(tran.getBranchname());
                            //wsmodel.setTransactionDetail(td);
                            //td.setMerchantid(tran.getMerchantid());
                            //td.setMerchantname(tran.getMerchantname());
                            td.setMerchantid(Util.hasText(tran.getMerchantid()) ? tran.getMerchantid() : tran.getBillerid());
                            td.setMerchantname(Util.hasText(tran.getMerchantname()) ? tran.getMerchantname() : tran.getBillername());

                            // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                            if (Util.hasText(tran.getBenebankcode())) {
                                td.setBankcode(tran.getBenebankcode());
                            } else {
                                td.setBankcode(tran.getBankcode());
                            }
                            //==========================================================================

                            td.setDepositslipnumber(tran.getSlipnumber());
                            //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
                            td.setTaxamount(tran.getNayapaytaxamount());
                            td.setOriginalapi(tran.getOriginalapi());

                            // Asim Shahzad, Date : 12th Nov 2020, Tracking ID : VP-NAP-202010271
                            td.setOriginaldatetime(tran.getOrigtransdatetime());
                            td.setOriginaldataelement(tran.getOrigdataelement());
                            // ==================================================================

                            td.setOriginalrrn(tran.getOrigretrefno());
                            td.setOriginalstan(tran.getOrigstan());
                            td.setNpticket(tran.getNpticket());
                            td.setVrolticket(tran.getVrolticket());
                            td.setRefundtype(tran.getReserved());
                            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                            // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103117 / VC-NAP-202103116

                            //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                            //adding check for original channel of dispute transaction
                            if (tran.getChannelid().equals(ChannelCodes.EURONET)
                                    || (Util.hasText(tran.getOrigChannelId()) && tran.getOrigChannelId().equals(ChannelCodes.EURONET))) {
                                td.setAcquiringcurrency(Util.hasText(tran.getTrancurrency()) ? CustomerService.findCurrency(Integer.valueOf(tran.getTrancurrency())).getName() : "");
                                td.setAcquiringamount(Util.hasText(tran.getAmounttransaction()) ? tran.getAmounttransaction() : "");
                                td.setConversionrate(Util.hasText(tran.getSettlementrate()) ? tran.getSettlementrate() : "");

                                //td.setInternationaltransactionflag(Util.hasText(tran.getIsInternationalTxnsEnabled()) ? Boolean.valueOf(tran.getIsInternationalTxnsEnabled()) : false);
                                boolean intlFlag = false;
                                if (Util.hasText(tran.getBranchcode()) &&
                                        (tran.getBranchcode().equals("PSI") || tran.getBranchcode().equals("ESI") || tran.getBranchcode().equals("ATM"))) {
                                    intlFlag = true;
                                }
                                td.setInternationaltransactionflag(intlFlag);

                                //td.setTotalamount((Util.hasText(tran.getCbillamount()) && Util.hasText(tran.getSrcchargeamount())) ? String.valueOf(Long.parseLong(tran.getCbillamount()) + Long.parseLong(tran.getSrcchargeamount())) : "");
                                Long totalAmount = (Util.hasText(tran.getCbillamount())) ? Long.parseLong(tran.getCbillamount()) : 0L;
                                if (Util.hasText(tran.getSrcchargeamount())) {
                                    totalAmount = totalAmount + Long.parseLong(tran.getSrcchargeamount());
                                }
                                if (Util.hasText(tran.getWithholdingtaxamount())) {
                                    totalAmount = totalAmount + Long.parseLong(tran.getWithholdingtaxamount());
                                }
                                //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                //converting to ISO format
                                td.setTotalamount(StringUtils.leftPad(totalAmount.toString(), 12, "0"));

                                td.setBaseamountafterconversion(Util.hasText(tran.getCbillamount()) ? tran.getCbillamount() : "");

                                //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                //converting to ISO format
                                td.setForeigntransactionfee((Util.hasText(tran.getSrcchargeamount()) && Util.hasText(tran.getNayapaytaxamount())) ? StringUtils.leftPad(String.valueOf(Long.parseLong(tran.getSrcchargeamount()) - Long.parseLong(tran.getNayapaytaxamount())), 12, "0") : "");

                                td.setTaxappliedonforeigntransactionfee(Util.hasText(tran.getNayapaytaxamount()) ? tran.getNayapaytaxamount() : "");
                                td.setWithholdingtax(Util.hasText(tran.getWithholdingtaxamount()) ? tran.getWithholdingtaxamount() : "");
                            }

                            // =======================================================================================

                            //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                            td.setJustification(tran.getJustification());
                            //////////////////////////////////////////////////////////////////////////////////////////////////

                            // Asim Shahzad, Date : 25th May 2021, Tracking ID : VP-NAP-202105212 / VC-NAP-202105211

                            if (tran.getServicename().equals("WithHoldingTax")) {
                                td.setAmount(tran.getAmounttransaction());
                                td.setOriginaltxnamount(Util.hasText(tran.getCbillamount()) ? tran.getCbillamount() : "");

                                Long amtTran = Long.parseLong(tran.getAmounttransaction());
                                Long cBillAmt = Long.parseLong(td.getOriginaltxnamount());
                                double withHoldingTaxPercentage = Math.round((double) amtTran / (double) cBillAmt * 100);

                                td.setWithholdingtaxpercentage(String.valueOf(withHoldingTaxPercentage));
                            }

                            // =====================================================================================

                            // Asim Shahzad, Date : 29th June 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                            if (Util.hasText(tran.getIban())) {
                                td.setIban(tran.getIban());
                            }
                            // ======================================================================================

                            // Asim Shahzad, Date : 1st Sep 2021, Tracking ID : VC-NAP-202108271
                            if (Util.hasText(tran.getAmountFCY())) {
                                td.setAmountFCY(tran.getAmountFCY());
                            }

                            if (Util.hasText(tran.getCurrencyFCY())) {
                                td.setCurrencyFCY(tran.getCurrencyFCY());
                            }

                            if (Util.hasText(tran.getExchangeRate())) {
                                td.setExchangeRate(tran.getExchangeRate());
                            }
                            // =================================================================

                            //Arsalan Akhter, Date: 09-Sept-2021, Ticket: VC-NAP-202108231(Complete transaction details missing in dispute refund transaction)
                            if (tran.getServicename().equals("DisputeRefundTransaction")) {
                                td.setOrigamount(Util.hasText(tran.getReserved3()) ? tran.getReserved3() : "");
                            }
                            //==================================================================================================================

                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        } else {
                            logger.error("No Transaction found for UserId [" + wsmodel.getUserid() + "], rejecting..");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //30 - Original Transaction not found
                            //return wsmodel;
                        }

                        //wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        wsmodel.setTransactionDetail(td);
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetUserTransaction..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetUserTransactionforChat(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetUserTransactionforChat Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (usernprel != null) {
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", usernprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //93-Customer Relation not Found ; Refer to Doc
                    return wsmodel;
                } else {
                    if (!usernprel.getAccount().getStatus().equals("00") || !usernprel.getAccount().getCustomer().getStatus().equals("00")) {
                        logger.error("Invalid Account or Customer Status, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //03 Account/Customer Inactive ; refer NayaPay Doc
                        return wsmodel;
                    } else {

                        //m.rehman: 10-11-2021 - Nayapay Optimization
                        //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                        dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                " (c.userid= :USERID or c.destuserid= :USERID) " +
                                " and c.tranrefnumber = :TRANREF " +
                                " order by c.id desc ";
                        params = new HashMap<String, Object>();
                        params.put("USERID", wsmodel.getUserid());
                        //params.put("TRANREF", wsmodel.getNayapaytxnid());
                        params.put("TRANREF", wsmodel.getOrigdataelement());

                        //m.rehman: 10-11-2021 - Nayapay Optimization
                        //List<MVFinancialLog> tranlist = GeneralDao.Instance.find(dbQuery, params); // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                        List<WalletCMSWsListingEntity> tranlist = GeneralDao.Instance.find(dbQuery, params);

                        TransactionDetail td = new TransactionDetail();
                        if (tranlist != null && tranlist.size() > 0) {
                            /*
                            if(tranlist.size() > 1)
                            {
                                logger.error("Multiple Records Found for TxnId [" + wsmodel.getNayapaytxnid() + "]");
                                wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                                return wsmodel;
                            }
                            */

                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //MVFinancialLog tran = tranlist.get(0); // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            WalletCMSWsListingEntity tran = tranlist.get(0);
                            //TransactionDetail td = new TransactionDetail();
                            td.setTransrefnum(tran.getTranrefnumber());
                            //Arsalan Akhter, Date: 03-Aug-2021, Tikcet: VC-NAP-202107301 (Get Transaction details of a reversal transaction)
                            //td.setNayapaytype(Util.hasText(tran.getNayapaytrantype()) ? tran.getNayapaytrantype() : tran.getServicename());
                            if (tran.getServicename().contains("Reversal")) {
                                td.setNayapaytype(tran.getServicename());
                            } else {
                                td.setNayapaytype(Util.hasText(tran.getNayapaytrantype()) ? tran.getNayapaytrantype() : tran.getServicename());
                            }
                            //========================================================================================
                            //td.setAcctid(tran.getAcctid());
                            td.setAcctalias(tran.getAcctalias());
                            td.setSrcid(tran.getUserid());

                            // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                            if (Util.hasText(tran.getUsername())) {
                                td.setSrcname(tran.getUsername());
                            } else {
                                td.setSrcname(tran.getCustomername());
                            }
                            // =====================================================================================

                            td.setSrcnayapayid(tran.getNayapayid());
                            //td.setDestid(tran.getMerchantid());
                            td.setDestid(tran.getDestuserid());
                            //td.setDestname(tran.getMerchantname());
                            td.setDestname(tran.getDestusername());
                            td.setDestnayapayid(tran.getDestnayapayid());
                            td.setParentid(tran.getParentid());
                            td.setReferencenumber(tran.getReferencenumber());
                            td.setInvoiceid(tran.getInvoiceid());
                            td.setCurrency(tran.getCurrency());

                            //m.rehman: 26-02-2021, Euronet Integration
                            //td.setAmount(tran.getAmounttransaction());
                            td.setAmount((Util.hasText(tran.getCbillamount())) ? tran.getCbillamount() : tran.getAmounttransaction());
                            ///////////////////////////////////////////////////////////////////////////////////////

                            td.setTransdatetime(tran.getTransdatetime());
                            td.setMapid(tran.getMapid());
                            td.setPosinvoiceref(tran.getPosinvoiceref());
                            td.setTerminalid(tran.getTerminalid());
                            td.setAgentid(tran.getAgentid());
                            td.setStan(tran.getStan());
                            td.setDisputeflag(tran.getDisputeflag());
                            td.setSrccharge(tran.getSrcchargeamount());
                            td.setBankcharge(tran.getNayapaycharges());
                            td.setDepositorname(tran.getCustomername());
                            td.setTerminalloc(tran.getTermloc());
                            td.setOriginaltransactionid(tran.getOrigdataelement());

                            // Asim Shahzad, Date : 12th Nov 2020, Tracking ID : VP-NAP-202010271
                            td.setBankimd(tran.getAcqbin());
                            // ==================================================================

                            // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                            if (Util.hasText(tran.getBenebankcode())) {
                                td.setBankcode(tran.getBenebankcode());
                            } else {
                                td.setBankcode(tran.getBankcode());
                            }

                            if (Util.hasText(tran.getBenebankaccountno())) {
                                // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
//                                td.setAccountnumber(Util.hasText(tran.getBenebankaccountno()) ? tran.getBenebankaccountno().substring(tran.getBenebankaccountno().length()-4, tran.getBenebankaccountno().length()) : "");
                                td.setAccountnumber(Util.hasText(tran.getBenebankaccountno()) ? tran.getBenebankaccountno() : "");
                                // =====================================================================================
                            } else {
                                // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
//                                td.setAccountnumber(Util.hasText(tran.getAccountnumber()) ? tran.getAccountnumber().substring(tran.getAccountnumber().length() - 4, tran.getAccountnumber().length()) : "");
                                td.setAccountnumber(Util.hasText(tran.getAccountnumber()) ? tran.getAccountnumber() : "");
                            }
                            //==========================================================================

                            td.setBranchname(tran.getBranchname());
                            //wsmodel.setTransactionDetail(td);
                            //td.setMerchantid(tran.getMerchantid());
                            //td.setMerchantname(tran.getMerchantname());
                            td.setMerchantid(Util.hasText(tran.getMerchantid()) ? tran.getMerchantid() : tran.getBillerid());
                            td.setMerchantname(Util.hasText(tran.getMerchantname()) ? tran.getMerchantname() : tran.getBillername());
                            td.setDepositslipnumber(tran.getSlipnumber());

                            // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                            //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                            if (Util.hasText(tran.getCardlastdigits())) {
                                td.setCardlastdigits(tran.getCardlastdigits());
                            }
                            //===============================================================================================================
                            if (Util.hasText(tran.getCardscheme())) {
                                td.setCardscheme(tran.getCardscheme());
                            }
                            if (Util.hasText(tran.getPosentrymode())) {
                                td.setPosentrymode(tran.getPosentrymode());
                            }
                            if (Util.hasText(tran.getCategoryid())) {
                                td.setMerchantcategorycode(tran.getCategoryid());
                            }
                            td.setDestcharge(tran.getDestchargeamount());
                            // =====================================================================================

                            //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
                            td.setTaxamount(tran.getNayapaytaxamount());
                            td.setOriginalapi(tran.getOriginalapi());

                            // Asim Shahzad, Date : 12th Nov 2020, Tracking ID : VP-NAP-202010271
                            td.setOriginaldatetime(tran.getOrigtransdatetime());
                            td.setOriginaldataelement(tran.getOrigdataelement());
                            // ==================================================================

                            td.setOriginalrrn(tran.getOrigretrefno());
                            td.setOriginalstan(tran.getOrigstan());
                            td.setNpticket(tran.getNpticket());
                            td.setVrolticket(tran.getVrolticket());
                            td.setRefundtype(tran.getReserved());
                            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                            // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103117 / VC-NAP-202103116

                            //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                            //adding check for original channel of dispute transaction
                            if (tran.getChannelid().equals(ChannelCodes.EURONET)
                                    || (Util.hasText(tran.getOrigChannelId()) && tran.getOrigChannelId().equals(ChannelCodes.EURONET))) {
                                td.setAcquiringcurrency(Util.hasText(tran.getTrancurrency()) ? CustomerService.findCurrency(Integer.valueOf(tran.getTrancurrency())).getName() : "");
                                td.setAcquiringamount(Util.hasText(tran.getAmounttransaction()) ? tran.getAmounttransaction() : "");
                                td.setConversionrate(Util.hasText(tran.getSettlementrate()) ? tran.getSettlementrate() : "");

                                //td.setInternationaltransactionflag(Util.hasText(tran.getIsInternationalTxnsEnabled()) ? Boolean.valueOf(tran.getIsInternationalTxnsEnabled()) : false);
                                boolean intlFlag = false;
                                if (Util.hasText(tran.getBranchcode()) &&
                                        (tran.getBranchcode().equals("PSI") || tran.getBranchcode().equals("ESI") || tran.getBranchcode().equals("ATM"))) {
                                    intlFlag = true;
                                }
                                td.setInternationaltransactionflag(intlFlag);

                                //td.setTotalamount((Util.hasText(tran.getCbillamount()) && Util.hasText(tran.getSrcchargeamount())) ? String.valueOf(Long.parseLong(tran.getCbillamount()) + Long.parseLong(tran.getSrcchargeamount())) : "");
                                Long totalAmount = (Util.hasText(tran.getCbillamount())) ? Long.parseLong(tran.getCbillamount()) : 0L;
                                if (Util.hasText(tran.getSrcchargeamount())) {
                                    totalAmount = totalAmount + Long.parseLong(tran.getSrcchargeamount());
                                }
                                if (Util.hasText(tran.getWithholdingtaxamount())) {
                                    totalAmount = totalAmount + Long.parseLong(tran.getWithholdingtaxamount());
                                }
                                //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                //converting to ISO format
                                td.setTotalamount(StringUtils.leftPad(totalAmount.toString(), 12, "0"));

                                td.setBaseamountafterconversion(Util.hasText(tran.getCbillamount()) ? tran.getCbillamount() : "");

                                //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                //converting to ISO format
                                td.setForeigntransactionfee((Util.hasText(tran.getSrcchargeamount()) && Util.hasText(tran.getNayapaytaxamount())) ? StringUtils.leftPad(String.valueOf(Long.parseLong(tran.getSrcchargeamount()) - Long.parseLong(tran.getNayapaytaxamount())), 12, "0") : "");

                                td.setTaxappliedonforeigntransactionfee(Util.hasText(tran.getNayapaytaxamount()) ? tran.getNayapaytaxamount() : "");
                                td.setWithholdingtax(Util.hasText(tran.getWithholdingtaxamount()) ? tran.getWithholdingtaxamount() : "");
                            }

                            // =======================================================================================

                            //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                            td.setJustification(tran.getJustification());
                            //////////////////////////////////////////////////////////////////////////////////////////////////

                            // Asim Shahzad, Date : 25th May 2021, Tracking ID : VP-NAP-202105212 / VC-NAP-202105211

                            if (tran.getServicename().equals("WithHoldingTax")) {
                                td.setAmount(tran.getAmounttransaction());
                                td.setOriginaltxnamount(Util.hasText(tran.getCbillamount()) ? tran.getCbillamount() : "");

                                Long amtTran = Long.parseLong(tran.getAmounttransaction());
                                Long cBillAmt = Long.parseLong(td.getOriginaltxnamount());
                                double withHoldingTaxPercentage = Math.round((double) amtTran / (double) cBillAmt * 100);

                                td.setWithholdingtaxpercentage(String.valueOf(withHoldingTaxPercentage));
                            }

                            // =====================================================================================

                            // Asim Shahzad, Date : 29th June 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                            if (Util.hasText(tran.getIban())) {
                                td.setIban(tran.getIban());
                            }
                            // ======================================================================================

                            // Asim Shahzad, Date : 1st Sep 2021, Tracking ID : VC-NAP-202108271
                            if (Util.hasText(tran.getAmountFCY())) {
                                td.setAmountFCY(tran.getAmountFCY());
                            }

                            if (Util.hasText(tran.getCurrencyFCY())) {
                                td.setCurrencyFCY(tran.getCurrencyFCY());
                            }

                            if (Util.hasText(tran.getExchangeRate())) {
                                td.setExchangeRate(tran.getExchangeRate());
                            }
                            // =================================================================

                            //Arsalan Akhter, Date: 09-Sept-2021, Ticket: VC-NAP-202108231(Complete transaction details missing in dispute refund transaction)
                            if (tran.getServicename().equals("DisputeRefundTransaction")) {
                                td.setOrigamount(Util.hasText(tran.getReserved3()) ? tran.getReserved3() : "");
                            }
                            //==================================================================================================================

                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        } else {
                            logger.error("No Transaction found for UserId [" + wsmodel.getUserid() + "], rejecting..");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //30 - Original Transaction not found
                            //return wsmodel;
                        }

                        //wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        wsmodel.setTransactionDetail(td);
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(WebServiceUtil.getStrException(e));
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetUserTransactionforChat..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetUserTransactionList(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetUserTransactionList Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (usernprel != null) {
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", usernprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                } else {
                    if (!usernprel.getAccount().getStatus().equals("00") || !usernprel.getAccount().getCustomer().getStatus().equals("00")) {
                        logger.error("Invalid Account or Customer Status, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Inactive Account/Customer ; refer NayaPay Doc
                        return wsmodel;
                    } else {
                        /*
                        //Get and Verify Access Token start
                        logger.info("verifying AccessToken...");
                        dbQuery = "from " + AccessToken.class.getName() + " c where c.userid= :USERID " + " and c.tokenId= :TOKEN " + " and c.isExpired = :ISEXPIRED " + " and c.expireDate > :EXPIRY ";
                        params = new HashMap<String, Object>();
                        params.put("USERID", wsmodel.getUserid());
                        params.put("TOKEN", wsmodel.getAccesstoken());
                        params.put("ISEXPIRED", false);
                        params.put("EXPIRY", Long.parseLong(WebServiceUtil.dateFormat.format(new Date())));

                        AccessToken token = (AccessToken)GeneralDao.Instance.findObject(dbQuery, params);

                        if(token == null)
                        {
                            logger.error("No AccessToken found for customer, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //26-Token Expired/not Found Refer to Doc
                            return wsmodel;
                        }
                        logger.info("AccessToken verified OK");
                        //Get and Verify Access Token end
                        */

                        List<UserTransaction> usertxns = new ArrayList<UserTransaction>();

                        //m.rehman: 10-11-2021 - Nayapay Optimization
                        //List<MVFinancialLog> dbtranlist = null; // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                        List<WalletCMSWsListingEntity> dbtranlist = null;

                        if (Util.hasText(wsmodel.getInoutfilter()) && wsmodel.getInoutfilter().equals("in")) {
                            logger.info("Getting User Transaction List from DB for Credit/in Transactions...");

                            //m.rehman: 30-09-2020, VP-NAP-202009241 - Original and Reversed transaction in transaction listing
                            /*
                            dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where " +
                                    " ((c.userid= :USERID and c.servicename in ('LoadWallet','CashDeposit','ReverseEnvelop','ChequeFT','OnelinkTopupBillPayment','IBFTIn','DisputeRefundTransaction')) " +
                                    " or " +
                                    " (c.destuserid= :USERID and c.servicename in ('WalletTransaction'))) " +
                                    " and c.tranrefnumber != :TXN_REF_NUM " +
                                    " and c.respcode = :RESPCODE ";
                            params = new HashMap<String, Object>();
                            params.put("USERID", wsmodel.getUserid());
                            params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                            params.put("RESPCODE", "00");

                            if (Util.hasText(wsmodel.getTypefilter())) {
                                dbQuery += " and c.servicename = :TRNTYPE ";
                                params.put("TRNTYPE", wsmodel.getTypefilter());
                            }

                            if (Util.hasText(wsmodel.getSearchtext())) {
                                dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                        " or c.nayapayid like :SEARCH_TEXT " +
                                        " or c.destnayapayid like :SEARCH_TEXT " +
                                        " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                                params.put("SEARCH_TEXT", wsmodel.getSearchtext());
                            }
                            */

                            // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115

                            params = new HashMap<String, Object>();

                            if (wsmodel.getTypefilter() == null) {

                                //m.rehman: 10-11-2021 - Nayapay Optimization
                                //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                                dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                        " ((c.userid= :USERID and c.servicename in ('LoadWallet','CashDeposit','ReverseEnvelop','ChequeFT','OnelinkTopupBillPayment','IBFTIn')) " +
                                        " or " +
                                        //s.mehtab: VP-NAP-202010292/ VC-NAP-202010294 - 29,Oct 2020 - Merchant Refund Transactions in customer listing
                                        //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2 - adding open debit credit
                                        " (c.destuserid= :USERID and c.servicename in ('WalletTransaction','MerchantRefundTransaction','DisputeRefundTransaction','OpenDebitCredit')) " +
                                        " or " +
                                        //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(out orignalapi interchanged with in originalapi)
                                        //m.rehman: 26-07-2021, VC-NAP-202107261 - Reverse transaction when 0120 message received from Visa
                                        //adding STIP
                                        " (c.userid= :USERID and c.originalapi in ('UnloadWallet','WalletTransaction','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','CNICBasedCashWithdrawal','IBFT','BalanceInquiry','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund','STIP')) " +
                                        //=============================================================================================================
                                        " or " +
                                        //s.mehtab: VP-NAP-202010292/ VC-NAP-202010294 - 29,Oct 2020 - Merchant Refund Transactions in customer listing
                                        " (c.destuserid= :USERID and c.originalapi in ('WalletTransaction','MerchantRefundTransaction','DisputeRefundTransaction'))) ";
                            } else {

                                //m.rehman: 10-11-2021 - Nayapay Optimization
                                //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                                dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                        " ((c.userid= :USERID and c.servicename in (:TRNTYPE)) " +
                                        " or " +
                                        //s.mehtab: VP-NAP-202010292/ VC-NAP-202010294 - 29,Oct 2020 - Merchant Refund Transactions in customer listing
                                        " (c.destuserid= :USERID and c.servicename in (:TRNTYPE)) " +
                                        " or " +
                                        " (c.userid= :USERID and c.originalapi in (:TRNTYPE)) " +
                                        " or " +
                                        //s.mehtab: VP-NAP-202010292/ VC-NAP-202010294 - 29,Oct 2020 - Merchant Refund Transactions in customer listing
                                        " (c.destuserid= :USERID and c.originalapi in (:TRNTYPE))) ";
                                params.put("TRNTYPE", wsmodel.getTypefilter());
                            }

                            dbQuery += " and c.tranrefnumber != :TXN_REF_NUM " +
                                    " and c.respcode in (:RESPCODE) ";
                            // =======================================================================================

                            params.put("USERID", wsmodel.getUserid());
                            params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());

                            List<String> respcode = new ArrayList<>();
                            respcode.add("00");
                            respcode.add("36");
                            params.put("RESPCODE", respcode);

                            // Asim Shahzad, Date : 17th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115
//                            if (Util.hasText(wsmodel.getTypefilter())) {
//                                dbQuery += " and c.servicename = :TRNTYPE ";
//                                params.put("TRNTYPE", wsmodel.getTypefilter());
//                            }
//                            if (wsmodel.getTypefilter() != null) {
//                                dbQuery += " and c.servicename in (:TRNTYPE) ";
//                                params.put("TRNTYPE", wsmodel.getTypefilter());
//                            }
                            // =======================================================================================

                            if (Util.hasText(wsmodel.getSearchtext())) {
                                dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                        " or c.nayapayid like :SEARCH_TEXT " +
                                        " or c.destnayapayid like :SEARCH_TEXT " +
                                        " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                                params.put("SEARCH_TEXT", "%" + wsmodel.getSearchtext() + "%");
                            }
                            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                            // Asim Shahzad, Date : 16th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115
                            if (Util.hasText(wsmodel.getFromdatetime()) && Util.hasText(wsmodel.getTodatetime())) {
                                dbQuery += " and substr(c.transdatetime,0,8) between :FROM_DATE and :TO_DATE";
                                params.put("FROM_DATE", new SimpleDateFormat("yyyyMMdd").format(new SimpleDateFormat("dd-MM-yyyy").parse(wsmodel.getFromdatetime())));
                                params.put("TO_DATE", new SimpleDateFormat("yyyyMMdd").format(new SimpleDateFormat("dd-MM-yyyy").parse(wsmodel.getTodatetime())));
                            }
                            // =======================================================================================

                            //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(Change transdatetime to id)
                            //Arsalan Akhter, Date: 10-Aug-2021, Ticket: VC-NAP-202108101-Transactions order issue in Listing Calls
                            dbQuery += " order by c.transdatetime desc, c.id desc ";

                            String query = "select count(*) " + dbQuery;
                            Long size = (Long) GeneralDao.Instance.findObject(query, params);
                            wsmodel.setTotalcount(size + "");
                            logger.info("Total Count [" + size + "]");


                            //Arsalan Akhter, Date: 04-Oct-2021, Ticket: VC-NAP-202110012(Issue in TotalAmountSpent and TotalAmountReceived parameters due to pagination)
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //List<MVFinancialLog> dbtranlist1 = null; // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            List<WalletCMSWsListingEntity> dbtranlist1 = null;

                            Query query2 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                            query2.setProperties(params);
                            dbtranlist1 = query2.list();

                            if (dbtranlist1 != null && dbtranlist1.size() > 0) {
                                Long totalAmount = 0L;

                                //m.rehman: 10-11-2021 - Nayapay Optimization
                                //for (MVFinancialLog txn1 : dbtranlist1) { // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                                for (WalletCMSWsListingEntity txn1 : dbtranlist1) {
                                    try {
                                        // Asim Shahzad, Date : 16th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115
                                        logger.info("Calculating amount received...");
                                        if (Util.hasText(wsmodel.getFromdatetime()) && Util.hasText(wsmodel.getTodatetime())) {
                                            Long receivedAmount = (Util.hasText(wsmodel.getTotalamountreceived()) ? Long.parseLong(wsmodel.getTotalamountreceived()) : 0L);
                                            logger.info("receivedAmount : [" + receivedAmount + "]");
                                            receivedAmount = receivedAmount + ((Util.hasText(txn1.getCbillamount())) ? Long.parseLong(txn1.getCbillamount()) : ((Util.hasText(txn1.getAmounttransaction())) ? Long.parseLong(txn1.getAmounttransaction()) : 0L));
                                            receivedAmount = receivedAmount + ((Util.hasText(txn1.getSrcchargeamount())) ? Long.parseLong(txn1.getSrcchargeamount()) : 0L);
                                            receivedAmount = receivedAmount + ((Util.hasText(txn1.getWithholdingtaxamount())) ? Long.parseLong(txn1.getWithholdingtaxamount()) : 0L);
                                            wsmodel.setTotalamountreceived(String.valueOf(receivedAmount));

                                            logger.info("Calculated totalamountreceived : [" + wsmodel.getTotalamountreceived() + "]");
                                        }
                                        // =======================================================================================
                                    } catch (Exception e) {
                                        logger.error(e);//s.mehtab on 25-11-2020
                                        logger.error("Unable to Add Txn [" + txn1.getServicename() + "] TxnRefNum [" + txn1.getTranrefnumber() + "] to List Reason [" + e.getMessage() + "]");
                                    }
                                }
                                // wsmodel.setTotalamountspent(StringUtils.leftPad(totalAmount.toString(), 12, "0"));
                            } else {
                                logger.error("No Transaction found in DB for Src UserId [" + wsmodel.getUserid() + "]");
                            }
                            //================================================================================================================================================


                            logger.info("Page Count [" + wsmodel.getPagecount() + "] Page Size [" + wsmodel.getPagesize() + "]");
                            Integer pageCount = Integer.parseInt(wsmodel.getPagecount());
                            Integer pageSize = Integer.parseInt(wsmodel.getPagesize());
                            logger.info("Converted Page Count [" + pageCount + "] Converted Page Size [" + pageSize + "]");
                            Integer startPosition = (pageCount * pageSize) - pageSize;
                            logger.info("Start Position [" + startPosition + "]");
                            Query query1 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                            query1.setProperties(params);
                            query1.setFirstResult(startPosition);
                            query1.setMaxResults(pageSize);

                            dbtranlist = query1.list(); //GeneralDao.Instance.find(dbQuery, params);
                            usertxns = new ArrayList<UserTransaction>();

                            if (dbtranlist != null && dbtranlist.size() > 0) {
                                logger.info("Transaction records found in db for UserId as Src, processing...");

                                //m.rehman: 10-11-2021 - Nayapay Optimization
                                //for (MVFinancialLog txn : dbtranlist) { // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                                for (WalletCMSWsListingEntity txn : dbtranlist) {
                                    logger.info("Service Name from DB [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "]");
                                    try {
                                        SwitchTransactionCodes switchTransactionCodes = GlobalContext.getInstance().getTransactionCodeDescbyCode(txn.getServicename());
                                        if (switchTransactionCodes != null && switchTransactionCodes.getIsfinancial()) {
                                            //if (!txn.getTranrefnumber().equals(wsmodel.getTranrefnumber())) { //&& txn.getRespcode().equals("00")) {
                                            UserTransaction utxn = new UserTransaction();
                                            utxn.setTransrefnum(txn.getTranrefnumber());

                                            //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                            //utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                            //m.rehman: 08-10-2020, VP-NAP-202010081/ VC-NAP-202010081 - Deployment 08-10-2020
                                            //utxn.setNayapaytype(txn.getServicename());
                                            if (txn.getServicename().contains("Reversal")) {
                                                utxn.setNayapaytype(txn.getServicename());
                                            } else {
                                                utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                            }
                                            //////////////////////////////////////////////////////////////////////////

                                            utxn.setAcctalias(txn.getAcctalias());

                                            // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                            if (Util.hasText(txn.getUsername())) {
                                                utxn.setSrcname(txn.getUsername());
                                            } else {
                                                utxn.setSrcname(txn.getCustomername());
                                            }
                                            // =====================================================================================

                                            utxn.setSrcnayapayid(txn.getNayapayid());
                                            utxn.setDestname(txn.getDestusername());
                                            utxn.setDestnayapayid(txn.getDestnayapayid());
                                            utxn.setCurrency(txn.getCurrency());

                                            //m.rehman: 26-02-2021, Euronet Integration
                                            //utxn.setAmount(txn.getAmounttransaction());
                                            utxn.setAmount((Util.hasText(txn.getCbillamount())) ? txn.getCbillamount() : txn.getAmounttransaction());
                                            /////////////////////////////////////////////////////////////////////////////////////////

                                            utxn.setTransdatetime(txn.getTransdatetime());

                                            // Asim Shahzad, Date : 13th Aug 2020, Call ID : VC-NAP-202008121 - Transaction Listing for IBFT
                                            if (Util.hasText(txn.getBenebankcode())) {
                                                utxn.setBankcode(txn.getBenebankcode());
                                            } else {
                                                utxn.setBankcode(txn.getBankcode());
                                            }
                                            //==========================================================================

                                            // Asim Shahzad, Date : 13th Aug 2020, Call ID : VC-NAP-202008121 - Transaction Listing for IBFT
                                            if (Util.hasText(txn.getBenebankaccountno())) {
                                                // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                                //utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno().substring(txn.getBenebankaccountno().length()-4, txn.getBenebankaccountno().length()) : "");
                                                utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno() : "");
                                                // ======================================================================================
                                            } else {
                                                // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                                //utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber().substring(txn.getAccountnumber().length() - 4, txn.getAccountnumber().length()) : "");
                                                utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber() : "");
                                                // =====================================================================================
                                            }
                                            //==========================================================================

                                            utxn.setBranchname(txn.getBranchname());
                                            utxn.setSrcid(txn.getUserid());
                                            utxn.setDestid(txn.getDestuserid());
                                            utxn.setTerminalloc(txn.getTermloc());
                                            utxn.setMapid(txn.getMapid());
                                            utxn.setMerchantid(Util.hasText(txn.getMerchantid()) ? txn.getMerchantid() : txn.getBillerid());
                                            utxn.setMerchantname(Util.hasText(txn.getMerchantname()) ? txn.getMerchantname() : txn.getBillername());
                                            utxn.setDepositorname(txn.getCustomername());
                                            utxn.setBankcharge(txn.getNayapaycharges());

                                            // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                            if (Util.hasText(txn.getSlipnumber())) {
                                                utxn.setDepositorslipnumber(txn.getSlipnumber());
                                            }
                                            //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                                            if (Util.hasText(txn.getCardlastdigits())) {
                                                utxn.setCardlastdigits(txn.getCardlastdigits());
                                            }
                                            //===============================================================================================================
                                            if (Util.hasText(txn.getCardscheme())) {
                                                utxn.setCardscheme(txn.getCardscheme());
                                            }
                                            if (Util.hasText(txn.getPosentrymode())) {
                                                utxn.setPosentrymode(txn.getPosentrymode());
                                            }
                                            if (Util.hasText(txn.getTerminalid())) {
                                                utxn.setTerminalid(txn.getTerminalid());
                                            }
                                            if (Util.hasText(txn.getCategoryid())) {
                                                utxn.setMerchantcategorycode(txn.getCategoryid());
                                            }
                                            utxn.setSrccharge(txn.getSrcchargeamount());
                                            utxn.setDestcharge(txn.getDestchargeamount());
                                            // =====================================================================================

                                            //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
                                            utxn.setTaxamount(txn.getNayapaytaxamount());
                                            utxn.setOriginalapi(txn.getOriginalapi());
                                            utxn.setOriginaldatetime(txn.getOrigtransdatetime());

                                            // Asim Shahzad, Date : 12th Nov 2020, Tracking ID : VP-NAP-202010271
                                            utxn.setBankimd(txn.getAcqbin());
                                            utxn.setOrigdataelement(txn.getOrigdataelement());
                                            // ==================================================================

                                            utxn.setOriginalrrn(txn.getOrigretrefno());
                                            utxn.setOriginalstan(txn.getOrigstan());
                                            utxn.setNpticket(txn.getNpticket());
                                            utxn.setVrolticket(txn.getVrolticket());
                                            utxn.setRefundtype(txn.getReserved());
                                            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                            //Arsalan Akhter, Date: 04-Oct-2021, Ticket: VC-NAP-202110012(Issue in TotalAmountSpent and TotalAmountReceived parameters due to pagination)
//                                            // Asim Shahzad, Date : 16th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115
//
//                                            logger.info("Calculating amount received...");
//                                            if(Util.hasText(wsmodel.getFromdatetime()) && Util.hasText(wsmodel.getTodatetime())) {
//                                                Long receivedAmount = (Util.hasText(wsmodel.getTotalamountreceived()) ? Long.parseLong(wsmodel.getTotalamountreceived()) : 0L);
//                                                logger.info("receivedAmount : [" + receivedAmount + "]");
//                                                receivedAmount = receivedAmount + ((Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : ((Util.hasText(txn.getAmounttransaction())) ? Long.parseLong(txn.getAmounttransaction()) : 0L));
//                                                receivedAmount = receivedAmount + ((Util.hasText(txn.getSrcchargeamount())) ? Long.parseLong(txn.getSrcchargeamount()) : 0L);
//                                                receivedAmount = receivedAmount + ((Util.hasText(txn.getWithholdingtaxamount())) ? Long.parseLong(txn.getWithholdingtaxamount()) : 0L);
//                                                wsmodel.setTotalamountreceived(String.valueOf(receivedAmount));
//
//												logger.info("Calculated totalamountreceived : [" + wsmodel.getTotalamountreceived() + "]");
//                                            }
//
//                                            // =======================================================================================
                                            //================================================================================================================================================

                                            // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103117 / VC-NAP-202103116

                                            //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                            //adding check for original channel of dispute transaction
                                            if (txn.getChannelid().equals(ChannelCodes.EURONET)
                                                    || (Util.hasText(txn.getOrigChannelId()) && txn.getOrigChannelId().equals(ChannelCodes.EURONET))) {
                                                utxn.setAcquiringcurrency(Util.hasText(txn.getTrancurrency()) ? CustomerService.findCurrency(Integer.valueOf(txn.getTrancurrency())).getName() : "");
                                                utxn.setAcquiringamount(Util.hasText(txn.getAmounttransaction()) ? txn.getAmounttransaction() : "");
                                                utxn.setConversionrate(Util.hasText(txn.getSettlementrate()) ? txn.getSettlementrate() : "");

                                                //utxn.setInternationaltransactionflag(Util.hasText(txn.getIsInternationalTxnsEnabled()) ? Boolean.valueOf(txn.getIsInternationalTxnsEnabled()) : false);
                                                boolean intlFlag = false;
                                                if (Util.hasText(txn.getBranchcode()) &&
                                                        (txn.getBranchcode().equals("PSI") || txn.getBranchcode().equals("ESI") || txn.getBranchcode().equals("ATM"))) {
                                                    intlFlag = true;
                                                }
                                                utxn.setInternationaltransactionflag(intlFlag);

                                                //td.setTotalamount((Util.hasText(tran.getCbillamount()) && Util.hasText(tran.getSrcchargeamount())) ? String.valueOf(Long.parseLong(tran.getCbillamount()) + Long.parseLong(tran.getSrcchargeamount())) : "");
                                                Long totalAmount = (Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : 0L;
                                                if (Util.hasText(txn.getSrcchargeamount())) {
                                                    totalAmount = totalAmount + Long.parseLong(txn.getSrcchargeamount());
                                                }
                                                if (Util.hasText(txn.getWithholdingtaxamount())) {
                                                    totalAmount = totalAmount + Long.parseLong(txn.getWithholdingtaxamount());
                                                }
                                                //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                                //converting to ISO format
                                                utxn.setTotalamount(StringUtils.leftPad(totalAmount.toString(), 12, "0"));

                                                utxn.setBaseamountafterconversion(Util.hasText(txn.getCbillamount()) ? txn.getCbillamount() : "");

                                                //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                                //converting to ISO format
                                                utxn.setForeigntransactionfee((Util.hasText(txn.getSrcchargeamount()) && Util.hasText(txn.getNayapaytaxamount())) ? StringUtils.leftPad(String.valueOf(Long.parseLong(txn.getSrcchargeamount()) - Long.parseLong(txn.getNayapaytaxamount())), 12, "0") : "");

                                                utxn.setTaxappliedonforeigntransactionfee(Util.hasText(txn.getNayapaytaxamount()) ? txn.getNayapaytaxamount() : "");
                                                utxn.setWithholdingtax(Util.hasText(txn.getWithholdingtaxamount()) ? txn.getWithholdingtaxamount() : "");
                                            }

                                            // =======================================================================================

                                            //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                                            utxn.setJustification(txn.getJustification());
                                            ///////////////////////////////////////////////////////////////////////////

                                            // Asim Shahzad, Date : 25th May 2021, Tracking ID : VP-NAP-202105212 / VC-NAP-202105211

                                            if (txn.getServicename().equals("WithHoldingTax")) {
                                                utxn.setAmount(txn.getAmounttransaction());
                                                utxn.setOriginaltxnamount(Util.hasText(txn.getCbillamount()) ? txn.getCbillamount() : "");

                                                Long amtTran = Long.parseLong(txn.getAmounttransaction());
                                                Long cBillAmt = Long.parseLong(utxn.getOriginaltxnamount());
                                                double withHoldingTaxPercentage = Math.round((double) amtTran / (double) cBillAmt * 100);

                                                utxn.setWithholdingtaxpercentage(String.valueOf(withHoldingTaxPercentage));
                                            }

                                            // =====================================================================================

                                            // Asim Shahzad, Date : 29th June 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                                            if (Util.hasText(txn.getIban())) {
                                                utxn.setIban(txn.getIban());
                                            }
                                            // ======================================================================================

                                            // Asim Shahzad, Date : 1st Sep 2021, Tracking ID : VC-NAP-202108271
                                            if (Util.hasText(txn.getAmountFCY())) {
                                                utxn.setAmountFCY(txn.getAmountFCY());
                                            }

                                            if (Util.hasText(txn.getCurrencyFCY())) {
                                                utxn.setCurrencyFCY(txn.getCurrencyFCY());
                                            }

                                            if (Util.hasText(txn.getExchangeRate())) {
                                                utxn.setExchangeRate(txn.getExchangeRate());
                                            }
                                            // =================================================================

                                            usertxns.add(utxn);
                                            //}
                                        }
                                    } catch (Exception e) {
                                        logger.error(e);//s.mehtab on 25-11-2020
                                        logger.error("Unable to Add Txn [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "] to List Reason [" + e.getMessage() + "]");
                                    }
                                }
                            } else {
                                logger.error("No Transaction found in DB for Src UserId [" + wsmodel.getUserid() + "]");
                            }

                        } else if (Util.hasText(wsmodel.getInoutfilter()) && wsmodel.getInoutfilter().equals("out")) {
                            logger.info("Getting User Transaction List from DB for Debit/out Transactions...");

                            //m.rehman: 30-09-2020, VP-NAP-202009241 - Original and Reversed transaction in transaction listing
                            /*
                            dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where " +
                                    " c.userid= :USERID " +
                                    " and c.tranrefnumber != :TXN_REF_NUM " +
                                    " and c.servicename in ('UnloadWallet','WalletTransaction','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','CNICBasedCashWithdrawal','IBFT') " +
                                    " and c.respcode = :RESPCODE ";
                            params = new HashMap<String, Object>();
                            params.put("USERID", wsmodel.getUserid());
                            params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                            params.put("RESPCODE", "00");

                            if (Util.hasText(wsmodel.getTypefilter())) {
                                dbQuery += " and c.servicename = :TRNTYPE ";
                                params.put("TRNTYPE", wsmodel.getTypefilter());
                            }

                            if (Util.hasText(wsmodel.getSearchtext())) {
                                dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                        " or c.nayapayid like :SEARCH_TEXT " +
                                        " or c.destnayapayid like :SEARCH_TEXT " +
                                        " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                                params.put("SEARCH_TEXT", wsmodel.getSearchtext());
                            }
                            */

                            // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115

                            params = new HashMap<String, Object>();

                            if (wsmodel.getTypefilter() == null) {
                                //m.rehman: 10-11-2021 - Nayapay Optimization
                                //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                                dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                        " c.userid= :USERID " +
                                        " and c.tranrefnumber != :TXN_REF_NUM " +
                                        " and " +
                                        //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2 - adding OpenDebitCredit
                                        //m.rehman: 07-05-2021, VG-NAP-202104271 / VP-NAP-202104261 / VC-NAP-202104261==>[ Efforts updated ]==> VISA transaction charging update - adding WithHoldingTax, 'ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund'
                                        //m.rehman: 26-07-2021, VC-NAP-202107261 - Reverse transaction when 0120 message received from Visa
                                        //adding STIP
                                        " (c.servicename in ('UnloadWallet','WalletTransaction','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','CNICBasedCashWithdrawal','IBFT','BalanceInquiry','OpenDebitCredit','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund','STIP')" +

                                        //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(out orignalapi interchanged with in originalapi)
                                        //  " or c.originalapi in ('UnloadWallet','WalletTransaction','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','CNICBasedCashWithdrawal','IBFT','BalanceInquiry','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund')) " +
                                        " or c.originalapi in ('LoadWallet','CashDeposit','ReverseEnvelop','ChequeFT','OnelinkTopupBillPayment','IBFTIn')) " +
                                        //=======================================================================================

                                        " and c.respcode in (:RESPCODE) ";
                            } else {
                                //m.rehman: 10-11-2021 - Nayapay Optimization
                                //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                                dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                        " c.userid= :USERID " +
                                        " and c.tranrefnumber != :TXN_REF_NUM " +
                                        " and " +
                                        " (c.servicename in (:TRNTYPE) " +
                                        " or c.originalapi in (:TRNTYPE)) " +
                                        " and c.respcode in (:RESPCODE) ";

                                params.put("TRNTYPE", wsmodel.getTypefilter());
                            }
                            // =======================================================================================

                            params.put("USERID", wsmodel.getUserid());
                            params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());

                            List<String> respcode = new ArrayList<>();
                            respcode.add("00");
                            respcode.add("36");
                            params.put("RESPCODE", respcode);

                            // Asim Shahzad, Date : 17th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115
//                            if (Util.hasText(wsmodel.getTypefilter())) {
//                                dbQuery += " and c.servicename = :TRNTYPE ";
//                                params.put("TRNTYPE", wsmodel.getTypefilter());
//                            }
//                            if (wsmodel.getTypefilter() != null) {
//                                dbQuery += " and c.servicename in (:TRNTYPE) ";
//                                params.put("TRNTYPE", wsmodel.getTypefilter());
//                            }
                            // =======================================================================================

                            if (Util.hasText(wsmodel.getSearchtext())) {
                                dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                        " or c.nayapayid like :SEARCH_TEXT " +
                                        " or c.destnayapayid like :SEARCH_TEXT " +
                                        " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                                params.put("SEARCH_TEXT", "%" + wsmodel.getSearchtext() + "%");
                            }
                            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                            // Asim Shahzad, Date : 16th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115
                            if (Util.hasText(wsmodel.getFromdatetime()) && Util.hasText(wsmodel.getTodatetime())) {
                                dbQuery += " and substr(c.transdatetime,0,8) between :FROM_DATE and :TO_DATE";
                                params.put("FROM_DATE", new SimpleDateFormat("yyyyMMdd").format(new SimpleDateFormat("dd-MM-yyyy").parse(wsmodel.getFromdatetime())));
                                params.put("TO_DATE", new SimpleDateFormat("yyyyMMdd").format(new SimpleDateFormat("dd-MM-yyyy").parse(wsmodel.getTodatetime())));
                            }
                            // =======================================================================================

                            //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(Change transdatetime to id)
                            //Arsalan Akhter, Date: 10-Aug-2021, Ticket: VC-NAP-202108101-Transactions order issue in Listing Calls
                            dbQuery += " order by c.transdatetime desc, c.id desc ";

                            String query = "select count(*) " + dbQuery;
                            Long size = (Long) GeneralDao.Instance.findObject(query, params);
                            wsmodel.setTotalcount(size + "");
                            logger.info("Total Count [" + size + "]");


                            //Arsalan Akhter, Date: 04-Oct-2021, Ticket: VC-NAP-202110012(Issue in TotalAmountSpent and TotalAmountReceived parameters due to pagination)
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //List<MVFinancialLog> dbtranlist1 = null;
                            List<WalletCMSWsListingEntity> dbtranlist1 = null;
                            Query query2 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                            query2.setProperties(params);
                            dbtranlist1 = query2.list();

                            if (dbtranlist1 != null && dbtranlist1.size() > 0) {
                                Long totalAmount = 0L;
                                //m.rehman: 10-11-2021 - Nayapay Optimization
                                //for (MVFinancialLog txn1 : dbtranlist1) {
                                for (WalletCMSWsListingEntity txn1 : dbtranlist1) {
                                    try {
                                        // Asim Shahzad, Date : 16th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115
                                        logger.info("Calculating amount spent...");
                                        //if(!txn.getServicename().equals("MerchantBillerCoreTransaction") && !txn.getServicename().equals("MerchantRetailCoreTransaction") && !txn.getServicename().equals("OnelinkBillerCoreTransaction")) {
                                        if (Util.hasText(wsmodel.getFromdatetime()) && Util.hasText(wsmodel.getTodatetime())) {
                                            Long spentAmount = (Util.hasText(wsmodel.getTotalamountspent()) ? Long.parseLong(wsmodel.getTotalamountspent()) : 0L);
                                            logger.info("spentAmount : [" + spentAmount + "]");
                                            spentAmount = spentAmount + ((Util.hasText(txn1.getCbillamount())) ? Long.parseLong(txn1.getCbillamount()) : ((Util.hasText(txn1.getAmounttransaction())) ? Long.parseLong(txn1.getAmounttransaction()) : 0L));
                                            spentAmount = spentAmount + ((Util.hasText(txn1.getSrcchargeamount())) ? Long.parseLong(txn1.getSrcchargeamount()) : 0L);
                                            spentAmount = spentAmount + ((Util.hasText(txn1.getWithholdingtaxamount())) ? Long.parseLong(txn1.getWithholdingtaxamount()) : 0L);
                                            wsmodel.setTotalamountspent(String.valueOf(spentAmount));
                                            logger.info("Calculated totalamountspent : [" + wsmodel.getTotalamountspent() + "]");
                                        }
                                        // =======================================================================================
                                    } catch (Exception e) {
                                        logger.error(e);//s.mehtab on 25-11-2020
                                        logger.error("Unable to Add Txn [" + txn1.getServicename() + "] TxnRefNum [" + txn1.getTranrefnumber() + "] to List Reason [" + e.getMessage() + "]");
                                    }
                                }
                                // wsmodel.setTotalamountspent(StringUtils.leftPad(totalAmount.toString(), 12, "0"));
                            } else {
                                logger.error("No Transaction found in DB for Src UserId [" + wsmodel.getUserid() + "]");
                            }
                            //================================================================================================================================================


                            logger.info("Page Count [" + wsmodel.getPagecount() + "] Page Size [" + wsmodel.getPagesize() + "]");
                            Integer pageCount = Integer.parseInt(wsmodel.getPagecount());
                            Integer pageSize = Integer.parseInt(wsmodel.getPagesize());
                            logger.info("Converted Page Count [" + pageCount + "] Converted Page Size [" + pageSize + "]");
                            Integer startPosition = (pageCount * pageSize) - pageSize;
                            logger.info("Start Position [" + startPosition + "]");
                            Query query1 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                            query1.setProperties(params);
                            query1.setFirstResult(startPosition);
                            query1.setMaxResults(pageSize);

                            dbtranlist = query1.list(); //GeneralDao.Instance.find(dbQuery, params);
                            usertxns = new ArrayList<UserTransaction>();

                            if (dbtranlist != null && dbtranlist.size() > 0) {
                                logger.info("Transaction records found in db for UserId as Src and Dest, processing...");
                                SwitchTransactionCodes switchTransactionCodes;
                                //m.rehman: 10-11-2021 - Nayapay Optimization
                                //for (MVFinancialLog txn : dbtranlist) { // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                                for (WalletCMSWsListingEntity txn : dbtranlist) {

                                    try {
                                        logger.info("Service Name from DB [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "]");

                                        switchTransactionCodes = GlobalContext.getInstance().getTransactionCodeDescbyCode(txn.getServicename());
                                        if (switchTransactionCodes != null && switchTransactionCodes.getIsfinancial()) {
                                            UserTransaction utxn = new UserTransaction();
                                            utxn.setTransrefnum(txn.getTranrefnumber());

                                            //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                            //utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                            //m.rehman: 08-10-2020, VP-NAP-202010081/ VC-NAP-202010081 - Deployment 08-10-2020
                                            //utxn.setNayapaytype(txn.getServicename());
                                            if (txn.getServicename().contains("Reversal")) {
                                                utxn.setNayapaytype(txn.getServicename());
                                            } else {
                                                utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                            }
                                            ////////////////////////////////////////////////////////////////////////////////////////

                                            utxn.setAcctalias(txn.getAcctalias());

                                            // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                            if (Util.hasText(txn.getUsername())) {
                                                utxn.setSrcname(txn.getUsername());
                                            } else {
                                                utxn.setSrcname(txn.getCustomername());
                                            }
                                            // =====================================================================================

                                            utxn.setSrcnayapayid(txn.getNayapayid());
                                            utxn.setDestname(txn.getDestusername());
                                            utxn.setDestnayapayid(txn.getDestnayapayid());
                                            utxn.setCurrency(txn.getCurrency());

                                            //m.rehman: 26-02-2021, Euronet Integration
                                            //utxn.setAmount(txn.getAmounttransaction());
                                            utxn.setAmount((Util.hasText(txn.getCbillamount())) ? txn.getCbillamount() : txn.getAmounttransaction());
                                            /////////////////////////////////////////////////////////////////////////////////////////

                                            utxn.setTransdatetime(txn.getTransdatetime());

                                            // Asim Shahzad, Date : 13th Aug 2020, Call ID : VC-NAP-202008121 - Transaction Listing for IBFT
                                            if (Util.hasText(txn.getBenebankcode())) {
                                                utxn.setBankcode(txn.getBenebankcode());
                                            } else {
                                                utxn.setBankcode(txn.getBankcode());
                                            }
                                            //==========================================================================

                                            // Asim Shahzad, Date : 13th Aug 2020, Call ID : VC-NAP-202008121 - Transaction Listing for IBFT
                                            if (Util.hasText(txn.getBenebankaccountno())) {
                                                utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno().substring(txn.getBenebankaccountno().length() - 4, txn.getBenebankaccountno().length()) : "");
                                            } else {
                                                utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber().substring(txn.getAccountnumber().length() - 4, txn.getAccountnumber().length()) : "");
                                            }
                                            //==========================================================================

                                            utxn.setBranchname(txn.getBranchname());
                                            utxn.setSrcid(txn.getUserid());
                                            utxn.setDestid(txn.getDestuserid());
                                            utxn.setTerminalloc(txn.getTermloc());
                                            utxn.setMapid(txn.getMapid());
                                            utxn.setMerchantid(Util.hasText(txn.getMerchantid()) ? txn.getMerchantid() : txn.getBillerid());
                                            utxn.setMerchantname(Util.hasText(txn.getMerchantname()) ? txn.getMerchantname() : txn.getBillername());
                                            utxn.setDepositorname(txn.getCustomername());
                                            utxn.setBankcharge(txn.getNayapaycharges());

                                            // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                            if (Util.hasText(txn.getSlipnumber())) {
                                                utxn.setDepositorslipnumber(txn.getSlipnumber());
                                            }
                                            //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                                            if (Util.hasText(txn.getCardlastdigits())) {
                                                utxn.setCardlastdigits(txn.getCardlastdigits());
                                            }
                                            //===============================================================================================================
                                            if (Util.hasText(txn.getCardscheme())) {
                                                utxn.setCardscheme(txn.getCardscheme());
                                            }
                                            if (Util.hasText(txn.getPosentrymode())) {
                                                utxn.setPosentrymode(txn.getPosentrymode());
                                            }
                                            if (Util.hasText(txn.getTerminalid())) {
                                                utxn.setTerminalid(txn.getTerminalid());
                                            }
                                            if (Util.hasText(txn.getCategoryid())) {
                                                utxn.setMerchantcategorycode(txn.getCategoryid());
                                            }
                                            utxn.setSrccharge(txn.getSrcchargeamount());
                                            utxn.setDestcharge(txn.getDestchargeamount());
                                            // =====================================================================================

                                            //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
                                            utxn.setTaxamount(txn.getNayapaytaxamount());
                                            utxn.setOriginalapi(txn.getOriginalapi());
                                            utxn.setOriginaldatetime(txn.getOrigtransdatetime());
                                            utxn.setOriginalrrn(txn.getOrigretrefno());
                                            utxn.setOriginalstan(txn.getOrigstan());
                                            utxn.setNpticket(txn.getNpticket());
                                            utxn.setVrolticket(txn.getVrolticket());
                                            utxn.setRefundtype(txn.getReserved());
                                            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                            //Arsalan Akhter, Date: 04-Oct-2021, Ticket: VC-NAP-202110012(Issue in TotalAmountSpent and TotalAmountReceived parameters due to pagination)
//                                            // Asim Shahzad, Date : 16th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115
//
//                                            logger.info("Calculating amount spent...");
//                                            //if(!txn.getServicename().equals("MerchantBillerCoreTransaction") && !txn.getServicename().equals("MerchantRetailCoreTransaction") && !txn.getServicename().equals("OnelinkBillerCoreTransaction")) {
//                                                if (Util.hasText(wsmodel.getFromdatetime()) && Util.hasText(wsmodel.getTodatetime())) {
//                                                    Long spentAmount = (Util.hasText(wsmodel.getTotalamountspent()) ? Long.parseLong(wsmodel.getTotalamountspent()) : 0L);
//                                                    logger.info("spentAmount : [" + spentAmount + "]");
//                                                    spentAmount = spentAmount + ((Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : ((Util.hasText(txn.getAmounttransaction())) ? Long.parseLong(txn.getAmounttransaction()) : 0L));
//                                                    spentAmount = spentAmount + ((Util.hasText(txn.getSrcchargeamount())) ? Long.parseLong(txn.getSrcchargeamount()) : 0L);
//                                                    spentAmount = spentAmount + ((Util.hasText(txn.getWithholdingtaxamount())) ? Long.parseLong(txn.getWithholdingtaxamount()) : 0L);
//                                                    wsmodel.setTotalamountspent(String.valueOf(spentAmount));
//                                                    logger.info("Calculated totalamountspent : [" + wsmodel.getTotalamountspent() + "]");
//                                                }
//                                            //}
//
//                                            // =======================================================================================
                                            //================================================================================================================================================

                                            // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103117 / VC-NAP-202103116

                                            //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                            //adding check for original channel of dispute transaction
                                            if (txn.getChannelid().equals(ChannelCodes.EURONET)
                                                    || (Util.hasText(txn.getOrigChannelId()) && txn.getOrigChannelId().equals(ChannelCodes.EURONET))) {
                                                utxn.setAcquiringcurrency(Util.hasText(txn.getTrancurrency()) ? CustomerService.findCurrency(Integer.valueOf(txn.getTrancurrency())).getName() : "");
                                                utxn.setAcquiringamount(Util.hasText(txn.getAmounttransaction()) ? txn.getAmounttransaction() : "");
                                                utxn.setConversionrate(Util.hasText(txn.getSettlementrate()) ? txn.getSettlementrate() : "");

                                                //utxn.setInternationaltransactionflag(Util.hasText(txn.getIsInternationalTxnsEnabled()) ? Boolean.valueOf(txn.getIsInternationalTxnsEnabled()) : false);
                                                boolean intlFlag = false;
                                                if (Util.hasText(txn.getBranchcode()) &&
                                                        (txn.getBranchcode().equals("PSI") || txn.getBranchcode().equals("ESI") || txn.getBranchcode().equals("ATM"))) {
                                                    intlFlag = true;
                                                }
                                                utxn.setInternationaltransactionflag(intlFlag);

                                                //utxn.setTotalamount((Util.hasText(tran.getCbillamount()) && Util.hasText(tran.getSrcchargeamount())) ? String.valueOf(Long.parseLong(tran.getCbillamount()) + Long.parseLong(tran.getSrcchargeamount())) : "");
                                                Long totalAmount = (Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : 0L;
                                                if (Util.hasText(txn.getSrcchargeamount())) {
                                                    totalAmount = totalAmount + Long.parseLong(txn.getSrcchargeamount());
                                                }
                                                if (Util.hasText(txn.getWithholdingtaxamount())) {
                                                    totalAmount = totalAmount + Long.parseLong(txn.getWithholdingtaxamount());
                                                }
                                                //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                                //converting to ISO format
                                                utxn.setTotalamount(StringUtils.leftPad(totalAmount.toString(), 12, "0"));

                                                utxn.setBaseamountafterconversion(Util.hasText(txn.getCbillamount()) ? txn.getCbillamount() : "");

                                                //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                                //converting to ISO format
                                                utxn.setForeigntransactionfee((Util.hasText(txn.getSrcchargeamount()) && Util.hasText(txn.getNayapaytaxamount())) ? StringUtils.leftPad(String.valueOf(Long.parseLong(txn.getSrcchargeamount()) - Long.parseLong(txn.getNayapaytaxamount())), 12, "0") : "");

                                                utxn.setTaxappliedonforeigntransactionfee(Util.hasText(txn.getNayapaytaxamount()) ? txn.getNayapaytaxamount() : "");
                                                utxn.setWithholdingtax(Util.hasText(txn.getWithholdingtaxamount()) ? txn.getWithholdingtaxamount() : "");
                                            }

                                            // =======================================================================================

                                            //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                                            utxn.setJustification(txn.getJustification());
                                            //////////////////////////////////////////////////////////////////////////////////////

                                            // Asim Shahzad, Date : 29th June 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                                            if (Util.hasText(txn.getIban())) {
                                                utxn.setIban(txn.getIban());
                                            }
                                            // ======================================================================================

                                            // Asim Shahzad, Date : 1st Sep 2021, Tracking ID : VC-NAP-202108271
                                            if (Util.hasText(txn.getAmountFCY())) {
                                                utxn.setAmountFCY(txn.getAmountFCY());
                                            }

                                            if (Util.hasText(txn.getCurrencyFCY())) {
                                                utxn.setCurrencyFCY(txn.getCurrencyFCY());
                                            }

                                            if (Util.hasText(txn.getExchangeRate())) {
                                                utxn.setExchangeRate(txn.getExchangeRate());
                                            }
                                            // =================================================================

                                            usertxns.add(utxn);
                                        }
                                    } catch (Exception e) {
                                        logger.error(e);//s.mehtab on 25-11-2020
                                        logger.error("Unable to Add Txn [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "] to List Reason [" + e.getMessage() + "]");
                                    }
                                }
                            } else {
                                logger.error("No Transaction found in DB for Src UserId [" + wsmodel.getUserid() + "]");
                            }

                        } else {
                            logger.info("Getting User Transaction List from DB for ALL Debit/out&Credit/in Transactions...");
                            /*dbQuery = "from " + WalletCMSWsEntity.class.getName() + " w inner join " + APITranCodeMapper.class.getName() + " a on w.servicename = a.servicename "
                                    + "inner join " + SwitchTransactionCodes.class.getName() + " t on a.trancode = t.txncode " +
                                      " where w.userid= :USERID " + " or w.destuserid= :USERID " + " and w.respcode = :RESPCODE and t.isfinancial = '1'";*/

                            /*
                            logger.info("Page Count [" + wsmodel.getPagecount() + "] Page Size [" + wsmodel.getPagesize() + "]");
                            Integer pageCount = Integer.parseInt(wsmodel.getPagecount());
                            Integer pageSize = Integer.parseInt(wsmodel.getPagesize());
                            logger.info("Converted Page Count [" + pageCount + "] Converted Page Size [" + pageSize + "]");
                            Integer startPosition = (pageCount * pageSize) - pageSize + 1;
                            Integer endPosition = (pageCount * pageSize);
                            logger.info("Start Position [" + startPosition + "] End Position [" + endPosition + "]");

                            dbQuery = "SELECT * FROM (SELECT DISTINCT w.SERVICENAME,w.AMOUNTTRAN,w.ACCT_ALIAS,w.USERID,w.USERNAME,w.NAYAPAYID,w.DESTUSERID,w.DESTUSERNAME,w.DESTNAYAPAYID,w.AGENTID,w.PARENTID,w.SRCAMOUNTCHARGE,w.DESTAMOUNTCHARGE,w.TRANSDATETIME,w.TXNREFNUM,w.RRN,w.ACCTID,w.TRANCURRENCY FROM WSLOG w INNER JOIN TRANSACTIONCODES a on w.servicename = a.SERVICE_NAME  where (w.userid= :USERID  or w.destuserid= :USERID) and w.respcode = :RESPCODE and a.IS_FINANCIAL = '1' and w.TXNREFNUM != :TXN_REF_NUM order by w.transdatetime desc) " +
                                        "where rownum >= " + startPosition + " and rownum <= " + endPosition;

                            params = new HashMap<String, Object>();
                            params.put("USERID", wsmodel.getUserid());
                            params.put("RESPCODE", "00");
                            params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());

                            if (Util.hasText(wsmodel.getTypefilter())) {
                                dbQuery += " and w.servicename = :TRNTYPE ";
                                params.put("TRNTYPE", wsmodel.getTypefilter());
                            }

                            if (Util.hasText(wsmodel.getSearchtext())) {
                                dbQuery += " and (w.customername like :SEARCH_TEXT or w.username like :SEARCH_TEXT " +
                                        " or w.merchantname like :SEARCH_TEXT or w.destusername like :SEARCH_TEXT " +
                                        " or w.billername like :SEARCH_TEXT) ";
                                params.put("SEARCH_TEXT", wsmodel.getSearchtext());
                            }

                            String query =  "SELECT COUNT(*) FROM (SELECT DISTINCT w.SERVICENAME,w.AMOUNTTRAN,w.ACCT_ALIAS,w.USERID,w.USERNAME,w.NAYAPAYID,w.DESTUSERID,w.DESTUSERNAME,w.DESTNAYAPAYID,w.AGENTID,w.PARENTID,w.SRCAMOUNTCHARGE,w.DESTAMOUNTCHARGE,w.TRANSDATETIME,w.TXNREFNUM,w.RRN,w.ACCTID,w.TRANCURRENCY FROM WSLOG w INNER JOIN TRANSACTIONCODES a on w.servicename = a.SERVICE_NAME where (w.userid= :USERID  or w.destuserid= :USERID)  and w.respcode = :RESPCODE and a.IS_FINANCIAL = '1' and w.TXNREFNUM != :TXN_REF_NUM order by w.transdatetime desc) ";
                            //String query =  "SELECT DISTINCT COUNT(*) FROM WSLOG w INNER JOIN api_trancode_mapper a on w.servicename = a.service_name inner join transactioncodes t on a.TRAN_CODE = t.TXN_CODE  where (w.userid= :USERID  or w.destuserid= :USERID)  and w.respcode = :RESPCODE and t.IS_FINANCIAL = '1'"; //"select count(*) " + dbQuery;
                            List<BigDecimal> size = GeneralDao.Instance.executeSqlQuery(query,params);

                            //Long size = (Long)GeneralDao.Instance.findObject(query, params);
                            wsmodel.setTotalcount(size.get(0)+"");
                            logger.info("Total Count [" + size.get(0) + "]");


                            //Query query1 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                            //query1.setProperties(params);
                            //query1.setFirstResult(startPosition);
                            //query1.setMaxResults(pageSize);
                            //dbtranlist = query1.list(); //GeneralDao.Instance.find(dbQuery, params);

                            List<Object[]> dbobjtranlist = GeneralDao.Instance.executeSqlQuery(dbQuery,params);

                            usertxns = new ArrayList<UserTransaction>();

                            if (dbobjtranlist != null && dbobjtranlist.size() > 0) {
                                logger.info("Transaction records found in db for UserId as Src and Dest, processing...");
                                for (int i=0 ; i<dbobjtranlist.size() ; i++) { //Object txn : dbobjtranlist) {

                                    logger.info("Service Name from DB [" + dbobjtranlist.get(i)[0] + "] TxnRefNum [" + dbobjtranlist.get(i)[14] + "]");
                                    try {
                                            //if (!dbobjtranlist.get(i)[14].toString().equals(wsmodel.getTranrefnumber())) { //&& txn.getRespcode().equals("00")) {
                                                logger.info("Getting Approved Financial Transaction..");
                                                UserTransaction utxn = new UserTransaction();
                                                //utxn.setAcctid((dbobjtranlist.get(i)[16] != null) ? dbobjtranlist.get(i)[16]+"" : null);
                                                utxn.setNayapaytype((dbobjtranlist.get(i)[0] != null) ? dbobjtranlist.get(i)[0]+"" : null);
                                                utxn.setAmount((dbobjtranlist.get(i)[1] != null) ? dbobjtranlist.get(i)[1]+"" : null);
                                                utxn.setAcctalias((dbobjtranlist.get(i)[2] != null) ?  dbobjtranlist.get(i)[2]+"" : null);
                                                //utxn.setSrcid((dbobjtranlist.get(i)[3] != null) ? dbobjtranlist.get(i)[3]+"" : null);
                                                utxn.setSrcname((dbobjtranlist.get(i)[4] != null) ? dbobjtranlist.get(i)[4]+"" : null);
                                                utxn.setSrcnayapayid((dbobjtranlist.get(i)[5] != null) ? dbobjtranlist.get(i)[5]+"" : null);
                                                //utxn.setDestid((dbobjtranlist.get(i)[6] != null) ? dbobjtranlist.get(i)[6]+"" : null);
                                                utxn.setDestname((dbobjtranlist.get(i)[7] != null) ? dbobjtranlist.get(i)[7]+"" : null);
                                                utxn.setDestnayapayid((dbobjtranlist.get(i)[8] != null) ? dbobjtranlist.get(i)[8]+"" : null);
                                                //utxn.setDestagentid((dbobjtranlist.get(i)[9] != null) ? dbobjtranlist.get(i)[9]+"" : null);
                                                //utxn.setDestparentid((dbobjtranlist.get(i)[10] != null) ? dbobjtranlist.get(i)[10]+"" : null);
                                                //utxn.setSrccharge((dbobjtranlist.get(i)[11] != null) ? dbobjtranlist.get(i)[11]+"" : null);
                                                //utxn.setDestcharge((dbobjtranlist.get(i)[12] != null) ? dbobjtranlist.get(i)[12]+"" : null);
                                                utxn.setTransdatetime((dbobjtranlist.get(i)[13] != null) ? dbobjtranlist.get(i)[13]+"" : null);
                                                utxn.setTransrefnum((dbobjtranlist.get(i)[14] != null) ? dbobjtranlist.get(i)[14]+"" : null);
                                                //utxn.setBanktxnid((dbobjtranlist.get(i)[15] != null) ? dbobjtranlist.get(i)[15]+"" : null);
                                                utxn.setCurrency((dbobjtranlist.get(i)[17] != null) ? dbobjtranlist.get(i)[17]+"" : null);
                                                usertxns.add(utxn);
                                            //}
                                    }
                                    catch (Exception e)
                                    {
                                            logger.error(e);//s.mehtab on 25-11-2020
                                            logger.error("Unable to Add Txn [" + dbobjtranlist.get(i)[0] + "] TxnRefNum [" + dbobjtranlist.get(i)[14] + "] to List Reason [" + e.getMessage() + "]");
                                    }
                                }
                            } else {
                                logger.error("No Transaction found in DB for Src UserId [" + wsmodel.getUserid() + "]");
                            }
                            */

                            /*
                            dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where " +
                                    " (c.userid= :USERID " +
                                    " or c.destuserid= :USERID) " +
                                    " and c.tranrefnumber != :TXN_REF_NUM " +
                                    " and c.servicename in ('LoadWallet','WalletTransaction','CashDeposit','ReverseEnvelop','ChequeFT','UnloadWallet','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest') " +
                                    " and c.respcode = :RESPCODE ";
                            */

                            //m.rehman: 30-09-2020, VP-NAP-202009241 - Original and Reversed transaction in transaction listing
                            /*
                            dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where " +
                                    //" c.userid= :USERID " +
                                    " ((c.userid= :USERID and c.servicename in ('LoadWallet','WalletTransaction','CashDeposit','ReverseEnvelop','ChequeFT','UnloadWallet','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','OnelinkTopupBillPayment','CNICBasedCashWithdrawal','IBFTIn','IBFT','DisputeRefundTransaction')) " +
                                    " or " +
                                    " (c.destuserid= :USERID and c.servicename in ('WalletTransaction'))) " +
                                    " and c.tranrefnumber != :TXN_REF_NUM " +
                                    " and c.respcode = :RESPCODE ";

                            params = new HashMap<String, Object>();
                            params.put("USERID", wsmodel.getUserid());
                            params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                            params.put("RESPCODE", "00");

                            if (Util.hasText(wsmodel.getTypefilter())) {
                                dbQuery += " and c.servicename = :TRNTYPE ";
                                params.put("TRNTYPE", wsmodel.getTypefilter());
                            }

                            if (Util.hasText(wsmodel.getSearchtext())) {
                                dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                        " or c.nayapayid like :SEARCH_TEXT " +
                                        " or c.destnayapayid like :SEARCH_TEXT " +
                                        " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                                params.put("SEARCH_TEXT", wsmodel.getSearchtext());
                            }
                            */

                            // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115

                            params = new HashMap<String, Object>();

                            if (wsmodel.getTypefilter() == null) {
                                //m.rehman: 10-11-2021 - Nayapay Optimization
                                //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                                dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                        //" c.userid= :USERID " +
                                        //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2 - adding OpenDebitCredit
                                        //m.rehman: 07-05-2021, VG-NAP-202104271 / VP-NAP-202104261 / VC-NAP-202104261==>[ Efforts updated ]==> VISA transaction charging update - adding WithHoldingTax
                                        //m.rehman: 26-07-2021, VC-NAP-202107261 - Reverse transaction when 0120 message received from Visa
                                        //adding STIP
                                        " ((c.userid= :USERID and c.servicename in ('LoadWallet','WalletTransaction','CashDeposit','ReverseEnvelop','ChequeFT','UnloadWallet','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','OnelinkTopupBillPayment','CNICBasedCashWithdrawal','IBFTIn','IBFT','BalanceInquiry','OpenDebitCredit','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund','STIP')) " +
                                        " or " +
                                        //s.mehtab 18/11/2020 deployment 10-11-2020
                                        //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2 - adding OpenDebitCredit
                                        " (c.destuserid= :USERID and c.servicename in ('WalletTransaction','MerchantRefundTransaction','DisputeRefundTransaction','OpenDebitCredit')) " +
                                        " or " +
                                        //m.rehman: 26-07-2021, VC-NAP-202107261 - Reverse transaction when 0120 message received from Visa
                                        //adding STIP
                                        " (c.userid= :USERID and c.originalapi in ('LoadWallet','WalletTransaction','CashDeposit','ReverseEnvelop','ChequeFT','UnloadWallet','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','OnelinkTopupBillPayment','CNICBasedCashWithdrawal','IBFTIn','IBFT','BalanceInquiry','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund','STIP')) " +
                                        " or " +
                                        //s.mehtab 18/11/2020 deployment 10-11-2020
                                        " (c.destuserid= :USERID and c.originalapi in ('WalletTransaction','MerchantRefundTransaction','DisputeRefundTransaction'))) ";

                            } else {
                                //m.rehman: 10-11-2021 - Nayapay Optimization
                                //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                                dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                        //" c.userid= :USERID " +
                                        " ((c.userid= :USERID and c.servicename in (:TRNTYPE)) " +
                                        " or " +
                                        //s.mehtab 18/11/2020 deployment 10-11-2020
                                        " (c.destuserid= :USERID and c.servicename in (:TRNTYPE)) " +
                                        " or " +
                                        " (c.userid= :USERID and c.originalapi in (:TRNTYPE)) " +
                                        " or " +
                                        //s.mehtab 18/11/2020 deployment 10-11-2020
                                        " (c.destuserid= :USERID and c.originalapi in (:TRNTYPE))) ";

                                params.put("TRNTYPE", wsmodel.getTypefilter());
                            }

                            dbQuery += " and c.tranrefnumber != :TXN_REF_NUM " +
                                    " and c.respcode in (:RESPCODE) ";
                            // =======================================================================================

                            params.put("USERID", wsmodel.getUserid());
                            params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());

                            List<String> respcode = new ArrayList<>();
                            respcode.add("00");
                            respcode.add("36");
                            params.put("RESPCODE", respcode);

                            // Asim Shahzad, Date : 17th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115
//                            if (Util.hasText(wsmodel.getTypefilter())) {
//                                dbQuery += " and c.servicename = :TRNTYPE ";
//                                params.put("TRNTYPE", wsmodel.getTypefilter());
//                            }
//                            if (wsmodel.getTypefilter() != null) {
//                                dbQuery += " and c.servicename in (:TRNTYPE) ";
//                                params.put("TRNTYPE", wsmodel.getTypefilter());
//                            }
                            // =======================================================================================

                            if (Util.hasText(wsmodel.getSearchtext())) {
                                dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                        " or c.nayapayid like :SEARCH_TEXT " +
                                        " or c.destnayapayid like :SEARCH_TEXT " +
                                        " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                                params.put("SEARCH_TEXT", "%" + wsmodel.getSearchtext() + "%");
                            }
                            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                            // Asim Shahzad, Date : 17th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115
                            if (Util.hasText(wsmodel.getFromdatetime()) && Util.hasText(wsmodel.getTodatetime())) {
                                dbQuery += " and substr(c.transdatetime,0,8) between :FROM_DATE and :TO_DATE";
                                params.put("FROM_DATE", new SimpleDateFormat("yyyyMMdd").format(new SimpleDateFormat("dd-MM-yyyy").parse(wsmodel.getFromdatetime())));
                                params.put("TO_DATE", new SimpleDateFormat("yyyyMMdd").format(new SimpleDateFormat("dd-MM-yyyy").parse(wsmodel.getTodatetime())));
                            }
                            // =======================================================================================

                            //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(Change transdatetime to id)
                            //Arsalan Akhter, Date: 10-Aug-2021, Ticket: VC-NAP-202108101-Transactions order issue in Listing Calls
                            dbQuery += " order by c.transdatetime desc, c.id desc ";

                            String query = "select count(*) " + dbQuery;
                            Long size = (Long) GeneralDao.Instance.findObject(query, params);
                            wsmodel.setTotalcount(size + "");
                            logger.info("Total Count [" + size + "]");


                            //Arsalan Akhter, Date: 04-Oct-2021, Ticket: VC-NAP-202110012(Issue in TotalAmountSpent and TotalAmountReceived parameters due to pagination)
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //List<MVFinancialLog> dbtranlist1 = null;
                            List<WalletCMSWsListingEntity> dbtranlist1 = null;
                            Query query2 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                            query2.setProperties(params);
                            dbtranlist1 = query2.list();

                            if (dbtranlist1 != null && dbtranlist1.size() > 0) {
                                Long totalAmount = 0L;
                                //m.rehman: 10-11-2021 - Nayapay Optimization
                                //for (MVFinancialLog txn1 : dbtranlist1) {
                                for (WalletCMSWsListingEntity txn1 : dbtranlist1) {
                                    try {
                                        if (
                                                txn1.getServicename().equals("LoadWallet") ||
                                                        txn1.getServicename().equals("CashDeposit") ||
                                                        txn1.getServicename().equals("OnelinkTopupBillPayment") ||
                                                        txn1.getServicename().equals("IBFTIn") ||
                                                        (
                                                                wsmodel.getUserid().equals(txn1.getDestuserid()) &&
                                                                        (
                                                                                txn1.getServicename().equals("WalletTransaction") ||
                                                                                        txn1.getServicename().equals("MerchantRefundTransaction") ||
                                                                                        txn1.getServicename().equals("DisputeRefundTransaction")
                                                                                        || txn1.getServicename().equals("OpenDebitCredit")  //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2 - adding open debit credit
                                                                        )
                                                        )
                                                        ||
                                                        (
                                                                Util.hasText(txn1.getOriginalapi()) &&
                                                                        (txn1.getOriginalapi().equals("WalletTransaction") ||
                                                                                txn1.getOriginalapi().equals("MerchantRefundTransaction") ||
                                                                                txn1.getOriginalapi().equals("DisputeRefundTransaction"))
                                                        )
                                                        ||

                                                        (
                                                                //Arsalan Akhter, Date:05-July-2021, Ticket: VC-NAP-202106141(Reversal amount in receivedAmount)
                                                                Util.hasText(txn1.getServicename()) &&
                                                                        txn1.getServicename().contains("Reversal")
                                                        )
                                            //======================================================================
                                        ) {

                                            logger.info("Calculating amount received...");

                                            if (Util.hasText(wsmodel.getFromdatetime()) && Util.hasText(wsmodel.getTodatetime())) {
                                                Long receivedAmount = (Util.hasText(wsmodel.getTotalamountreceived()) ? Long.parseLong(wsmodel.getTotalamountreceived()) : 0L);
                                                logger.info("receivedAmount : [" + receivedAmount + "]");
                                                receivedAmount = receivedAmount + ((Util.hasText(txn1.getCbillamount())) ? Long.parseLong(txn1.getCbillamount()) : ((Util.hasText(txn1.getAmounttransaction())) ? Long.parseLong(txn1.getAmounttransaction()) : 0L));
                                                receivedAmount = receivedAmount + ((Util.hasText(txn1.getSrcchargeamount())) ? Long.parseLong(txn1.getSrcchargeamount()) : 0L);
                                                receivedAmount = receivedAmount + ((Util.hasText(txn1.getWithholdingtaxamount())) ? Long.parseLong(txn1.getWithholdingtaxamount()) : 0L);
                                                wsmodel.setTotalamountreceived(String.valueOf(receivedAmount));
                                                logger.info("Calculated totalamountreceived : [" + wsmodel.getTotalamountreceived() + "]");
                                            }
                                        } else /*if (
                                                        (
                                                                !txn.getServicename().equals("MerchantBillerCoreTransaction") &&
                                                                !txn.getServicename().equals("MerchantRetailCoreTransaction") &&
                                                                !txn.getServicename().equals("OnelinkBillerCoreTransaction")
                                                        ) ||
                                                        (
                                                                wsmodel.getUserid().equals(txn.getUserid()) &&
                                                                txn.getServicename().equals("WalletTransaction")

                                                        )
                                                    )*/ {

                                            logger.info("Calculating amount spent...");
                                            if (Util.hasText(wsmodel.getFromdatetime()) && Util.hasText(wsmodel.getTodatetime())) {
                                                Long spentAmount = (Util.hasText(wsmodel.getTotalamountspent()) ? Long.parseLong(wsmodel.getTotalamountspent()) : 0L);
                                                logger.info("spentAmount : [" + spentAmount + "]");
                                                spentAmount = spentAmount + ((Util.hasText(txn1.getCbillamount())) ? Long.parseLong(txn1.getCbillamount()) : ((Util.hasText(txn1.getAmounttransaction())) ? Long.parseLong(txn1.getAmounttransaction()) : 0L));
                                                spentAmount = spentAmount + ((Util.hasText(txn1.getSrcchargeamount())) ? Long.parseLong(txn1.getSrcchargeamount()) : 0L);
                                                spentAmount = spentAmount + ((Util.hasText(txn1.getWithholdingtaxamount())) ? Long.parseLong(txn1.getWithholdingtaxamount()) : 0L);
                                                wsmodel.setTotalamountspent(String.valueOf(spentAmount));
                                                logger.info("Calculated totalamountspent : [" + wsmodel.getTotalamountspent() + "]");
                                            }

                                        }

                                        // =======================================================================================
                                    } catch (Exception e) {
                                        logger.error(e);//s.mehtab on 25-11-2020
                                        logger.error("Unable to Add Txn [" + txn1.getServicename() + "] TxnRefNum [" + txn1.getTranrefnumber() + "] to List Reason [" + e.getMessage() + "]");
                                    }
                                }
                                // wsmodel.setTotalamountspent(StringUtils.leftPad(totalAmount.toString(), 12, "0"));
                            } else {
                                logger.error("No Transaction found in DB for Src UserId [" + wsmodel.getUserid() + "]");
                            }
                            //================================================================================================================================================


                            logger.info("Page Count [" + wsmodel.getPagecount() + "] Page Size [" + wsmodel.getPagesize() + "]");
                            Integer pageCount = Integer.parseInt(wsmodel.getPagecount());
                            Integer pageSize = Integer.parseInt(wsmodel.getPagesize());
                            logger.info("Converted Page Count [" + pageCount + "] Converted Page Size [" + pageSize + "]");
                            Integer startPosition = (pageCount * pageSize) - pageSize;
                            logger.info("Start Position [" + startPosition + "]");
                            Query query1 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                            query1.setProperties(params);
                            query1.setFirstResult(startPosition);
                            query1.setMaxResults(pageSize);

                            dbtranlist = query1.list(); //GeneralDao.Instance.find(dbQuery, params);
                            usertxns = new ArrayList<UserTransaction>();

                            if (dbtranlist != null && dbtranlist.size() > 0) {
                                logger.info("Transaction records found in db for UserId as Src, processing...");
                                //m.rehman: 10-11-2021 - Nayapay Optimization
                                //for (MVFinancialLog txn : dbtranlist) { // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                                for (WalletCMSWsListingEntity txn : dbtranlist) {
                                    logger.info("Service Name from DB [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "]");
                                    try {
                                        SwitchTransactionCodes switchTransactionCodes = GlobalContext.getInstance().getTransactionCodeDescbyCode(txn.getServicename());
                                        if (switchTransactionCodes != null && switchTransactionCodes.getIsfinancial()) {
                                            UserTransaction utxn = new UserTransaction();
                                            utxn.setTransrefnum(txn.getTranrefnumber());

                                            //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                            //utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                            //m.rehman: 08-10-2020, VP-NAP-202010081/ VC-NAP-202010081 - Deployment 08-10-2020
                                            //utxn.setNayapaytype(txn.getServicename());
                                            if (txn.getServicename().contains("Reversal")) {
                                                utxn.setNayapaytype(txn.getServicename());
                                            } else {
                                                utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                            }
                                            ////////////////////////////////////////////////////////////////////////////

                                            utxn.setAcctalias(txn.getAcctalias());

                                            // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                            if (Util.hasText(txn.getUsername())) {
                                                utxn.setSrcname(txn.getUsername());
                                            } else {
                                                utxn.setSrcname(txn.getCustomername());
                                            }
                                            // =====================================================================================

                                            utxn.setSrcnayapayid(txn.getNayapayid());
                                            utxn.setDestname(txn.getDestusername());
                                            utxn.setDestnayapayid(txn.getDestnayapayid());
                                            utxn.setCurrency(txn.getCurrency());

                                            //m.rehman: 26-02-2021, Euronet Integration
                                            //utxn.setAmount(txn.getAmounttransaction());
                                            utxn.setAmount((Util.hasText(txn.getCbillamount())) ? txn.getCbillamount() : txn.getAmounttransaction());
                                            /////////////////////////////////////////////////////////////////////////////////////////

                                            utxn.setTransdatetime(txn.getTransdatetime());

                                            // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                            if (Util.hasText(txn.getBenebankcode())) {
                                                utxn.setBankcode(txn.getBenebankcode());
                                            } else {
                                                utxn.setBankcode(txn.getBankcode());
                                            }
                                            //==========================================================================

                                            // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                            if (Util.hasText(txn.getBenebankaccountno())) {
                                                // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                                //utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno().substring(txn.getBenebankaccountno().length()-4, txn.getBenebankaccountno().length()) : "");
                                                utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno() : "");
                                                // =====================================================================================
                                            } else {
                                                // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                                //utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber().substring(txn.getAccountnumber().length() - 4, txn.getAccountnumber().length()) : "");
                                                utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber() : "");
                                                // =====================================================================================
                                            }
                                            //==========================================================================

                                            utxn.setBranchname(txn.getBranchname());
                                            utxn.setSrcid(txn.getUserid());
                                            utxn.setDestid(txn.getDestuserid());
                                            utxn.setTerminalloc(txn.getTermloc());
                                            utxn.setMapid(txn.getMapid());
                                            utxn.setMerchantid(Util.hasText(txn.getMerchantid()) ? txn.getMerchantid() : txn.getBillerid());
                                            utxn.setMerchantname(Util.hasText(txn.getMerchantname()) ? txn.getMerchantname() : txn.getBillername());
                                            utxn.setDepositorname(txn.getCustomername());
                                            utxn.setBankcharge(txn.getNayapaycharges());

                                            // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                            if (Util.hasText(txn.getSlipnumber())) {
                                                utxn.setDepositorslipnumber(txn.getSlipnumber());
                                            }
                                            //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                                            if (Util.hasText(txn.getCardlastdigits())) {
                                                utxn.setCardlastdigits(txn.getCardlastdigits());
                                            }
                                            //===============================================================================================================
                                            if (Util.hasText(txn.getCardscheme())) {
                                                utxn.setCardscheme(txn.getCardscheme());
                                            }
                                            if (Util.hasText(txn.getPosentrymode())) {
                                                utxn.setPosentrymode(txn.getPosentrymode());
                                            }
                                            if (Util.hasText(txn.getTerminalid())) {
                                                utxn.setTerminalid(txn.getTerminalid());
                                            }
                                            if (Util.hasText(txn.getCategoryid())) {
                                                utxn.setMerchantcategorycode(txn.getCategoryid());
                                            }
                                            utxn.setSrccharge(txn.getSrcchargeamount());
                                            utxn.setDestcharge(txn.getDestchargeamount());
                                            // =====================================================================================

                                            //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
                                            utxn.setTaxamount(txn.getNayapaytaxamount());
                                            utxn.setOriginalapi(txn.getOriginalapi());
                                            utxn.setOriginaldatetime(txn.getOrigtransdatetime());
                                            utxn.setOriginalrrn(txn.getOrigretrefno());
                                            utxn.setOriginalstan(txn.getOrigstan());
                                            utxn.setNpticket(txn.getNpticket());
                                            utxn.setVrolticket(txn.getVrolticket());
                                            utxn.setRefundtype(txn.getReserved());
                                            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                            // Asim Shahzad, Date : 17th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115


                                            //Arsalan Akhter, Date: 04-Oct-2021, Ticket: VC-NAP-202110012(Issue in TotalAmountSpent and TotalAmountReceived parameters due to pagination)
//                                            if(
//                                                    txn.getServicename().equals("LoadWallet") ||
//                                                    txn.getServicename().equals("CashDeposit") ||
//                                                    txn.getServicename().equals("OnelinkTopupBillPayment") ||
//                                                    txn.getServicename().equals("IBFTIn") ||
//                                                    (
//                                                            wsmodel.getUserid().equals(txn.getDestuserid()) &&
//                                                            (
//                                                                    txn.getServicename().equals("WalletTransaction") ||
//                                                                    txn.getServicename().equals("MerchantRefundTransaction") ||
//                                                                    txn.getServicename().equals("DisputeRefundTransaction")
//                                                                    || txn.getServicename().equals("OpenDebitCredit")  //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2 - adding open debit credit
//                                                            )
//                                                    )
//                                                    ||
//                                                    (
//                                                            Util.hasText(txn.getOriginalapi()) &&
//                                                                    (txn.getOriginalapi().equals("WalletTransaction") ||
//                                                                            txn.getOriginalapi().equals("MerchantRefundTransaction") ||
//                                                                            txn.getOriginalapi().equals("DisputeRefundTransaction"))
//                                                    )
//                                                    ||
//
//                                                    (
//                                                            //Arsalan Akhter, Date:05-July-2021, Ticket: VC-NAP-202106141(Reversal amount in receivedAmount)
//                                                            Util.hasText(txn.getServicename()) &&
//                                                                    txn.getServicename().contains("Reversal")
//                                                    )
//                                                            //======================================================================
//                                               ) {
//
//                                                logger.info("Calculating amount received...");
//
//                                                if(Util.hasText(wsmodel.getFromdatetime()) && Util.hasText(wsmodel.getTodatetime())) {
//                                                    Long receivedAmount = (Util.hasText(wsmodel.getTotalamountreceived()) ? Long.parseLong(wsmodel.getTotalamountreceived()) : 0L);
//                                                    logger.info("receivedAmount : [" + receivedAmount + "]");
//                                                    receivedAmount = receivedAmount + ((Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : ((Util.hasText(txn.getAmounttransaction())) ? Long.parseLong(txn.getAmounttransaction()) : 0L));
//                                                    receivedAmount = receivedAmount + ((Util.hasText(txn.getSrcchargeamount())) ? Long.parseLong(txn.getSrcchargeamount()) : 0L);
//                                                    receivedAmount = receivedAmount + ((Util.hasText(txn.getWithholdingtaxamount())) ? Long.parseLong(txn.getWithholdingtaxamount()) : 0L);
//                                                    wsmodel.setTotalamountreceived(String.valueOf(receivedAmount));
//                                                    logger.info("Calculated totalamountreceived : [" + wsmodel.getTotalamountreceived() + "]");
//                                                }
//                                            }
//                                            else /*if (
//                                                        (
//                                                                !txn.getServicename().equals("MerchantBillerCoreTransaction") &&
//                                                                !txn.getServicename().equals("MerchantRetailCoreTransaction") &&
//                                                                !txn.getServicename().equals("OnelinkBillerCoreTransaction")
//                                                        ) ||
//                                                        (
//                                                                wsmodel.getUserid().equals(txn.getUserid()) &&
//                                                                txn.getServicename().equals("WalletTransaction")
//
//                                                        )
//                                                    )*/ {
//
//                                                logger.info("Calculating amount spent...");
//                                                if (Util.hasText(wsmodel.getFromdatetime()) && Util.hasText(wsmodel.getTodatetime())) {
//                                                    Long spentAmount = (Util.hasText(wsmodel.getTotalamountspent()) ? Long.parseLong(wsmodel.getTotalamountspent()) : 0L);
//                                                    logger.info("spentAmount : [" + spentAmount + "]");
//                                                    spentAmount = spentAmount + ((Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : ((Util.hasText(txn.getAmounttransaction())) ? Long.parseLong(txn.getAmounttransaction()) : 0L));
//                                                    spentAmount = spentAmount + ((Util.hasText(txn.getSrcchargeamount())) ? Long.parseLong(txn.getSrcchargeamount()) : 0L);
//                                                    spentAmount = spentAmount + ((Util.hasText(txn.getWithholdingtaxamount())) ? Long.parseLong(txn.getWithholdingtaxamount()) : 0L);
//                                                    wsmodel.setTotalamountspent(String.valueOf(spentAmount));
//                                                    logger.info("Calculated totalamountspent : [" + wsmodel.getTotalamountspent() + "]");
//                                                }
//
//                                            }
//
//                                            // =======================================================================================
                                            //================================================================================================================================================

                                            // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103117 / VC-NAP-202103116

                                            //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                            //adding check for original channel of dispute transaction
                                            if (txn.getChannelid().equals(ChannelCodes.EURONET)
                                                    || (Util.hasText(txn.getOrigChannelId()) && txn.getOrigChannelId().equals(ChannelCodes.EURONET))) {
                                                utxn.setAcquiringcurrency(Util.hasText(txn.getTrancurrency()) ? CustomerService.findCurrency(Integer.valueOf(txn.getTrancurrency())).getName() : "");
                                                utxn.setAcquiringamount(Util.hasText(txn.getAmounttransaction()) ? txn.getAmounttransaction() : "");
                                                utxn.setConversionrate(Util.hasText(txn.getSettlementrate()) ? txn.getSettlementrate() : "");

                                                //utxn.setInternationaltransactionflag(Util.hasText(txn.getIsInternationalTxnsEnabled()) ? Boolean.valueOf(txn.getIsInternationalTxnsEnabled()) : false);
                                                boolean intlFlag = false;
                                                if (Util.hasText(txn.getBranchcode()) &&
                                                        (txn.getBranchcode().equals("PSI") || txn.getBranchcode().equals("ESI") || txn.getBranchcode().equals("ATM"))) {
                                                    intlFlag = true;
                                                }
                                                utxn.setInternationaltransactionflag(intlFlag);

                                                //utxn.setTotalamount((Util.hasText(tran.getCbillamount()) && Util.hasText(tran.getSrcchargeamount())) ? String.valueOf(Long.parseLong(tran.getCbillamount()) + Long.parseLong(tran.getSrcchargeamount())) : "");
                                                Long totalAmount = (Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : 0L;
                                                if (Util.hasText(txn.getSrcchargeamount())) {
                                                    totalAmount = totalAmount + Long.parseLong(txn.getSrcchargeamount());
                                                }
                                                if (Util.hasText(txn.getWithholdingtaxamount())) {
                                                    totalAmount = totalAmount + Long.parseLong(txn.getWithholdingtaxamount());
                                                }
                                                //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                                //converting to ISO format
                                                utxn.setTotalamount(StringUtils.leftPad(totalAmount.toString(), 12, "0"));

                                                utxn.setBaseamountafterconversion(Util.hasText(txn.getCbillamount()) ? txn.getCbillamount() : "");

                                                //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                                //converting to ISO format
                                                utxn.setForeigntransactionfee((Util.hasText(txn.getSrcchargeamount()) && Util.hasText(txn.getNayapaytaxamount())) ? StringUtils.leftPad(String.valueOf(Long.parseLong(txn.getSrcchargeamount()) - Long.parseLong(txn.getNayapaytaxamount())), 12, "0") : "");

                                                utxn.setTaxappliedonforeigntransactionfee(Util.hasText(txn.getNayapaytaxamount()) ? txn.getNayapaytaxamount() : "");
                                                utxn.setWithholdingtax(Util.hasText(txn.getWithholdingtaxamount()) ? txn.getWithholdingtaxamount() : "");
                                            }

                                            // =======================================================================================

                                            //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                                            utxn.setJustification(txn.getJustification());
                                            //////////////////////////////////////////////////////////////////////////////////////////////////

                                            // Asim Shahzad, Date : 29th June 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                                            if (Util.hasText(txn.getIban())) {
                                                utxn.setIban(txn.getIban());
                                            }
                                            // ======================================================================================

                                            // Asim Shahzad, Date : 1st Sep 2021, Tracking ID : VC-NAP-202108271
                                            if (Util.hasText(txn.getAmountFCY())) {
                                                utxn.setAmountFCY(txn.getAmountFCY());
                                            }

                                            if (Util.hasText(txn.getCurrencyFCY())) {
                                                utxn.setCurrencyFCY(txn.getCurrencyFCY());
                                            }

                                            if (Util.hasText(txn.getExchangeRate())) {
                                                utxn.setExchangeRate(txn.getExchangeRate());
                                            }
                                            // =================================================================

                                            usertxns.add(utxn);
                                        }
                                    } catch (Exception e) {
                                        logger.error(e);//s.mehtab on 25-11-2020
                                        logger.error("Unable to Add Txn [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "] to List Reason [" + e.getMessage() + "]");
                                    }
                                }
                            } else {
                                logger.error("No Transaction found in DB for Src UserId [" + wsmodel.getUserid() + "]");
                            }
                        }
                        wsmodel.setTotalcount((Util.hasText(wsmodel.getTotalcount())) ? wsmodel.getTotalcount() : "0");
                        wsmodel.setUsertransactions(usertxns);
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetUserTransactionList..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteLoadWalletInquiry(WalletCMSWsEntity wsmodel) {
        logger.info("Executing LoadWalletInquiry Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Added by Mehtab on 25/11/2020 4210119267107 account issue to be closed
            if (Util.hasText(wsmodel.getUserid())) {
                logger.info("User [" + wsmodel.getUserid() + "]");
            } else {
                logger.info("No User id found");
            }


            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID " + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            // Asim Shahzad, Date : 19th Nov 2020, Tracking ID : VP-NAP-202011131 / VC-NAP-202011131 / VG-NAP-202011131
            // Mehtab , Date : 29th Dec 2020
            if (Util.hasText(wsmodel.getNayapaytrantype()) &&
                    (wsmodel.getNayapaytrantype().toLowerCase().equals("MerchantRetailCoreTransaction".toLowerCase()) ||
                            wsmodel.getNayapaytrantype().toLowerCase().equals("MerchantBillerCoreTransaction".toLowerCase()))) {

                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();

                if (Util.hasText(wsmodel.getBillerid())) {
                    params.put("USERID", wsmodel.getBillerid());
                }
                if (Util.hasText(wsmodel.getMerchantid())) {
                    params.put("USERID", wsmodel.getMerchantid());
                }

                params.put("CAT", AccType.CAT_MERCHANT_WALLET.StringValue());

                CMSAccount merchantwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                if (merchantwallet != null) {

                    Long actualbalance = (Util.hasText(merchantwallet.getActualBalance()) ? Long.parseLong(merchantwallet.getActualBalance()) : 0L);
                    Long txnamount = (Util.hasText(wsmodel.getAmounttransaction()) ? Long.parseLong(wsmodel.getAmounttransaction()) : 0L);
                    Long maxlimit = (Util.hasText(wsmodel.getMaxmerchantwalletlimit()) ? Long.parseLong(wsmodel.getMaxmerchantwalletlimit()) : 0L);

                    if ((actualbalance + txnamount) > maxlimit) {
                        logger.error("Destination balance limit breached for merchant wallet, rejecting transaction ...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_DEST_LIMIT_EXCEEDED);
                        return wsmodel;
                    }
                }
            }

            // ========================================================================================================

            if (userwallet != null && userwallet.getStatus().equals("00") && userwallet.getCustomer().getStatus().equals("00")) {
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", userwallet.getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for account [" + userwallet.getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //90-Customer not Found ; Refer to Doc
                    return wsmodel;
                } else {
                    if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                        logger.error("PIN validation failed, rejecting...");
                        //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                        return wsmodel;
                    }

                    //verify maximum balance limit
                    /*if (!WalletCMSFunctions.VerifyMaxBalanceLimit(wsmodel, userwallet))
                    {
                        logger.error("Maximum Balance Limit verification failed, rejecting...");
                        return wsmodel;
                    }

                    //verify wallet limit
                    if (!WalletCMSFunctions.VerifyWalletLimit(wsmodel, userwallet))
                    {
                        logger.error("Limit verification failed, rejecting...");
                        return wsmodel;
                    }*/

                    //m.rehman: 27-08-2021, VC-NAP-202108021 - Limit Structure update
                    //verify limit if reserved flag is true
                    if (Util.hasText(wsmodel.getReserved()) && wsmodel.getReserved().equals("true")) {
                        String serviceName = wsmodel.getServicename();
                        wsmodel.setServicename(wsmodel.getNayapaytrantype());
                        //verify wallet limit
                        if (!WalletCMSFunctions.VerifyWalletLimit(wsmodel, userwallet, null, true)) {
                            wsmodel.setServicename(serviceName);
                            logger.error("Limit verification failed, rejecting...");
                            return wsmodel;
                        }
                        wsmodel.setServicename(serviceName);
                    }
                    ////////////////////////////////////////////////////////////////////////////////////////

                    logger.info("Verifying Linked Account...");
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.acctId = :ACCTID " + " and c.category = :CAT ";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getUserid());
                    params.put("ACCTID", wsmodel.getAcctid());
                    params.put("CAT", AccType.CAT_LINKED.StringValue());

                    CMSAccount linkedaccount = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                    if (linkedaccount != null && linkedaccount.getStatus().equals("00")) {
                        //TODO Verify PIN
                        logger.info("Linked Account Verified OK!");
                        wsmodel.setAccountnumber(linkedaccount.getAccountNumber());
                        wsmodel.setBankcode(linkedaccount.getBranchId());
                        wsmodel.setCnic(linkedaccount.getCustomer().getCnic());
                        wsmodel.setDestaccount(userwallet.getAccountNumber());
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        logger.error("Invalid or No Linked Account found for [" + wsmodel.getAcctid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //02 Invalid Account -- refer to Document
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + "], rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error("Exception caught while Executing LoadWalletInquiry..!");
            logger.error(e);//s.mehtab on 25-11-2020
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteLoadWallet(WalletCMSWsEntity wsmodel) {
        logger.info("Executing LoadWallet Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            //m.rehman: for NayaPay, changing category
            //params.put("CAT", AccType.WALLET.StringValue());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //CMSAccount userwallet = (CMSAccount)GeneralDao.Instance.findObject(dbQuery, params);
            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

            if (userwallet != null && userwallet.getStatus().equals("00") && userwallet.getCustomer().getStatus().equals("00")) {
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", userwallet.getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for account [" + userwallet.getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                } else {
                    // Asim Shahzad, Date : 17th Sep 2020, Tracking ID  : VC-NAP-202009101 / VP-NAP-202009104
                    //if(!WalletCMSFunctions.ValidatePIN(wsmodel,cardrelation))
                    //{
                    //    logger.error("PIN validation failed, rejecting...");
                    //    //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                    //    return wsmodel;
                    //}
                    // ======================================================================================

                    logger.info("Verifying Linked Account...");
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.acctId = :ACCTID " + " and c.category = :CAT ";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getUserid());
                    params.put("ACCTID", wsmodel.getAcctid());
                    params.put("CAT", AccType.CAT_LINKED.StringValue());

                    CMSAccount linkedaccount = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                    if (linkedaccount != null && linkedaccount.getStatus().equals("00")) {
                        ///TODO Verify PIN
                        logger.info("Linked Account Verified OK!, loading wallet...");
                        logger.info("Going to Load Wallet...");

                        //verify maximum balance limit
                        /*if (!WalletCMSFunctions.VerifyMaxBalanceLimit(wsmodel, userwallet))
                        {
                            logger.error("Maximum Balance Limit verification failed, rejecting...");
                            return wsmodel;
                        }*/

                        // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                        //for listing purpose
                        wsmodel.setUsername(linkedaccount.getAccountTitle());
                        wsmodel.setDestusername(userwallet.getAccountTitle());
                        ///////////////////////////////////////////////////////////////////////////////////////////////

                        //process wallet limit
                        if (!WalletCMSFunctions.ProcessCreditWalletLimit(wsmodel, userwallet, null, Boolean.TRUE)) {
                            logger.error("Limit processing failed, rejecting...");
                            return wsmodel;
                        }

                        if (FinanceManager.LoadWallet(wsmodel, userwallet, linkedaccount)) {
                            logger.info("Wallet Loaded successfully!");
                            // Asim Shahzad, Date : 17th Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                            //wsmodel.setAccountnumber(userwallet.getAccountNumber());
                            wsmodel.setAccountnumber(linkedaccount.getAccountNumber());

                            wsmodel.setCnic(linkedaccount.getCustomer().getCnic());

                            // Asim Shahzad, Date : 17th Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                            //wsmodel.setDestaccount(linkedaccount.getAccountNumber());
                            wsmodel.setDestaccount(userwallet.getAccountNumber());

                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                            wsmodel.setIncludeinstatement(1);
                            ////////////////////////////////////////////////////////////////////////////////////////////////////

                            return wsmodel;
                        } else {
                            logger.info("Unable to Load Wallet... **********Manual Process Required!**********");

                            //reversing wallet limit
                            String respCode = wsmodel.getRespcode();
                            logger.info("Reversing Wallet limit ...");
                            if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, userwallet, null, Boolean.FALSE)) {
                                logger.error("Limit processing failed, rejecting...");
                                return wsmodel;
                            }
                            wsmodel.setRespcode(respCode);
                            return wsmodel;
                        }
                    } else {
                        logger.error("Invalid or No Linked Account found for [" + wsmodel.getAcctid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //02 Invalid Account -- refer to Document
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing LoadWallet..!**********Manual Process Required!**********");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    public static WalletCMSWsEntity ExecuteUnLoadWalletInquiry(WalletCMSWsEntity wsmodel) {
        logger.info("Executing UnLoadWalletInquiry Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null && userwallet.getStatus().equals("00") && userwallet.getCustomer().getStatus().equals("00")) {
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", userwallet.getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for account [" + userwallet.getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                } else {
                    if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                        logger.error("PIN validation failed, rejecting...");
                        //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                        return wsmodel;
                    }

                    logger.info("Verifying Linked Account...");
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.acctId = :ACCTID " + " and c.category = :CAT ";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getUserid());
                    params.put("ACCTID", wsmodel.getAcctid());
                    params.put("CAT", AccType.CAT_LINKED.StringValue());

                    CMSAccount linkedaccount = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                    if (linkedaccount != null && linkedaccount.getStatus().equals("00")) {
                        //TODO Verify PIN
                        logger.info("Linked Account Verified OK!");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        wsmodel.setAccountnumber(linkedaccount.getAccountNumber());
                        wsmodel.setBankcode(GlobalContext.getInstance().getBankCodeByBin(linkedaccount.getBranchId()));
                        wsmodel.setCnic(linkedaccount.getCustomer().getCnic());
                        wsmodel.setDestaccount(linkedaccount.getAccountNumber());
                        return wsmodel;
                    } else {
                        logger.error("Invalid or No Linked Account found for [" + wsmodel.getAcctid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //02 Invalid Account -- refer to Document
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error("Exception caught while Executing UnLoadWalletInquiry..!");
            logger.error(e);//s.mehtab on 25-11-2020
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteUnLoadWallet(WalletCMSWsEntity wsmodel) {
        logger.info("Executing UnLoadWallet Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            //m.rehman: for NayaPay, changing category
            //params.put("CAT", AccType.WALLET.StringValue());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //CMSAccount userwallet = (CMSAccount)GeneralDao.Instance.findObject(dbQuery, params);
            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

            if (userwallet != null && userwallet.getStatus().equals("00") && userwallet.getCustomer().getStatus().equals("00")) {
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", userwallet.getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for account [" + userwallet.getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                } else {

                    if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                        logger.error("PIN validation failed, rejecting...");
                        //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                        return wsmodel;
                    }

                    logger.info("Verifying Linked Account...");
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.acctId = :ACCTID " + " and c.category = :CAT ";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getUserid());
                    params.put("ACCTID", wsmodel.getAcctid());
                    params.put("CAT", AccType.CAT_LINKED.StringValue());

                    CMSAccount linkedaccount = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                    if (linkedaccount != null && linkedaccount.getStatus().equals("00")) {
                        //TODO Verify PIN
                        logger.info("Linked Account Verified OK!, unloading wallet...");

                        logger.info("Going to UnLoad Wallet...");

                        // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                        wsmodel.setDestusername(linkedaccount.getAccountTitle());
                        wsmodel.setUsername(userwallet.getAccountTitle());
                        // =====================================================================================

                        //m.rehman: Euronet integration, add local/international flag in charges
                        //getting transaction charges
                        FetchTransactionCharge(wsmodel, userwallet.getProduct(), "0");      //0-false

                        if (FinanceManager.UnLoadWallet(wsmodel, userwallet, linkedaccount)) {
                            logger.info("Wallet UnLoaded successfully!");

                            //process wallet limit
                            logger.info("Reversing Limit");
                            if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, userwallet, null, Boolean.FALSE)) {
                                logger.error("Limit processing failed, rejecting...");
                                return wsmodel;
                            }

                            wsmodel.setAccountnumber(userwallet.getAccountNumber());
                            wsmodel.setCnic(linkedaccount.getCustomer().getCnic());
                            wsmodel.setDestaccount(linkedaccount.getAccountNumber());
                            wsmodel.setBankcode(GlobalContext.getInstance().getBankCodeByBin(linkedaccount.getBranchId()));
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                            wsmodel.setIncludeinstatement(1);
                            ////////////////////////////////////////////////////////////////////////////////////////////////////

                            return wsmodel;
                        } else {
                            logger.info("Unable to UnLoad Wallet... **********Manual Process May be Required!**********");
                            //wsmodel.setRespcode(ISOResponseCodes.INVALID_IMD);
                            return wsmodel;
                        }
                    } else {
                        logger.error("Invalid or No Linked Account found for [" + wsmodel.getAcctid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //02 Invalid Account -- refer to Document
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing UnLoadWallet..!**********Manual Process May be Required!**********");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteWalletTransaction(WalletCMSWsEntity wsmodel) {
        logger.info("Executing WalletTransaction Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            //m.rehman: for NayaPay, changing category
            //params.put("CAT", AccType.WALLET.StringValue());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //CMSAccount userwallet = (CMSAccount)GeneralDao.Instance.findObject(dbQuery, params);
            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

            if (userwallet != null && userwallet.getStatus().equals("00") && userwallet.getCustomer().getStatus().equals("00")) {

                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", userwallet.getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for account [" + userwallet.getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                } else {
                    if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                        logger.error("PIN validation failed, rejecting...");
                        //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                        return wsmodel;
                    }

                    //verify maximum balance limit
                    /*if (!WalletCMSFunctions.VerifyMaxBalanceLimit(wsmodel, userwallet))
                    {
                        logger.error("Maximum Balance Limit verification failed for Source Wallet, rejecting...");
                        return wsmodel;
                    }*/

                    logger.info("Verifying Destination Wallet...");
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getDestuserid());
                    //m.rehman: for NayaPay, changing category
                    //params.put("CAT", AccType.WALLET.StringValue());
                    params.put("CAT", AccType.CAT_WALLET.StringValue());

                    //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                    //CMSAccount destwallet = (CMSAccount)GeneralDao.Instance.findObject(dbQuery, params);
                    CMSAccount destwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                    // Asim Shahzad, Date : 1st Nov 2021, Tracking ID : VC-NAP-202111012 / VG-NAP-202111011
                    if (destwallet != null && (!userwallet.getAccountNumber().equals(destwallet.getAccountNumber()))) { // check if the source and destination wallets are same
                        //if(destwallet != null && destwallet.getStatus().equals("00") && !destwallet.getCategory().equals(AccType.CAT_PROV.StringValue()))
                        if ((Util.hasText(destwallet.getStatus())
                                && !destwallet.getStatus().equals("04")
                                && !destwallet.getStatus().equals("07")
                                && !destwallet.getStatus().equals("09")
                                && !destwallet.getStatus().equals("90"))
                                &&
                                (Util.hasText(destwallet.getCustomer().getStatus())
                                        && !destwallet.getCustomer().getStatus().equals("04")
                                        && !destwallet.getCustomer().getStatus().equals("07")
                                        && !destwallet.getCustomer().getStatus().equals("09")
                                        && !destwallet.getCustomer().getStatus().equals("90"))
                                && !destwallet.getCategory().equals(AccType.CAT_PROV.StringValue())) {
                            logger.info("Destination Wallet Verified OK!, performing WalletTransaction...");

                            //verify maximum balance limit
                        /*if (!WalletCMSFunctions.VerifyMaxBalanceLimit(wsmodel, destwallet))
                        {
                            logger.error("Maximum Balance Limit verification failed for Destination Wallet, rejecting...");
                            return wsmodel;
                        }*/

                            //m.rehman: Euronet integration, add local/international flag in charges
                            //getting transaction charges
                            FetchTransactionCharge(wsmodel, userwallet.getProduct(), "0");      //0-false

                            //process wallet limit
                            if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, userwallet, null, Boolean.TRUE)) {
                                logger.error("Source Wallet Limit processing failed, rejecting...");
                                return wsmodel;
                            }

                            //process wallet limit
                            if (!WalletCMSFunctions.ProcessCreditWalletLimit(wsmodel, destwallet, null, Boolean.TRUE)) {
                                if (Util.hasText(wsmodel.getRespcode()) && wsmodel.getRespcode().equals(ISOResponseCodes.NP_SRC_LIMIT_EXCEEDED)) {
                                    wsmodel.setRespcode(ISOResponseCodes.NP_DEST_LIMIT_EXCEEDED);
                                }

                                logger.error("Destination Wallet Limit processing failed, rejecting...");
                                return wsmodel;
                            }

                            logger.info("Going to process Wallet Transaction...");

                            if (FinanceManager.WalletTransaction(wsmodel, userwallet, destwallet)) {
                                logger.info("Wallet Transaction processed successfully!");
                                //for transaction details
                                wsmodel.setUsername(userwallet.getAccountTitle());
                                wsmodel.setDestusername(destwallet.getAccountTitle());
                                wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                                //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                                wsmodel.setIncludeinstatement(1);
                                ////////////////////////////////////////////////////////////////////////////////////////////////////

                                return wsmodel;
                            } else {
                                logger.info("Unable to process Wallet Transaction... **********Manual Process Required!**********");

                                //reversing wallet limit
                                String respCode = wsmodel.getRespcode();
                                logger.info("Reversing Wallet limit ...");
                                if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, userwallet, null, Boolean.FALSE)) {
                                    logger.error("Source Wallet Limit processing failed, rejecting...");
                                    return wsmodel;
                                }

                                if (!WalletCMSFunctions.ProcessCreditWalletLimit(wsmodel, destwallet, null, Boolean.FALSE)) {
                                    logger.error("Destination Wallet Limit processing failed, rejecting...");
                                    return wsmodel;
                                }
                                wsmodel.setRespcode(respCode);
                                return wsmodel;
                            }
                        } else {
                            logger.error("Invalid or no Destination Wallet found for [" + wsmodel.getDestuserid() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //68 Invalid To-Account -- refer to Document
                            return wsmodel;
                        }
                    } else {
                        logger.error("Source and Destination wallets can not be same, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                        return wsmodel;
                    }
                    // ===============================================================================================
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing WalletTransaction..!**********Manual Process Required!**********");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteMerchantTransaction(WalletCMSWsEntity wsmodel) {
        logger.info("Executing MerchantTransaction Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            //m.rehman: for NayaPay, changing category
            //params.put("CAT", AccType.WALLET.StringValue());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //CMSAccount userwallet = (CMSAccount)GeneralDao.Instance.findObject(dbQuery, params);
            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

            // Asim Shahzad, Date : 19th Nov 2020, Tracking ID : VP-NAP-202011131 / VC-NAP-202011131 / VG-NAP-202011131
            // Mehtab , Date : 29th Dec 2020
            if (Util.hasText(wsmodel.getNayapaytrantype()) &&
                    (wsmodel.getNayapaytrantype().toLowerCase().equals("MerchantRetailTransaction".toLowerCase()) ||
                            wsmodel.getNayapaytrantype().toLowerCase().equals("MerchantBillerTransaction".toLowerCase()))) {

                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();

                if (Util.hasText(wsmodel.getBillerid())) {
                    params.put("USERID", wsmodel.getBillerid());
                }
                if (Util.hasText(wsmodel.getMerchantid())) {
                    params.put("USERID", wsmodel.getMerchantid());
                }

                params.put("CAT", AccType.CAT_MERCHANT_WALLET.StringValue());

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                //CMSAccount merchantwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
                CMSAccount merchantwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                if (merchantwallet != null) {

                    Long actualbalance = (Util.hasText(merchantwallet.getActualBalance()) ? Long.parseLong(merchantwallet.getActualBalance()) : 0L);
                    Long txnamount = (Util.hasText(wsmodel.getAmounttransaction()) ? Long.parseLong(wsmodel.getAmounttransaction()) : 0L);
                    Long maxlimit = (Util.hasText(wsmodel.getMaxmerchantwalletlimit()) ? Long.parseLong(wsmodel.getMaxmerchantwalletlimit()) : 0L);

                    if ((actualbalance + txnamount) > maxlimit) {
                        logger.error("Destination balance limit breached for merchant wallet, rejecting transaction ...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_DEST_LIMIT_EXCEEDED);
                        return wsmodel;
                    }
                }
            }

            // ========================================================================================================

            if (userwallet != null && userwallet.getStatus().equals("00") && userwallet.getCustomer().getStatus().equals("00")) {

                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", userwallet.getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for account [" + userwallet.getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //93-Customer Relation not Found ; Raza update THIS
                    return wsmodel;
                } else {
                    if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                        logger.error("PIN validation failed, rejecting...");
                        //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                        return wsmodel;
                    }

                    //getting transaction charges
                    //FetchTransactionCharge(wsmodel, userwallet.getProduct());

                    //process wallet limit
                    if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, userwallet, null, Boolean.TRUE)) {
                        logger.error("Limit processing failed, rejecting...");
                        return wsmodel;
                    }

                    if (FinanceManager.MerchantTransaction(wsmodel, userwallet)) {
                        logger.info("Wallet Transaction processed successfully!");
                        //for transcation detail
                        wsmodel.setUsername(userwallet.getAccountTitle());
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                        wsmodel.setIncludeinstatement(1);
                        ////////////////////////////////////////////////////////////////////////////////////////////////////

                        return wsmodel;
                    } else {
                        logger.info("Unable to process MerchantTransaction... **********Manual Process Required!**********");
                        //wsmodel.setRespcode(ISOResponseCodes.INVALID_IMD);

                        //reversing wallet limit
                        String respCode = wsmodel.getRespcode();
                        logger.info("Reversing Wallet limit ...");
                        if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, userwallet, null, Boolean.FALSE)) {
                            logger.error("Limit processing failed, rejecting...");
                            return wsmodel;
                        }

                        wsmodel.setRespcode(respCode);
                        return wsmodel;
                    }
                }
            } else if (userwallet != null && (!userwallet.getStatus().equals("00") || !userwallet.getCustomer().getStatus().equals("00"))) {
                logger.info("Invalid Account Status Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //03 Account Inactive
                return wsmodel;
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing MerchantTransaction..!**********Manual Process Required!**********");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteMerchantCoreTransaction(WalletCMSWsEntity wsmodel) {
        logger.info("Executing MerchantCoreTransaction Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            //m.rehman: for NayaPay, changing category
            //params.put("CAT", AccType.WALLET.StringValue());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //CMSAccount userwallet = (CMSAccount)GeneralDao.Instance.findObject(dbQuery, params);
            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

            // Asim Shahzad, Date : 19th Nov 2020, Tracking ID : VP-NAP-202011131 / VC-NAP-202011131 / VG-NAP-202011131

            if (Util.hasText(wsmodel.getBillerid())) {
                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getBillerid());
                params.put("CAT", AccType.CAT_MERCHANT_WALLET.StringValue());

                CMSAccount merchantwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                if (merchantwallet != null) {

                    Long actualbalance = (Util.hasText(merchantwallet.getActualBalance()) ? Long.parseLong(merchantwallet.getActualBalance()) : 0L);
                    Long txnamount = (Util.hasText(wsmodel.getAmounttransaction()) ? Long.parseLong(wsmodel.getAmounttransaction()) : 0L);
                    Long maxlimit = (Util.hasText(wsmodel.getMaxmerchantwalletlimit()) ? Long.parseLong(wsmodel.getMaxmerchantwalletlimit()) : 0L);

                    if ((actualbalance + txnamount) > maxlimit) {
                        logger.error("Destination balance limit breached for merchant wallet, rejecting transaction ...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_DEST_LIMIT_EXCEEDED);
                        return wsmodel;
                    }

                }
            }

            // ========================================================================================================

            if (userwallet != null && userwallet.getStatus().equals("00") && userwallet.getCustomer().getStatus().equals("00")) {
                /*
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", userwallet.getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if(cardrelation == null)
                {
                    logger.error("Card Relation not found for account [" + userwallet.getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //93-Customer Relation not Found ; Refer to Doc
                    return wsmodel;
                }
                else
                {
                    if(!WalletCMSFunctions.ValidatePIN(wsmodel,cardrelation))
                    {
                        logger.error("PIN validation failed, rejecting...");
                        //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                        return wsmodel;
                    }

                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.acctId= :ACCTID" + " and c.category = :CAT ";
                    params = new HashMap<String, Object>();
                    params.put("ACCTID", wsmodel.getAcctid());
                    params.put("CAT", AccType.CAT_LINKED.StringValue());

                    CMSAccount linkedacct = (CMSAccount)GeneralDao.Instance.findObject(dbQuery, params);

                    if(linkedacct != null && linkedacct.getStatus().equals("00"))
                    {
                        logger.info("Linked Account Found, proceed with MerchantCoreTransaction...");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    }
                    else
                    {
                        logger.error("Invalid or no Linked Account found, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_DEST_NOT_FOUND); //68 Invalid To-Account -- refer to Document);
                        return wsmodel;
                    }
                }
                */

                //m.rehman: 27-08-2021, VC-NAP-202108021 - Limit Structure update
                //deducting limit
                if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, userwallet, null, Boolean.TRUE)) {
                    logger.error("Limit processing failed, rejecting ...");
                    return wsmodel;
                }
                ///////////////////////////////////////////////////////////////////////////////////////////

                dbQuery = "from " + CMSAccount.class.getName() + " c where c.acctId= :ACCTID" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("ACCTID", wsmodel.getAcctid());
                params.put("CAT", AccType.CAT_LINKED.StringValue());

                CMSAccount linkedacct = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                if (linkedacct != null && linkedacct.getStatus().equals("00")) {
                    logger.info("Linked Account Found, proceed with MerchantCoreTransaction...");
                    if (FinanceManager.MerchantCoreTransaction(wsmodel, linkedacct)) {
                        //for transaction detail
                        wsmodel.setUsername(linkedacct.getAccountTitle());

                        logger.info("Wallet Transaction processed successfully!");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                        wsmodel.setIncludeinstatement(1);
                        ////////////////////////////////////////////////////////////////////////////////////////////////////

                    } else {
                        logger.error("Unable to process MerchantTransaction... **********Manual Process Required!**********");
                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                    }

                    return wsmodel;
                } else {
                    logger.error("Invalid or no Linked Account found, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DEST_NOT_FOUND); //68 Invalid To-Account -- refer to Document);
                    return wsmodel;
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing MerchantCoreTransaction..!**********Manual Process Required!**********");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteOnelinkCoreTransaction(WalletCMSWsEntity wsmodel) {
        logger.info("Executing OnelinkCoreTransaction Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            //m.rehman: for NayaPay, changing category
            //params.put("CAT", AccType.WALLET.StringValue());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //CMSAccount userwallet = (CMSAccount)GeneralDao.Instance.findObject(dbQuery, params);
            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

            if (userwallet != null && userwallet.getStatus().equals("00") && userwallet.getCustomer().getStatus().equals("00")) {
                //m.rehman: 27-08-2021, VC-NAP-202108021 - Limit Structure update
                //deducting limit
                if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, userwallet, null, Boolean.TRUE)) {
                    logger.error("Limit processing failed, rejecting ...");
                    return wsmodel;
                }
                ///////////////////////////////////////////////////////////////////////////////////////////

                dbQuery = "from " + CMSAccount.class.getName() + " c where c.acctId= :ACCTID" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("ACCTID", wsmodel.getAcctid());
                params.put("CAT", AccType.CAT_LINKED.StringValue());

                CMSAccount linkedacct = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                if (linkedacct != null && linkedacct.getStatus().equals("00")) {
                    logger.info("Linked Account Found, proceed with OnelinkCoreTransaction...");
                    if (FinanceManager.OnelinkCoreTransaction(wsmodel, linkedacct)) {
                        //for transaction detail
                        wsmodel.setUsername(linkedacct.getAccountTitle());

                        logger.info("OnelinkCoreTransaction processed successfully!");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                        wsmodel.setIncludeinstatement(1);
                        ////////////////////////////////////////////////////////////////////////////////////////////////////

                    } else {
                        logger.error("Unable to process MerchantTransaction... **********Manual Process Required!**********");
                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                    }

                    return wsmodel;
                } else {
                    logger.error("Invalid or no Linked Account found, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DEST_NOT_FOUND); //68 Invalid To-Account -- refer to Document);
                    return wsmodel;
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing OnelinkCoreTransaction ...");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            GeneralDao.Instance.endTransaction();
            GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
        }
    }

//    public static WalletCMSWsEntity ExecuteMerchantCreditTransaction(WalletCMSWsEntity wsmodel)
//    {
//        logger.info("Executing MerchantCreditTransaction Request...");
//
//        try
//        {
//            String dbQuery;
//            Map<String, Object> params;
//            CMSAccount merchantWallet = null;
//
//            dbQuery = "from " + CMSAccount.class.getName() + " c where c.AccountNumber= :acctNo";
//            params = new HashMap<String, Object>();
//            params.put("acctNo", wsmodel.getDestaccount());
//            merchantWallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
//
//            //process wallet limit
//            if (!WalletCMSFunctions.ProcessWalletLimit(wsmodel, merchantWallet, Boolean.TRUE))
//            {
//                logger.error("Limit processing failed, rejecting...");
//                return wsmodel;
//            }
//
//            if(FinanceManager.MerchantCreditTransaction(wsmodel,merchantWallet))
//            {
//                logger.info("Wallet Transaction processed successfully!");
//                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
//                return wsmodel;
//            }
//            else
//            {
//                logger.info("Unable to process MerchantCreditTransaction... **********Manual Process Required!**********");
//
//                //reversing wallet limit
//                String respCode = wsmodel.getRespcode();
//                logger.info("Reversing Wallet limit ...");
//                if (!WalletCMSFunctions.ProcessWalletLimit(wsmodel, merchantWallet, Boolean.FALSE))
//                {
//                    logger.error("Limit processing failed, rejecting...");
//                    return wsmodel;
//                }
//                wsmodel.setRespcode(respCode);
//                return wsmodel;
//            }
//        }
//        catch (Exception e)
//        {
//            logger.error(e);//s.mehtab on 25-11-2020
//            logger.error("Exception caught while Executing MerchantCreditTransaction..!**********Manual Process Required!**********");
//            wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS);
//            return wsmodel;
//        }
//    }
//
//    public static WalletCMSWsEntity ExecuteMerchantDebitTransaction(WalletCMSWsEntity wsmodel)
//    {
//        logger.info("Executing MerchantDebitTransaction Request...");
//
//        try
//        {
//            String dbQuery;
//            Map<String, Object> params;
//            CMSAccount merchantWallet = null;
//
//            dbQuery = "from " + CMSAccount.class.getName() + " c where c.AccountNumber= :acctNo";
//            params = new HashMap<String, Object>();
//            params.put("acctNo", wsmodel.getDestaccount());
//            merchantWallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
//
//            //process wallet limit
//            if (!WalletCMSFunctions.ProcessWalletLimit(wsmodel, merchantWallet, Boolean.FALSE))
//            {
//                logger.error("Limit processing failed, rejecting...");
//                return wsmodel;
//            }
//
//            if(FinanceManager.MerchantDebitTransaction(wsmodel,merchantWallet))
//            {
//                logger.info("Wallet Transaction processed successfully!");
//                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
//                return wsmodel;
//            }
//            else
//            {
//                logger.info("Unable to process MerchantDebitTransaction... **********Manual Process Required!**********");
//
//                //reversing wallet limit
//                String respCode = wsmodel.getRespcode();
//                logger.info("Reversing Wallet limit ...");
//                if (!WalletCMSFunctions.ProcessWalletLimit(wsmodel, merchantWallet, Boolean.TRUE))
//                {
//                    logger.error("Limit processing failed, rejecting...");
//                    return wsmodel;
//                }
//                wsmodel.setRespcode(respCode);
//                return wsmodel;
//            }
//        }
//        catch (Exception e)
//        {
//            logger.error(e);//s.mehtab on 25-11-2020
//            logger.error("Exception caught while Executing MerchantDebitTransaction..!**********Manual Process Required!**********");
//            wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS);
//            return wsmodel;
//        }
//    }
//
//    public static WalletCMSWsEntity ExecuteMerchantReversalTransaction(WalletCMSWsEntity wsmodel)
//    {
//        logger.info("Executing MerchantReversalTransaction Request...");
//
//        try
//        {
//            String dbQuery;
//            Map<String, Object> params;
//            CMSAccount merchantWallet = null;
//
//            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
//            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
//            params = new HashMap<String, Object>();
//            params.put("USERID", wsmodel.getUserid());
//            //m.rehman: for NayaPay, changing category
//            //params.put("CAT", AccType.WALLET.StringValue());
//            params.put("CAT", AccType.CAT_WALLET.StringValue());
//
//            CMSAccount userwallet = (CMSAccount)GeneralDao.Instance.findObject(dbQuery, params);
//
//            if(userwallet != null && userwallet.getStatus().equals("00"))
//            {
//                //Change Wallet PIN
//                dbQuery = "from " + CMSCardRelation.class.getName() + " c where c.card_relid= :relation " + " and c.channel = :chnnl ";
//                params = new HashMap<String, Object>();
//                params.put("relation", userwallet.getAccountNumber());
//                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
//                CMSCardRelation cardrelation = (CMSCardRelation) GeneralDao.Instance.findObject(dbQuery, params);
//
//                if(cardrelation == null)
//                {
//                    logger.error("Card Relation not found for account [" + userwallet.getAccountNumber() + "], rejecting...");
//                    wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_NOT_FOUND); //90-Customer not Found ; Raza update THIS
//                    return wsmodel;
//                }
//                else
//                {
//                    //TODO: Verify LoadWallet TransactionPermission
//
//                    //getting original transaction
//                    dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where c.tranrefnumber= :ref_num";
//                    params = new HashMap<String, Object>();
//                    params.put("ref_num", wsmodel.getOrigdataelement());
//                    WalletCMSWsEntity origTxn = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params);
//
//                    if (origTxn == null) {
//                        logger.error("Original Transaction not found ...");
//                        wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_TRANSACTION_NOT_FOUND);    //m.rehman: 30 - orig txn not found - Refer to Document
//                        return wsmodel;
//
//                    } else if (!origTxn.getRespcode().equals(ISOResponseCodes.APPROVED)) {
//                        logger.error("Transaction is not approved in the system ...");
//                        wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_ALREADY_REJECTED);    //m.rehman: 96 - orig already rejected - Refer to Document
//                        return wsmodel;
//
//                    } else if (origTxn.getRespcode().equals(ISOResponseCodes.ACQUIRER_REVERSAL)) {     //36 - Acquirer reversal
//                        logger.error("Transaction is already reversed in the system ...");
//                        wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_ALREADY_REVERSED);    //m.rehman: 35 - orig already reversed - Refer to Document
//                        return wsmodel;
//                    }
//
//                    logger.info("Original Transaction found, processing further...");
//
//                    //verify Maximum Balance Limit
//                    if (!WalletCMSFunctions.VerifyMaxBalanceLimit(origTxn, userwallet))
//                    {
//                        logger.error("Maximum Balance Limit verification failed, rejecting...");
//                        return wsmodel;
//                    }
//
//                    //process wallet limit
//                    logger.info("Reversing Limit ...");
//                    if (!WalletCMSFunctions.ProcessWalletLimit(origTxn, userwallet, Boolean.FALSE))
//                    {
//                        logger.error("Limit reversing failed, rejecting...");
//                        return wsmodel;
//                    }
//
//                    //if merchant is online and having wallet, credit the amount in wallet
//                    if (Util.hasText(wsmodel.getIsmerchantonline()) && wsmodel.getIsmerchantonline().equals("1")) {
//                        if (Util.hasText(wsmodel.getIswalletaccount()) && wsmodel.getIswalletaccount().equals("1")) {
//                            dbQuery = "from " + CMSAccount.class.getName() + " c where c.AccountNumber= :acctNo";
//                            params = new HashMap<String, Object>();
//                            params.put("acctNo", wsmodel.getDestaccount());
//                            merchantWallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
//
//                            //process wallet limit
//                            if (!WalletCMSFunctions.ProcessWalletLimit(wsmodel, merchantWallet, Boolean.FALSE))
//                            {
//                                logger.error("Merchant Limit processing failed, rejecting...");
//                                return wsmodel;
//                            }
//                        }
//                    }
//
//                    if(FinanceManager.MerchantReversalTransaction(origTxn,userwallet, merchantWallet))
//                    {
//                        logger.info("Wallet Transaction Reversal processed successfully!");
//                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
//                        logger.info("Marking transaction as reversed in System ....");
//                        origTxn.setRespcode(ISOResponseCodes.ACQUIRER_REVERSAL);   //36 - Acquirer Reversal - Refer document
//                        GeneralDao.Instance.saveOrUpdate(origTxn);
//                        return wsmodel;
//                    }
//                    else
//                    {
//                        logger.info("Unable to process MerchantReversalTransaction... **********Manual Process Required!**********");
//
//                        //process wallet limit
//                        logger.info("Applying Limit ...");
//                        if (!WalletCMSFunctions.ProcessWalletLimit(origTxn, userwallet, Boolean.TRUE))
//                        {
//                            logger.error("Limit processing failed, rejecting...");
//                            return wsmodel;
//                        }
//
//                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //46 - unable to process - refer to document
//                        return wsmodel;
//                    }
//
//                }
//            }
//            else
//            {
//                logger.info("No Account Relation Found for UserId [ "+ wsmodel.getUserid() +", rejecting...");
//                wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_NOT_FOUND); //90 Customer not found
//                return wsmodel;
//            }
//        }
//        catch (Exception e)
//        {
//            logger.error(e);//s.mehtab on 25-11-2020
//            logger.error("Exception caught while Executing MerchantTransaction..!**********Manual Process Required!**********");
//            wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
//            return wsmodel;
//        }
//    }

    public static WalletCMSWsEntity ExecuteConfirmFraudOtp(WalletCMSWsEntity wsmodel) {
        logger.info("Executing ConfirmFraudOtp Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where c.tranrefnumber= :REFNUM";
            params = new HashMap<String, Object>();
            //m.rehman: for NayaPay, typo
            //params.put("REFNUM", wsmodel.getUserid());
            params.put("REFNUM", wsmodel.getOrigdataelement());

            WalletCMSWsEntity origtran = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params);

            if (origtran != null && !origtran.getRespcode().equals("00")) //Raza Fraud Rejected Txn will never be with 00 RespCode
            {
                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getUserid());
                //m.rehman: for NayaPay, changing category
                //params.put("CAT", AccType.WALLET.StringValue());
                params.put("CAT", AccType.CAT_WALLET.StringValue());

                CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                if (userwallet != null && userwallet.getStatus().equals("00")) {
                    logger.info("Confirm Fraud OTP verified OK, processing transaction...");
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                } else {
                    logger.info("No Wallet Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                    return wsmodel;
                }

            } else {
                logger.info("No Transaction Found with Reference [ " + wsmodel.getOrigdataelement() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //99 ODE Mismatch
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing ConfirmFraudOtp..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteConfirmOtp(WalletCMSWsEntity wsmodel) {
        logger.info("Executing ConfirmOtp Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where c.tranrefnumber= :REFNUM "; //+ " and c.servicename = :SERV ";
            params = new HashMap<String, Object>();
            //m.rehman: for NayaPay, typo
            //params.put("REFNUM", wsmodel.getUserid());
            params.put("REFNUM", wsmodel.getOrigdataelement());
            //params.put("SERV", "LinkBankAccountOTP");

            List<WalletCMSWsEntity> origtranlist = GeneralDao.Instance.find(dbQuery, params);

            if (origtranlist != null && origtranlist.size() > 0) {
                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID";// + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getUserid());
                //m.rehman: for NayaPay, changing category
                //params.put("CAT", AccType.WALLET.StringValue());
                //params.put("CAT", AccType.CAT_WALLET.StringValue());

                CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                if (userwallet != null && userwallet.getStatus().equals("00")) {
                    logger.info("Confirm OTP verified OK, processing transaction...");

                    /*for(WalletCMSWsEntity txn : origtranlist) //TODO: Raza Verify and implement if required, as multiple txns are present for OTP cases
                    {
                        if(!txn.getRespcode().equals(00))
                        {

                        }
                    }*/


                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                } else {
                    logger.info("No Wallet Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND); //90 Customer not found
                    return wsmodel;
                }

            } else {
                logger.info("No Transaction Found with Reference [" + wsmodel.getOrigdataelement() + "], rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_DATA_ELEMENT_MISMATCH); //99 ODE Mismatch
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing ConfirmOtp..!**********Manual Process Required!**********");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteFetchProvisionalWallet(WalletCMSWsEntity wsmodel) {
        logger.info("Executing FetchProvisionalWallet Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_PROV.StringValue());

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null && userwallet.getStatus().equals("00")) {
                wsmodel.setCnic(userwallet.getCustomer().getCnic());
                wsmodel.setCustomername(userwallet.getCustomer().getFirstname());
                wsmodel.setFathername(userwallet.getCustomer().getFatherName());
                wsmodel.setDateofbirth(WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth()));
                wsmodel.setPlaceofbirth(userwallet.getCustomer().getPlaceofbirth());
//                    wsmodel.setCustomerpicture(userwallet.getCustomer().getCustomerpicture());
//                    wsmodel.setCnicpicturefront(userwallet.getCustomer().getCnicpictureFront());
//                    wsmodel.setCnicpictureback(userwallet.getCustomer().getCnicpictureBack());
                wsmodel.setCnicexpiry(userwallet.getCustomer().getCnicexpiry());
                wsmodel.setMothername(userwallet.getCustomer().getMotherName());
                wsmodel.setAddress(userwallet.getCustomer().getHomeAddress());
                wsmodel.setCity(userwallet.getCustomer().getCity());
                wsmodel.setProvince(userwallet.getCustomer().getProvince());
                wsmodel.setCountry(userwallet.getCustomer().getCountry());
                wsmodel.setCreationdate(WebServiceUtil.dobdFormat.format(userwallet.getCreateDate()));

                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return wsmodel;
            } else if (userwallet != null && !userwallet.getStatus().equals("00")) {
                logger.info("No Active Provisional Wallet Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND); //71 No Profile Available
                return wsmodel;
            } else {
                logger.info("No Provisional Wallet Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing FetchProvisionalWallet..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteFetchProvisionalWalletList(WalletCMSWsEntity wsmodel) {
        logger.info("Executing FetchProvisionalWalletList Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected

            dbQuery = "from " + CMSAccount.class.getName() + " c where c.category= :CAT and c.Status = :STATUS ";
            params = new HashMap<String, Object>();
            params.put("CAT", AccType.CAT_PROV.StringValue());
            params.put("STATUS", "00");
            if (Util.hasText(wsmodel.getSearchtext())) //Raza TODO: Uddate THIS
            {
                if (WebServiceUtil.cnicpattern.matcher(wsmodel.getSearchtext()).matches()) {
                    dbQuery += " and c.customer.cnic = :search_text";
                    params.put("search_text", wsmodel.getSearchtext());
                } else {
                    dbQuery += " and lower(c.customer.firstname) like '%" + wsmodel.getSearchtext().toLowerCase() + "%' ";
                    //params.put("search_text", "%" +wsmodel.getSearchtext() + "%");
                }
            }
            dbQuery += " order by id asc";


            //Get Count first start
            String query = "select count(*) " + dbQuery;

            //List<BigDecimal> count;
            Long size = (Long) GeneralDao.Instance.findObject(query, params);
            //count = GeneralDao.Instance.executeSqlQuery(query, params);
            //Long size = count; //count.get(0).intValue();
            //Get Count first end
            wsmodel.setTotalcount(size + "");
            logger.info("Total Count [" + size + "]");
            if (size > 0) {
                logger.info("Page Count [" + wsmodel.getPagecount() + "] Page Size [" + wsmodel.getPagesize() + "]");
                Integer pageCount = Integer.parseInt(wsmodel.getPagecount());
                Integer pageSize = Integer.parseInt(wsmodel.getPagesize());
                logger.info("Converted Page Count [" + pageCount + "] Converted Page Size [" + pageSize + "]");
                Integer startPosition = (pageCount * pageSize) - pageSize;
                logger.info("Start Position [" + startPosition + "]");

                Query query1 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                query1.setProperties(params);
                query1.setFirstResult(startPosition);
                query1.setMaxResults(pageSize);
                List<CMSAccount> provwalletlist = query1.list();
                //List<CMSAccount> provwalletlist = GeneralDao.Instance.find(dbQuery, params);

                if (provwalletlist != null && provwalletlist.size() > 0) {
                    List<ProvisionalWallet> provlist = new ArrayList<ProvisionalWallet>();
                    for (CMSAccount provacct : provwalletlist) {
                        ProvisionalWallet pw = new ProvisionalWallet();
                        pw.setUserid(provacct.getUserId());
                        pw.setCnic(provacct.getCustomer().getCnic());
                        pw.setFullname(provacct.getAccountTitle());
                        pw.setCustomerpic(provacct.getCustomer().getCustomerpicture());
                        pw.setCreationdate(WebServiceUtil.dateFormat.format(provacct.getCreateDate()));
                        provlist.add(pw);
                    }
                    wsmodel.setProvisionalwallets(provlist);
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                } else {
                    logger.info("No Provisional Account Found ");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND); //71 No Profile Available
                    return wsmodel;
                }
            } else {
                logger.info("No Count found for Provisional Account List, rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND); //71 No Profile Available
                return wsmodel;
            }


        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing FetchProvisionalWalletList..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //46 - Unable to Process
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteUpdateProvisionalWalletAddress(WalletCMSWsEntity wsmodel) {
        logger.info("Executing UpdateProvisionalWalletAddress Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_PROV.StringValue());

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null && userwallet.getStatus().equals("00")) {
                logger.info("Updating Wallet Address...");
                userwallet.getCustomer().setHomeAddress(wsmodel.getAddress());
                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return wsmodel;
            } else {
                logger.info("No Wallet Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }


        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing UpdateProvisionalWalletAddress..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteSupportPortalGetBasicInfo(WalletCMSWsEntity wsmodel) {
        logger.info("Executing SupportPortalGetBasicInfo Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            //if (userwallet != null && userwallet.getStatus().equals("00")) {
            if (userwallet != null) {
                logger.info("Wallet found, verifying data...");
                WebServiceUtil.dobdFormat.setLenient(false);
                logger.info("wsmodel DateOfBirth [" + wsmodel.getDateofbirth() + "] DB DateOfBirth [" + WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth()) + "]");
                logger.info("wsmodel Cnic [" + wsmodel.getCnic() + "] DB Cnic [" + userwallet.getCustomer().getCnic() + "]");
                if ((!wsmodel.getDateofbirth().equals(WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth())))
                        || !wsmodel.getCnic().equals(userwallet.getCustomer().getCnic())) {
                    logger.error("Invalid Input Fields, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //02 for Invalid Account refer NayaPay Doc
                    return wsmodel;
                }

                wsmodel.setCustomername(userwallet.getAccountTitle());
                wsmodel.setMothername(userwallet.getCustomer().getMotherName());
                wsmodel.setFathername(userwallet.getCustomer().getFatherName());
                wsmodel.setPlaceofbirth(userwallet.getCustomer().getPlaceofbirth());
                wsmodel.setCnicexpiry(userwallet.getCustomer().getCnicexpiry());
                wsmodel.setAddress(userwallet.getCustomer().getHomeAddress());
                wsmodel.setCity(userwallet.getCustomer().getCity());
                wsmodel.setProvince(userwallet.getCustomer().getProvince());
                wsmodel.setCountry(userwallet.getCustomer().getCountry());
                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return wsmodel;
            } else {
                logger.info("No Wallet Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }

        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing SupportPortalGetBasicInfo..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetConsumerTransactions(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetConsumerTransactions Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null && userwallet.getStatus().equals("00")) {
                logger.info("Wallet found, verifying data...");
                WebServiceUtil.dobdFormat.setLenient(false);
                logger.info("wsmodel DateOfBirth [" + wsmodel.getDateofbirth() + "] DB DateOfBirth [" + WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth()) + "]");
                logger.info("wsmodel Cnic [" + wsmodel.getCnic() + "] DB Cnic [" + userwallet.getCustomer().getCnic() + "]");
                if ((!wsmodel.getDateofbirth().equals(WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth())))
                        || !wsmodel.getCnic().equals(userwallet.getCustomer().getCnic())) {
                    logger.error("Invalid Input Fields, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //02 for Invalid Account refer NayaPay Doc
                    return wsmodel;
                }


                dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where c.userid= :USERID" + " and c.respcode = :RESPCODE ";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getUserid());
                params.put("RESPCODE", "00");

                List<WalletCMSWsEntity> tranlist = GeneralDao.Instance.find(dbQuery, params);

                if (tranlist != null && tranlist.size() > 0) {
                    List<Transaction> dbtranlist = new ArrayList<Transaction>();
                    for (WalletCMSWsEntity tran : tranlist) {
                        Transaction t = new Transaction();
                        t.setUsername(tran.getUsername());
                        t.setType(tran.getServicename());

                        //m.rehman: 26-02-2021, Euronet Integration
                        //t.setAmount(tran.getAmounttransaction());
                        t.setAmount((Util.hasText(tran.getCbillamount())) ? tran.getCbillamount() : tran.getAmounttransaction());
                        /////////////////////////////////////////////////////////////////////////////////////////

                        t.setTransdatetime(tran.getTransdatetime());
                        t.setTransrefnum(tran.getTranrefnumber());
                        t.setBankid(tran.getRrn());
                        dbtranlist.add(t);
                    }
                    wsmodel.setTranlist(dbtranlist);
                } else {
                    logger.error("No Transaction found for UserId [" + wsmodel.getUserid() + "], rejecting..");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                    return wsmodel;
                }

                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return wsmodel;
            } else {
                logger.info("No Wallet Found for UserId [" + wsmodel.getUserid() + "], rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }

        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetConsumerTransactions..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetTransactionDetails(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetTransactionDetails Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null && userwallet.getStatus().equals("00")) {
                logger.info("Wallet found, verifying data...");
                WebServiceUtil.dobdFormat.setLenient(false);

                logger.info("wsmodel DateOfBirth [" + wsmodel.getDateofbirth() + "] DB DateOfBirth [" + WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth()) + "]");
                logger.info("wsmodel Cnic [" + wsmodel.getCnic() + "] DB Cnic [" + userwallet.getCustomer().getCnic() + "]");

                //if((!wsmodel.getDateofbirth().equals(WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth())))
                //        || !wsmodel.getCnic().equals(userwallet.getCustomer().getCnic()))
                if ((wsmodel.getDateofbirth() != null && !wsmodel.getDateofbirth().equals(WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth())))
                        || (wsmodel.getCnic() != null && !wsmodel.getCnic().equals(userwallet.getCustomer().getCnic()))) {
                    logger.error("Invalid Input Fields, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //02 for Invalid Account refer NayaPay Doc
                    return wsmodel;
                }


                //m.rehman: 10-11-2021 - Nayapay Optimization
                //dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " +
                dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                        " (c.userid= :USERID or c.destuserid= :USERID) " +
                        " and c.tranrefnumber = :TRANREF " +
                        " order by c.id desc ";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getUserid());
                //params.put("TRANREF", wsmodel.getNayapaytxnid());
                params.put("TRANREF", wsmodel.getOrigdataelement());

                //m.rehman: 10-11-2021 - Nayapay Optimization
                //List<WalletCMSWsEntity> tranlist = GeneralDao.Instance.find(dbQuery, params); // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                //List<MVFinancialLog> tranlist = GeneralDao.Instance.find(dbQuery, params);
                List<WalletCMSWsListingEntity> tranlist = GeneralDao.Instance.find(dbQuery, params);
                ;

                TransactionDetail td = new TransactionDetail();
                if (tranlist != null && tranlist.size() > 0) {
                    /*
                    if(tranlist.size() > 1)
                    {
                        logger.error("Multiple Records Found for TxnId [" + wsmodel.getNayapaytxnid() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                        return wsmodel;
                    }
                    */

                    //m.rehman: 10-11-2021 - Nayapay Optimization
                    //WalletCMSWsEntity tran = tranlist.get(0); // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                    //MVFinancialLog tran = tranlist.get(0);
                    WalletCMSWsListingEntity tran = tranlist.get(0);
                    //TransactionDetail td = new TransactionDetail();
                    td.setTransrefnum(tran.getTranrefnumber());
                    //Arsalan Akhter, Date: 03-Aug-2021, Tikcet: VC-NAP-202107301 (Get Transaction details of a reversal transaction)
                    //td.setNayapaytype(Util.hasText(tran.getNayapaytrantype()) ? tran.getNayapaytrantype() : tran.getServicename());
                    if (tran.getServicename().contains("Reversal")) {
                        td.setNayapaytype(tran.getServicename());
                    } else {
                        td.setNayapaytype(Util.hasText(tran.getNayapaytrantype()) ? tran.getNayapaytrantype() : tran.getServicename());
                    }
                    //========================================================================================
                    //td.setAcctid(tran.getAcctid());
                    td.setAcctalias(tran.getAcctalias());
                    td.setSrcid(tran.getUserid());

                    // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                    if (Util.hasText(tran.getUsername())) {
                        td.setSrcname(tran.getUsername());
                    } else {
                        td.setSrcname(tran.getCustomername());
                    }
                    // ====================================================================================

                    td.setSrcnayapayid(tran.getNayapayid());
                    //td.setDestid(tran.getMerchantid());
                    td.setDestid(tran.getDestuserid());
                    //td.setDestname(tran.getMerchantname());
                    td.setDestname(tran.getDestusername());
                    td.setDestnayapayid(tran.getDestnayapayid());
                    td.setParentid(tran.getParentid());
                    td.setReferencenumber(tran.getReferencenumber());
                    td.setInvoiceid(tran.getInvoiceid());
                    td.setCurrency(tran.getCurrency());

                    //m.rehman: 26-02-2021, Euronet Integration
                    //td.setAmount(tran.getAmounttransaction());
                    td.setAmount((Util.hasText(tran.getCbillamount())) ? tran.getCbillamount() : tran.getAmounttransaction());
                    /////////////////////////////////////////////////////////////////////////////////////////

                    td.setTransdatetime(tran.getTransdatetime());
                    td.setMapid(tran.getMapid());
                    td.setPosinvoiceref(tran.getPosinvoiceref());
                    td.setTerminalid(tran.getTerminalid());
                    td.setAgentid(tran.getAgentid());
                    td.setStan(tran.getStan());
                    td.setDisputeflag(tran.getDisputeflag());
                    td.setSrccharge(tran.getSrcchargeamount());
                    td.setBankcharge(tran.getNayapaycharges());
                    td.setDepositorname(tran.getCustomername());
                    td.setTerminalloc(tran.getTermloc());
                    td.setOriginaltransactionid(tran.getOrigdataelement());

                    // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                    if (Util.hasText(tran.getBenebankaccountno())) {
                        // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                        //td.setAccountnumber(Util.hasText(tran.getBenebankaccountno()) ? tran.getBenebankaccountno().substring(tran.getBenebankaccountno().length()-4, tran.getBenebankaccountno().length()) : "");
                        td.setAccountnumber(Util.hasText(tran.getBenebankaccountno()) ? tran.getBenebankaccountno() : "");
                        // =====================================================================================
                    } else {
                        // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                        //td.setAccountnumber(Util.hasText(tran.getAccountnumber()) ? tran.getAccountnumber().substring(tran.getAccountnumber().length() - 4, tran.getAccountnumber().length()) : "");
                        td.setAccountnumber(Util.hasText(tran.getAccountnumber()) ? tran.getAccountnumber() : "");
                        // =====================================================================================
                    }
                    //==========================================================================

                    td.setBranchname(tran.getBranchname());
                    //wsmodel.setTransactionDetail(td);
                    //td.setMerchantid(tran.getMerchantid());
                    //td.setMerchantname(tran.getMerchantname());
                    td.setMerchantid(Util.hasText(tran.getMerchantid()) ? tran.getMerchantid() : tran.getBillerid());
                    td.setMerchantname(Util.hasText(tran.getMerchantname()) ? tran.getMerchantname() : tran.getBillername());

                    // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                    if (Util.hasText(tran.getBenebankcode())) {
                        td.setBankcode(tran.getBenebankcode());
                    } else {
                        td.setBankcode(tran.getBankcode());
                    }
                    //==========================================================================

                    // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                    //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                    if (Util.hasText(tran.getCardlastdigits())) {
                        td.setCardlastdigits(tran.getCardlastdigits());
                    }
                    //===============================================================================================================
                    if (Util.hasText(tran.getCardscheme())) {
                        td.setCardscheme(tran.getCardscheme());
                    }
                    if (Util.hasText(tran.getPosentrymode())) {
                        td.setPosentrymode(tran.getPosentrymode());
                    }
                    if (Util.hasText(tran.getCategoryid())) {
                        td.setMerchantcategorycode(tran.getCategoryid());
                    }
                    td.setDestcharge(tran.getDestchargeamount());
                    // =====================================================================================

                    td.setDepositslipnumber(tran.getSlipnumber());
                    //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
                    td.setTaxamount(tran.getNayapaytaxamount());
                    td.setOriginalapi(tran.getOriginalapi());
                    td.setOriginaldatetime(tran.getOrigdataelement());
                    td.setOriginalrrn(tran.getOrigretrefno());
                    td.setOriginalstan(tran.getOrigstan());
                    td.setNpticket(tran.getNpticket());
                    td.setVrolticket(tran.getVrolticket());
                    td.setRefundtype(tran.getReserved());
                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                    //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                    td.setJustification(tran.getJustification());
                    //////////////////////////////////////////////////////////////////////////////////////////////////

                    // Asim Shahzad, Date : 29th June 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                    if (Util.hasText(tran.getIban())) {
                        td.setIban(tran.getIban());
                    }
                    // ======================================================================================

                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                } else {
                    logger.error("No Transaction found for UserId [" + wsmodel.getUserid() + "], rejecting..");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                    //return wsmodel;
                }

                //wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                wsmodel.setTransactionDetail(td);
                return wsmodel;
            } else {
                logger.info("No Wallet Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }

        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetTransactionDetails..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteUpdateWalletAddress(WalletCMSWsEntity wsmodel) {
        logger.info("Executing UpdateWalletAddress Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null && userwallet.getStatus().equals("00")) {
                logger.info("Updating Wallet Address...");
                userwallet.getCustomer().setHomeAddress(wsmodel.getAddress());
                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return wsmodel;
            } else {
                logger.info("No Wallet Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }


        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing UpdateProvisionalWalletAddress..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteUpdateWalletSecondaryPhoneNumber(WalletCMSWsEntity wsmodel) {
        logger.info("Executing UpdateWalletSecondaryPhoneNumber Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null && userwallet.getStatus().equals("00")) {
                logger.info("Updating Wallet SecondaryPhone Number...");
                userwallet.getCustomer().setOfficeNumber(wsmodel.getSecondarynumber());
                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return wsmodel;
            } else {
                logger.info("No Wallet Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }


        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing UpdateWalletSecondaryPhoneNumber..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteResetWalletPin(WalletCMSWsEntity wsmodel) {
        logger.info("Executing ResetWalletPin Request...");

        try {
            String dbQuery, question1Retries = "", question2Retries = ""; // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
            Map<String, Object> params;

            // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301	/ VC-NAP-202009301
            dbQuery = "from " + SystemConfig.class.getName() + " c where c.identifier in (:IDENTIFIER)"; // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
            params = new HashMap<String, Object>();

            // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
            List<String> identifiers = new ArrayList<>();
            identifiers.add("SEC_QUES_1_RETRIES");
            identifiers.add("SEC_QUES_2_RETRIES");
            params.put("IDENTIFIER", identifiers);

            List<SystemConfig> list_obj_SystemConfig = GeneralDao.Instance.find(dbQuery, params);

            if (list_obj_SystemConfig.size() > 0) {
                for (int i = 0; i < list_obj_SystemConfig.size(); i++) {
                    if (list_obj_SystemConfig.get(i).getIdentifier().equals("SEC_QUES_1_RETRIES"))
                        question1Retries = list_obj_SystemConfig.get(i).getValue();
                    if (list_obj_SystemConfig.get(i).getIdentifier().equals("SEC_QUES_2_RETRIES"))
                        question2Retries = list_obj_SystemConfig.get(i).getValue();
                }
            } else {
                logger.error("Secret Questions retries not found in DB...");
            }
            // ===============================================================

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


            if (nprel != null) {
                if (nprel.getAccount().getStatus().equals("90") || nprel.getAccount().getCustomer().getStatus().equals("90")) {
                    logger.error("Customer Blocked, cannot reset PIN, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE);
                    return wsmodel;
                }


                //Change Wallet PIN
                params = new HashMap<String, Object>();
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation ";// + " and c.channel = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", nprel.getAccount().getAccountNumber());
                //params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                List<CMSAuth> cardrelationlist = GeneralDao.Instance.find(dbQuery, params);

                if (cardrelationlist == null || cardrelationlist.size() <= 0) {
                    logger.error("Card Relation not found for relation [" + nprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                }

                logger.info("Resetting and Generating PIN for Customer Wallet...");
                if (WalletCMSFunctions.GeneratePIN(wsmodel, cardrelationlist)) //Raza Generate PIN for 1 Channel then map same to all
                {
                    logger.info("PIN Reset Done Successfully for customer [" + wsmodel.getCnic() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                    // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301	/ VC-NAP-202009301
                    // Refreshing the secret question retries
                    logger.info("Refreshing the secret question retries for the customer...");

                    // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
                    if (Util.hasText(question1Retries))
                        cardrelationlist.get(0).getCustomer().setSecretQuestion1Retries(question1Retries);
                    if (Util.hasText(question2Retries))
                        cardrelationlist.get(0).getCustomer().setSecretQuestion2Retries(question2Retries);
                    //===============================================================

                    GeneralDao.Instance.saveOrUpdate(cardrelationlist.get(0).getCustomer());
                    // ===============================================================


                    return wsmodel;
                } else {
                    logger.error("Unable to Reset PIN for customer [" + wsmodel.getCnic() + "]");
                    //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN);
                    return wsmodel;
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing ResetWalletPin..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteAdminBlockWalletAccount(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing AdminBlockWalletAccount Request...");
            String dbQuery, status, prevStatus;
            Map<String, Object> params;
            CMSActivityLog cmsActivityLog;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                if (wsmodel.getBlockedflag().equals("true")) {
                    //if account block/softdelete, reject txn
                    if (nprel.getAccount().getStatus().equals("90")) {// || nprel.getAccount().getStatus().equals("07")
                        //|| nprel.getAccount().getStatus().equals("09")) {
                        logger.error("Account already blocked, not updating Status! rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //32 Invalid Customer Status ; Refer to Doc
                        return wsmodel;
                    } else {
                        logger.info("Blocking Account ....");

                        //need to check block type (ADMIN/FRAUD/AML)
                        if (Util.hasText(wsmodel.getBlocktype())) {
                            if (wsmodel.getBlocktype().equals("FRAUD")) {
                                status = "04";  //04 - Fraud block, refer to document
                            } else if (wsmodel.getBlocktype().equals("AML")) {
                                status = "09";  //09 - AML block, refer to document
                            } else {
                                status = "90";  //90 - Admin block, refer to document
                            }
                        } else {
                            status = "90";  //90 - Admin block, refer to document
                        }
                    }
                } else {
                    //if account alreasy active, reject txn
                    if (nprel.getAccount().getStatus().equals("00")) {
                        logger.error("Account already active, not updating Status! rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //32 Invalid Customer Status ; Refer to Doc
                        return wsmodel;
                    } else {
                        logger.info("Unblocking Account ....");
                        status = "00";
                    }
                }

                prevStatus = nprel.getAccount().getStatus();
                nprel.getAccount().setStatus(status);
                nprel.getAccount().setLastUpdateDate(new Date());
                GeneralDao.Instance.saveOrUpdate(nprel.getAccount());
                wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                logger.info("Saving wallet activity ....");
                cmsActivityLog = new CMSActivityLog();
                cmsActivityLog.setRelation(nprel.getAccount().getAccountNumber());
                cmsActivityLog.setPreviousStatus(prevStatus);
                cmsActivityLog.setCurrentStatus(nprel.getAccount().getStatus());
                cmsActivityLog.setSourceType("API");
                cmsActivityLog.setSourceName(wsmodel.getServicename());
                cmsActivityLog.setActivityDateTime(DateTime.now());
                GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                return wsmodel;
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot enable/disable wallet. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing AdminBlockWalletAccount..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteActivateDebitCard(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing ActivateDebitCard Request...");
            String dbQuery, prevStatus;
            Map<String, Object> params;
            CMSActivityLog cmsActivityLog;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                //no need to check for prov wallet as there will be no category of prov wallet
                //if((nprel.getAccount().getCategory().equals(AccType.CAT_PROV.StringValue())) || (!nprel.getAccount().getStatus().equals("00")) || (!nprel.getAccount().getCustomer().getStatus().equals("00")))
                if ((!nprel.getAccount().getStatus().equals("00")) || (!nprel.getAccount().getCustomer().getStatus().equals("00"))) {
                    logger.error("Invalid Wallet State or Status, card request not allowed, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //90 Customer not found);
                    return wsmodel;
                }

                //Change Wallet PIN
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", nprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + nprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                }

                if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                    logger.error("PIN validation failed, rejecting...");
                    //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                    return wsmodel;
                }

                logger.info("Wallet Pin verified through HSM. Activating DebitCard.");

                //Bilal against : Date : 26 -apr-2021  against VC-NAP-202104211  Customer can have both VISA physical and VISA virtual card together
                //Commenting below code block
                //m.rehman: 24-02-2021, VC-NAP-202102241 - Physical / Virtual card status & ordering
                //if new card is visa physical, check for visa virtual card in active in previous cards list, if found active, block that card
               /* dbQuery = "from " + CMSCard.class.getName() + " c where " +
                        " c.customer= :CUSTOMER " +
                        " order by c.id desc";
                params = new HashMap<String, Object>();
                params.put("CUSTOMER", nprel.getAccount().getCustomer());
                //CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);
                List<CMSCard> oldCardList = GeneralDao.Instance.find(dbQuery, params);

                if (Util.hasText(wsmodel.getCardtype()) && wsmodel.getCardtype().equals("visa_physical")) {
                    for (CMSCard c : oldCardList) {
                        if (c.getProduct().getProductType().equals("VISA_VIRTUAL") && !c.getCardStatus().equals("90")) {
                            logger.info("Activated Virtual Card found, blocking Virtual Card ...");
                            c.setCardStatus("90");
                            GeneralDao.Instance.saveOrUpdate(c);
                            break;
                        }
                    }
                } */
                ////////////////////////////////////////////////////////////////////////////////////////////////

                dbQuery = "from " + CMSCard.class.getName() + " c where " +
                        " c.cardNumber= :CARDNO " +
                        " and c.customer= :CUSTOMER " +
                        " order by c.id desc";
                params = new HashMap<String, Object>();
                params.put("CARDNO", wsmodel.getCardnumber());
                params.put("CUSTOMER", nprel.getAccount().getCustomer());
                //CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);
                List<CMSCard> cardList = GeneralDao.Instance.find(dbQuery, params);

                if (cardList != null && cardList.size() > 1) {      //case in which customer has reorder a new card
                    CMSCard card = cardList.get(0);
                    if (!card.getCardStatus().equals("14")) {
                        logger.error("Latest Card not in Fresh State, cannot Activate a Reorder Card. rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //12 Invalid Card Status refer to Document
                        return wsmodel;

                    } else {

                        //m.rehman: 11-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 1
                        //no need to generate PIN for virtual cards, also setting last digit here
                        //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                        wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                        //===============================================================================================================
                        if (Util.hasText(wsmodel.getCardtype()) && wsmodel.getCardtype().equals("visa_virtual")) {
                            logger.info("Card Type is Visa Virtual, no need to generate Card PIN ...");

                            // Asim Shahzad, Date : 17th Aug 2021, Tracking ID : VP-NAP-202108161 / VC-NAP-202108161
                            card.setIsExported("1");
                            card.setCreateDate(WebServiceUtil.limitcycleDateFormat.format(new Date()));
                            // =====================================================================================

                            //m.rehman: 11-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 1
                            //checking if card pin not available, deline transaction
                            if (Util.hasText(wsmodel.getCardpindata())) {
                                logger.error("Card PIN is not required to activate virtual card, rejecting ...");
                                wsmodel.setRespcode(ISOResponseCodes.NP_BAD_CARD_PIN);
                                return wsmodel;
                            }

                            //m.rehman: 11-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 1
                            //checking card type and product type
                            if (!card.getProduct().getProductType().equals("VISA_VIRTUAL")) {
                                logger.error("Card type and Product type mismatch, rejecting ...");
                                wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION);
                                return wsmodel;
                            }

                        } else {
                            logger.info("Generating Card PIN...");

                            //m.rehman: 11-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 1
                            //checking if card pin not available, deline transaction
                            if (!Util.hasText(wsmodel.getCardpindata())) {
                                logger.error("Card PIN is required to activate physical card, rejecting ...");
                                wsmodel.setRespcode(ISOResponseCodes.NP_BAD_CARD_PIN);
                                return wsmodel;
                            }

                            //m.rehman: 11-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 1
                            //checking card type and product type
                            if (Util.hasText(wsmodel.getCardtype()) && wsmodel.getCardtype().equals("visa_physical") && !card.getProduct().getProductType().equals("VISA_DEBIT")) {
                                logger.error("Card type and Product type mismatch, rejecting ...");
                                wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION);
                                return wsmodel;

                            } else if (Util.hasText(wsmodel.getCardtype()) && wsmodel.getCardtype().equals("paypak_physical")) {
                                if (!card.getProduct().getProductType().equals("CARD_LVL0") && !card.getProduct().getProductType().equals("CARD_LVL1")) {
                                    logger.error("Card type and Product type mismatch, rejecting ...");
                                    wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION);
                                    return wsmodel;
                                }
                            }

                            List<CMSAuth> lstcardrelation = null;
                            dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation ";// + " and c.channel = :chnnl ";
                            params = new HashMap<String, Object>();
                            params.put("relation", card.getCardNumberExpiryRelation());
                            //params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                            lstcardrelation = GeneralDao.Instance.find(dbQuery, params);

                            if (lstcardrelation == null || lstcardrelation.size() <= 0) {
                                logger.error("Card Relation not found for relation [" + card.getCardNumberExpiryRelation() + "], rejecting...");
                                wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                                return wsmodel;
                            }

                            //m.rehman: 11-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 1
                            //m.rehman: setting last digits in WSEntity object for verification after decryption
                            //wsmodel.setCardnolastdigits(card.getCardNoLastDigits());
                            if (!WalletCMSFunctions.GenerateCardPIN(wsmodel, lstcardrelation)) {
                                logger.error("Card PIN generation failed, rejecting...");
                                //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                                return wsmodel;
                            }
                        }

                        logger.info("Activating a Renew Card ...");
                        prevStatus = card.getCardStatus();
                        card.setCardStatus("00");
                        card.setActivationDate(WebServiceUtil.dateFormat.format(new Date()));
                        nprel.getAccount().setCard(card);
                        Set<CMSAccount> acctlist = new HashSet<CMSAccount>();
                        acctlist.add(nprel.getAccount());
                        card.setList_CustAccounts(acctlist);
                        GeneralDao.Instance.saveOrUpdate(card);
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        logger.info("Saving renew card activity ....");
                        cmsActivityLog = new CMSActivityLog();
                        cmsActivityLog.setRelation(card.getCardNumber());
                        cmsActivityLog.setPreviousStatus(prevStatus);
                        cmsActivityLog.setCurrentStatus(card.getCardStatus());
                        cmsActivityLog.setSourceType("API");
                        cmsActivityLog.setSourceName(wsmodel.getServicename());
                        cmsActivityLog.setActivityDateTime(DateTime.now());
                        GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                        //Blocking previous card
                        CMSCard prevCard;
                        for (int i = 1; i < cardList.size(); i++) {
                            prevCard = cardList.get(i);
                            if (prevCard.getCardStatus().equals("00")) {
                                prevStatus = prevCard.getCardStatus();
                                prevCard.setCardStatus("90");  //Arsalan Akhter, Date:07-Apr-2021 , Ticket# VC-NAP-202104051(Changing card status to blocked on Reorder card request
                                GeneralDao.Instance.saveOrUpdate(prevCard);

                                logger.info("Saving previous card activity ....");
                                cmsActivityLog = new CMSActivityLog();
                                cmsActivityLog.setRelation(prevCard.getCardNumber());
                                cmsActivityLog.setPreviousStatus(prevStatus);
                                cmsActivityLog.setCurrentStatus(prevCard.getCardStatus());
                                cmsActivityLog.setSourceType("API");
                                cmsActivityLog.setSourceName(wsmodel.getServicename());
                                cmsActivityLog.setActivityDateTime(DateTime.now());
                                GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                                break;
                            }
                        }
                        return wsmodel;
                    }
                } else if (cardList != null && cardList.size() == 1) {      //case in which customer has a first and fresh card
                    CMSCard card = cardList.get(0);
                    if (card.getCardStatus().equals("00") || card.getCardStatus().equals("90")) {
                        logger.error("Card already in Active or Blocked State, cannot Activate Card. rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //12 Invalid Card Status refer to Document
                        return wsmodel;

                    } else if (card.getCardStatus().equals("14")) {

                        //m.rehman: 11-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 1
                        //no need to generate PIN for virtual cards, also setting last digit here
                        //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                        wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                        //===============================================================================================================
                        if (Util.hasText(wsmodel.getCardtype()) && wsmodel.getCardtype().equals("visa_virtual")) {
                            logger.info("Card Type is Visa Virtual, no need to generate Card PIN ...");

                            // Asim Shahzad, Date : 17th Aug 2021, Tracking ID : VP-NAP-202108161 / VC-NAP-202108161
                            card.setIsExported("1");
                            card.setCreateDate(WebServiceUtil.limitcycleDateFormat.format(new Date()));
                            // =====================================================================================

                            //m.rehman: 11-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 1
                            //checking if card pin not available, deline transaction
                            if (Util.hasText(wsmodel.getCardpindata())) {
                                logger.error("Card PIN is not required to activate virtual card, rejecting ...");
                                wsmodel.setRespcode(ISOResponseCodes.NP_BAD_CARD_PIN);
                                return wsmodel;
                            }

                            //m.rehman: 11-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 1
                            //checking card type and product type
                            if (!card.getProduct().getProductType().equals("VISA_VIRTUAL")) {
                                logger.error("Card type and Product type mismatch, rejecting ...");
                                wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION);
                                return wsmodel;
                            }

                        } else {

                            logger.info("Generating Card PIN...");

                            //m.rehman: 11-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 1
                            //checking if card pin not available, decline transaction
                            if (!Util.hasText(wsmodel.getCardpindata())) {
                                logger.error("Card PIN is required to activate physical card, rejecting ...");
                                wsmodel.setRespcode(ISOResponseCodes.NP_BAD_CARD_PIN);
                                return wsmodel;
                            }

                            //m.rehman: 11-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 1
                            //checking card type and product type
                            if (Util.hasText(wsmodel.getCardtype()) && wsmodel.getCardtype().equals("visa_physical") && !card.getProduct().getProductType().equals("VISA_DEBIT")) {
                                logger.error("Card type and Product type mismatch, rejecting ...");
                                wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION);
                                return wsmodel;

                            } else if (Util.hasText(wsmodel.getCardtype()) && wsmodel.getCardtype().equals("paypak_physical")) {
                                if (!card.getProduct().getProductType().equals("CARD_LVL0") && !card.getProduct().getProductType().equals("CARD_LVL1")) {
                                    logger.error("Card type and Product type mismatch, rejecting ...");
                                    wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION);
                                    return wsmodel;
                                }
                            }

                            List<CMSAuth> lstcardrelation = null;
                            dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation ";// + " and c.channel = :chnnl ";
                            params = new HashMap<String, Object>();
                            params.put("relation", card.getCardNumberExpiryRelation());
                            //params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                            lstcardrelation = GeneralDao.Instance.find(dbQuery, params);

                            if (lstcardrelation == null || lstcardrelation.size() <= 0) {
                                logger.error("Card Relation not found for relation [" + card.getCardNumberExpiryRelation() + "], rejecting...");
                                wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                                return wsmodel;
                            }

                            //m.rehman: 11-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 1
                            //m.rehman: setting last digits in WSEntity object for verification after decryption
                            //wsmodel.setCardnolastdigits(card.getCardNoLastDigits());
                            if (!WalletCMSFunctions.GenerateCardPIN(wsmodel, lstcardrelation)) {
                                logger.error("Card PIN generation failed, rejecting...");
                                //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                                return wsmodel;
                            }
                        }

                        logger.info("Activating Card ...");
                        prevStatus = card.getCardStatus();
                        card.setCardStatus("00");
                        card.setActivationDate(WebServiceUtil.dateFormat.format(new Date()));
                        GeneralDao.Instance.saveOrUpdate(card);
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        logger.info("Saving card activity ....");
                        cmsActivityLog = new CMSActivityLog();
                        cmsActivityLog.setRelation(card.getCardNumber());
                        cmsActivityLog.setPreviousStatus(prevStatus);
                        cmsActivityLog.setCurrentStatus(card.getCardStatus());
                        cmsActivityLog.setSourceType("API");
                        cmsActivityLog.setSourceName(wsmodel.getServicename());
                        cmsActivityLog.setActivityDateTime(DateTime.now());
                        GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                        return wsmodel;
                    } else {
                        logger.error("Invalid Card Status [" + card.getCardStatus() + "], cannot Activate DebitCard rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //12 Invalid Card Status refer to Document
                        return wsmodel;
                    }
                } else {
                    logger.error("Card not found for UserId [" + wsmodel.getUserid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //05 Card not found refer to Document
                    return wsmodel;
                }

//                }//TODO: Raza commenting temporarily
//                else
//                {
//                    logger.error("Failed to validate Wallet Pin, rejecting...");
//                    wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD);
//                    return wsmodel;
//                }//TODO: Raza commenting temporarily
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot verify wallet Pin. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing ActivateDebitCard ..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteSupportPortalActivateDebitCard(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing SupportPortalActivateDebitCard Request...");
            String dbQuery, prevStatus;
            Map<String, Object> params;
            CMSActivityLog cmsActivityLog;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                //no need to check for prov wallet as there will be no category of prov wallet
                //if((nprel.getAccount().getCategory().equals(AccType.CAT_PROV.StringValue())) || (!nprel.getAccount().getStatus().equals("00")) || (!nprel.getAccount().getCustomer().getStatus().equals("00")))
                if ((!nprel.getAccount().getStatus().equals("00")) || (!nprel.getAccount().getCustomer().getStatus().equals("00"))) {
                    logger.error("Invalid Wallet State or Status, card request not allowed, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //90 Customer not found);
                    return wsmodel;
                }

                /*
                dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO order by c.id desc ";
                params = new HashMap<String, Object>();
                params.put("CARDNO", wsmodel.getCardnumber());
                CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);

                if(card != null) {
                    if (card.getCardStatus().equals("00") || card.getCardStatus().equals("90")) {
                        logger.error("Card already in Active or Blocked State, cannot Enable Card. rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12 Invalid Card Status refer to Document
                        return wsmodel;
                    } else {
                        logger.info("Validating Card ...");
                        dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                        params = new HashMap<String, Object>();
                        params.put("relation", card.getCardNumberExpiryRelation());
                        params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                        CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                        if(cardrelation == null)
                        {
                            logger.error("Card Relation not found for relation [" + card.getCardNumberExpiryRelation() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                            return wsmodel;
                        }

                        //m.rehman: setting last digits in WSEntity object for verification after decryption
                        wsmodel.setCardnolastdigits(card.getCardnolastdigits());
                        if(!WalletCMSFunctions.ValidateCardPIN(wsmodel,cardrelation))
                        {
                            logger.error("Card PIN validation failed, rejecting...");
                            //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                            return wsmodel;
                        }

                        logger.info("Activating Card ...");
                        prevStatus = card.getCardStatus();
                        card.setCardStatus("00");
                        card.setActivationDate(WebServiceUtil.dateFormat.format(new Date()));
                        GeneralDao.Instance.saveOrUpdate(card);
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        logger.info("Saving card activity ....");
                        cmsActivityLog = new CMSActivityLog();
                        cmsActivityLog.setRelation(card.getCardNumber());
                        cmsActivityLog.setPreviousStatus(prevStatus);
                        cmsActivityLog.setCurrentStatus(card.getCardStatus());
                        cmsActivityLog.setSourceType("API");
                        cmsActivityLog.setSourceName(wsmodel.getServicename());
                        cmsActivityLog.setActivityDateTime(DateTime.now());
                        GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                        return wsmodel;
                    }
                }
                else
                {
                    logger.error("Card not found for UserId [" + wsmodel.getUserid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD); //05 Card not found refer to Document
                    return wsmodel;
                }
                */

                dbQuery = "from " + CMSCard.class.getName() + " c where " +
                        " c.cardNumber= :CARDNO " +
                        " and c.customer= :CUSTOMER " +
                        " order by c.id desc";
                params = new HashMap<String, Object>();
                params.put("CARDNO", wsmodel.getCardnumber());
                params.put("CUSTOMER", nprel.getAccount().getCustomer());
                //CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);
                List<CMSCard> cardList = GeneralDao.Instance.find(dbQuery, params);

                if (cardList != null && cardList.size() > 1) {      //case in which customer has reorder a new card
                    CMSCard card = cardList.get(0);
                    if (!card.getCardStatus().equals("14")) {
                        logger.error("Latest Card not in Fresh State, cannot Activate a Reorder Card. rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //12 Invalid Card Status refer to Document
                        return wsmodel;

                    } else {
                        logger.info("Generating Card PIN...");

                        List<CMSAuth> lstcardrelation = null;
                        dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation ";// + " and c.channel = :chnnl ";
                        params = new HashMap<String, Object>();
                        params.put("relation", card.getCardNumberExpiryRelation());
                        //params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                        lstcardrelation = GeneralDao.Instance.find(dbQuery, params);

                        if (lstcardrelation == null || lstcardrelation.size() <= 0) {
                            logger.error("Card Relation not found for relation [" + card.getCardNumberExpiryRelation() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                            return wsmodel;
                        }

                        //m.rehman: setting last digits in WSEntity object for verification after decryption
                        //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                        wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                        //===============================================================================================================
                        if (!WalletCMSFunctions.GenerateCardPIN(wsmodel, lstcardrelation)) {
                            logger.error("Card PIN generation failed, rejecting...");
                            //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                            return wsmodel;
                        }

                        logger.info("Activating a Renew Card ...");
                        prevStatus = card.getCardStatus();
                        card.setCardStatus("00");
                        card.setActivationDate(WebServiceUtil.dateFormat.format(new Date()));
                        nprel.getAccount().setCard(card);
                        Set<CMSAccount> acctlist = new HashSet<CMSAccount>();
                        acctlist.add(nprel.getAccount());
                        card.setList_CustAccounts(acctlist);
                        GeneralDao.Instance.saveOrUpdate(card);
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        logger.info("Saving renew card activity ....");
                        cmsActivityLog = new CMSActivityLog();
                        cmsActivityLog.setRelation(card.getCardNumber());
                        cmsActivityLog.setPreviousStatus(prevStatus);
                        cmsActivityLog.setCurrentStatus(card.getCardStatus());
                        cmsActivityLog.setSourceType("API");
                        cmsActivityLog.setSourceName(wsmodel.getServicename());
                        cmsActivityLog.setActivityDateTime(DateTime.now());
                        GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                        //deactivating previous card
                        CMSCard prevCard;
                        for (int i = 1; i < cardList.size(); i++) {
                            prevCard = cardList.get(i);
                            if (prevCard.getCardStatus().equals("00")) {
                                prevStatus = prevCard.getCardStatus();
                                prevCard.setCardStatus("02");
                                GeneralDao.Instance.saveOrUpdate(prevCard);

                                logger.info("Saving previous card activity ....");
                                cmsActivityLog = new CMSActivityLog();
                                cmsActivityLog.setRelation(prevCard.getCardNumber());
                                cmsActivityLog.setPreviousStatus(prevStatus);
                                cmsActivityLog.setCurrentStatus(prevCard.getCardStatus());
                                cmsActivityLog.setSourceType("API");
                                cmsActivityLog.setSourceName(wsmodel.getServicename());
                                cmsActivityLog.setActivityDateTime(DateTime.now());
                                GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                                break;
                            }
                        }
                        return wsmodel;
                    }
                } else if (cardList != null && cardList.size() == 1) {      //case in which customer has a first and fresh card
                    CMSCard card = cardList.get(0);
                    if (card.getCardStatus().equals("00") || card.getCardStatus().equals("90")) {
                        logger.error("Card already in Active or Blocked State, cannot Activate Card. rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //12 Invalid Card Status refer to Document
                        return wsmodel;

                    } else if (card.getCardStatus().equals("14")) {
                        logger.info("Generating Card PIN...");

                        List<CMSAuth> lstcardrelation = null;
                        dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation ";// + " and c.channel = :chnnl ";
                        params = new HashMap<String, Object>();
                        params.put("relation", card.getCardNumberExpiryRelation());
                        //params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                        lstcardrelation = GeneralDao.Instance.find(dbQuery, params);

                        if (lstcardrelation == null || lstcardrelation.size() <= 0) {
                            logger.error("Card Relation not found for relation [" + card.getCardNumberExpiryRelation() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                            return wsmodel;
                        }

                        //m.rehman: setting last digits in WSEntity object for verification after decryption
                        //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                        wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                        //===============================================================================================================
                        if (!WalletCMSFunctions.GenerateCardPIN(wsmodel, lstcardrelation)) {
                            logger.error("Card PIN generation failed, rejecting...");
                            //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                            return wsmodel;
                        }

                        logger.info("Activating Card ...");
                        prevStatus = card.getCardStatus();
                        card.setCardStatus("00");
                        card.setActivationDate(WebServiceUtil.dateFormat.format(new Date()));
                        GeneralDao.Instance.saveOrUpdate(card);
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        logger.info("Saving card activity ....");
                        cmsActivityLog = new CMSActivityLog();
                        cmsActivityLog.setRelation(card.getCardNumber());
                        cmsActivityLog.setPreviousStatus(prevStatus);
                        cmsActivityLog.setCurrentStatus(card.getCardStatus());
                        cmsActivityLog.setSourceType("API");
                        cmsActivityLog.setSourceName(wsmodel.getServicename());
                        cmsActivityLog.setActivityDateTime(DateTime.now());
                        GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                        return wsmodel;
                    } else {
                        logger.error("Invalid Card Status [" + card.getCardStatus() + "], cannot Activate DebitCard rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //12 Invalid Card Status refer to Document
                        return wsmodel;
                    }
                } else {
                    logger.error("Card not found for UserId [" + wsmodel.getUserid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //05 Card not found refer to Document
                    return wsmodel;
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot verify wallet Pin. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing SupportPortalActivateDebitCard ..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteBlockDebitCard(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing BlockDebitCard Request...");
            String dbQuery, prevStatus;
            Map<String, Object> params;
            CMSActivityLog cmsActivityLog;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {

                if ((!nprel.getAccount().getStatus().equals("00")) || (!nprel.getAccount().getCustomer().getStatus().equals("00"))) {
                    logger.error("Invalid Wallet State or Status, card request not allowed, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //90 Customer not found);
                    return wsmodel;
                }

                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", nprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + nprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                }

                if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                    logger.error("PIN validation failed, rejecting...");
                    //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                    return wsmodel;
                }

                logger.info("Wallet Pin verified through HSM. Requesting DebitCard.");

                dbQuery = "from " + CMSCard.class.getName() +
                        " c where c.cardNumber= :CARDNO " +
                        " and c.customer= :CUSTOMER " +
                        " order by c.id desc ";
                params = new HashMap<String, Object>();
                params.put("CARDNO", wsmodel.getCardnumber());
                params.put("CUSTOMER", nprel.getAccount().getCustomer());
                CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);

                if (card != null) {
                    if (card.getCardStatus().equals("90")) {
                        logger.error("Card already in Blocked State, cannot Block Card. rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //12 Invalid Card Status refer to Document
                        return wsmodel;

                    } else {
                        logger.info("Blocking card...");
                        prevStatus = card.getCardStatus();
                        card.setCardStatus("90");
                        //card.setlastupdatedate(WebServiceUtil.dateFormat.format(new Date()));
                        GeneralDao.Instance.saveOrUpdate(card);
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        logger.info("Saving card activity ....");
                        cmsActivityLog = new CMSActivityLog();
                        cmsActivityLog.setRelation(card.getCardNumber());
                        cmsActivityLog.setPreviousStatus(prevStatus);
                        cmsActivityLog.setCurrentStatus(card.getCardStatus());
                        cmsActivityLog.setSourceType("API");
                        cmsActivityLog.setSourceName(wsmodel.getServicename());
                        cmsActivityLog.setActivityDateTime(DateTime.now());
                        GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                        return wsmodel;
                    }
                } else {
                    logger.error("Card not found for UserId [" + wsmodel.getUserid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //05 Card not found refer to Document
                    return wsmodel;
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing BlockDebitCard ..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteSupportPortalBlockDebitCard(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing ExecuteSupportPortalBlockDebitCard Request...");
            String dbQuery, prevStatus;
            Map<String, Object> params;
            CMSActivityLog cmsActivityLog;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                //no need to check for prov wallet as there will be no category of prov wallet
                //if((nprel.getAccount().getCategory().equals(AccType.CAT_PROV.StringValue())) || (!nprel.getAccount().getStatus().equals("00")) || (!nprel.getAccount().getCustomer().getStatus().equals("00")))
                /*
                if((!nprel.getAccount().getStatus().equals("00")) || (!nprel.getAccount().getCustomer().getStatus().equals("00")))
                {
                    logger.error("Invalid Wallet State or Status, card request not allowed, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //90 Customer not found);
                    return wsmodel;
                }
                */

                logger.info("Wallet found, verifying data...");
                WebServiceUtil.dobdFormat.setLenient(false);
                logger.info("wsmodel DateOfBirth [" + wsmodel.getDateofbirth() + "] DB DateOfBirth [" + WebServiceUtil.dobdFormat.format(nprel.getAccount().getCustomer().getDateofBirth()) + "]");
                logger.info("wsmodel Cnic [" + wsmodel.getCnic() + "] DB Cnic [" + nprel.getAccount().getCustomer().getCnic() + "]");
                if ((!wsmodel.getDateofbirth().equals(WebServiceUtil.dobdFormat.format(nprel.getAccount().getCustomer().getDateofBirth())))
                        || !wsmodel.getCnic().equals(nprel.getAccount().getCustomer().getCnic())) {
                    logger.error("Invalid Input Fields, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //02 for Invalid Account refer NayaPay Doc
                    return wsmodel;
                }

                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", nprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + nprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                }
//TODO: Raza commenting temporarily
//                if(HardwareSecurityModule.getInstance().PINValidation(wsmodel, cardrelation)) //Validate PIN, then process request DebitCard
//                {
                //logger.info("Wallet Pin verified through HSM. Requesting DebitCard.");

                dbQuery = "from " + CMSCard.class.getName() +
                        " c where c.cardNumber= :CARDNO " +
                        " and c.customer= :CUSTOMER " +
                        " order by c.id desc ";
                params = new HashMap<String, Object>();
                params.put("CARDNO", wsmodel.getCardnumber());
                params.put("CUSTOMER", nprel.getAccount().getCustomer());
                CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);

                if (card != null) {
                    if (card.getCardStatus().equals("90")) {
                        logger.error("Card already in Blocked State, cannot Block Card. rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //12 Invalid Card Status refer to Document
                        return wsmodel;
                    } else {
                        logger.info("Blocking card...");
                        prevStatus = card.getCardStatus();
                        card.setCardStatus("90");
                        //card.setlastupdatedate(WebServiceUtil.dateFormat.format(new Date()));
                        GeneralDao.Instance.saveOrUpdate(card);
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        logger.info("Saving card activity ....");
                        cmsActivityLog = new CMSActivityLog();
                        cmsActivityLog.setRelation(card.getCardNumber());
                        cmsActivityLog.setPreviousStatus(prevStatus);
                        cmsActivityLog.setCurrentStatus(card.getCardStatus());
                        cmsActivityLog.setSourceType("API");
                        cmsActivityLog.setSourceName(wsmodel.getServicename());
                        cmsActivityLog.setActivityDateTime(DateTime.now());
                        GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                        return wsmodel;
                    }
                } else {
                    logger.error("Card not found for UserId [" + wsmodel.getUserid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //05 Card not found refer to Document
                    return wsmodel;
                }

//                }//TODO: Raza commenting temporarily
//                else
//                {
//                    logger.error("Failed to validate Wallet Pin, rejecting...");
//                    wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD);
//                    return wsmodel;
//                }//TODO: Raza commenting temporarily
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot verify wallet Pin. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing ExecuteSupportPortalBlockDebitCard ..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteTempBlockDebitCard(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing TempBlockDebitCard Request...");
            String dbQuery, prevStatus;
            Map<String, Object> params;
            CMSActivityLog cmsActivityLog;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                //no need to check for prov wallet as there will be no category of prov wallet
                //if((nprel.getAccount().getCategory().equals(AccType.CAT_PROV.StringValue())) || (!nprel.getAccount().getStatus().equals("00")) || (!nprel.getAccount().getCustomer().getStatus().equals("00")))
                if ((!nprel.getAccount().getStatus().equals("00")) || (!nprel.getAccount().getCustomer().getStatus().equals("00"))) {
                    logger.error("Invalid Wallet State or Status, card request not allowed, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //90 Customer not found);
                    return wsmodel;
                }

                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channel = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", nprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + nprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                }
//TODO: Raza commenting temporarily
//                if(HardwareSecurityModule.getInstance().PINValidation(wsmodel, cardrelation)) //Validate PIN, then process request DebitCard
//                {
                //logger.info("Wallet Pin verified through HSM. Requesting DebitCard.");

                dbQuery = "from " + CMSCard.class.getName() +
                        " c where c.cardNumber= :CARDNO " +
                        " order by c.id desc ";
                params = new HashMap<String, Object>();
                params.put("CARDNO", wsmodel.getCardnumber());
                CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);


                if (card != null) {

                    if (wsmodel.getTempblockflag().equals("true")) {
                        if (card.getCardStatus().equals("00") || !card.getCardStatus().equals("03")) {
                            logger.error("Card already in Active/Blocked State, cannot Temporary Unblock Card. rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12 Invalid Card Status refer to Document
                            return wsmodel;
                        } else {
                            logger.info("Unblocking temporary blocked Card ...");
                            prevStatus = card.getCardStatus();
                            card.setCardStatus("00");
                            card.setActivationDate(WebServiceUtil.dateFormat.format(new Date()));
                            GeneralDao.Instance.saveOrUpdate(card);
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            logger.info("Saving card activity ....");
                            cmsActivityLog = new CMSActivityLog();
                            cmsActivityLog.setRelation(card.getCardNumber());
                            cmsActivityLog.setPreviousStatus(prevStatus);
                            cmsActivityLog.setCurrentStatus(card.getCardStatus());
                            cmsActivityLog.setSourceType("API");
                            cmsActivityLog.setSourceName(wsmodel.getServicename());
                            cmsActivityLog.setActivityDateTime(DateTime.now());
                            GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                            return wsmodel;
                        }
                    } else //will always be false
                    {
                        if (!card.getCardStatus().equals("00")) //90 also covered Block
                        {
                            logger.error("Card already in Inactive/Blocked State, cannot temporary block Card. rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12 Invalid Card Status refer to Document
                            return wsmodel;
                        } else {
                            logger.info("Temporary blocking Card ...");
                            prevStatus = card.getCardStatus();
                            card.setCardStatus("03");
                            GeneralDao.Instance.saveOrUpdate(card);
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            logger.info("Saving card activity ....");
                            cmsActivityLog = new CMSActivityLog();
                            cmsActivityLog.setRelation(card.getCardNumber());
                            cmsActivityLog.setPreviousStatus(prevStatus);
                            cmsActivityLog.setCurrentStatus(card.getCardStatus());
                            cmsActivityLog.setSourceType("API");
                            cmsActivityLog.setSourceName(wsmodel.getServicename());
                            cmsActivityLog.setActivityDateTime(DateTime.now());
                            GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                            return wsmodel;
                        }
                    }
                } else {
                    logger.error("Card not found for UserId [" + wsmodel.getUserid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD); //05 Card not found refer to Document
                    return wsmodel;
                }

//                }//TODO: Raza commenting temporarily
//                else
//                {
//                    logger.error("Failed to validate Wallet Pin, rejecting...");
//                    wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD);
//                    return wsmodel;
//                }//TODO: Raza commenting temporarily
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot verify wallet Pin. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing BlockDebitCard ..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteBlockChannel(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing BlockWalletAccount Request...");
            String dbQuery, prevStatus;
            Map<String, Object> params;
            CMSActivityLog cmsActivityLog;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


            if (nprel != null) {
                if (wsmodel.getEnableflag().equals("false")) {
                    if (!nprel.getAccount().getStatus().equals("00") || !nprel.getAccount().getCustomer().getStatus().equals("00")) {
                        logger.error("Invalid Account or Customer Status, not updating Status! rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 - Inactive Customer/Account Status ; Refer to Doc
                        return wsmodel;
                    } else {
                        prevStatus = nprel.getAccount().getStatus();
                        nprel.getAccount().setStatus("90"); //01 --> Warn/Temporary Block
                        nprel.getAccount().setLastUpdateDate(new Date());
                        GeneralDao.Instance.saveOrUpdate(nprel.getAccount());
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        logger.info("Saving wallet activity ....");
                        cmsActivityLog = new CMSActivityLog();
                        cmsActivityLog.setRelation(nprel.getAccount().getAccountNumber());
                        cmsActivityLog.setPreviousStatus(prevStatus);
                        cmsActivityLog.setCurrentStatus(nprel.getAccount().getStatus());
                        cmsActivityLog.setSourceType("API");
                        cmsActivityLog.setSourceName(wsmodel.getServicename());
                        cmsActivityLog.setActivityDateTime(DateTime.now());
                        GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                        return wsmodel;
                    }
                } else //This will always be true/enable - preverified by webservice validation
                {
                    if (!nprel.getAccount().getCustomer().getStatus().equals("00")) {
                        logger.error("Account alreay active or Invalid Customer Status, not updating Status! rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 - Inactive Customer/Account Status ; Refer to Doc
                        return wsmodel;
                    } else {
                        if (nprel.getAccount().getStatus().equals("90"))//01 --> Block
                        {
                            logger.info("Enabling Cutomer Account...");
                            prevStatus = nprel.getAccount().getStatus();
                            nprel.getAccount().setStatus("00");
                            nprel.getAccount().setLastUpdateDate(new Date());
                            GeneralDao.Instance.saveOrUpdate(nprel.getAccount());
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            logger.info("Saving wallet activity ....");
                            cmsActivityLog = new CMSActivityLog();
                            cmsActivityLog.setRelation(nprel.getAccount().getAccountNumber());
                            cmsActivityLog.setPreviousStatus(prevStatus);
                            cmsActivityLog.setCurrentStatus(nprel.getAccount().getStatus());
                            cmsActivityLog.setSourceType("API");
                            cmsActivityLog.setSourceName(wsmodel.getServicename());
                            cmsActivityLog.setActivityDateTime(DateTime.now());
                            GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                            return wsmodel;
                        } else {
                            logger.error("Invalid Account status other than disbale, not updating Status! rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //90 Customer not found
                            return wsmodel;
                        }
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot enable/disable wallet. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing BlockWalletAccount..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    //m.rehman: for NayaPay, handling for Askari Bank Services ; Raza Updated after OTC
    public static WalletCMSWsEntity ExecuteCustomerInquiry(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing CustomerInquiry Request...");

            CMSCustomer customer;
            String dbQuery;
            Map<String, Object> params;

            List<CMSCustomer> custlist;

            if (Util.hasText(wsmodel.getUserid())) {
                dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getUserid());

                NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

                if (nprel != null) {
                    //if (!nprel.getAccount().getStatus().equals("00") || !nprel.getAccount().getCustomer().getStatus().equals("00"))
                    if (nprel.getAccount().getStatus().equals("04")     //Fraud Block
                            || nprel.getAccount().getStatus().equals("07")     //KYC Block
                            || nprel.getAccount().getStatus().equals("09")     //AML Block
                            || nprel.getAccount().getStatus().equals("90")     //Admin Block
                            || nprel.getAccount().getCustomer().getStatus().equals("04")     //Fraud Block
                            || nprel.getAccount().getCustomer().getStatus().equals("07")     //KYC Block
                            || nprel.getAccount().getCustomer().getStatus().equals("09")     //AML Block
                            || nprel.getAccount().getCustomer().getStatus().equals("90"))     //Admin Block
                    {
                        logger.error("Customer/Account not Active");
                        wsmodel.setRespcode(ISOResponseCodes.ACCOUNT_INACTIVE); //32 - Inactive Customer/Account Status ; Refer to Doc
                        return wsmodel;
                    }

                    //getting transaction charges
                    String serviceName = wsmodel.getServicename();
                    wsmodel.setServicename("CashDeposit");
                    //m.rehman: Euronet integration, add local/international flag in charges
                    //getting transaction charges
                    FetchTransactionCharge(wsmodel, nprel.getAccount().getProduct(), "0");      //0-false

                    //process wallet limit
                    if (!WalletCMSFunctions.VerifyWalletLimit(wsmodel, nprel.getAccount(), null, Boolean.FALSE)) {
                        if (Util.hasText(wsmodel.getRespcode())) {
                            if (wsmodel.getRespcode().equals(ISOResponseCodes.NP_SRC_LIMIT_EXCEEDED)) {
                                wsmodel.setRespcode(ISOResponseCodes.LIMIT_EXCEEDED);
                            } else {
                                wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS);
                            }
                        } else {
                            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS);
                        }

                        logger.error("Limit processing failed, rejecting...");
                        wsmodel.setServicename(serviceName);
                        return wsmodel;
                    }

                    wsmodel.setServicename(serviceName);

                    if ((Long.parseLong(wsmodel.getAmounttransaction())
                            - Long.parseLong(wsmodel.getNayapaycharges())
                            //- 1500L > 0)) {
                            - Long.parseLong(wsmodel.getSrcchargeamount()) > 0)) {

                        long depositamount = Long.parseLong(wsmodel.getAmounttransaction())
                                - Long.parseLong(wsmodel.getNayapaycharges())
                                //1500; //1500 = 15 RS (10 Charge + 5 tax) //TODO
                                - Long.parseLong(wsmodel.getSrcchargeamount());

                        wsmodel.setDepositamount("" + StringUtils.leftPad("" + depositamount, 12, "0"));
                        wsmodel.setCustomername(nprel.getAccount().getCustomer().getFirstname());
                        wsmodel.setCnic(nprel.getAccount().getCustomer().getCnic());
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel; //currently
                    } else if ((Long.parseLong(wsmodel.getAmounttransaction()) == 0L) && (Long.parseLong(wsmodel.getNayapaycharges()) == 0L)) {
                        wsmodel.setDepositamount("" + StringUtils.leftPad("", 12, "0"));
                        wsmodel.setCustomername(nprel.getAccount().getCustomer().getFirstname());
                        wsmodel.setCnic(nprel.getAccount().getCustomer().getCnic());
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel; //currently
                    } else {
                        logger.error("Invalid Amount, Bank Charges Received! Rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_AMOUNT_INCORRECT);
                        return wsmodel;
                    }
                } else {
                    logger.info("No Account Relation Found for UserId [" + wsmodel.getUserid() + "], cannot perform CustomerInquiry. rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_NOT_FOUND); //90 Customer not found
                    return wsmodel;
                }
            } else {
                logger.error("No Identifier Found for NayaPay customer");
                wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing CustomerInquiry..!");
            wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED); //Raza Refer to Document '12'
            return wsmodel;
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteCashDeposit(WalletCMSWsEntity wsmodel) {
        logger.info("Executing CashDeposit Request...");
        try {
            String dbQuery;
            Map<String, Object> params;

            if (Util.hasText(wsmodel.getUserid())) {
                dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getUserid());

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                //NayaPayRelation nprel = (NayaPayRelation)GeneralDao.Instance.findObject(dbQuery, params);
                NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                if (nprel != null) {

                    //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                    nprel.setAccount((CMSAccount) GeneralDao.Instance.getCurrentSession().get(CMSAccount.class, nprel.getAccount().getId(), LockMode.UPGRADE));
                    GeneralDao.Instance.getCurrentSession().refresh(nprel.getAccount());
                    ////////////////////////////////////////////////////////////////////////////////////

                    //if (!nprel.getAccount().getStatus().equals("00") || !nprel.getAccount().getCustomer().getStatus().equals("00"))
                    if (nprel.getAccount().getStatus().equals("04")     //Fraud Block
                            || nprel.getAccount().getStatus().equals("07")     //KYC Block
                            || nprel.getAccount().getStatus().equals("09")     //AML Block
                            || nprel.getAccount().getStatus().equals("90")     //Admin Block
                            || nprel.getAccount().getCustomer().getStatus().equals("04")     //Fraud Block
                            || nprel.getAccount().getCustomer().getStatus().equals("07")     //KYC Block
                            || nprel.getAccount().getCustomer().getStatus().equals("09")     //AML Block
                            || nprel.getAccount().getCustomer().getStatus().equals("90"))     //Admin Block
                    {
                        logger.error("Customer/Account not Active");
                        wsmodel.setRespcode(ISOResponseCodes.ACCOUNT_INACTIVE); //32 - Inactive Customer/Account Status ; Refer to Doc
                        return wsmodel;
                    }

                    //m.rehman: Euronet integration, add local/international flag in charges
                    //getting transaction charges
                    FetchTransactionCharge(wsmodel, nprel.getAccount().getProduct(), "0");      //0-false

                    logger.info("Verifying Amounts....");
                    //if((Long.parseLong(wsmodel.getAmounttransaction()) - Long.parseLong(wsmodel.getNayapaycharges()) -
                    //        1500L > 0)) {
                    if ((Long.parseLong(wsmodel.getAmounttransaction())
                            - Long.parseLong(wsmodel.getNayapaycharges())
                            - Long.parseLong(wsmodel.getSrcchargeamount())) > 0) {

                        long depositamount = Long.parseLong(wsmodel.getAmounttransaction())
                                - Long.parseLong(wsmodel.getNayapaycharges())
                                //1500; //1500 = 15 RS (10 Charge + 5 tax)
                                - Long.parseLong(wsmodel.getSrcchargeamount());


                        wsmodel.setDepositamount("" + StringUtils.leftPad("" + depositamount, 12, "0"));
                        wsmodel.setCustomername(nprel.getAccount().getCustomer().getFirstname());
                    } else if ((Long.parseLong(wsmodel.getAmounttransaction()) == 0L) && (Long.parseLong(wsmodel.getNayapaycharges()) == 0L)) {
                        wsmodel.setDepositamount("" + StringUtils.leftPad("", 12, "0"));
                        wsmodel.setCustomername(nprel.getAccount().getCustomer().getFirstname());
                    } else {
                        logger.error("Invalid Amount, Bank Charges Received! Rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_AMOUNT_INCORRECT);
                        return wsmodel;
                    }

                    //verify Maximum Balance Limit
                    /*if (!WalletCMSFunctions.VerifyMaxBalanceLimit(wsmodel, nprel.getAccount()))
                    {
                        logger.error("Maximum Balance Limit verification failed, rejecting...");
                        return wsmodel;
                    }*/

                    //process wallet limit
                    if (!WalletCMSFunctions.ProcessCreditWalletLimit(wsmodel, nprel.getAccount(), null, Boolean.TRUE)) {
                        if (Util.hasText(wsmodel.getRespcode())) {
                            if (wsmodel.getRespcode().equals(ISOResponseCodes.NP_SRC_LIMIT_EXCEEDED)) {
                                wsmodel.setRespcode(ISOResponseCodes.LIMIT_EXCEEDED);
                            } else {
                                wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS);
                            }
                        } else {
                            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS);
                        }

                        logger.error("Limit processing failed, rejecting...");
                        return wsmodel;
                    }

                    logger.info("Going to Deposit Cash in Wallet...");

                    if (FinanceManager.CashDeposit(wsmodel, nprel.getAccount())) {
                        logger.info("Cash Deposit Loaded successfully!");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                        wsmodel.setIncludeinstatement(1);
                        ////////////////////////////////////////////////////////////////////////////////////////////////////

                        return wsmodel;
                    } else {
                        logger.info("Unable to Deposit Cash in Wallet... **********Manual Process Required!**********");

                        //process wallet limit
                        logger.info("Reversing Limit ...");
                        String respCode = wsmodel.getRespcode();
                        if (!WalletCMSFunctions.ProcessCreditWalletLimit(wsmodel, nprel.getAccount(), null, Boolean.FALSE)) {
                            logger.error("Limit processing failed, rejecting...");
                            return wsmodel;
                        }
                        wsmodel.setRespcode(respCode);
                        return wsmodel;
                    }

                } else {
                    logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot perform CustomerInquiry. rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_NOT_FOUND); //90 Customer not found
                    return wsmodel;
                }
            } else {
                logger.error("No Identifier Found for NayaPay customer");
                wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing CashDeposit..!");
            wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED); //Raza Refer to Document '12'
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    public static WalletCMSWsEntity ExecuteChequeClearing(WalletCMSWsEntity wsmodel) {
        logger.info("Executing ChequeClearing Request...");
        try {
            CMSAccount account = null;
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + CMSAccount.class.getName() + " c where c.customer.MobileNumber= :MOBNUM";
            params = new HashMap<String, Object>();
            params.put("MOBNUM", wsmodel.getMobilenumber());

            account = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (account != null) {
                if (!account.getStatus().equals("00") || !account.getCustomer().getStatus().equals("00")) {
                    logger.error("Account not Active");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 - Inactive Customer/Account Status ; Refer to Doc
                    return wsmodel;
                } else {

                    //amount fields validation start
                    logger.info("Verifying Amounts....");
                    if (Long.parseLong(wsmodel.getTotalamount()) == 0L) {
                        logger.error("Zero Amount Received! rejecting..");
                        wsmodel.setRespcode(ISOResponseCodes.ERROR_AMOUNT);
                        return wsmodel;
                    } else if ((Long.parseLong(wsmodel.getTotalamount()) -
                            Long.parseLong(wsmodel.getBankcharges()) -
                            Long.parseLong(wsmodel.getBanktaxamount()) -
                            Long.parseLong(wsmodel.getNayapaycharges()) -
                            Long.parseLong(wsmodel.getNayapaytaxamount())) < 0) {
                        logger.error("Invalid Amount Configuration Received! rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.ERROR_AMOUNT);
                        return wsmodel;
                    }
                    //amount fields validation end

                    //m.rehman: Euronet integration, add local/international flag in charges
                    //getting transaction charges
                    FetchTransactionCharge(wsmodel, account.getProduct(), "0");      //0-false

                    logger.info("Going to Execute Clearing Cheque in Wallet...");

                    if (FinanceManager.ChequeClearing(wsmodel, account)) {
                        logger.info("Cheque Clearing executed successfully!");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        logger.info("Unable to execute Cheque Clearing in Wallet... **********Manual Process Required!**********");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_IMD);
                        return wsmodel;
                    }
                }
            } else {
                logger.error("Account not found for Mobile Number [" + wsmodel.getMobilenumber() + "]");
                wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //Raza Refer to Document '02' no account
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing ChequeClearing..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Raza Refer to Document '12'
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteChequeFT(WalletCMSWsEntity wsmodel) {
        logger.info("Executing ChequeFT Request...");
        try {
            CMSAccount account = null;
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + CMSAccount.class.getName() + " c where c.customer.MobileNumber= :MOBNUM";
            params = new HashMap<String, Object>();
            params.put("MOBNUM", wsmodel.getMobilenumber());

            account = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (account != null) {
                if (!account.getStatus().equals("00") || !account.getCustomer().getStatus().equals("00")) {
                    logger.error("Account not Active");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 - Inactive Customer/Account Status ; Refer to Doc
                    return wsmodel;
                } else {

                    //amount fields validation start
                    logger.info("Verifying Amounts....");
                    if (Long.parseLong(wsmodel.getTotalamount()) == 0L) {
                        logger.error("Zero Amount Received! rejecting..");
                        wsmodel.setRespcode(ISOResponseCodes.ERROR_AMOUNT);
                        return wsmodel;
                    } else if ((Long.parseLong(wsmodel.getTotalamount()) -
                            Long.parseLong(wsmodel.getBankcharges()) -
                            Long.parseLong(wsmodel.getBanktaxamount()) -
                            Long.parseLong(wsmodel.getNayapaycharges()) -
                            Long.parseLong(wsmodel.getNayapaytaxamount())) < 0) {
                        logger.error("Invalid Amount Configuration Received! rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.ERROR_AMOUNT);
                        return wsmodel;
                    }
                    //amount fields validation end

                    //m.rehman: Euronet integration, add local/international flag in charges
                    //getting transaction charges
                    FetchTransactionCharge(wsmodel, account.getProduct(), "0");      //0-false

                    logger.info("Going to Execute Cheque FT in Wallet...");

                    if (FinanceManager.ChequeFT(wsmodel, account)) {
                        logger.info("Cheque FT executed successfully!");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        logger.info("Unable to execute Cheque FT in Wallet... **********Manual Process Required!**********");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_IMD);
                        return wsmodel;
                    }
                }
            } else {
                logger.error("Account not found for Mobile Number [" + wsmodel.getMobilenumber() + "]");
                wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //Raza Refer to Document '02' no account
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing ChequeFT..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Raza Refer to Document '12'
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteChequeBounce(WalletCMSWsEntity wsmodel) {
        logger.info("Executing ChequeBounce Request...");
        try {
            CMSAccount account = null;
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + CMSAccount.class.getName() + " c where c.customer.MobileNumber= :MOBNUM";
            params = new HashMap<String, Object>();
            params.put("MOBNUM", wsmodel.getMobilenumber());

            account = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (account != null) {
                if (!account.getStatus().equals("00") || !account.getCustomer().getStatus().equals("00")) {
                    logger.error("Account not Active");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 - Inactive Customer/Account Status ; Refer to Doc
                    return wsmodel;
                } else {

                    //amount fields validation start
                    logger.info("Verifying Amounts....");
                    if (Long.parseLong(wsmodel.getTotalamount()) == 0L) {
                        logger.error("Zero Amount Received! rejecting..");
                        wsmodel.setRespcode(ISOResponseCodes.ERROR_AMOUNT);
                        return wsmodel;
                    } /*else if ((Long.parseLong(wsmodel.getTotalamount()) -
                            Long.parseLong(wsmodel.getBankcharges()) -
                            Long.parseLong(wsmodel.getBanktaxamount()) -
                            Long.parseLong(wsmodel.getNayapaycharges()) -
                            Long.parseLong(wsmodel.getNayapaytaxamount())) < 0) {
                        logger.error("Invalid Amount Configuration Received! rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.ERROR_AMOUNT);
                        return wsmodel;
                    }*/
                    //amount fields validation end

                    logger.info("Going to Execute Cheque Bounce in Wallet...");

                    if (FinanceManager.ChequeBounce(wsmodel, account)) {
                        logger.info("Cheque Bounce executed successfully!");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        logger.info("Unable to execute Cheque Bounce in Wallet... **********Manual Process Required!**********");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_IMD);
                        return wsmodel;
                    }
                }
            } else {
                logger.error("Account not found for Mobile Number [" + wsmodel.getMobilenumber() + "]");
                wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //Raza Refer to Document '02' no account
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing ChequeFT..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Raza Refer to Document '12'
            return wsmodel;
        }
    }

    //m.rehman: for NayaPay, Onelink Bill Payment Topup
    public static WalletCMSWsEntity ExecuteBillInquiry(WalletCMSWsEntity wsmodel) {
        logger.info("Executing BillInquiry Request...");
        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            // Asim Shahzad, Date : 29th June 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
            if (Util.hasText(wsmodel.getUserid())) {
                logger.info("Resolving wallet using user id....");

                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getUserid());
                params.put("CAT", AccType.CAT_WALLET.StringValue()); //Raza adding 25-02-2019 should be wallet
            } else {
                logger.info("Resolving wallet using IBAN....");

                dbQuery = "from " + CMSAccount.class.getName() + " c where c.iBan= :IBAN" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("IBAN", wsmodel.getConsumerno());
                params.put("CAT", AccType.CAT_WALLET.StringValue());
            }
            // ======================================================================================

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null) {
                if (userwallet.getStatus().equals("00") && userwallet.getCustomer().getStatus().equals("00")) {

                    //TODO: Verify LoadWallet TransactionPermission
                    //TODO: Validate PIN
                    logger.info("Wallet Verified by UserId!, replying...");

                    wsmodel.setCustomername(WordUtils.capitalize(userwallet.getAccountTitle().toLowerCase()));
                    wsmodel.setBillstatus("T");
                    wsmodel.setDuedate(StringUtils.leftPad("", 8, " "));
                    wsmodel.setAmtwithinduedate(StringUtils.leftPad("", 14, " "));
                    wsmodel.setAmtafterduedate(StringUtils.leftPad("", 14, " "));
                    wsmodel.setBillingmonth(StringUtils.leftPad("", 4, " "));
                    wsmodel.setDatepaid(StringUtils.leftPad("", 8, " "));
                    wsmodel.setAmtpaid(StringUtils.leftPad("", 12, " "));
                    wsmodel.setTranauthid(StringUtils.leftPad("", 6, " "));

                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;

                } else {
                    logger.info("Wallet Status Blocked/Disabled for UserId [" + wsmodel.getUserid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT_STATUS); //67 - Invalid Account Status ; Refer to Doc
                    return wsmodel;
                }
            } else {
                logger.info("No Account Relation Found for UserId [" + wsmodel.getUserid() + "], rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing CashDeposit..!");
            wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED); //Raza Refer to Document '12'
            return wsmodel;
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteBillPayment(WalletCMSWsEntity wsmodel) {
        logger.info("Executing BillPayment Request...");
        try {
            String dbQuery;
            Map<String, Object> params;

            //Wallet Verification by UserId start

            //Wallet Verification by UserId end


            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

            if (userwallet != null) {
                if (userwallet.getStatus().equals("00") && userwallet.getCustomer().getStatus().equals("00")) {
                    //amount fields validation start
                    logger.info("Verifying Amounts....");
                    if (Long.parseLong(wsmodel.getAmounttransaction()) == 0L) {
                        logger.error("Zero Amount Received! rejecting..");
                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                        return wsmodel;
                    }
                    //amount fields validation end

                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                    params = new HashMap<String, Object>();
                    params.put("relation", userwallet.getAccountNumber());
                    params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                    CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                    if (cardrelation == null) {
                        logger.error("Card Relation not found for account [" + userwallet.getAccountNumber() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                        return wsmodel;
                    } else {
                        if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                            logger.error("PIN validation failed, rejecting...");
                            //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                            return wsmodel;
                        }

                        //m.rehman: Euronet integration, add local/international flag in charges
                        //getting transaction charges
                        FetchTransactionCharge(wsmodel, userwallet.getProduct(), "0");      //0-false

                        //process wallet limit
                        if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, userwallet, null, Boolean.TRUE)) {
                            logger.error("Limit processing failed, rejecting...");
                            return wsmodel;
                        }

                        logger.info("Going to Bill Payment in Wallet...");

                        if (FinanceManager.BillPayment(wsmodel, userwallet)) {
                            logger.info("Bill Payment done successfully!");
                            //for transaction detail
                            wsmodel.setUsername(userwallet.getAccountTitle());
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                            wsmodel.setIncludeinstatement(1);
                            ////////////////////////////////////////////////////////////////////////////////////////////////////

                        } else {
                            logger.info("Unable to Bill Payment in Wallet... **********Manual Process Required!**********");

                            //reversing wallet limit
                            logger.info("Reversing Limit ...");
                            String respCode = wsmodel.getRespcode();
                            if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, userwallet, null, Boolean.FALSE)) {
                                logger.error("Limit reversing failed, rejecting...");
                                return wsmodel;
                            }
                            wsmodel.setRespcode(respCode);
                        }
                    }
                } else {
                    logger.error("Wallet not found or Invalid wallet or Customer status, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE);
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
            return wsmodel;
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing BillPayment..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Raza Refer to Document '12'
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteBalanceInquiry(WalletCMSWsEntity wsmodel) {
        logger.info("Executing BalanceInquiry Request...");
        try {
            String dbQuery;
            Map<String, Object> params;

            //m.rehman: 08-10-2020, VP-NAP-202010081/ VC-NAP-202010081 - Deployment 08-10-2020
            if (Util.hasText(wsmodel.getBranchname())) {
                wsmodel.setBankcode(wsmodel.getBranchname());
            }
            //////////////////////////////////////////////////////////////////////////////////

            if (Util.hasText(wsmodel.getCardnumber())) {
                //m.rehman: 10-12-2021 - VP-NAP-202111291 / VC-NAP-202111291 / VG-NAP-202111291 - Meezan ATM On-Us Withdrawal/Balance Inquiry and Reversal
                //Huzaifa: 11/08/2023: FW: NAP-P5-23 ==> [ Logging email ] ==> Segregation of ATM On Us Channels Bank - UBL & BAFL
                if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.UNILONUSATM) && !Util.hasText(wsmodel.getCardexpiry())) {
                    dbQuery = "from " + CMSCard.class.getName() + " c where " +
                            " c.cardNumber= :CARDNO " +
                            " and c.cardStatus= '00' " +
                            " order by c.id desc ";
                    params = new HashMap<String, Object>();
                    params.put("CARDNO", wsmodel.getCardnumber());

                } else {
                    //dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO ";
                    dbQuery = "from " + CMSCard.class.getName() + " c where " +
                            " c.cardNumber= :CARDNO " +
                            " and substr(c.expiryDate,3,4) = :EXPDATE ";
                    params = new HashMap<String, Object>();
                    params.put("CARDNO", wsmodel.getCardnumber());
                    params.put("EXPDATE", wsmodel.getCardexpiry());
                }

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                //CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);
                CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                if (card == null) {
                    logger.error("Card not Found in DB with CardNo [" + wsmodel.getCardnumber() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                    return wsmodel;
                } else {
                    //m.rehman: 21-03-2023 - VP-NAP-202303171 - Notification Issues - Production Urgent
                    String cardType = "", cardScheme = "";
                        if ("7702".equals(card.getProduct().getProductId())) {
                            cardType = "Visa Physical";
                            cardScheme = "Visa";
                        } else if ("7703".equals(card.getProduct().getProductId())) {
                            cardType = "Visa Virtual";
                            cardScheme = "Visa";
                        } else {
                            cardType = "PayPak Physical";
                            cardScheme = "PayPak";
                        }

                    wsmodel.setCardtype(cardType);
                    wsmodel.setCardscheme(cardScheme);
                    wsmodel.setCardnumber(card.getCardNumber());
                    ///////////////////////////////////////////////////////////////////////////////////////

                    //m.rehman: 21-01-2020, VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 - VISA (Switch-Middleware Integration document v 4.7.6) - Release 4
                    //checking operation permission on card
                    if (!WalletCMSFunctions.CheckCardControls(wsmodel, card)) {
                        logger.error("Transaction not allowed on this card, rejecting ...");
                        wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED);
                        wsmodel.setMessage("PERMISSION DENIED");
                        return wsmodel;
                    }
                    ////////////////////////////////////////////////////////////////////////////////////////////////

                    if (!card.getCardStatus().equals("00")) {
                        //m.rehman: Euronet Integration
                        if (card.getCardStatus().equals("90")) {
                            logger.error("Card in Blocked State, rejcting...");
                            wsmodel.setRespcode(ISOResponseCodes.HOT_CARD); //15-Hot Card ; Refer to Doc
                            wsmodel.setMessage("HOT CARD");
                            //m.rehman: 25-06-2021, Visa certification
                            //return wsmodel;
                        } else if (card.getCardStatus().equals("03")) {
                            logger.error("Card in Warm State, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.WARM_CARD); //14-Warm Card ; Refer to Doc
                            wsmodel.setMessage("WARM CARD");
                            //m.rehman: 25-06-2021, Visa certification
                            //return wsmodel;
                        } else {
                            logger.error("Invalid Card Auth Status [ " + card.getCardStatus() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.BAD_CARD_STATUS); //16-BadCardStatus ; Refer to Doc
                            wsmodel.setMessage("BAD STATUS");
                            //m.rehman: 25-06-2021, Visa certification
                            //return wsmodel;
                        }

                        //m.rehman: 25-06-2021, Visa certification
                        if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
                            if (Util.hasText(wsmodel.getIcccarddata())) {
                                //TODO: need to update below according to scheme requirement
                                //setting icc data without 9F26 (Application Cryptogram) tag for 1Link
                                String iccData = wsmodel.getIcccarddata();
                                String iccDataUpdate;
                                int index = iccData.indexOf(EMVTags.APP_CRYPT);
                                iccDataUpdate = iccData.substring(0, index);
                                iccDataUpdate += iccData.substring(index + 22, iccData.length());
                                wsmodel.setIcccarddata(iccDataUpdate);
                            }

                            String emvData = wsmodel.getSelfdefinedata();
                            if (Util.hasText(emvData))
                                emvData = emvData.substring(0, 2) + "0";
                            wsmodel.setSelfdefinedata(emvData);
                        }

                        return wsmodel;
                        ////////////////////////////////////////////////////////////////////////////////////////////////

                        /*
                        logger.error("Inactive Card Found in DB with CardNo [" + wsmodel.getCardnumber() + "] Status [" + card.getCardStatus() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12 - Invalid Card Status ; Refer to Doc
                        return wsmodel;
                        */
                    } else {
                        // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                        // Asim Shahzad, Date : 12th Nov 2020, Tracking ID : VP-NAP-202010271
                        //Huzaifa Commented - 160124
//                        String PAN = WebServiceUtil.getPANDecryptedValue(wsmodel.getCardnumber());
//
//                        String Bin = PAN.substring(0,8);
//
//                        dbQuery = "from " + IMD.class.getName() + " n where " +
//                                "n.IMD = :CARD_BIN ";
//                        params = new HashMap<String, Object>();
//                        params.put("CARD_BIN", Bin);
//
//                        IMD obj_Bin = (IMD) GeneralDao.Instance.findObject(dbQuery, params);
//
//                        if(null == obj_Bin) {
//                            Bin = PAN.substring(0,6);
//
//                            dbQuery = "from " + IMD.class.getName() + " n where " +
//                                    "n.IMD = :CARD_BIN ";
//                            params = new HashMap<String, Object>();
//                            params.put("CARD_BIN", Bin);
//
//                            obj_Bin = (IMD) GeneralDao.Instance.findObject(dbQuery, params);
//                        }
//
//                        //m.rehman: 23-02-202, Euronet integration
//                        if (obj_Bin != null ) {
//                            wsmodel.setCardscheme(obj_Bin.getCardScheme());
//                            wsmodel.setAcqbin(obj_Bin.getIMD());
//                        }

                        // ==================================================================
                        // ==== Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101 ====

                        if (card.getList_CustAccounts() == null) {
                            logger.error("No Account Found for CardNo [" + wsmodel.getCardnumber() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                            wsmodel.setMessage("INVALID ACCOUNT");
                            return wsmodel;
                        }

                        CMSAccount account = null; //TODO: Raza should Update THIS with default
                        for (CMSAccount acct : card.getList_CustAccounts()) {
                            account = acct;
                            if (!acct.getStatus().equals("00") || !acct.getCustomer().getStatus().equals("00")) {
                                logger.error("Inactive Account or Customer Found in DB for CardNo [" + wsmodel.getCardnumber() + "]");
                                //Arsalan Akhter, Date:06-Apr-2022, Tikcet:VG-NAP-202203161(MBL- Nayapay Debit Card On-US - Kick off)
                                wsmodel.setRespcode(ISOResponseCodes.ACCOUNT_INACTIVE); //32 - Inactive Account/Customer Status ; Refer to Doc
                                wsmodel.setMessage("ACCOUNT INACTIVE");
                                //===================================================================================================
                                return wsmodel;
                            }
                        }

                        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                        account = (CMSAccount) GeneralDao.Instance.getCurrentSession().get(CMSAccount.class, account.getId(), LockMode.UPGRADE);
                        GeneralDao.Instance.getCurrentSession().refresh(account);
                        ////////////////////////////////////////////////////////////////////////////////////

                        //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                        //m.rehman: 07-10-2020, Balance Inquiry transaction is not returned by switch in transaction listing
                        if (account.getCategory() != null && account.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                            wsmodel.setMerchantid(account.getUserId());
                        } else {
                            wsmodel.setUserid(account.getUserId());
                        }

                        // Asim Shahzad, Date : 12th Nov 2020, Tracking ID : VP-NAP-202010271
                        wsmodel.setCustomername(account.getAccountTitle());
                        // ==================================================================

                        dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                        params = new HashMap<String, Object>();
                        params.put("relation", card.getCardNumberExpiryRelation());
                        params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                        CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                        if (cardrelation == null) {
                            logger.error("Card Relation not found for relation [" + card.getCardNumberExpiryRelation() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_RECORD); //Invalid Card Record ; Raza update THIS
                            wsmodel.setMessage("INVALID CARD RECORD");
                            return wsmodel;
                        }

                        //m.rehman: setting last digits in WSEntity object for verification after decryption
                        //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                        wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                        //===============================================================================================================
                        //Commented By Waleed
                        if (!WalletCMSFunctions.ValidateCardPIN(wsmodel, cardrelation)) {
                            logger.error("PIN validation failed, rejecting...");
                            //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc

                            //m.rehman: Euronet Integration
                            if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
                                if (Util.hasText(wsmodel.getIcccarddata())) {
                                    //TODO: need to update below according to scheme requirement
                                    //setting icc data without 9F26 (Application Cryptogram) tag for 1Link
                                    String iccData = wsmodel.getIcccarddata();
                                    String iccDataUpdate;
                                    int index = iccData.indexOf(EMVTags.APP_CRYPT);
                                    iccDataUpdate = iccData.substring(0, index);
                                    iccDataUpdate += iccData.substring(index + 22, iccData.length());
                                    wsmodel.setIcccarddata(iccDataUpdate);
                                }

                                String emvData = wsmodel.getSelfdefinedata();
                                if (Util.hasText(emvData))
                                    emvData = emvData.substring(0, 2) + "0";
                                wsmodel.setSelfdefinedata(emvData);
                            }
                            wsmodel.setMessage("INVALID PIN/PIN VALIDATION FAILED");
                            return wsmodel;
                        }
                        logger.info("PIN validated successfully");

                        //Commented By Waleed
                         if (WalletCMSFunctions.CVVCheckRequired(wsmodel) || WalletCMSFunctions.ICVVCheckRequired(wsmodel)) {
                            if (!WalletCMSFunctions.ValidateCVV(wsmodel, cardrelation, true)) {
                                logger.error("CVV/ICVV validation failed, rejecting...");
                                //wsmodel.setRespcode(ISOResponseCodes.SECURITY_VIOLATION); //24-BAD PIN; refer to Doc

                                if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
                                    if (Util.hasText(wsmodel.getIcccarddata())) {
                                        //TODO: need to update below according to scheme requirement
                                        //setting icc data without 9F26 (Application Cryptogram) tag for 1Link
                                        String iccData = wsmodel.getIcccarddata();
                                        String iccDataUpdate;
                                        int index = iccData.indexOf(EMVTags.APP_CRYPT);
                                        iccDataUpdate = iccData.substring(0, index);
                                        iccDataUpdate += iccData.substring(index + 22, iccData.length());
                                        wsmodel.setIcccarddata(iccDataUpdate);
                                    }

                                    String emvData = wsmodel.getSelfdefinedata();
                                    if (Util.hasText(emvData))
                                        emvData = emvData.substring(0, 2) + "0";
                                    wsmodel.setSelfdefinedata(emvData);
                                }
                                wsmodel.setMessage("CVV/ICVV VALIDATION FAILED");
                                return wsmodel;
                            }
                            logger.info("CVV/ICVV validated successfully");
                        }

                        if (Util.hasText(wsmodel.getIcccarddata())) {
                              //Commented By Waleed
                            if (!WalletCMSFunctions.ValidateCryptogram(wsmodel, cardrelation)) {
                                logger.error("Cryptogram validation failed, rejecting...");
                                wsmodel.setMessage("CRYPTOGRAM VALIDATION FAILED");
                                //wsmodel.setRespcode(ISOResponseCodes.SECURITY_VIOLATION); //24-BAD PIN; refer to Doc
                                return wsmodel;
                            }
                            logger.info("Cryptogram validated successfully");

                        } else if (Util.hasText(wsmodel.getPosentrymode()) && wsmodel.getPosentrymode().substring(0, 2).equals(ISOPOSEntryMode.PANEntryMode.ICC_READ_FAIL_MST_READ)) {
                            logger.error("Fallback case: Cryptogram validation not performed!");

                            //m.rehman: Euronet Integration
                            if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
                                String emvData = wsmodel.getSelfdefinedata();
                                if (Util.hasText(emvData))
                                    emvData = emvData.substring(0, 2) + "0";
                                wsmodel.setSelfdefinedata(emvData);
                            }
                        }

                        //m.rehman: Euronet Integration
                        //need to fetch charged according to local or international txn, taking charges under channel check below
                        //getting transaction charges
                        //FetchTransactionCharge(wsmodel, account.getProduct());

                        // Asim Shahzad, Date : 12th Nov 2020, Tracking ID : VP-NAP-202010271
                        //Huzaifa Commented - 160124
//                        PAN = WebServiceUtil.getPANDecryptedValue(wsmodel.getCardnumber());
//
//                        Bin = PAN.substring(0,8);
//
//                        dbQuery = "from " + IMD.class.getName() + " n where " +
//                                "n.IMD = :CARD_BIN ";
//                        params = new HashMap<String, Object>();
//                        params.put("CARD_BIN", Bin);
//
//                        obj_Bin = (IMD) GeneralDao.Instance.findObject(dbQuery, params);
//
//                        if(null == obj_Bin) {
//                            Bin = PAN.substring(0,6);
//
//                            dbQuery = "from " + IMD.class.getName() + " n where " +
//                                    "n.IMD = :CARD_BIN ";
//                            params = new HashMap<String, Object>();
//                            params.put("CARD_BIN", Bin);
//
//                            obj_Bin = (IMD) GeneralDao.Instance.findObject(dbQuery, params);
//                        }
//
//                        //m.rehman: 23-02-202, Euronet integration
//                        if (obj_Bin != null ) {
//                            wsmodel.setCardscheme(obj_Bin.getCardScheme());
//                            wsmodel.setAcqbin(obj_Bin.getIMD());
//                        }

                        // ==================================================================

                        //checking permission
                        //if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, card, Boolean.TRUE))
                        //{
                        //    logger.error("Permission, rejecting...");
                        //    return wsmodel;
                        //}

                        logger.info("Going to do BalanceInquiry in Wallet...");

                        //m.rehman: Euronet Integration
                        boolean fmFlag = false;
                        String channelid = wsmodel.getChannelid();
                        if (Util.hasText(channelid) && channelid.equals(ChannelCodes.ONELINK)) {
                            //m.rehman: Euronet integration, add local/international flag in charges
                            //getting transaction charges
                            FetchTransactionCharge(wsmodel, account.getProduct(), "0");      //0-false

                            //Arsalan Akhter, Date: 18-May-2021, Ticket: VP-NAP-202103261/ VC-NAP-202103261 Change in transaction fee at ATM (Additional Rs 2.5 for paper receipt)
                            String Reserved = wsmodel.getReserved();
                            if (Util.hasText(Reserved)) {
                                if (Reserved.substring(0, 1).contains("Y")) {
                                    String serviceName = wsmodel.getServicename();
                                    String srcCharge = wsmodel.getSrcchargeamount();
                                    Long amount = 0L;
                                    wsmodel.setServicename("ReceiptCharge");
                                    FetchTransactionCharge(wsmodel, account.getProduct(), "0");      //0-false
                                    wsmodel.setServicename(serviceName);

                                    amount = Long.parseLong(srcCharge) + Long.parseLong(wsmodel.getSrcchargeamount());
                                    srcCharge = String.valueOf(amount);
                                    wsmodel.setSrcchargeamount(srcCharge);
                                }
                            }
                            ////////////////////////////////////////////////////////////////////////////////////
                            fmFlag = FinanceManager.BalanceInquiry(wsmodel, account);

                        } else if (Util.hasText(channelid) && channelid.equals(ChannelCodes.EURONET)) {
                            //m.rehman: Euronet integration, add local/international flag in charges
                            //getting transaction charges
                            FetchTransactionCharge(wsmodel, account.getProduct(), "1");      //0-true
                            fmFlag = FinanceManager.InternationalBalanceInquiryFromEuronet(wsmodel, account);
                        }
                        //m.rehman: 10-12-2021 - VP-NAP-202111291 / VC-NAP-202111291 / VG-NAP-202111291 - Meezan ATM On-Us Withdrawal/Balance Inquiry and Reversal
                        //Huzaifa: 11/08/2023: FW: NAP-P5-23 ==> [ Logging email ] ==> Segregation of ATM On Us Channels Bank - UBL & BAFL
                        else if (Util.hasText(channelid) && channelid.equals(ChannelCodes.UNILONUSATM)) {
                            FetchTransactionCharge(wsmodel, account.getProduct(), "0");      //1-true
                            fmFlag = FinanceManager.OnUsBalanceInquiry(wsmodel, account);
                        }

                        if (fmFlag) {
                            logger.info("BalanceInquiry from Wallet Done successfully!");
                            //setting account balance
                            wsmodel.setAccountnumber(account.getAccountNumber());
                            wsmodel.setAcctbalance(StringUtils.leftPad(account.getAvailableBalance(), 12, "0"));
                            wsmodel.setAccountcurrency(account.getCurrency());
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                            wsmodel.setIncludeinstatement(1);
                            wsmodel.setNayapaytrantype(wsmodel.getServicename());
                            ////////////////////////////////////////////////////////////////////////////////////////////////////

                            return wsmodel;
                        } else if (!fmFlag && wsmodel.getRespcode().equals(ISOResponseCodes.NP_SRC_INSUFFICEIENT_BALANCE)) {
                            logger.info("Unable to do BalanceInquiry in Wallet due to insufficient balance...");
                            wsmodel.setMessage("insufficient Balance");
                            return wsmodel;
                        } else {
                            logger.info("Unable to do BalanceInquiry in Wallet...");
                            // Moiz, Date : 25th July 2024, Desc : Added for ORA-0001 issue
							/*wsmodel.setRespcode(ISOResponseCodes.INVALID_IMD);
                            wsmodel.setMessage("INVALID IMD");
                             */
                            return wsmodel;
                        }
                    }
                }
            } else {
                logger.error("No Identifier Found for NayaPay customer");
                wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                wsmodel.setMessage("INVALID ACCOUNT");
                return wsmodel;
            }
        } catch (Exception e) {
            //logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing BalanceInquiry..!");
            logger.error(WebServiceUtil.getStrException(e));
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //Raza Refer to Document '12'
            wsmodel.setMessage("UNABLE TO PROCESS");

            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        // Moiz, Date : 25th July 2024, Desc : Added for ORA-0001 issue
		/*
        finally {
            GeneralDao.Instance.endTransaction();
            GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
        }
         */
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteCashWithDrawal(WalletCMSWsEntity wsmodel) {
        logger.info("Executing CashWithdrawal Request...");
        try {
            String dbQuery;
            Map<String, Object> params;

            //m.rehman: 08-10-2020, VP-NAP-202010081/ VC-NAP-202010081 - Deployment 08-10-2020
            if (Util.hasText(wsmodel.getBranchname())) {
                wsmodel.setBankcode(wsmodel.getBranchname());
            }
            //////////////////////////////////////////////////////////////////////////////////

            if (Util.hasText(wsmodel.getCardnumber())) {
                //m.rehman: 10-12-2021 - VP-NAP-202111291 / VC-NAP-202111291 / VG-NAP-202111291 - Meezan ATM On-Us Withdrawal/Balance Inquiry and Reversal
                // Huzaifa: 11/08/2023: FW: NAP-P5-23 ==> [ Logging email ] ==> Segregation of ATM On Us Channels Bank - UBL & BAFL
                if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.UNILONUSATM) && !Util.hasText(wsmodel.getCardexpiry())) {
                    dbQuery = "from " + CMSCard.class.getName() + " c where " +
                            " c.cardNumber= :CARDNO " +
                            " and c.cardStatus= '00' " +
                            " order by c.id desc ";
                    params = new HashMap<String, Object>();
                    params.put("CARDNO", wsmodel.getCardnumber());

                } else {
                    //dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO ";
                    dbQuery = "from " + CMSCard.class.getName() + " c where " +
                            " c.cardNumber= :CARDNO " +
                            " and substr(c.expiryDate,3,4) = :EXPDATE ";
                    params = new HashMap<String, Object>();
                    params.put("CARDNO", wsmodel.getCardnumber());
                    params.put("EXPDATE", wsmodel.getCardexpiry());
                }

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                //CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);
                CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                if (card == null) {
                    logger.error("Card not Found in DB with CardNo [" + wsmodel.getCardnumber() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                    return wsmodel;
                } else {
                    //Arsalan Akhter, Ticket# VP-NAP-202102111 / VG-NAP-202102111, Date: 31-May-2021(Need to cater acquiring country code for card based transactions)
                    if (!card.getCardStatus().equals("00")) {
                        if (card.getCardStatus().equals("90")) {
                            logger.error("Card in Blocked State, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.HOT_CARD); //15-Hot Card ; Refer to Doc
                            // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                            //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                            wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                            //===============================================================================================================
                            // ====================================================================================
                            //m.rehman: 25-06-2021, Visa certification
                            //return wsmodel;
                        } else if (card.getCardStatus().equals("03")) {
                            logger.error("Card in Warm State, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.WARM_CARD); //14-Warm Card ; Refer to Doc
                            // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                            //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                            wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                            //===============================================================================================================
                            // ====================================================================================
                            //m.rehman: 25-06-2021, Visa certification
                            //return wsmodel;
                        } else {
                            logger.error("Invalid Card Auth Status [ " + card.getCardStatus() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.BAD_CARD_STATUS); //16-BadCardStatus ; Refer to Doc
                            // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                            //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                            wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                            //===============================================================================================================
                            // ====================================================================================
                            //m.rehman: 25-06-2021, Visa certification
                            //return wsmodel;
                        }

                        //m.rehman: 25-06-2021, Visa certification
                        if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
                            if (Util.hasText(wsmodel.getIcccarddata())) {
                                //TODO: need to update below according to scheme requirement
                                //setting icc data without 9F26 (Application Cryptogram) tag for 1Link
                                String iccData = wsmodel.getIcccarddata();
                                String iccDataUpdate;
                                int index = iccData.indexOf(EMVTags.APP_CRYPT);
                                iccDataUpdate = iccData.substring(0, index);
                                iccDataUpdate += iccData.substring(index + 22, iccData.length());
                                wsmodel.setIcccarddata(iccDataUpdate);
                            }

                            String emvData = wsmodel.getSelfdefinedata();
                            if (Util.hasText(emvData))
                                emvData = emvData.substring(0, 2) + "0";
                            wsmodel.setSelfdefinedata(emvData);
                        }

                        return wsmodel;
                        ////////////////////////////////////////////////////////////////////////////////////////////////

                        /*
                        logger.error("Inactive Card Found in DB with CardNo [" + wsmodel.getCardnumber() + "] Status [" + card.getCardStatus() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12 - Invalid Card Status ; Refer to Doc
                        return wsmodel;
                        */
                    }

                    //=======================================================================================================

                    //m.rehman: 10-02-2021, VP-NAP-202011102/ VC-NAP-202011101 - Document version 4.7.3 [Updates]
                    ////////////////////////////////////////////////////////////////////////////////////////////
                    if (card.getList_CustAccounts() == null) {
                        logger.error("No Account Found for CardNo [" + wsmodel.getCardnumber() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                        return wsmodel;
                    }


                    CMSAccount account = null; //TODO: Raza should Update THIS with default
                    for (CMSAccount acct : card.getList_CustAccounts()) {
                        account = acct;
                        if (!acct.getStatus().equals("00") || !acct.getCustomer().getStatus().equals("00")) {
                            logger.error("Inactive Account or Customer Found in DB for CardNo [" + wsmodel.getCardnumber() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_INACTIVE); //32 - Inactive Account/Customer Status ; Refer to Doc
                            return wsmodel;
                        }
                    }
                    //Raza Account & Customer Status validation end ; TODO should be updated

                    //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                    account = (CMSAccount) GeneralDao.Instance.getCurrentSession().get(CMSAccount.class, account.getId(), LockMode.UPGRADE);
                    GeneralDao.Instance.getCurrentSession().refresh(account);
                    ////////////////////////////////////////////////////////////////////////////////////

                    //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                    if (account.getCategory() != null && account.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                        wsmodel.setMerchantid(account.getUserId());
                    } else {
                        wsmodel.setUserid(account.getUserId());
                    }
                    ////////////////////////////////////////////////////////////////////////////////////////////

                    //m.rehman: 21-01-2020, VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 - VISA (Switch-Middleware Integration document v 4.7.6) - Release 4
                    //checking operation permission on card
                    if (!WalletCMSFunctions.CheckCardControls(wsmodel, card)) {
                        logger.error("Transaction not allowed on this card, rejecting ...");
                        wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED);
                        return wsmodel;
                    }

                    // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                    // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                    String PAN = WebServiceUtil.getPANDecryptedValue(wsmodel.getCardnumber());

                    // Asim Shahzad, Date : 29th Sep 2020, Tracking ID : VC-NAP-202009251 / VP-NAP-202009251
                    //String Bin = PAN.substring(0,6);
                    String Bin = PAN.substring(0, 8);
                    // ======================================================================================

                    dbQuery = "from " + IMD.class.getName() + " n where " +
                            "n.IMD = :CARD_BIN ";
                    params = new HashMap<String, Object>();
                    params.put("CARD_BIN", Bin);

                    IMD obj_Bin = (IMD) GeneralDao.Instance.findObject(dbQuery, params);

                    if (null == obj_Bin) {
                        Bin = PAN.substring(0, 6);

                        dbQuery = "from " + IMD.class.getName() + " n where " +
                                "n.IMD = :CARD_BIN ";
                        params = new HashMap<String, Object>();
                        params.put("CARD_BIN", Bin);

                        obj_Bin = (IMD) GeneralDao.Instance.findObject(dbQuery, params);
                    }

                    //m.rehman: 23-02-202, Euronet integration
                    if (obj_Bin != null) {
                        wsmodel.setCardscheme(obj_Bin.getCardScheme());
                    }

                    // =====================================================================================
                    // ==== Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101 ====

                    // Arsalan commited, Ticket# VP-NAP-202102111 / VG-NAP-202102111, Date: 31-May-2021
//                    if(!card.getCardStatus().equals("00"))
//                    {
//                        if(card.getCardStatus().equals("90"))
//                        {
//                            logger.error("Card in Blocked State, rejecting...");
//                            wsmodel.setRespcode(ISOResponseCodes.HOT_CARD); //15-Hot Card ; Refer to Doc
//                            // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
//                            wsmodel.setCardnolastdigits(card.getCardNoLastDigits());
//                            // ====================================================================================
//                            return wsmodel;
//                        }
//                        else if(card.getCardStatus().equals("03"))
//                        {
//                            logger.error("Card in Warm State, rejecting...");
//                            wsmodel.setRespcode(ISOResponseCodes.WARM_CARD); //14-Warm Card ; Refer to Doc
//                            // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
//                            wsmodel.setCardnolastdigits(card.getCardNoLastDigits());
//                            // ====================================================================================
//                            return wsmodel;
//                        }
//                        else
//                        {
//                            logger.error("Invalid Card Auth Status [ " + card.getCardStatus() + "], rejecting...");
//                            wsmodel.setRespcode(ISOResponseCodes.BAD_CARD_STATUS); //16-BadCardStatus ; Refer to Doc
//                            // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
//                            wsmodel.setCardnolastdigits(card.getCardNoLastDigits());
//                            // ====================================================================================
//                            return wsmodel;
//                        }
//
//                        /*
//                        logger.error("Inactive Card Found in DB with CardNo [" + wsmodel.getCardnumber() + "] Status [" + card.getCardStatus() + "]");
//                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12 - Invalid Card Status ; Refer to Doc
//                        return wsmodel;
//                        */
//                    }
//                    else {

                    // Arsalan commited, Ticket# VP-NAP-202102111 / VG-NAP-202102111, Date: 31-May-2021=========================

                    //Raza Account & Customer Status validation start ; TODO should be updated


                    //m.rehman: 10-02-2021, VP-NAP-202011102/ VC-NAP-202011101 - Document version 4.7.3 [Updates]
                    ////////////////////////////////////////////////////////////////////////////////////////////
                        /*
                        if(card.getList_CustAccounts() == null)
                        {
                            logger.error("No Account Found for CardNo [" + wsmodel.getCardnumber() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                            return wsmodel;
                        }


                        CMSAccount account= null; //TODO: Raza should Update THIS with default
                        for(CMSAccount acct : card.getList_CustAccounts())
                        {
                            account = acct;
                            if(!acct.getStatus().equals("00") || !acct.getCustomer().getStatus().equals("00"))
                            {
                                logger.error("Inactive Account or Customer Found in DB for CardNo [" + wsmodel.getCardnumber() + "]");
                                wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_INACTIVE); //32 - Inactive Account/Customer Status ; Refer to Doc
                                return wsmodel;
                            }
                        }
                        //Raza Account & Customer Status validation end ; TODO should be updated

                        //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                        if (account.getCategory() != null && account.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                            wsmodel.setMerchantid(account.getUserId());
                        } else {
                            wsmodel.setUserid(account.getUserId());
                        }
                        */

                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                    params = new HashMap<String, Object>();
                    params.put("relation", card.getCardNumberExpiryRelation());
                    params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                    CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                    if (cardrelation == null) {
                        logger.error("Card Relation not found for relation [" + card.getCardNumberExpiryRelation() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_RECORD); //Invalid Card Record ; Raza update THIS
                        return wsmodel;
                    }

                    //m.rehman: setting last digits in WSEntity object for verification after decryption
                    //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                    wsmodel.setCardlastdigits(card.getCardNoLastDigits());
//                    ===============================================================================================================
                    if (!(Util.hasText(wsmodel.getPosentrymode()) &&
                            (wsmodel.getPosentrymode().substring(0, 2).equals(ISOPOSEntryMode.PANEntryMode.MANUAL_ENTRY)
                                    || wsmodel.getPosentrymode().substring(2, 3).equals(ISOPOSEntryMode.PINEntryCapability.TERMINAL_CANNOT_ACCEPT_PINS)))) {
                        if (!WalletCMSFunctions.ValidateCardPIN(wsmodel, cardrelation)) {
                            logger.error("PIN validation failed, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
//
//                                if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
//                                    if (Util.hasText(wsmodel.getIcccarddata())) {
//                                        //TODO: need to update below according to scheme requirement
//                                        //setting icc data without 9F26 (Application Cryptogram) tag for 1Link
//                                        String iccData = wsmodel.getIcccarddata();
//                                        String iccDataUpdate;
//                                        int index = iccData.indexOf(EMVTags.APP_CRYPT);
//                                        iccDataUpdate = iccData.substring(0, index);
//                                        iccDataUpdate += iccData.substring(index + 22, iccData.length());
//                                        wsmodel.setIcccarddata(iccDataUpdate);
//                                    }
//
//                                    String emvData = wsmodel.getSelfdefinedata();
//                                    if (Util.hasText(emvData))
//                                        emvData = emvData.substring(0, 2) + "0";
//                                    wsmodel.setSelfdefinedata(emvData);
//                                }
                            return wsmodel;
                        }
                    }
                    logger.info("PIN validated successfully or Transaction is Manual Cash ...");

                    if (WalletCMSFunctions.CVVCheckRequired(wsmodel) || WalletCMSFunctions.ICVVCheckRequired(wsmodel)) {
//                            if (!WalletCMSFunctions.ValidateCVV(wsmodel, cardrelation, true)) {
//                                logger.error("CVV/ICVV validation failed, rejecting...");
//                                //wsmodel.setRespcode(ISOResponseCodes.SECURITY_VIOLATION); //24-BAD PIN; refer to Doc
//
//								//m.rehman: Euronet Integration
//                                if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
//                                    if (Util.hasText(wsmodel.getIcccarddata())) {
//                                        //TODO: need to update below according to scheme requirement
//                                        //setting icc data without 9F26 (Application Cryptogram) tag for 1Link
//                                        String iccData = wsmodel.getIcccarddata();
//                                        String iccDataUpdate;
//                                        int index = iccData.indexOf(EMVTags.APP_CRYPT);
//                                        iccDataUpdate = iccData.substring(0, index);
//                                        iccDataUpdate += iccData.substring(index + 22, iccData.length());
//                                        wsmodel.setIcccarddata(iccDataUpdate);
//                                    }
//
//                                    String emvData = wsmodel.getSelfdefinedata();
//                                    if (Util.hasText(emvData))
//                                        emvData = emvData.substring(0, 2) + "0";
//                                    wsmodel.setSelfdefinedata(emvData);
//                                }
//                                return wsmodel;
//                            }
                        logger.info("CVV/ICVV validated successfully");
                    }

                    if (Util.hasText(wsmodel.getIcccarddata())) {
//                            if (!WalletCMSFunctions.ValidateCryptogram(wsmodel, cardrelation)) {
//                                logger.error("Cryptogram validation failed, rejecting...");
//                                //wsmodel.setRespcode(ISOResponseCodes.SECURITY_VIOLATION); //24-BAD PIN; refer to Doc
//                                return wsmodel;
//                            }
                        logger.info("Cryptogram validated successfully");
                    } else if (Util.hasText(wsmodel.getPosentrymode()) && wsmodel.getPosentrymode().substring(0, 2).equals(ISOPOSEntryMode.PANEntryMode.ICC_READ_FAIL_MST_READ)) {
                        //m.rehman: Euronet Integration
//                            if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
//                                logger.error("Fallback case: Cryptogram validation not performed!");
//                                String emvData = wsmodel.getSelfdefinedata();
//                                if (Util.hasText(emvData))
//                                    emvData = emvData.substring(0, 2) + "0";
//                                wsmodel.setSelfdefinedata(emvData);
//                            }
                    }

                    if (Long.parseLong(wsmodel.getAmounttransaction()) <= 0) {
                        logger.error("Invalid Amount for Withdrawal Transaction, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.LOW_BALANCE); //04 - Low Balance ; refer to Doc
                        return wsmodel;
                    }

                    //m.rehman: Euronet integration
                    //need to fetch charged according to local or international txn, taking charges under channel check below
                    //getting transaction charges
                    //FetchTransactionCharge(wsmodel, account.getProduct());

                    //process wallet limit
                    //m.rehman: 22-04-2021, Euronet Integration - need to check both card and account limit
                    //if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, null, Boolean.TRUE))
                    if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, card, Boolean.TRUE)) {
                        logger.error("Limit processing failed, rejecting...");
                        return wsmodel;
                    }

                    logger.info("Going to Withdrawal Cash in Wallet...");

                    //m.rehman: Euronet Integration
                    boolean fmFlag = false;
                    String channelid = wsmodel.getChannelid();
                    if (Util.hasText(channelid) && channelid.equals(ChannelCodes.ONELINK)) {
                        //m.rehman: Euronet integration, add local/international flag in charges
                        //getting transaction charges
                        FetchTransactionCharge(wsmodel, account.getProduct(), "0");      //0-false

                        //Arsalan Akhter, Date: 18-May-2021, Ticket: VP-NAP-202103261/ VC-NAP-202103261 Change in transaction fee at ATM (Additional Rs 2.5 for paper receipt)
                        String Reserved = wsmodel.getReserved();
                        if (Util.hasText(Reserved)) {
                            if (Reserved.substring(0, 1).contains("Y")) {
                                String serviceName = wsmodel.getServicename();
                                String srcCharge = wsmodel.getSrcchargeamount();
                                Long amount = 0L;
                                wsmodel.setServicename("ReceiptCharge");
                                FetchTransactionCharge(wsmodel, account.getProduct(), "0");      //0-false
                                wsmodel.setServicename(serviceName);

                                amount = Long.parseLong(srcCharge) + Long.parseLong(wsmodel.getSrcchargeamount());
                                srcCharge = String.valueOf(amount);
                                wsmodel.setSrcchargeamount(srcCharge);
                            }
                        }
                        ////////////////////////////////////////////////////////////////////////////////////

                        fmFlag = FinanceManager.CashWithDrawal(wsmodel, account);

                    } else if (Util.hasText(channelid) && channelid.equals(ChannelCodes.EURONET)) {
                        //m.rehman: Euronet integration, add local/international flag in charges
                        //getting transaction charges
                        FetchTransactionCharge(wsmodel, account.getProduct(), "1");      //1-true
                        fmFlag = FinanceManager.InternationalCashWithDrawalFromEuronet(wsmodel, account);

                    }
                    //m.rehman: 10-12-2021 - VP-NAP-202111291 / VC-NAP-202111291 / VG-NAP-202111291 - Meezan ATM On-Us Withdrawal/Balance Inquiry and Reversal
                    // Huzaifa: 11/08/2023: FW: NAP-P5-23 ==> [ Logging email ] ==> Segregation of ATM On Us Channels Bank - UBL & BAFL
                    else if (Util.hasText(channelid) && channelid.equals(ChannelCodes.UNILONUSATM)) {
                        FetchTransactionCharge(wsmodel, account.getProduct(), "0");      //1-true
                        fmFlag = FinanceManager.CNICBasedCashWithdrawal(wsmodel, account);
                    }

                    if (fmFlag) {
                        logger.info("Cash Withdrawal from Wallet Done successfully!");
                        //setting account balance
                        wsmodel.setAccountnumber(account.getAccountNumber());
                        if (account.getCategory() != null && account.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                            wsmodel.setMerchantid(account.getUserId());
                        } else {
                            wsmodel.setUserid(account.getUserId());
                        }
                        //s.mehtab: 20-10-2020, VC-NAP-202010201 - DE-54 (Available Balance on Cash Withdrawal Receipt)
                        wsmodel.setAcctbalance(account.getAvailableBalance());
                        logger.info("Setting Account Balance [" + account.getAvailableBalance() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                        wsmodel.setIncludeinstatement(1);
                        ////////////////////////////////////////////////////////////////////////////////////////////////////

                        return wsmodel;
                    } else {
                        logger.info("Unable to Withdrawal Cash in Wallet... **********Manual Process Required!**********");

                        //process wallet limit
                        logger.info("Revertsing Limit ...");
                        String respCode = wsmodel.getRespcode();
                        //m.rehman: 22-04-2021, Euronet Integration - need to check both card and account limit
                        //if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, null, Boolean.FALSE))
                        if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, card, Boolean.FALSE)) {
                            logger.error("Limit reversing failed, rejecting...");
                            return wsmodel;
                        }
                        wsmodel.setRespcode(respCode);
                        return wsmodel;
                    }
                    // } // Arsalan commited, Ticket# VP-NAP-202102111 / VG-NAP-202102111, Date: 31-May-2021
                }
            } else {
                logger.error("No Identifier Found for NayaPay customer");
                wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(WebServiceUtil.getStrException(e));
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing CashWithdrawal..!");
            wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '12'
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            GeneralDao.Instance.endTransaction();
            GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecutePurchase(WalletCMSWsEntity wsmodel) {
        logger.info("Executing Purchase Request...");
        try {
            String dbQuery;
            Map<String, Object> params;

            //m.rehman: 08-10-2020, VP-NAP-202010081/ VC-NAP-202010081 - Deployment 08-10-2020
            if (Util.hasText(wsmodel.getBranchname())) {
                wsmodel.setBankcode(wsmodel.getBranchname());
            }
            //////////////////////////////////////////////////////////////////////////////////

            if (Util.hasText(wsmodel.getCardnumber())) {
                //dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO ";
                dbQuery = "from " + CMSCard.class.getName() + " c where " +
                        " c.cardNumber= :CARDNO " +
                        " and substr(c.expiryDate,3,4) = :EXPDATE ";
                params = new HashMap<String, Object>();
                params.put("CARDNO", wsmodel.getCardnumber());
                params.put("EXPDATE", wsmodel.getCardexpiry());

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                //CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);
                CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                if (card == null) {
                    logger.error("Card not Found in DB with CardNo [" + wsmodel.getCardnumber() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                    return wsmodel;
                } else {
                    //Arsalan Akhter, Ticket# VP-NAP-202102111 / VG-NAP-202102111, Date: 31-May-2021(Need to cater acquiring country code for card based transactions)
                    String PAN = WebServiceUtil.getPANDecryptedValue(wsmodel.getCardnumber());
                    if (!card.getCardStatus().equals("00")) {
                        //m.rehman: Euronet Integration
                        if (card.getCardStatus().equals("90")) {
                            logger.error("Card in Blocked State, rejcting...");
                            wsmodel.setRespcode(ISOResponseCodes.HOT_CARD); //15-Hot Card ; Refer to Doc
                            // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                            //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                            wsmodel.setCardlastdigits(PAN.substring(PAN.length() - 4, PAN.length()));
                            //===============================================================================================================
                            // ====================================================================================
                            //m.rehman: 25-06-2021, Visa certification
                            //return wsmodel;
                        } else if (card.getCardStatus().equals("03")) {
                            logger.error("Card in Warm State, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.WARM_CARD); //14-Warm Card ; Refer to Doc
                            // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                            //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                            wsmodel.setCardlastdigits(PAN.substring(PAN.length() - 4, PAN.length()));
                            //===============================================================================================================
                            // ====================================================================================
                            //m.rehman: 25-06-2021, Visa certification
                            //return wsmodel;
                        } else {
                            logger.error("Invalid Card Auth Status [ " + card.getCardStatus() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.BAD_CARD_STATUS); //16-BadCardStatus ; Refer to Doc
                            // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                            //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                            wsmodel.setCardlastdigits(PAN.substring(PAN.length() - 4, PAN.length()));
                            //===============================================================================================================
                            // ====================================================================================
                            //m.rehman: 25-06-2021, Visa certification
                            //return wsmodel;
                        }

                        //m.rehman: 25-06-2021, Visa certification
                        if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
                            if (Util.hasText(wsmodel.getIcccarddata())) {
                                //TODO: need to update below according to scheme requirement
                                //setting icc data without 9F26 (Application Cryptogram) tag for 1Link
                                String iccData = wsmodel.getIcccarddata();
                                String iccDataUpdate;
                                int index = iccData.indexOf(EMVTags.APP_CRYPT);
                                iccDataUpdate = iccData.substring(0, index);
                                iccDataUpdate += iccData.substring(index + 22, iccData.length());
                                wsmodel.setIcccarddata(iccDataUpdate);
                            }

                            String emvData = wsmodel.getSelfdefinedata();
                            if (Util.hasText(emvData))
                                emvData = emvData.substring(0, 2) + "0";
                            wsmodel.setSelfdefinedata(emvData);
                        }

                        return wsmodel;
                        ////////////////////////////////////////////////////////////////////////////////////////////////

                        /*
                        logger.error("Inactive Card Found in DB with CardNo [" + wsmodel.getCardnumber() + "] Status [" + card.getCardStatus() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12- Transaction Invalid ; Refer to Doc
						// Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                        wsmodel.setCardnolastdigits(PAN.substring(PAN.length() - 4, PAN.length()));
                        // ====================================================================================
                        return wsmodel;
                        */
                    }

                    //=======================================================================================================

                    //m.rehman: 10-02-2021, VP-NAP-202011102/ VC-NAP-202011101 - Document version 4.7.3 [Updates]
                    ////////////////////////////////////////////////////////////////////////////////////////////
                    if (card.getList_CustAccounts() == null) {
                        logger.error("No Account Found for CardNo [" + wsmodel.getCardnumber() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                        return wsmodel;
                    }


                    CMSAccount account = null; //TODO: Raza should Update THIS with default
                    for (CMSAccount acct : card.getList_CustAccounts()) {
                        account = acct;
                        if (!acct.getStatus().equals("00") || !acct.getCustomer().getStatus().equals("00")) {
                            logger.error("Inactive Account or Customer Found in DB for CardNo [" + wsmodel.getCardnumber() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_INACTIVE); //32 - Inactive Account/Customer Status ; Refer to Doc
                            return wsmodel;
                        }
                    }
                    //Raza Account & Customer Status validation end ; TODO should be updated

                    //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                    account = (CMSAccount) GeneralDao.Instance.getCurrentSession().get(CMSAccount.class, account.getId(), LockMode.UPGRADE);
                    GeneralDao.Instance.getCurrentSession().refresh(account);
                    ////////////////////////////////////////////////////////////////////////////////////

                    //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                    if (account.getCategory() != null && account.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                        wsmodel.setMerchantid(account.getUserId());
                    } else {
                        wsmodel.setUserid(account.getUserId());
                    }
                    ////////////////////////////////////////////////////////////////////////////////////////////

                    //m.rehman: 21-01-2020, VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 - VISA (Switch-Middleware Integration document v 4.7.6) - Release 4
                    //checking operation permission on card
                    if (!WalletCMSFunctions.CheckCardControls(wsmodel, card)) {
                        logger.error("Transaction not allowed on this card, rejecting ...");
                        wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED);
                        return wsmodel;
                    }

                    // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                    // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                    // String PAN = WebServiceUtil.getPANDecryptedValue(wsmodel.getCardnumber());

                    // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009251 / VP-NAP-202009251
                    //String Bin = PAN.substring(0,6);
                    String Bin = PAN.substring(0, 8);
                    // =====================================================================================

                    dbQuery = "from " + IMD.class.getName() + " n where " +
                            "n.IMD = :CARD_BIN ";
                    params = new HashMap<String, Object>();
                    params.put("CARD_BIN", Bin);

                    IMD obj_Bin = (IMD) GeneralDao.Instance.findObject(dbQuery, params);

                    if (null == obj_Bin) {
                        Bin = PAN.substring(0, 6);

                        dbQuery = "from " + IMD.class.getName() + " n where " +
                                "n.IMD = :CARD_BIN ";
                        params = new HashMap<String, Object>();
                        params.put("CARD_BIN", Bin);

                        obj_Bin = (IMD) GeneralDao.Instance.findObject(dbQuery, params);
                    }

                    //m.rehman: 23-02-202, Euronet integration
                    if (obj_Bin != null) {
                        wsmodel.setCardscheme(obj_Bin.getCardScheme());
                    }
                    // =====================================================================================
                    // ==== Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101 ====

                    // Arsalan commited, Ticket# VP-NAP-202102111 / VG-NAP-202102111, Date: 31-May-2021
//                    if(!card.getCardStatus().equals("00"))
//                    {
//                        //m.rehman: Euronet Integration
//                        if(card.getCardStatus().equals("90"))
//                        {
//                            logger.error("Card in Blocked State, rejcting...");
//                            wsmodel.setRespcode(ISOResponseCodes.HOT_CARD); //15-Hot Card ; Refer to Doc
//							// Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
//	                        wsmodel.setCardnolastdigits(PAN.substring(PAN.length() - 4, PAN.length()));
//	                        // ====================================================================================
//                            return wsmodel;
//                        }
//                        else if(card.getCardStatus().equals("03"))
//                        {
//                            logger.error("Card in Warm State, rejecting...");
//                            wsmodel.setRespcode(ISOResponseCodes.WARM_CARD); //14-Warm Card ; Refer to Doc
//							// Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
//	                        wsmodel.setCardnolastdigits(PAN.substring(PAN.length() - 4, PAN.length()));
//	                        // ====================================================================================
//                            return wsmodel;
//                        }
//                        else
//                        {
//                            logger.error("Invalid Card Auth Status [ " + card.getCardStatus() + "], rejecting...");
//                            wsmodel.setRespcode(ISOResponseCodes.BAD_CARD_STATUS); //16-BadCardStatus ; Refer to Doc
//							// Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
//	                        wsmodel.setCardnolastdigits(PAN.substring(PAN.length() - 4, PAN.length()));
//	                        // ====================================================================================
//                            return wsmodel;
//                        }
//
//                        /*
//                        logger.error("Inactive Card Found in DB with CardNo [" + wsmodel.getCardnumber() + "] Status [" + card.getCardStatus() + "]");
//                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12- Transaction Invalid ; Refer to Doc
//						// Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
//                        wsmodel.setCardnolastdigits(PAN.substring(PAN.length() - 4, PAN.length()));
//                        // ====================================================================================
//                        return wsmodel;
//                        */
//                    }
//                    else {

                    // Arsalan commited, Ticket# VP-NAP-202102111 / VG-NAP-202102111, Date: 31-May-2021=========================

                    //Raza Account & Customer Status validation start ; TODO should be updated


                    //m.rehman: 10-02-2021, VP-NAP-202011102/ VC-NAP-202011101 - Document version 4.7.3 [Updates]
                    ////////////////////////////////////////////////////////////////////////////////////////////
                        /*
                        if(card.getList_CustAccounts() == null)
                        {
                            logger.error("No Account Found for CardNo [" + wsmodel.getCardnumber() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                            return wsmodel;
                        }

                        CMSAccount account= null; //TODO: Raza should Update THIS with default
                        for(CMSAccount acct : card.getList_CustAccounts())
                        {
                            account = acct;
                            if(!acct.getStatus().equals("00") || !acct.getCustomer().getStatus().equals("00"))
                            {
                                logger.error("Inactive Account or Customer Found in DB for CardNo [" + wsmodel.getCardnumber() + "]");
                                wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_INACTIVE); //32 - Inactive Account/Customer Status ; Refer to Doc
                                return wsmodel;
                            }
                        }
                        //Raza Account & Customer Status validation end ; TODO should be updated

                        //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                        if (account.getCategory() != null && account.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                            wsmodel.setMerchantid(account.getUserId());
                        } else {
                            wsmodel.setUserid(account.getUserId());
                        }
                        */

                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                    params = new HashMap<String, Object>();
                    params.put("relation", card.getCardNumberExpiryRelation());
                    params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                    CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                    if (cardrelation == null) {
                        logger.error("Card Relation not found for relation [" + card.getCardNumberExpiryRelation() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_RECORD); //Invalid Card Record ; Raza update THIS
                        return wsmodel;
                    }

                    //m.rehman: setting last digits in WSEntity object for verification after decryption
                    //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                    wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                    //===============================================================================================================

                    //m.rehman: 20-08-2020, Euronet Integration, for visa, purchase may come without pin so need to check pin data
                    if (Util.hasText(wsmodel.getCardpindata())) {
                        logger.info("PIN data available, going for PIN validation ...");
                        if (!WalletCMSFunctions.ValidateCardPIN(wsmodel, cardrelation)) {
                            logger.error("PIN validation failed, rejecting...");
                            //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc

                            if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
                                if (Util.hasText(wsmodel.getIcccarddata())) {
                                    //TODO: need to update below according to scheme requirement
                                    //setting icc data without 9F26 (Application Cryptogram) tag for 1Link
                                    String iccData = wsmodel.getIcccarddata();
                                    String iccDataUpdate;
                                    int index = iccData.indexOf(EMVTags.APP_CRYPT);
                                    iccDataUpdate = iccData.substring(0, index);
                                    iccDataUpdate += iccData.substring(index + 22, iccData.length());
                                    wsmodel.setIcccarddata(iccDataUpdate);
                                }

                                String emvData = wsmodel.getSelfdefinedata();
                                if (Util.hasText(emvData))
                                    emvData = emvData.substring(0, 2) + "0";
                                wsmodel.setSelfdefinedata(emvData);
                            }
                            return wsmodel;
                        }
                        logger.info("PIN validated successfully");
                    } else {
                        logger.info("PIN not available, ignoring PIN validation ...");
                    }

                    if (WalletCMSFunctions.CVVCheckRequired(wsmodel) || WalletCMSFunctions.ICVVCheckRequired(wsmodel)) {
                        if (!WalletCMSFunctions.ValidateCVV(wsmodel, cardrelation, true)) {
                            logger.error("CVV/ICVV validation failed, rejecting...");
                            //wsmodel.setRespcode(ISOResponseCodes.SECURITY_VIOLATION); //24-BAD PIN; refer to Doc

                            //m.rehman: Euronet Integration
                            if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
                                if (Util.hasText(wsmodel.getIcccarddata())) {
                                    //TODO: need to update below according to scheme requirement
                                    //setting icc data without 9F26 (Application Cryptogram) tag for 1Link
                                    String iccData = wsmodel.getIcccarddata();
                                    String iccDataUpdate;
                                    int index = iccData.indexOf(EMVTags.APP_CRYPT);
                                    iccDataUpdate = iccData.substring(0, index);
                                    iccDataUpdate += iccData.substring(index + 22, iccData.length());
                                    wsmodel.setIcccarddata(iccDataUpdate);
                                }

                                String emvData = wsmodel.getSelfdefinedata();
                                if (Util.hasText(emvData))
                                    emvData = emvData.substring(0, 2) + "0";
                                wsmodel.setSelfdefinedata(emvData);
                            }
                            return wsmodel;
                        }
                        logger.info("CVV/ICVV validated successfully");
                    }

                    if (Util.hasText(wsmodel.getIcccarddata())) {
                        if (!WalletCMSFunctions.ValidateCryptogram(wsmodel, cardrelation)) {
                            logger.error("Cryptogram validation failed, rejecting...");
                            //wsmodel.setRespcode(ISOResponseCodes.SECURITY_VIOLATION); //24-BAD PIN; refer to Doc
                            return wsmodel;
                        }
                        logger.info("Cryptogram validated successfully");
                    } else if (Util.hasText(wsmodel.getPosentrymode()) && wsmodel.getPosentrymode().substring(0, 2).equals(ISOPOSEntryMode.PANEntryMode.ICC_READ_FAIL_MST_READ)) {
                        logger.error("Fallback case: Cryptogram validation not performed!");

                        //m.rehman: Euronet Integration
                        if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
                            String emvData = wsmodel.getSelfdefinedata();
                            if (Util.hasText(emvData))
                                emvData = emvData.substring(0, 2) + "0";
                            wsmodel.setSelfdefinedata(emvData);
                        }
                    }


                    if (Long.parseLong(wsmodel.getAmounttransaction()) <= 0) {
                        logger.error("Invalid Amount for Purchase Transaction, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.LOW_BALANCE); //04 - Low Balance ; refer to Doc
                        return wsmodel;
                    }

                    //m.rehman: Euronet integration
                    //need to fetch charged according to local or international txn, taking charges under channel check below
                    //getting transaction charges
                    //FetchTransactionCharge(wsmodel, account.getProduct());

                    //m.rehman: Euronet integration, no limit check required for PreAuthCompletion
                    if (!wsmodel.getServicename().equals("PreAuthCompletion")) {
                        //process wallet limit
                        //m.rehman: 22-04-2021, Euronet Integration - need to check both card and account limit
                        //if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, null, Boolean.TRUE))
                        String serviceName = wsmodel.getServicename();
                        if (wsmodel.getServicename().equals("PreAuthorization")) {
                            wsmodel.setServicename("Purchase");
                        }
                        if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, card, Boolean.TRUE)) {
                            logger.error("Limit processing failed, rejecting...");
                            return wsmodel;
                        }
                        wsmodel.setServicename(serviceName);
                    }

                    logger.info("Going to perform Purchase in Wallet...");

                    //m.rehman: Euronet Integration
                    boolean fmFlag = false;
                    String channelid = wsmodel.getChannelid();
                    if (Util.hasText(channelid) && channelid.equals(ChannelCodes.ONELINK)) {
                        fmFlag = FinanceManager.Purchase(wsmodel, account);

                    } else if (Util.hasText(channelid) && channelid.equals(ChannelCodes.EURONET)) {
                        if (wsmodel.getServicename().equals("PreAuthorization")) {
                            if (Util.hasText(wsmodel.getBranchcode()) && wsmodel.getBranchcode().equals("PSI")) {
                                //m.rehman: Euronet integration, add local/international flag in charges
                                //getting transaction charges
                                FetchTransactionCharge(wsmodel, account.getProduct(), "1");      //1-true
                                fmFlag = FinanceManager.InternationalPreAuthorizationFromEuronet(wsmodel, account);
                            } else {
                                //m.rehman: Euronet integration, add local/international flag in charges
                                //getting transaction charges
                                FetchTransactionCharge(wsmodel, account.getProduct(), "0");      //0-false
                                fmFlag = FinanceManager.LocalPreAuthorizationFromEuronet(wsmodel, account);
                            }
                        } else if (wsmodel.getServicename().equals("PreAuthCompletion")) {
                            if (Util.hasText(wsmodel.getBranchcode()) && wsmodel.getBranchcode().equals("PSI")) {
                                //m.rehman: Euronet integration, add local/international flag in charges
                                //getting transaction charges
                                FetchTransactionCharge(wsmodel, account.getProduct(), "1");      //1-true
                                fmFlag = FinanceManager.InternationalPreAuthCompletionFromEuronet(wsmodel, account);
                            } else {
                                //m.rehman: Euronet integration, add local/international flag in charges
                                //getting transaction charges
                                FetchTransactionCharge(wsmodel, account.getProduct(), "0");      //0-false
                                fmFlag = FinanceManager.LocalPreAuthCompletionFromEuronet(wsmodel, account);
                            }
                        } else {
                            if (Util.hasText(wsmodel.getBranchcode()) && wsmodel.getBranchcode().equals("PSI")) {
                                //m.rehman: Euronet integration, add local/international flag in charges
                                //getting transaction charges
                                FetchTransactionCharge(wsmodel, account.getProduct(), "1");      //1-true
                                fmFlag = FinanceManager.InternationalPurchaseFromEuronet(wsmodel, account);
                            } else {
                                //m.rehman: Euronet integration, add local/international flag in charges
                                //getting transaction charges
                                FetchTransactionCharge(wsmodel, account.getProduct(), "0");      //0-false
                                fmFlag = FinanceManager.LocalPurchaseFromEuronet(wsmodel, account);
                            }
                        }
                    }

                    if (fmFlag) {
                        logger.info("Purchase from Wallet Done successfully!");
                        //setting account balance
                        wsmodel.setAccountnumber(account.getAccountNumber());
                        if (account.getCategory() != null && account.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                            wsmodel.setMerchantid(account.getUserId());
                        } else {
                            wsmodel.setUserid(account.getUserId());
                        }
                        //s.mehtab: 20-10-2020, VC-NAP-202010201 - DE-54 (Available Balance on Cash Withdrawal Receipt)
                        wsmodel.setAcctbalance(account.getAvailableBalance());
                        logger.info("Setting Account Balance [" + account.getAvailableBalance() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                        wsmodel.setIncludeinstatement(1);
                        ////////////////////////////////////////////////////////////////////////////////////////////////////

                        return wsmodel;
                    } else {
                        logger.info("Unable to Perform Purchase in Wallet... **********Manual Process Required!**********");

                        //process wallet limit
                        logger.info("Reversing Limit ...");
                        String respCode = wsmodel.getRespcode();
                        //m.rehman: 22-04-2021, Euronet Integration - need to check both card and account limit
                        //if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, null, Boolean.FALSE))
                        String serviceName = wsmodel.getServicename();
                        if (wsmodel.getServicename().equals("PreAuthorization")) {
                            wsmodel.setServicename("Purchase");
                        }
                        if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, card, Boolean.FALSE)) {
                            logger.error("Limit reversing failed, rejecting...");
                            return wsmodel;
                        }
                        wsmodel.setServicename(serviceName);
                        wsmodel.setRespcode(respCode);
                        return wsmodel;
                    }
                    //   } // Arsalan commited, Ticket# VP-NAP-202102111 / VG-NAP-202102111, Date: 31-May-2021
                }
            } else {
                logger.error("No Identifier Found for NayaPay customer");
                wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(WebServiceUtil.getStrException(e));
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing Purchase..!");
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //Raza Refer to Document '12'
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            GeneralDao.Instance.endTransaction();
            GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteCardBasedReversal(WalletCMSWsEntity wsmodel) {
        logger.info("Executing CardBasedReversal Request for " + wsmodel.getServicename() + "...");
        try {

            //m.rehman: 08-10-2020, VP-NAP-202010081/ VC-NAP-202010081 - Deployment 08-10-2020
            if (Util.hasText(wsmodel.getBranchname())) {
                wsmodel.setBankcode(wsmodel.getBranchname());
            }
            //////////////////////////////////////////////////////////////////////////////////

            String dbQuery, origStan = "", origDateTime = "", origDataElement = "";
            Map<String, Object> params;

            //m.rehman: 10-12-2021 - VP-NAP-202111291 / VC-NAP-202111291 / VG-NAP-202111291 - Meezan ATM On-Us Withdrawal/Balance Inquiry and Reversal
            // Huzaifa: 11/08/2023: FW: NAP-P5-23 ==> [ Logging email ] ==> Segregation of ATM On Us Channels Bank - UBL & BAFL
            if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.UNILONUSATM)) {
                //find original transaction first
                dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c " +
                        "where " +
                        "c.tranrefnumber= :ORIG_DATA_ELEM " +
                        "and c.cardnumber= :CARD_NO ";
                params = new HashMap<String, Object>();
                params.put("ORIG_DATA_ELEM", wsmodel.getOrigdataelement());
                params.put("CARD_NO", wsmodel.getCardnumber());

            } else {
                origDataElement = wsmodel.getOrigdataelement();
                origStan = origDataElement.substring(4, 10);
                origDateTime = origDataElement.substring(16, 26);
                origDateTime = MyDateFormatNew.format("yyyyMMddHHmmss", new DateTime(MyDateFormatNew.parse("MMddHHmmss", origDateTime)).toDate());

                //find original transaction first
                dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c " +
                        "where " +
                        "c.stan= :ORIG_STAN " +
                        "and c.transdatetime= :ORIG_DATE_TIME ";
                params = new HashMap<String, Object>();
                params.put("ORIG_STAN", origStan);
                params.put("ORIG_DATE_TIME", origDateTime);

                //m.rehman: 26-07-2021, VC-NAP-202107261 - Reverse transaction when 0120 message received from Visa
                //adding more clauses
                dbQuery += "and c.cardnumber= :CARD_NO ";
                params.put("CARD_NO", wsmodel.getCardnumber());

                if (Util.hasText(wsmodel.getTerminalid())) {
                    dbQuery += "and c.terminalid= :TERMINAL_ID ";
                    params.put("TERMINAL_ID", wsmodel.getTerminalid());
                }

                if (Util.hasText(wsmodel.getMerchantid())) {
                    dbQuery += "and c.merchantid= :MERCHANT_ID ";
                    params.put("MERCHANT_ID", wsmodel.getMerchantid());
                }
                ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            }

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //WalletCMSWsEntity origTransaction = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params);
            WalletCMSWsEntity origTransaction = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);
            if (origTransaction == null) {
                logger.error("Original transaction not found with Ref Num [" + wsmodel.getOrigdataelement() + "], returning ...");
                wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_TRANSACTION_NOT_FOUND); //30 Original transaction not found - refer document
                return wsmodel;

            } else if (origTransaction != null && origTransaction.getRespcode().equals(ISOResponseCodes.ACQUIRER_REVERSAL)) {
                logger.error("Original transaction found and already reversed with Ref Num [" + wsmodel.getOrigdataelement() + "], returning ...");
                wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_ALREADY_REVERSED); //35 Already reversed - refer document
                return wsmodel;

            } else if (origTransaction != null && !origTransaction.getRespcode().equals(ISOResponseCodes.APPROVED)) {
                logger.error("Original transaction found but is not Approved with Ref Num [" + wsmodel.getOrigdataelement() + "], returning ...");
                wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_NOT_AUTHORIZED); //34 Original Not Authorized - refer document
                return wsmodel;

            } else {
                logger.info("Original Transaction found with Approved response ...");
            }

            if (Util.hasText(wsmodel.getCardnumber())) {
                // Huzaifa: 11/08/2023: FW: NAP-P5-23 ==> [ Logging email ] ==> Segregation of ATM On Us Channels Bank - UBL & BAFL
                if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.UNILONUSATM) && !Util.hasText(wsmodel.getCardexpiry())) {
                    dbQuery = "from " + CMSCard.class.getName() + " c where " +
                            " c.cardNumber= :CARDNO " +
                            " and c.cardStatus= '00' " +
                            " order by c.id desc ";
                    params = new HashMap<String, Object>();
                    params.put("CARDNO", wsmodel.getCardnumber());

                } else {
                    //dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO ";
                    dbQuery = "from " + CMSCard.class.getName() + " c where " +
                            " c.cardNumber= :CARDNO " +
                            " and substr(c.expiryDate,3,4) = :EXPDATE ";
                    params = new HashMap<String, Object>();
                    params.put("CARDNO", wsmodel.getCardnumber());
                    params.put("EXPDATE", origTransaction.getCardexpiry());
                }

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                //CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);
                CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                if (card == null) {
                    logger.error("Card not Found in DB with CardNo [" + wsmodel.getCardnumber() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                    return wsmodel;
                } else {
                    //Arsalan Akhter, Date: 17-Nov-2021, Ticket: VP-NAP-202111091(Transaction Reversal not Posted on WCMS UI-Production)
//                    if(!card.getCardStatus().equals("00"))
//                    {
//                        logger.error("Inactive Card Found in DB with CardNo [" + wsmodel.getCardnumber() + "] Status [" + card.getCardStatus() + "]");
//                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12 - Invalid Card Status ; Refer to Doc
//                        return wsmodel;
//                    }
//
//                    else
//                    {
                    //==================================================================================================================

                    //Raza Account & Customer Status validation start ; TODO should be updated


                    if (card.getList_CustAccounts() == null) {
                        logger.error("No Account Found for CardNo [" + wsmodel.getCardnumber() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                        return wsmodel;
                    }

                    CMSAccount account = null; //TODO: Raza should Update THIS with default
                    for (CMSAccount acct : card.getList_CustAccounts()) {
                        account = acct;
                        //Arsalan Akhter, Date: 17-Nov-2021, Ticket: VP-NAP-202111091(Transaction Reversal not Posted on WCMS UI-Production)
                        //if(!acct.getStatus().equals("00") || !acct.getCustomer().getStatus().equals("00"))
                        if (acct != null && acct.getStatus().equals("04") //Fraud Block
                                && acct.getStatus().equals("07") //KYC Block
                                && acct.getStatus().equals("09") //AML Block
                                && acct.getStatus().equals("90") //Admin Block
                                && !acct.getCustomer().getStatus().equals("00"))
                        //==================================================================================================================
                        {
                            logger.error("Inactive Account or Customer Found in DB for CardNo [" + wsmodel.getCardnumber() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_INACTIVE); //32 - Inactive Account/Customer Status ; Refer to Doc
                            return wsmodel;
                        }
                    }
                    //Raza Account & Customer Status validation end ; TODO should be updated

                    ///m.rehman: 24-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 1
                    if (account == null) {
                        //m.rehman: 15-07-2021, VC-NAP-202107151 - Total amount not crediting in Visa Local Cash Withdrawal/ECommerce reversal amount not crediting in wallet
                        //adding category
                        dbQuery = "from " + CMSAccount.class.getName() + " a where a.customer = :CUST_ID  and a.category = 'WLLT' ";
                        params = new HashMap<>();
                        params.put("CUST_ID", card.getCustomer());
                        account = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
                    }
                    /////////////////////////////////////////////////////////////////////////////////////////

                    //Arsalan Akhter, Date: 17-Nov-2021, Ticket: VP-NAP-202111091(Transaction Reversal not Posted on WCMS UI-Production)
                    //if(!acct.getStatus().equals("00") || !acct.getCustomer().getStatus().equals("00"))
                    if (account != null && account.getStatus().equals("04") //Fraud Block
                            && account.getStatus().equals("07") //KYC Block
                            && account.getStatus().equals("09") //AML Block
                            && account.getStatus().equals("90") //Admin Block
                            && !account.getCustomer().getStatus().equals("00")) {
                        logger.error("Inactive Account or Customer Found in DB for CardNo [" + wsmodel.getCardnumber() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_INACTIVE); //32 - Inactive Account/Customer Status ; Refer to Doc
                        return wsmodel;
                    }
                    //==================================================================================================================

                    //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                    account = (CMSAccount) GeneralDao.Instance.getCurrentSession().get(CMSAccount.class, account.getId(), LockMode.UPGRADE);
                    GeneralDao.Instance.getCurrentSession().refresh(account);
                    ////////////////////////////////////////////////////////////////////////////////////

                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                    params = new HashMap<String, Object>();
                    params.put("relation", card.getCardNumberExpiryRelation());
                    params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                    CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                    if (cardrelation == null) {
                        logger.error("Card Relation not found for relation [" + card.getCardNumberExpiryRelation() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_RECORD); //Invalid Card Record ; Raza update THIS
                        return wsmodel;
                    }

                    if (Long.parseLong(wsmodel.getAmounttransaction()) <= 0) {
                        logger.error("Invalid Amount for Withdrawal Transaction, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.LOW_BALANCE); //04 - Low Balance ; refer to Doc
                        return wsmodel;
                    }

                    logger.info("Going to Reverse Withdrawal Cash in Wallet...");

                    //m.rehman: 30-09-2020, VP-NAP-202009241 - Original and Reversed transaction in transaction listing
                    //setting original api in reversal for listing purpose
                    wsmodel.setOriginalapi(origTransaction.getServicename());
                    //////////////////////////////////////////////////////////////////////////////////////////////////

                    wsmodel.setNayapaycharges(origTransaction.getNayapaycharges());
                    wsmodel.setNayapaytaxamount(origTransaction.getNayapaytaxamount());
                    wsmodel.setBankcharges(origTransaction.getBankcharges());
                    wsmodel.setBanktaxamount(origTransaction.getBanktaxamount());
                    wsmodel.setSrcchargeamount(origTransaction.getSrcchargeamount());
                    wsmodel.setAmttranfee(origTransaction.getAmttranfee());

                    //Arsalan Akhter, Date: 29-June-2021, Added for listing purpose
                    wsmodel.setOrigretrefno(origTransaction.getRrn());
                    wsmodel.setOrigstan(origTransaction.getStan());
                    wsmodel.setOrigtransdatetime(origTransaction.getTransdatetime());
                    //===============================================================

                    //Arsalan Akhter, Date: 12-Aug-2021, Tikcet: VC-NAP-202108121(Missing details in reversal transactions)
                    //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                    wsmodel.setCardlastdigits(Util.hasText(origTransaction.getCardlastdigits()) ?
                            origTransaction.getCardlastdigits() : "");
                    //===============================================================================================================

                    wsmodel.setCardscheme(Util.hasText(origTransaction.getCardscheme()) ?
                            origTransaction.getCardscheme() : "");
                    //==============================================================================================

                    //m.rehman: Euronet Integration
                    boolean fmFlag = false;
                    String channelid = wsmodel.getChannelid();
                    if (Util.hasText(channelid) && channelid.equals(ChannelCodes.ONELINK)) {
                        fmFlag = FinanceManager.CardBasedReversal(wsmodel, account);

                    } else if (Util.hasText(channelid) && channelid.equals(ChannelCodes.EURONET)) {
                        wsmodel.setCbillamount(origTransaction.getCbillamount());
                        wsmodel.setWithholdingtaxamount(origTransaction.getWithholdingtaxamount());
                        wsmodel.setBranchcode(origTransaction.getBranchcode());
                        if (wsmodel.getServicename().equals("PreAuthorizationReversal")) {
                            if (Util.hasText(wsmodel.getBranchcode()) && wsmodel.getBranchcode().equals("PSI")) {
                                fmFlag = FinanceManager.InternationalPreAuthorizationReversalFromEuronet(wsmodel, account);
                            } else {
                                fmFlag = FinanceManager.LocalPreAuthorizationReversalFromEuronet(wsmodel, account);
                            }
                        } else {
                            if (Util.hasText(wsmodel.getBranchcode())
                                    && (wsmodel.getBranchcode().equals("PSI") || wsmodel.getBranchcode().equals("ESI"))
                                    || wsmodel.getBranchcode().equals("ATM")) {
                                fmFlag = FinanceManager.InternationalCardBasedReversalFromEuronet(wsmodel, account);
                            } else {
                                fmFlag = FinanceManager.LocalCardBasedReversalFromEuronet(wsmodel, account);
                            }
                        }
                    }
                    //m.rehman: 10-12-2021 - VP-NAP-202111291 / VC-NAP-202111291 / VG-NAP-202111291 - Meezan ATM On-Us Withdrawal/Balance Inquiry and Reversal
                    // Huzaifa: 11/08/2023: FW: NAP-P5-23 ==> [ Logging email ] ==> Segregation of ATM On Us Channels Bank - UBL & BAFL
                    else if (Util.hasText(channelid) && channelid.equals(ChannelCodes.UNILONUSATM)) {
                        //FetchTransactionCharge(wsmodel, account.getProduct(), "0");      //1-true     // Asim Shahzad, Date : 1st May 2023, Tracking ID : VP-NAP-202303091
                        fmFlag = FinanceManager.CNICBasedCashWithdrawalReversal(wsmodel, account);
                    }

                    if (fmFlag) {
                        logger.info("Reversal from Wallet Done successfully!");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        //process wallet limit
                        logger.info("Reversing Limit ...");
                        //m.rehman: 22-04-2021, Euronet Integration - need to check both card and account limit
                        //if (!WalletCMSFunctions.ProcessDebitWalletLimit(origTransaction, account, null, Boolean.FALSE))
                        String serviceName = origTransaction.getServicename();
                        if (origTransaction.getServicename().equals("PreAuthorization")) {
                            origTransaction.setServicename("Purchase");
                        }
                        if (!WalletCMSFunctions.ProcessDebitWalletLimit(origTransaction, account, card, Boolean.FALSE)) {
                            logger.error("Limit reversing failed, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED);
                            return wsmodel;
                        }
                        origTransaction.setServicename(serviceName);

                        logger.info("Setting Reversal Response Code to Original transaction ...");
                        origTransaction.setRespcode(ISOResponseCodes.ACQUIRER_REVERSAL);    //36 - Acquirer Reversal
                        GeneralDao.Instance.saveOrUpdate(origTransaction);
                        logger.info("Reversal from Wallet Done successfully!");
                        if (account.getCategory() != null && account.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                            wsmodel.setMerchantid(account.getUserId());
                        } else {
                            wsmodel.setUserid(account.getUserId());
                        }
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                        wsmodel.setIncludeinstatement(1);
                        ////////////////////////////////////////////////////////////////////////////////////////////////////

                        //m.rehman: 10-11-2021, Nayapay Optimization
                        //find original transaction first
                        //m.rehman: 10-12-2021 - VP-NAP-202111291 / VC-NAP-202111291 / VG-NAP-202111291 - Meezan ATM On-Us Withdrawal/Balance Inquiry and Reversal
                        // Huzaifa: 11/08/2023: FW: NAP-P5-23 ==> [ Logging email ] ==> Segregation of ATM On Us Channels Bank - UBL & BAFL
                        if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.UNILONUSATM)) {
                            //find original transaction first
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c " +
                                    "where " +
                                    "c.tranrefnumber= :ORIG_DATA_ELEM " +
                                    "and c.cardnumber= :CARD_NO ";
                            params = new HashMap<String, Object>();
                            params.put("ORIG_DATA_ELEM", wsmodel.getOrigdataelement());
                            params.put("CARD_NO", wsmodel.getCardnumber());

                        } else {
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c " +
                                    "where " +
                                    "c.stan= :ORIG_STAN " +
                                    "and c.transdatetime= :ORIG_DATE_TIME ";
                            params = new HashMap<String, Object>();
                            params.put("ORIG_STAN", origStan);
                            params.put("ORIG_DATE_TIME", origDateTime);

                            //adding more clauses
                            dbQuery += "and c.cardnumber= :CARD_NO ";
                            params.put("CARD_NO", wsmodel.getCardnumber());

                            if (Util.hasText(wsmodel.getTerminalid())) {
                                dbQuery += "and c.terminalid= :TERMINAL_ID ";
                                params.put("TERMINAL_ID", wsmodel.getTerminalid());
                            }

                            if (Util.hasText(wsmodel.getMerchantid())) {
                                dbQuery += "and c.merchantid= :MERCHANT_ID ";
                                params.put("MERCHANT_ID", wsmodel.getMerchantid());
                            }
                        }

                        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                        //WalletCMSWsListingEntity origTransaction = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, params);
                        WalletCMSWsListingEntity oriTxnListing = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                        if (oriTxnListing != null) {

                            logger.info("Original transaction listing found, updating status ...");
                            oriTxnListing.setRespcode(ISOResponseCodes.ACQUIRER_REVERSAL);
                            GeneralDao.Instance.saveOrUpdate(oriTxnListing);
                        } else {
                            logger.error("Original transaction listing not found ...");
                        }
                        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

                        return wsmodel;

                    } else {

                        logger.info("Unable to Reverse in Wallet... **********Manual Process Required!**********");
                        //m.rehman: 22-04-2021, Euronet Integration - need to check both card and account limit
                        //if (!WalletCMSFunctions.ProcessDebitWalletLimit(origTransaction, account, null, Boolean.TRUE))
                        String serviceName = origTransaction.getServicename();
                        if (origTransaction.getServicename().equals("PreAuthorization")) {
                            origTransaction.setServicename("Purchase");
                        }
                        if (!WalletCMSFunctions.ProcessDebitWalletLimit(origTransaction, account, card, Boolean.TRUE)) {
                            logger.error("Limit reversing failed, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED);
                            return wsmodel;
                        }
                        origTransaction.setServicename(serviceName);
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_IMD);
                        return wsmodel;
                    }
                    //}//Arsalan Akhter, Date: 17-Nov-2021, Ticket: VP-NAP-202111091(Transaction Reversal not Posted on WCMS UI-Production)
                }
            } else {
                logger.error("No Identifier Found for NayaPay customer");
                wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing CardBasedReversal..!");
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //Raza Refer to Document '12'
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            GeneralDao.Instance.endTransaction();
            GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
        }
    }

    public static WalletCMSWsEntity ExecuteEnvelopLoad(WalletCMSWsEntity wsmodel) {
        logger.info("Executing EnvelopLoad Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null && userwallet.getStatus().equals("00")) {
                //Change Wallet PIN
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", userwallet.getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for account [" + userwallet.getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                } else {
                    //TODO: Verify LoadWallet TransactionPermission
                    //TODO: Validate PIN
                    logger.info("Verifying Destination Account...");
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getDestuserid());
                    params.put("CAT", AccType.CAT_WALLET.StringValue());

                    CMSAccount destaccount = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                    if (destaccount != null && destaccount.getStatus().equals("00") && destaccount.getCustomer().getStatus().equals("00")) {
                        //TODO Verify PIN
                        if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                            logger.error("PIN validation failed, rejecting...");
                            //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                            return wsmodel;
                        }
                        logger.info("PIN validated successfully");


                        if (Long.parseLong(wsmodel.getAmounttransaction()) <= 0) {
                            logger.error("Invalid Amount for Purchase Transaction, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.LOW_BALANCE); //04 - Low Balance ; refer to Doc
                            return wsmodel;
                        }

                        CMSAccount poolAccount = WalletCMSFunctions.getNayaPayPoolAccount();
                        if (poolAccount == null || !poolAccount.getStatus().equals("00") || !poolAccount.getCustomer().getStatus().equals("00")) {
                            logger.error("Nayapay Pool Account not found or is Inactive, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.REFER_TO_ISSUER); //77 - ReferToIssuer refer to Doc
                            return wsmodel;

                        }

                        //verify wallet limit
                        if (!WalletCMSFunctions.VerifyWalletLimit(wsmodel, userwallet, null, false)) {
                            logger.error("Limit processing failed, rejecting...");
                            return wsmodel;
                        }

                        logger.info("Going to perform EnvelopLoad...");

                        if (FinanceManager.EnvelopLoad(wsmodel, userwallet, poolAccount)) {
                            logger.info("Envelop Loaded successfully!");
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                            return wsmodel;
                        } else {
                            logger.info("Unable to perform LoadEnvelop... **********Manual Process Required!**********");
                            //wsmodel.setRespcode(ISOResponseCodes.INVALID_IMD);
                            return wsmodel;
                        }
                    } else {
                        logger.error("Invalid or No Destination Account found for [" + wsmodel.getDestuserid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_DEST_NOT_FOUND); //68 Invalid To Account -- refer to Document
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing EnvelopLoad..!**********Manual Process Required!**********");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //46-Unable to Process ; Refer to Doc
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteEnvelopUnload(WalletCMSWsEntity wsmodel) {
        logger.info("Executing UnEnvelopLoad Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null && userwallet.getStatus().equals("00")) {
                //Change Wallet PIN
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", userwallet.getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for account [" + userwallet.getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                } else {
                    //TODO: Verify LoadWallet TransactionPermission
                    //TODO: Validate PIN
                    logger.info("Verifying Destination Account...");
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getDestuserid());
                    params.put("CAT", AccType.CAT_WALLET.StringValue());

                    CMSAccount destaccount = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                    if (destaccount != null && destaccount.getStatus().equals("00") && destaccount.getCustomer().getStatus().equals("00")) {
                        /*//TODO Verify PIN
                        if(!WalletCMSFunctions.ValidatePIN(wsmodel,cardrelation))
                        {
                            logger.error("PIN validation failed, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                            return wsmodel;
                        }
                        logger.info("PIN validated successfully");*/


                        if (Long.parseLong(wsmodel.getAmounttransaction()) <= 0) {
                            logger.error("Invalid Amount for UnLoadEnvelop Transaction, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.LOW_BALANCE); //04 - Low Balance ; refer to Doc
                            return wsmodel;
                        }

                        CMSAccount poolAccount = WalletCMSFunctions.getNayaPayPoolAccount();
                        if (poolAccount == null || !poolAccount.getStatus().equals("00") || !poolAccount.getCustomer().getStatus().equals("00")) {
                            logger.error("Nayapay Pool Account not found or is Inactive, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 - Inactive Account/Customer Status ; Refer to Doc
                            return wsmodel;
                        }

                        logger.info("Going to perform EnvelopUnLoad...");

                        if (FinanceManager.EnvelopUnLoad(wsmodel, userwallet, poolAccount)) {
                            logger.info("Envelop UnLoaded successfully!");
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                            return wsmodel;
                        } else {
                            logger.info("Unable to perform UnLoadEnvelop... **********Manual Process Required!**********");
                            //wsmodel.setRespcode(ISOResponseCodes.INVALID_IMD);
                            return wsmodel;
                        }
                    } else {
                        logger.error("Invalid or No Destination Account found for [" + wsmodel.getDestuserid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_DEST_NOT_FOUND); //68 Invalid To Account -- refer to Document
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing EnvelopUnLoad..!**********Manual Process Required!**********");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //46-Unable to Process
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteReverseEnvelop(WalletCMSWsEntity wsmodel) {
        logger.info("Executing ReverseEnvelop Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null && userwallet.getStatus().equals("00")) {
                //Change Wallet PIN
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", userwallet.getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for account [" + userwallet.getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                } else {
                    //TODO: Verify LoadWallet TransactionPermission
                    //TODO: Validate PIN
                    logger.info("Verifying Destination Account...");
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getDestuserid());
                    params.put("CAT", AccType.CAT_WALLET.StringValue());

                    CMSAccount destaccount = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                    if (destaccount != null && destaccount.getStatus().equals("00") && destaccount.getCustomer().getStatus().equals("00")) {
                        /*//TODO Verify PIN
                        if(!WalletCMSFunctions.ValidatePIN(wsmodel,cardrelation))
                        {
                            logger.error("PIN validation failed, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                            return wsmodel;
                        }
                        logger.info("PIN validated successfully");*/


                        if (Long.parseLong(wsmodel.getAmounttransaction()) <= 0) {
                            logger.error("Invalid Amount for UnLoadEnvelop Transaction, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.LOW_BALANCE); //04 - Low Balance ; refer to Doc
                            return wsmodel;
                        }

                        CMSAccount poolAccount = WalletCMSFunctions.getNayaPayPoolAccount();
                        if (poolAccount == null || !poolAccount.getStatus().equals("00") || !poolAccount.getCustomer().getStatus().equals("00")) {
                            logger.error("Nayapay Pool Account not found or is Inactive, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 - Inactive Account/Customer Status ; Refer to Doc
                            return wsmodel;
                        }

                        logger.info("Going to perform ReverseEnvelop...");

                        if (FinanceManager.ReverseEnvelop(wsmodel, userwallet, poolAccount)) {
                            logger.info("Envelop Reverse successfully!");
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                            return wsmodel;
                        } else {
                            logger.info("Unable to perform ReverseEnvelop... **********Manual Process Required!**********");
                            //wsmodel.setRespcode(ISOResponseCodes.INVALID_IMD);
                            return wsmodel;
                        }
                    } else {
                        logger.error("Invalid or No Destination Account found for [" + wsmodel.getDestuserid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_DEST_NOT_FOUND); //68 Invalid To Account -- refer to Document
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot ReverseEnvelop. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing ReverseEnvelop..!**********Manual Process Required!**********");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteUpdateSecretQuestions(WalletCMSWsEntity wsmodel) {
        logger.info("Executing UpdateSecretQuestions Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID " + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null && userwallet.getStatus().equals("00") && userwallet.getCustomer().getStatus().equals("00")) {
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", userwallet.getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + userwallet.getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                }

                if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                    logger.error("PIN validation failed, rejecting...");
                    //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                    return wsmodel;
                }

                if (WalletCMSFunctions.UpdateSecurityQuestions(wsmodel, userwallet.getCustomer())) {
                    logger.info("Secret Questions updated successfully!");
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                } else {
                    logger.info("Unable to Update Secret Questions for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //90 Customer not found
                    return wsmodel;
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing UpdateSecretQuestions..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //46- Unable to Process
            return wsmodel;
        }
    }

    //m.rehman: for NayaPay, adding new call for document 2.0 <start>
    @Transactional
    public static WalletCMSWsEntity ExecuteMerchantReversalTransaction(WalletCMSWsEntity wsmodel) {
        logger.info("Executing MerchantReversalTransaction Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            //m.rehman: for NayaPay, changing category
            //params.put("CAT", AccType.WALLET.StringValue());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //CMSAccount userwallet = (CMSAccount)GeneralDao.Instance.findObject(dbQuery, params);
            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

            if (userwallet != null && userwallet.getStatus().equals("00")) {
                /*
                //Change Wallet PIN
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channel = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", userwallet.getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if(cardrelation == null)
                {
                    logger.error("Card Relation not found for account [" + userwallet.getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND); //90-Customer not Found ; Raza update THIS
                    return wsmodel;
                }
                else
                {
                */
                // Asim Shahzad, Date : 24th Sep 2020, Tracking ID : VC-NAP-202008311
                //getting original transaction
                dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where c.tranrefnumber= :ref_num and c.servicename= :trantype";
                params = new HashMap<String, Object>();
                params.put("ref_num", wsmodel.getOrigdataelement());
                params.put("trantype", wsmodel.getNayapaytrantype());
                // ==================================================================

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                //WalletCMSWsEntity origTxn = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params);
                WalletCMSWsEntity origTxn = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                if (origTxn == null) {
                    logger.error("Original Transaction not found ...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_TRAN_SRC_NOT_FOUND);    //m.rehman: 30 - orig txn not found - Refer to Document
                    return wsmodel;

                } else if (!origTxn.getRespcode().equals(ISOResponseCodes.APPROVED)) {
                    logger.error("Transaction is not approved in the system ...");
                    wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_ALREADY_REJECTED);    //m.rehman: 96 - orig already rejected - Refer to Document
                    return wsmodel;

                } else if (origTxn.getRespcode().equals(ISOResponseCodes.ACQUIRER_REVERSAL)) {     //36 - Acquirer reversal
                    logger.error("Transaction is already reversed in the system ...");
                    wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_ALREADY_REVERSED);    //m.rehman: 35 - orig already reversed - Refer to Document
                    return wsmodel;
                }

                logger.info("Original Transaction found, processing further...");

                    /*
                    //checking if partial flag is true and if partial amount is greater than original amount, reject transaction
                    if (wsmodel.getPartialflag().equals("true") && wsmodel.getAmounttransaction() != null) {
                        logger.info("Partial flag is true, validating partial amount ...");
                        if (Integer.parseInt(wsmodel.getAmounttransaction()) > Integer.parseInt(origTxn.getAmounttransaction())) {
                            logger.error("Partial Amount is greater than Original Amount, rejecting transaction ...");
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_REPLACEMENT_AMOUNT);    //37 - Invalid Replacement Amount - refer document
                            return wsmodel;

                        } else {
                            logger.info("Partial amount is correct, setting partial amount in transaction amount");
                            origTxn.setAmounttransaction(wsmodel.getAmounttransaction());
                        }
                    }*/

                //verify Maximum Balance Limit
                    /*if (!WalletCMSFunctions.VerifyMaxBalanceLimit(origTxn, userwallet))
                    {
                        logger.error("Maximum Balance Limit verification failed, rejecting...");
                        return wsmodel;
                    }*/

                //m.rehman: 28-07-2020, handling for core transactions
                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getUserid());
                params.put("CAT", AccType.CAT_LINKED.StringValue());
                CMSAccount linkedacct = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
                ////////////////////////////////////////////////////////////////////////////////////

                //m.rehman: 11-08-2020, no limit deduction on Core transactions
                // Asim Shahzad, Date : 30th Sep 2020, Tracking ID : VC-NAP-202008311
                if (Util.hasText(origTxn.getServicename()) &&
                        (!origTxn.getServicename().equals("MerchantBillerCoreTransaction")
                                && !origTxn.getServicename().equals("MerchantRetailCoreTransaction"))) {
                    // ==================================================================
                    //process wallet limit
                    logger.info("Reversing Limit ...");
                    if (!WalletCMSFunctions.ProcessDebitWalletLimit(origTxn, userwallet, null, Boolean.FALSE)) {
                        logger.error("Limit reversing failed, rejecting...");
                        return wsmodel;
                    }
                }

                //m.rehman: 28-07-2020, handling for core transactions
                String serviceName = origTxn.getServicename();
                String refNo = origTxn.getTranrefnumber();
                String dateTime = origTxn.getTransdatetime();
                origTxn.setServicename(wsmodel.getServicename());
                origTxn.setTranrefnumber(wsmodel.getTranrefnumber());
                origTxn.setTransdatetime(wsmodel.getTransdatetime());
                //if(FinanceManager.MerchantReversalTransaction(origTxn, userwallet))
                if (FinanceManager.MerchantReversalTransaction(origTxn, userwallet, linkedacct)) {
                    logger.info("Wallet Transaction Reversal processed successfully!");
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    logger.info("Marking transaction as reversed in System ....");
                    origTxn.setRespcode(ISOResponseCodes.ACQUIRER_REVERSAL);   //36 - Acquirer Reversal - Refer document
                    //m.rehman: 28-07-2020, handling for core transactions
                    origTxn.setServicename(serviceName);
                    origTxn.setTranrefnumber(refNo);
                    origTxn.setTransdatetime(dateTime);
                    GeneralDao.Instance.saveOrUpdate(origTxn);

                    //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                    wsmodel.setIncludeinstatement(1);
                    ////////////////////////////////////////////////////////////////////////////////////////////////////

                    //m.rehman: 10-11-2021, Nayapay Optimization
                    dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where c.tranrefnumber= :ref_num and c.servicename= :trantype";
                    params = new HashMap<String, Object>();
                    params.put("ref_num", wsmodel.getOrigdataelement());
                    params.put("trantype", wsmodel.getNayapaytrantype());
                    // ==================================================================

                    //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                    //WalletCMSWsListingEntity origTxnListing = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, params);
                    WalletCMSWsListingEntity origTxnListing = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                    if (origTxnListing != null) {

                        logger.info("Original transaction listing found, updating status ...");
                        origTxnListing.setRespcode(ISOResponseCodes.ACQUIRER_REVERSAL);
                        GeneralDao.Instance.saveOrUpdate(origTxnListing);
                    } else {
                        logger.error("Original transaction listing not found ...");
                    }
                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////

                    return wsmodel;
                } else {
                    //m.rehman: 28-07-2020, handling for core transactions
                    origTxn.setServicename(serviceName);
                    origTxn.setTranrefnumber(refNo);
                    origTxn.setTransdatetime(dateTime);
                    logger.info("Unable to process MerchantReversalTransaction... **********Manual Process Required!**********");

                    //process wallet limit
                    logger.info("Applying Limit ...");
                    if (!WalletCMSFunctions.ProcessDebitWalletLimit(origTxn, userwallet, null, Boolean.TRUE)) {
                        logger.error("Limit processing failed, rejecting...");
                        return wsmodel;
                    }

                    //m.rehman: 28-07-2020, handling for core transactions
                    GeneralDao.Instance.saveOrUpdate(origTxn);
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //46 - unable to process - refer to document
                    return wsmodel;
                }

                //}
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing MerchantTransaction..!**********Manual Process Required!**********");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    public static WalletCMSWsEntity ExecuteAdminPortalGetUserWallet(WalletCMSWsEntity wsmodel) {
        logger.info("Executing AdminPortalGetUserWallet Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


            if (usernprel != null) {
                //Change Wallet PIN
                //dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation ";// + " and c.channel = :chnnl ";
                //params = new HashMap<String, Object>();
                //params.put("relation", usernprel.getAccount().getAccountNumber());
                //params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                //CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                //if(cardrelation == null)
                //{
                //    logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                //    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                //    return wsmodel;
                //}
                //else
                //{
                //if(usernprel != null)
                //{
                logger.info("Getting User Wallet...");

                        /*
                        if(usernprel.getAccount().getStatus().equals("90") || usernprel.getAccount().getCustomer().getStatus().equals("90"))
                        {
                            wsmodel.setBlockedflag("true");
                            wsmodel.setEnableflag("false");
                            wsmodel.setTempblockflag("false");
                        }
                        else if(usernprel.getAccount().getStatus().equals("01") || usernprel.getAccount().getCustomer().getStatus().equals("01"))
                        {
                            wsmodel.setBlockedflag("false");
                            wsmodel.setEnableflag("false");
                            wsmodel.setTempblockflag("false");
                        }
                        else if(usernprel.getAccount().getStatus().equals("03") || usernprel.getAccount().getCustomer().getStatus().equals("03"))
                        {
                            wsmodel.setBlockedflag("false");
                            wsmodel.setEnableflag("false");
                            wsmodel.setTempblockflag("true");
                        }
                        else if(usernprel.getAccount().getStatus().equals("00") || usernprel.getAccount().getCustomer().getStatus().equals("00"))
                        {
                            wsmodel.setEnableflag("true");
                            wsmodel.setBlockedflag("false");
                            wsmodel.setTempblockflag("false");
                        }
                        else
                        {
                            wsmodel.setEnableflag("false");
                            wsmodel.setBlockedflag("false");
                            wsmodel.setTempblockflag("false");
                        }
                        */

                List<NayaPayLimit> nayaPayLimitList = new ArrayList<NayaPayLimit>();
                ;
                //wsmodel.setEnableflag("true"); //Raza CHECK and Update
                //m.rehman: 30-08-2021, VC-NAP-202108021 - Limit Structure update
                //updating below query
                dbQuery = "from " + CMSDebitRemainingLimit.class.getName() + " c where c.relation= :ACCTNUMBER and c.limitId.isActive='1' ";
                params = new HashMap<String, Object>();
                params.put("ACCTNUMBER", usernprel.getAccount().getAccountNumber());
                List<CMSDebitRemainingLimit> debitRemainingLimits = GeneralDao.Instance.find(dbQuery, params);

                if (debitRemainingLimits != null && debitRemainingLimits.size() > 0) {
                    for (CMSDebitRemainingLimit al : debitRemainingLimits) {
                        if (al.getLimitId().getProductId().equals(usernprel.getAccount().getProduct())) {
                            NayaPayLimit nl = new NayaPayLimit();
                            if (Util.hasText(al.getLimitId().getDescription())) {
                                logger.info(al.getLimitId().getDescription());
                                nl.setTransaction(al.getLimitId().getDescription());
                            } else {
                                logger.info(al.getLimitId().getTransactionType().getServicename());
                                nl.setTransaction(al.getLimitId().getTransactionType().getServicename());
                            }
                            nl.setAmount(al.getLimitId().getAmount());

                            // Asim, Logging to be removed
                            logger.info("Current cycle date : [" + al.getCycleEndDate() + "]");
                            logger.info("Checking for month : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6) + "]");
                            logger.info("Checking for year : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4) + "]");
                            logger.info("Checking for current date : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()) + "]");
                            // =================================

                            // Asim Shahzad, Date : 6th Oct 2020, Tracking ID : VC-NAP-202009231
                            CMSLimitCycleType cmsLimitCycleType = new CMSLimitCycleType(Integer.parseInt(al.getLimitId().getCycleLengthType()));

                            if (cmsLimitCycleType.equals(CMSLimitCycleType.DAILY)) {
                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).equals(al.getCycleEndDate())) {
                                    nl.setAvaillimit(al.getRemainingAmount());
                                    nl.setAvaillimitfreq(al.getRemainingFrequency());

                                    logger.info("Executing Daily Limit flow...");
                                    logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                    logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                } else {
                                    nl.setAvaillimit(al.getLimitId().getAmount());
                                    nl.setAvaillimitfreq(al.getLimitId().getFrequencyLength());

                                    logger.info("Executing Daily Limit flow...");
                                    logger.info("Current Debit Limit : [" + al.getId() + "]");
                                    logger.info("Debit Limit : [" + al.getLimitId().getId() + "]");
                                    logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                    logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                }
                            }

                            if (cmsLimitCycleType.equals(CMSLimitCycleType.MONTHLY)) {
                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6).equals(al.getCycleEndDate().substring(4, 6))) {
                                    nl.setAvaillimit(al.getRemainingAmount());
                                    nl.setAvaillimitfreq(al.getRemainingFrequency());

                                    logger.info("Executing Monthly Limit flow...");
                                    logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                    logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                } else {
                                    nl.setAvaillimit(al.getLimitId().getAmount());
                                    nl.setAvaillimitfreq(al.getLimitId().getFrequencyLength());

                                    logger.info("Executing Monthly Limit flow...");
                                    logger.info("Current Debit Limit : [" + al.getId() + "]");
                                    logger.info("Debit Limit : [" + al.getLimitId().getId() + "]");
                                    logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                    logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                }
                            }

                            if (cmsLimitCycleType.equals(CMSLimitCycleType.YEARLY)) {
                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4).equals(al.getCycleEndDate().substring(2, 4))) {
                                    nl.setAvaillimit(al.getRemainingAmount());
                                    nl.setAvaillimitfreq(al.getRemainingFrequency());

                                    logger.info("Executing Yearly Limit flow...");
                                    logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                    logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                } else {
                                    nl.setAvaillimit(al.getLimitId().getAmount());
                                    nl.setAvaillimitfreq(al.getLimitId().getFrequencyLength());

                                    logger.info("Executing Yearly Limit flow...");
                                    logger.info("Current Debit Limit : [" + al.getId() + "]");
                                    logger.info("Debit Limit : [" + al.getLimitId().getId() + "]");
                                    logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                    logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                }
                            }
                            // ================================================================

                            nayaPayLimitList.add(nl);
                        }
                                /*
                                NayaPayLimit nl = new NayaPayLimit();
                                SwitchTransactionCodes switchTransactionCodes = GlobalContext.getInstance().getTransactionCodeDescbyCode(al.getLimitId().getTransactionType().getTxncode());
                                nl.setTransaction(switchTransactionCodes.getServicename());
                                nl.setAmount(al.getLimitId().getAmount());
                                nl.setAvaillimit(al.getRemainingAmount());
                                nl.setAvaillimitfreq(al.getRemainingFrequency());
                                nayaPayLimitList.add(nl);
                                */
                    }
                }

                dbQuery = "from " + CMSCreditRemainingLimit.class.getName() + " c where c.relation= :ACCTNUMBER and c.limitId.isActive='1'";
                params = new HashMap<String, Object>();
                params.put("ACCTNUMBER", usernprel.getAccount().getAccountNumber());
                List<CMSCreditRemainingLimit> creditRemainingLimits = GeneralDao.Instance.find(dbQuery, params);

                if (creditRemainingLimits != null && creditRemainingLimits.size() > 0) {
                    for (CMSCreditRemainingLimit al : creditRemainingLimits) {
                        if (al.getLimitId().getProductId().equals(usernprel.getAccount().getProduct())) {
                            NayaPayLimit nl = new NayaPayLimit();
                            if (Util.hasText(al.getLimitId().getDescription())) {
                                logger.info(al.getLimitId().getDescription());
                                nl.setTransaction(al.getLimitId().getDescription());
                            } else {
                                logger.info(al.getLimitId().getTransactionType().getServicename());
                                nl.setTransaction(al.getLimitId().getTransactionType().getServicename());
                            }
                            nl.setAmount(al.getLimitId().getAmount());

                            // Asim, Logging to be removed
                            logger.info("Current cycle date : [" + al.getCycleEndDate() + "]");
                            logger.info("Checking for month : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6) + "]");
                            logger.info("Checking for year : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4) + "]");
                            logger.info("Checking for current date : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()) + "]");
                            // =================================

                            // Asim Shahzad, Date : 6th Oct 2020, Tracking ID : VC-NAP-202009231
                            CMSLimitCycleType cmsLimitCycleType = new CMSLimitCycleType(Integer.parseInt(al.getLimitId().getCycleLengthType()));

                            if (cmsLimitCycleType.equals(CMSLimitCycleType.DAILY)) {
                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).equals(al.getCycleEndDate())) {
                                    nl.setAvaillimit(al.getRemainingAmount());
                                    nl.setAvaillimitfreq(al.getRemainingFrequency());

                                    logger.info("Executing Daily Limit flow...");
                                    logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                    logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                } else {
                                    nl.setAvaillimit(al.getLimitId().getAmount());
                                    nl.setAvaillimitfreq(al.getLimitId().getFrequencyLength());

                                    logger.info("Executing Daily Limit flow...");
                                    logger.info("Current Debit Limit : [" + al.getId() + "]");
                                    logger.info("Debit Limit : [" + al.getLimitId().getId() + "]");
                                    logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                    logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                }
                            }

                            if (cmsLimitCycleType.equals(CMSLimitCycleType.MONTHLY)) {
                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6).equals(al.getCycleEndDate().substring(4, 6))) {
                                    nl.setAvaillimit(al.getRemainingAmount());
                                    nl.setAvaillimitfreq(al.getRemainingFrequency());

                                    logger.info("Executing Monthly Limit flow...");
                                    logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                    logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                } else {
                                    nl.setAvaillimit(al.getLimitId().getAmount());
                                    nl.setAvaillimitfreq(al.getLimitId().getFrequencyLength());

                                    logger.info("Executing Monthly Limit flow...");
                                    logger.info("Current Debit Limit : [" + al.getId() + "]");
                                    logger.info("Debit Limit : [" + al.getLimitId().getId() + "]");
                                    logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                    logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                }
                            }

                            if (cmsLimitCycleType.equals(CMSLimitCycleType.YEARLY)) {
                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4).equals(al.getCycleEndDate().substring(2, 4))) {
                                    nl.setAvaillimit(al.getRemainingAmount());
                                    nl.setAvaillimitfreq(al.getRemainingFrequency());

                                    logger.info("Executing Yearly Limit flow...");
                                    logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                    logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                } else {
                                    nl.setAvaillimit(al.getLimitId().getAmount());
                                    nl.setAvaillimitfreq(al.getLimitId().getFrequencyLength());

                                    logger.info("Executing Yearly Limit flow...");
                                    logger.info("Current Debit Limit : [" + al.getId() + "]");
                                    logger.info("Debit Limit : [" + al.getLimitId().getId() + "]");
                                    logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                    logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                }
                            }
                            // ================================================================

                            nayaPayLimitList.add(nl);
                        }
                                /*
                                NayaPayLimit nl = new NayaPayLimit();
                                SwitchTransactionCodes switchTransactionCodes = GlobalContext.getInstance().getTransactionCodeDescbyCode(al.getLimitId().getTransactionType().getTxncode());
                                nl.setTransaction(switchTransactionCodes.getServicename());
                                nl.setAmount(al.getLimitId().getAmount());
                                nl.setAvaillimit(al.getRemainingAmount());
                                nl.setAvaillimitfreq(al.getRemainingFrequency());
                                nayaPayLimitList.add(nl);
                                */
                    }
                }

                if (nayaPayLimitList == null || nayaPayLimitList.size() <= 0) {
                    logger.error("No Wallet Limit record found, rejecting...");
                }

                wsmodel.setNayapaylimits(nayaPayLimitList);
                wsmodel.setAcctbalance(StringUtils.leftPad(usernprel.getAccount().getAvailableBalance(), 12, "0"));
                logger.info("Curr [" + usernprel.getAccount().getCurrency() + "] State [" + usernprel.getAccount().getCategory() + "]");

                Currency currency = GlobalContext.getInstance().getCurrency(Integer.parseInt(usernprel.getAccount().getCurrency()));
                if (currency != null) {
                    wsmodel.setAccountcurrency(currency.getName());
                } else {
                    wsmodel.setAccountcurrency(GlobalContext.getInstance().getBaseCurrency().getName());
                }
                //wsmodel.setCurrency(GlobalContext.getInstance().getCurrency(Integer.parseInt(usernprel.getAccount().getCurrency())).getName());

                //wsmodel.setState(usernprel.getAccount().getCategory());
                wsmodel.setState(usernprel.getAccount().getCategory() + "_" + usernprel.getAccount().getLevel());
                wsmodel.setAccountnumber(usernprel.getAccount().getAccountNumber());
                wsmodel.setIban(usernprel.getAccount().getiBan()); // Asim Shahzad, Date : 1st July 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                wsmodel.setStatus(usernprel.getAccount().getStatus());
                wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                // Asim Shahzad, Date : 8th Jan 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071
//                        wsmodel.setAtlStatus(usernprel.getAccount().getCustomer().getATLActive());
                // ========================================================================================================
                return wsmodel;

                //}
                //else
                //{
                //    logger.error("No Linked Account found for [" + wsmodel.getAcctid() + "], rejecting...");
                //    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //02 Invalid Account -- refer to Document
                //    return wsmodel;
                //}
                //}
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing AdminPortalGetUserWallet..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteAdminPortalGetUserdebitCard(WalletCMSWsEntity wsmodel) {
        logger.info("Executing AdminPortalGetUserdebitCard Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (usernprel != null) {
                //Change Wallet PIN
                //dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation ";// + " and c.channel = :chnnl ";
                //params = new HashMap<String, Object>();
                //params.put("relation", usernprel.getAccount().getAccountNumber());
                //params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                //CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                //if(cardrelation == null)
                //{
                //    logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                //    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                //    return wsmodel;
                //}
                //else
                //{
                //if(usernprel != null && usernprel.getAccount().getStatus().equals("00") && usernprel.getAccount().getCustomer().equals(usernprel.getAccount().getCustomer()))
                //{
                logger.info("Getting User Debit Card...");

                        /*
                        dbQuery = "from " + CMSCard.class.getName() + " c where c.customer= :custID ";
                        params = new HashMap<String, Object>();
                        params.put("custID", usernprel.getAccount().getCustomer());
                        CMSCard card = (CMSCard)GeneralDao.Instance.findObject(dbQuery, params);

                        if(card != null)
                        {
                            wsmodel.setCardnumber(card.getCardNumber());
                            wsmodel.setCardnolastdigits(card.getCardnolastdigits());
                            wsmodel.setStatus(card.getCardStatus());

                            if(card.getCardStatus().equals("00"))
                            {
                                wsmodel.setEnableflag("true");
                                wsmodel.setTempblockflag("false");
                                wsmodel.setBlockedflag("false");
                            }
                            else if(card.getCardStatus().equals("03"))
                            {
                                wsmodel.setEnableflag("false");
                                wsmodel.setTempblockflag("true");
                                wsmodel.setBlockedflag("false");
                            }
                            else if(card.getCardStatus().equals("90"))
                            {
                                wsmodel.setEnableflag("false");
                                wsmodel.setTempblockflag("false");
                                wsmodel.setBlockedflag("true");
                            }
                            else if(card.getCardStatus().equals("02"))
                            {
                                wsmodel.setEnableflag("false");
                                wsmodel.setTempblockflag("false");
                                wsmodel.setBlockedflag("false");
                            }

                            wsmodel.setRequesttime(card.getCreateDate());
                            wsmodel.setActivationtime(card.getActivationDate());
                            wsmodel.setCardexpiry(card.getExpiryDate());


                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                            return  wsmodel;
                        }
                        else
                        {
                            logger.error("No Card Record found, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD); //05 Invalid Card refer To Document Update THIS
                            return wsmodel;
                        }
                        */

                dbQuery = "from " + CMSCard.class.getName() + " c where c.customer= :custID ";
                params = new HashMap<String, Object>();
                params.put("custID", usernprel.getAccount().getCustomer());
                List<CMSCard> cardList = GeneralDao.Instance.find(dbQuery, params);

                List<CardObject> cardObjectList = new ArrayList<CardObject>();
                if (cardList != null && cardList.size() > 0) {
                    //List<CardObject> cardObjectList = new ArrayList<CardObject>();
                    for (CMSCard cmsCard : cardList) {
                        CardObject cardObject = new CardObject();
                        cardObject.setId(cmsCard.getId().toString());
                        cardObject.setCardnumber(cmsCard.getCardNumber());
                        cardObject.setCardexpiry((Util.hasText(cmsCard.getExpiryDate())) ? cmsCard.getExpiryDate().substring(2, 6) : "");
                        cardObject.setCreationdate((Util.hasText(cmsCard.getRequestDate())) ? cmsCard.getRequestDate().substring(0, 8) : "");
                        cardObject.setCardstatus(cmsCard.getCardStatus());
                        cardObject.setCardnumberlastdigits(cmsCard.getCardNoLastDigits());
                        cardObject.setActivationdate((Util.hasText(cmsCard.getActivationDate())) ? cmsCard.getActivationDate().substring(0, 8) : "");

                        //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                        cardObject.setNayapaylimits(new ArrayList<NayaPayLimit>());
                        //////////////////////////////////////////////////////////////////////////////////////////////

                        //m.rehman: 30-08-2021, VC-NAP-202108021 - Limit Structure update
                        //commenting below logic and add update logic
                                /*
                                //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                //updating query
                                dbQuery = "from " + CMSDebitRemainingLimit.class.getName() + " c where c.relation= :ACCTNUMBER or c.relation= :CARD_NO ";
                                params = new HashMap<String, Object>();

                                //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                params.put("CARD_NO", cardObject.getCardnumber());
                                params.put("ACCTNUMBER", usernprel.getAccount().getAccountNumber());
                                ////////////////////////////////////////////////////////////////////////////////////////////////

                                List<CMSDebitRemainingLimit> debitRemainingLimits = GeneralDao.Instance.find(dbQuery, params);
                                if (debitRemainingLimits != null && debitRemainingLimits.size() > 0) {
                                    for (CMSDebitRemainingLimit debitRemainingLimit : debitRemainingLimits) {
                                        //m.rehman: 21-01-2020, VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 - VISA (Switch-Middleware Integration document v 4.7.6) - Release 4
                                        //adding conditions for cash withdrawal and ecommerce transaction
                                        if ((debitRemainingLimit.getLimitId().getTransactionType() == null &&
                                                (debitRemainingLimit.getLimitId().getDescription().toUpperCase().contains("ECOMMERCE")))
                                                ||
                                                (debitRemainingLimit.getLimitId().getTransactionType() == null
                                                        && debitRemainingLimit.getLimitId().getDescription().toUpperCase().contains("CASHWITHDRAWALLIMIT"))
                                                ||
                                                (debitRemainingLimit.getLimitId().getTransactionType() == null
                                                        && debitRemainingLimit.getLimitId().getDescription().toUpperCase().contains("GLOBALCARDLIMIT"))
                                                ||
                                                (debitRemainingLimit.getLimitId().getTransactionType() == null
                                                        && debitRemainingLimit.getLimitId().getDescription().toUpperCase().contains("PURCHASELIMIT")))
                                        {

                                            //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                            //if visa virtual card, only show online and global limit
                                            if (cmsCard.getProduct().getProductType().equals("VISA_VIRTUAL")
                                                    &&
                                                    !((debitRemainingLimit.getLimitId().getTransactionType() == null &&
                                                            (debitRemainingLimit.getLimitId().getDescription().toUpperCase().contains("ECOMMERCE")))
                                                            ||
                                                            (debitRemainingLimit.getLimitId().getTransactionType() == null
                                                                    && (debitRemainingLimit.getLimitId().getDescription().toUpperCase().contains("GLOBALCARDLIMIT"))))) {
                                                continue;
                                            }

                                            NayaPayLimit nayaPayLimit = new NayaPayLimit();

                                            ///m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                            //adding check for transaction description
                                            //nayaPayLimit.setTransaction(debitRemainingLimit.getLimitId().getTransactionType().getTxndesc());
                                            if (Util.hasText(debitRemainingLimit.getLimitId().getDescription())) {
                                                nayaPayLimit.setTransaction(debitRemainingLimit.getLimitId().getDescription());
                                            } else {
                                                nayaPayLimit.setTransaction(debitRemainingLimit.getLimitId().getTransactionType().getTxndesc());
                                            }
                                            /////////////////////////////////////////////////////////////////////////////////////////////////////

                                            // Asim, Logging to be removed
                                            logger.info("Current cycle date : [" + debitRemainingLimit.getCycleEndDate() + "]");
                                            logger.info("Checking for month : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4,6) + "]");
                                            logger.info("Checking for year : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2,4) + "]");
                                            logger.info("Checking for current date : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()) + "]");
                                            // =================================

                                            // Asim Shahzad, Date : 6th Oct 2020, Tracking ID : VC-NAP-202009231
                                            CMSLimitCycleType cmsLimitCycleType = new CMSLimitCycleType(Integer.parseInt(debitRemainingLimit.getLimitId().getCycleLengthType()));

                                            //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                            Long amount = 0L;
                                            if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                    && debitRemainingLimit.getIndividualLimitId() != null) {
                                                amount = Long.parseLong(debitRemainingLimit.getIndividualLimitId().getAmount())
                                                        - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                            } else {
                                                amount = Long.parseLong(debitRemainingLimit.getLimitId().getAmount())
                                                        - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                            }
                                            nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                            /////////////////////////////////////////////////////////////////////////////////////

                                            if(cmsLimitCycleType.equals(CMSLimitCycleType.DAILY)) {
                                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).equals(debitRemainingLimit.getCycleEndDate())) {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                                } else {
                                                    //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                                    if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                            && debitRemainingLimit.getIndividualLimitId() != null) {
                                                        nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                    } else {
                                                        nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                                    }
                                                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                                    logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                                }
                                            }

                                            if(cmsLimitCycleType.equals(CMSLimitCycleType.MONTHLY)) {
                                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6).equals(debitRemainingLimit.getCycleEndDate().substring(4, 6))) {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                                    logger.info("Executing Monthly Limit flow...");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                                } else {
                                                    //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                                    if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                            && debitRemainingLimit.getIndividualLimitId() != null) {
                                                        nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                    } else {
                                                        nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                                    }
                                                    logger.info("Executing Monthly Limit flow...");
                                                    logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                                    logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                                }
                                            }

                                            if(cmsLimitCycleType.equals(CMSLimitCycleType.YEARLY)) {
                                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4).equals(debitRemainingLimit.getCycleEndDate().substring(2, 4))) {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                                    logger.info("Executing Yearly Limit flow...");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                                } else {
                                                    //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                                    if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                            && debitRemainingLimit.getIndividualLimitId() != null) {
                                                        nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                    } else {
                                                        nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                                    }

                                                    logger.info("Executing Yearly Limit flow...");
                                                    logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                                    logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                                }
                                            }
                                            // ================================================================

                                            //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                            //nayaPayLimit.setAmount(debitRemainingLimit.getTxnAmount());

                                            //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                            if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                    && debitRemainingLimit.getIndividualLimitId() != null) {
                                                nayaPayLimit.setCustomlimitflag("true");
                                            } else {
                                                nayaPayLimit.setCustomlimitflag("false");
                                            }
                                            ///////////////////////////////////////////////////////////////////////////////////////////////////////

                                            cardObject.getNayapaylimits().add(nayaPayLimit);
                                        }
                                    }
                                }
                                */

                        dbQuery = "from " + CMSDebitRemainingLimit.class.getName() + " c where (c.relation= :ACCTNUMBER or c.relation= :CARD_NO) and c.limitId.isActive= '1' ";
                        params = new HashMap<String, Object>();

                        params.put("CARD_NO", cardObject.getCardnumber());
                        params.put("ACCTNUMBER", usernprel.getAccount().getAccountNumber());

                        List<CMSDebitRemainingLimit> debitRemainingLimits = GeneralDao.Instance.find(dbQuery, params);
                        if (debitRemainingLimits != null && debitRemainingLimits.size() > 0) {
                            for (CMSDebitRemainingLimit debitRemainingLimit : debitRemainingLimits) {

                                NayaPayLimit nayaPayLimit = new NayaPayLimit();

                                if (Util.hasText(debitRemainingLimit.getLimitId().getDescription())) {
                                    nayaPayLimit.setTransaction(debitRemainingLimit.getLimitId().getDescription());
                                } else {
                                    nayaPayLimit.setTransaction(debitRemainingLimit.getLimitId().getTransactionType().getTxndesc());
                                }

                                logger.info("Current cycle date : [" + debitRemainingLimit.getCycleEndDate() + "]");
                                logger.info("Checking for month : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6) + "]");
                                logger.info("Checking for year : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4) + "]");
                                logger.info("Checking for current date : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()) + "]");

                                CMSLimitCycleType cmsLimitCycleType = new CMSLimitCycleType(Integer.parseInt(debitRemainingLimit.getLimitId().getCycleLengthType()));

                                if (cmsLimitCycleType.equals(CMSLimitCycleType.DAILY)) {
                                    if (WebServiceUtil.limitcycleDateFormat.format(new Date()).equals(debitRemainingLimit.getCycleEndDate())) {
                                        nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                        nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                        logger.info("Executing Daily Limit flow...");
                                        logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                        Long amount = 0L;
                                        if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                && debitRemainingLimit.getIndividualLimitId() != null) {
                                            amount = Long.parseLong(debitRemainingLimit.getIndividualLimitId().getAmount())
                                                    - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                        } else {
                                            amount = Long.parseLong(debitRemainingLimit.getLimitId().getAmount())
                                                    - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                        }
                                        nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                        logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                    } else {
                                        if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                && debitRemainingLimit.getIndividualLimitId() != null) {
                                            nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                            nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                        } else {
                                            nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                            nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                        }

                                        nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                        logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                        logger.info("Executing Daily Limit flow...");
                                        logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                        logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                        logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                    }
                                }

                                if (cmsLimitCycleType.equals(CMSLimitCycleType.MONTHLY)) {
                                    if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6).equals(debitRemainingLimit.getCycleEndDate().substring(4, 6))) {
                                        nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                        nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                        logger.info("Executing Daily Limit flow...");
                                        logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                        Long amount = 0L;
                                        if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                && debitRemainingLimit.getIndividualLimitId() != null) {
                                            amount = Long.parseLong(debitRemainingLimit.getIndividualLimitId().getAmount())
                                                    - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                        } else {
                                            amount = Long.parseLong(debitRemainingLimit.getLimitId().getAmount())
                                                    - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                        }
                                        nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                        logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                    } else {
                                        if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                && debitRemainingLimit.getIndividualLimitId() != null) {
                                            nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                            nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                        } else {
                                            nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                            nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                        }

                                        logger.info("Executing Daily Limit flow...");
                                        logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                        logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                        logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                        nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                        logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                    }
                                }

                                if (cmsLimitCycleType.equals(CMSLimitCycleType.YEARLY)) {
                                    if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4).equals(debitRemainingLimit.getCycleEndDate().substring(2, 4))) {
                                        nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                        nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                        logger.info("Executing Daily Limit flow...");
                                        logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                        Long amount = 0L;
                                        if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                && debitRemainingLimit.getIndividualLimitId() != null) {
                                            amount = Long.parseLong(debitRemainingLimit.getIndividualLimitId().getAmount())
                                                    - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                        } else {
                                            amount = Long.parseLong(debitRemainingLimit.getLimitId().getAmount())
                                                    - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                        }
                                        nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                        logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                    } else {
                                        //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                        if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                && debitRemainingLimit.getIndividualLimitId() != null) {
                                            nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                            nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                        } else {
                                            nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                            nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                        }

                                        logger.info("Executing Daily Limit flow...");
                                        logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                        logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                        logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                        nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                        logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                    }
                                }

                                if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                        && debitRemainingLimit.getIndividualLimitId() != null) {
                                    nayaPayLimit.setCustomlimitflag("true");
                                } else {
                                    nayaPayLimit.setCustomlimitflag("false");
                                }

                                cardObject.getNayapaylimits().add(nayaPayLimit);

                            }
                        }

                        dbQuery = "from " + CMSCreditRemainingLimit.class.getName() + " c where (c.relation= :ACCTNUMBER or c.relation= :CARD_NO) and c.limitId.isActive='1' ";
                        params = new HashMap<String, Object>();
                        params.put("CARD_NO", cardObject.getCardnumber());
                        params.put("ACCTNUMBER", usernprel.getAccount().getAccountNumber());
                        List<CMSCreditRemainingLimit> cmsCreditRemainingLimits = GeneralDao.Instance.find(dbQuery, params);

                        if (cmsCreditRemainingLimits != null && cmsCreditRemainingLimits.size() > 0) {
                            for (CMSCreditRemainingLimit cmsCreditRemainingLimit : cmsCreditRemainingLimits) {
                                if (cmsCreditRemainingLimit.getLimitId().getProductId().equals(usernprel.getAccount().getProduct())) {
                                    NayaPayLimit nayaPayLimit = new NayaPayLimit();

                                    if (Util.hasText(cmsCreditRemainingLimit.getLimitId().getDescription())) {
                                        nayaPayLimit.setTransaction(cmsCreditRemainingLimit.getLimitId().getDescription());
                                    } else {
                                        nayaPayLimit.setTransaction(cmsCreditRemainingLimit.getLimitId().getTransactionType().getTxndesc());
                                    }

                                    logger.info("Current cycle date : [" + cmsCreditRemainingLimit.getCycleEndDate() + "]");
                                    logger.info("Checking for month : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6) + "]");
                                    logger.info("Checking for year : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4) + "]");
                                    logger.info("Checking for current date : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()) + "]");

                                    CMSLimitCycleType cmsLimitCycleType = new CMSLimitCycleType(Integer.parseInt(cmsCreditRemainingLimit.getLimitId().getCycleLengthType()));

                                    if (cmsLimitCycleType.equals(CMSLimitCycleType.DAILY)) {
                                        if (WebServiceUtil.limitcycleDateFormat.format(new Date()).equals(cmsCreditRemainingLimit.getCycleEndDate())) {
                                            nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getRemainingAmount());
                                            nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getRemainingFrequency());

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                            Long amount = 0L;
                                            if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                    && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                amount = Long.parseLong(cmsCreditRemainingLimit.getIndividualLimitId().getAmount())
                                                        - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                            } else {
                                                amount = Long.parseLong(cmsCreditRemainingLimit.getLimitId().getAmount())
                                                        - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                            }
                                            nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                            logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                        } else {
                                            if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                    && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getIndividualLimitId().getAmount());
                                                nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                            } else {
                                                nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getLimitId().getAmount());
                                                nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getLimitId().getFrequencyLength());
                                            }

                                            nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                            logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Current Debit Limit : [" + cmsCreditRemainingLimit.getId() + "]");
                                            logger.info("Debit Limit : [" + cmsCreditRemainingLimit.getLimitId().getId() + "]");
                                            logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                        }
                                    }

                                    if (cmsLimitCycleType.equals(CMSLimitCycleType.MONTHLY)) {
                                        if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6).equals(cmsCreditRemainingLimit.getCycleEndDate().substring(4, 6))) {
                                            nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getRemainingAmount());
                                            nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getRemainingFrequency());

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                            Long amount = 0L;
                                            if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                    && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                amount = Long.parseLong(cmsCreditRemainingLimit.getIndividualLimitId().getAmount())
                                                        - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                            } else {
                                                amount = Long.parseLong(cmsCreditRemainingLimit.getLimitId().getAmount())
                                                        - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                            }
                                            nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                            logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                        } else {
                                            if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                    && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getIndividualLimitId().getAmount());
                                                nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                            } else {
                                                nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getLimitId().getAmount());
                                                nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getLimitId().getFrequencyLength());
                                            }

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Current Debit Limit : [" + cmsCreditRemainingLimit.getId() + "]");
                                            logger.info("Debit Limit : [" + cmsCreditRemainingLimit.getLimitId().getId() + "]");
                                            logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                            nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                            logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                        }
                                    }

                                    if (cmsLimitCycleType.equals(CMSLimitCycleType.YEARLY)) {
                                        if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4).equals(cmsCreditRemainingLimit.getCycleEndDate().substring(2, 4))) {
                                            nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getRemainingAmount());
                                            nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getRemainingFrequency());

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                            Long amount = 0L;
                                            if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                    && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                amount = Long.parseLong(cmsCreditRemainingLimit.getIndividualLimitId().getAmount())
                                                        - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                            } else {
                                                amount = Long.parseLong(cmsCreditRemainingLimit.getLimitId().getAmount())
                                                        - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                            }
                                            nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                            logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                        } else {
                                            //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                            if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                    && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getIndividualLimitId().getAmount());
                                                nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                            } else {
                                                nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getLimitId().getAmount());
                                                nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getLimitId().getFrequencyLength());
                                            }

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Current Debit Limit : [" + cmsCreditRemainingLimit.getId() + "]");
                                            logger.info("Debit Limit : [" + cmsCreditRemainingLimit.getLimitId().getId() + "]");
                                            logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                            nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                            logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                        }
                                    }

                                    if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                            && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                        nayaPayLimit.setCustomlimitflag("true");
                                    } else {
                                        nayaPayLimit.setCustomlimitflag("false");
                                    }

                                    cardObject.getNayapaylimits().add(nayaPayLimit);
                                }
                            }
                        }
                        //////////////////////////////////////////////////////////////////////////////////////////////////////////

                        // Asim Shahzad, Date : 14th Jan 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 (Release # 1)

                        dbQuery = "from " + CMSCardControlConfig.class.getName() + " c where c.card= :card ";
                        params = new HashMap<String, Object>();
                        params.put("card", cmsCard);
                        CMSCardControlConfig obj_CardControlConfig = (CMSCardControlConfig) GeneralDao.Instance.findObject(dbQuery, params);

                        //m.rehman: 16-02-2021, in case card control not found, set default controls
                        if (obj_CardControlConfig == null) {
                            obj_CardControlConfig = new CMSCardControlConfig();
                            obj_CardControlConfig.setOnlineEnabled(true);
                            obj_CardControlConfig.setNFCEnabled(true);
                            obj_CardControlConfig.setMagStripeEnabled(true);
                            obj_CardControlConfig.setInternationalTxnsEnabled(true);
                            obj_CardControlConfig.setCashWithdrawalEnabled(true);
                            obj_CardControlConfig.setChipPinEnabled(true);
                        }

                        cardObject.setIsChipPinEnabled((obj_CardControlConfig.getChipPinEnabled() ? "true" : "false"));
                        cardObject.setIsMagStripeEnabled((obj_CardControlConfig.getMagStripeEnabled() ? "true" : "false"));
                        cardObject.setIsCashWithdrawalEnabled((obj_CardControlConfig.getCashWithdrawalEnabled() ? "true" : "false"));
                        cardObject.setIsNFCEnabled((obj_CardControlConfig.getNFCEnabled() ? "true" : "false"));
                        cardObject.setIsOnlineEnabled((obj_CardControlConfig.getOnlineEnabled() ? "true" : "false"));
                        cardObject.setIsInternationalTxnsEnabled((obj_CardControlConfig.getInternationalTxnsEnabled() ? "true" : "false"));

                        // ========================================================================================================

                        // Asim Shahzad, Date : 4th Feb 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 (Release # 3)

                        if (cmsCard.getProduct().getProductType().equals("CARD_LVL0") || cmsCard.getProduct().getProductType().equals("CARD_LVL1")) {
                            cardObject.setCardtype("paypak_physical");
                        }
                        if (cmsCard.getProduct().getProductType().equals("VISA_DEBIT")) {
                            cardObject.setCardtype("visa_physical");
                        }
                        if (cmsCard.getProduct().getProductType().equals("VISA_VIRTUAL")) {
                            cardObject.setCardtype("visa_virtual");
                        }

                        // ========================================================================================================

                        cardObjectList.add(cardObject);
                    }

                    //if (cardObjectList != null && cardObjectList.size() > 0) {
                    //    wsmodel.setCardobjectlist(cardObjectList);
                    //}
                    //wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    //return wsmodel;

                } else {
                    logger.error("No Card Record found ...");
                    //wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //05 Invalid Card refer To Document Update THIS
                    //return wsmodel;
                }

                wsmodel.setCardobjectlist(cardObjectList);
                //}
                //else
                //{
                //    logger.error("Wallet not found or inactive for [" + wsmodel.getUserid() + "], rejecting...");
                //    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //02 Invalid Account -- refer to Document
                //    return wsmodel;
                //}
                //}

                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return wsmodel;
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error(WebServiceUtil.getStrException(e));
            logger.error("Exception caught while Executing AdminPortalGetUserdebitCard..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteAdminPortalGetUserLinkedAccountList(WalletCMSWsEntity wsmodel) {
        logger.info("Executing AdminPortalGetUserLinkedAccountList Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


            if (usernprel != null) {
                //Change Wallet PIN
                //dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation ";// + " and c.channel = :chnnl ";
                //params = new HashMap<String, Object>();
                //params.put("relation", usernprel.getAccount().getAccountNumber());
                //params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                //CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                //if(cardrelation == null)
                //{
                //    logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                //    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                //    return wsmodel;
                //}
                //else
                //{
                //    dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
                //    params = new HashMap<String, Object>();
                //    //m.rehman: setting user id
                //    //params.put("USERID", wsmodel.getAcctid());
                //    params.put("USERID", wsmodel.getUserid());

                //    NayaPayRelation nprel = (NayaPayRelation)GeneralDao.Instance.findObject(dbQuery, params);


                //    if(nprel != null && nprel.getAccount().getStatus().equals("00") && usernprel.getAccount().getCustomer().equals(nprel.getAccount().getCustomer()))
                //    {
                logger.info("Getting User Linked Accounts...");

                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID ";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getUserid());
                List<CMSAccount> accountList = GeneralDao.Instance.find(dbQuery, params);

                if (accountList != null && accountList.size() > 0) {
                    List<NayaPayLinkedAccount> linkedAccounts = new ArrayList<NayaPayLinkedAccount>();

                    for (CMSAccount acct : accountList) {
                        if (acct.getCategory().equals(AccType.CAT_LINKED.StringValue())) {
                            NayaPayLinkedAccount npla = new NayaPayLinkedAccount();
                            npla.setAccountid(acct.getAcctId());
                            npla.setBankcode(GlobalContext.getInstance().getBankCodeByBin(acct.getBranchId()));
                            //npla.setAccountnumber(acct.getAccountNumber().substring(acct.getAccountNumber().length()-4, acct.getAccountNumber().length()));
                            npla.setAccountnumber(acct.getAccountNumber());
                            npla.setAlias(acct.getAcctalias());

                            Currency currency = GlobalContext.getInstance().getCurrency(Integer.parseInt(acct.getCurrency()));
                            if (currency != null) {
                                npla.setCurrency(currency.getName());
                            } else {
                                npla.setCurrency(GlobalContext.getInstance().getBaseCurrency().getName());
                            }
                            //npla.setCurrency(GlobalContext.getInstance().getCurrency(Integer.parseInt(acct.getCurrency())).getName());

                            npla.setPrimary(acct.getIsprimary());
                            npla.setState(acct.getCategory() + "_" + acct.getLevel());
                            npla.setCreationtime(WebServiceUtil.dateFormat.format(acct.getCreateDate()));
                            linkedAccounts.add(npla);
                        }
                    }
                    wsmodel.setLinkedaccounts(linkedAccounts);
                    //wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    //return wsmodel;
                } else {
                    logger.error("No Account Record found, rejecting...");
                    //wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //02 Invalid Account -- refer to Document
                    //return wsmodel;
                }

                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return wsmodel;
                //}
                //else
                //{
                //    logger.error("No Linked Account found for [" + wsmodel.getAcctid() + "], rejecting...");
                //    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //02 Invalid Account -- refer to Document
                //    return wsmodel;
                //}
                //}
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing AdminPortalGetUserLinkedAccountList..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteAdminPortalGetUserTransactionList(WalletCMSWsEntity wsmodel) {
        logger.info("Executing AdminPortalGetUserTransactionList Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (usernprel != null) {
                //dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation ";// + " and c.channel = :chnnl ";
                //params = new HashMap<String, Object>();
                //params.put("relation", usernprel.getAccount().getAccountNumber());
                //params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                //CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                //if(cardrelation == null)
                //{
                //    logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                //    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                //    return wsmodel;
                //}
                //else
                //{
                //    if(!usernprel.getAccount().getStatus().equals("00") || !usernprel.getAccount().getCustomer().getStatus().equals("00"))
                //    {
                //        logger.error("Invalid Account or Customer Status, rejecting...");
                //        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Account Inactive ; Refer to Doc
                //        return wsmodel;
                //    }
                //    else {

                List<UserTransaction> usertxns = new ArrayList<UserTransaction>();
                //m.rehman: 10-11-2021 - Nayapay Optimization
                //List<MVFinancialLog> dbtranlist = null; // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                List<WalletCMSWsListingEntity> dbtranlist = null;

                if (Util.hasText(wsmodel.getFinancialflag()) && wsmodel.getFinancialflag().equals("true")) {

                    if (Util.hasText(wsmodel.getInoutfilter()) && wsmodel.getInoutfilter().equals("in")) {
                        logger.info("Getting User Transaction List from DB for Credit/in Transactions...");

                                /*
                                dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where " +
                                        //" c.userid= :USERID " +
                                        " (c.userid= :USERID " +
                                        " or c.destuserid= :USERID) " +
                                        " and c.tranrefnumber != :TXN_REF_NUM " +
                                        " and c.servicename in ('LoadWallet','WalletTransaction','CashDeposit','ReverseEnvelop','ChequeFT') order by c.transdatetime desc";
                                //" and c.respcode = :RESPCODE ";
                                params = new HashMap<String, Object>();
                                params.put("USERID", wsmodel.getUserid());
                                params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                                //params.put("RESPCODE", "00");
                                */

                        //m.rehman: 30-09-2020, VP-NAP-202009241 - Original and Reversed transaction in transaction listing
                                /*
                                dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where " +
                                        " (c.userid= :USERID and c.servicename in ('LoadWallet','CashDeposit','ReverseEnvelop','ChequeFT','OnelinkTopupBillPayment','IBFTIn','DisputeRefundTransaction')) " +
                                        " or " +
                                        " (c.destuserid= :USERID and c.servicename in ('WalletTransaction')) " +
                                        " and c.tranrefnumber != :TXN_REF_NUM ";
                                //        " and c.respcode = :RESPCODE ";
                                params = new HashMap<String, Object>();
                                params.put("USERID", wsmodel.getUserid());
                                params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                                //params.put("RESPCODE", "00");

                                if (Util.hasText(wsmodel.getTypefilter())) {
                                    dbQuery += " and c.servicename = :TRNTYPE ";
                                    params.put("TRNTYPE", wsmodel.getTypefilter());
                                }

                                if (Util.hasText(wsmodel.getSearchtext())) {
                                    dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                            " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                            " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                            " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                            " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                            " or c.nayapayid like :SEARCH_TEXT " +
                                            " or c.destnayapayid like :SEARCH_TEXT " +
                                            " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                                    params.put("SEARCH_TEXT", wsmodel.getSearchtext());
                                }
                                */

                        // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115

                        params = new HashMap<String, Object>();

                        if (wsmodel.getTypefilter() == null) {
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                    " (c.userid= :USERID and c.servicename in ('LoadWallet','CashDeposit','ReverseEnvelop','ChequeFT','OnelinkTopupBillPayment','IBFTIn')) " +
                                    " or " +
                                    //s.mehtab 18/11/2020 tracking id : Deployment 10-11-2020
                                    //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                                    " (c.destuserid= :USERID and c.servicename in ('WalletTransaction','DisputeRefundTransaction','OpenDebitCredit')) " +
                                    " or " +
                                    //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(out orignalapi interchanged with in originalapi)
                                    " (c.userid= :USERID and c.originalapi in ('UnloadWallet','WalletTransaction','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','CNICBasedCashWithdrawal','IBFT','BalanceInquiry','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund')) " +
                                    //=============================================================================================================
                                    " or " +
                                    //s.mehtab 18/11/2020 tracking id : Deployment 10-11-2020
                                    " (c.destuserid= :USERID and c.originalapi in ('WalletTransaction','DisputeRefundTransaction')) ";
                        } else {
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                    " (c.userid= :USERID and c.servicename in (:TRNTYPE)) " +
                                    " or " +
                                    //s.mehtab 18/11/2020 tracking id : Deployment 10-11-2020
                                    " (c.destuserid= :USERID and c.servicename in (:TRNTYPE)) " +
                                    " or " +
                                    " (c.userid= :USERID and c.originalapi in (:TRNTYPE)) " +
                                    " or " +
                                    //s.mehtab 18/11/2020 tracking id : Deployment 10-11-2020
                                    " (c.destuserid= :USERID and c.originalapi in (:TRNTYPE)) ";

                            params.put("TRNTYPE", wsmodel.getTypefilter());
                        }

                        dbQuery += " and c.tranrefnumber != :TXN_REF_NUM ";
                        // =======================================================================================
                        //        " and c.respcode = :RESPCODE ";

                        params.put("USERID", wsmodel.getUserid());
                        params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                        //params.put("RESPCODE", "00");

                        // Asim Shahzad, Date : 17th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115
//                                if (Util.hasText(wsmodel.getTypefilter())) {
//                                    dbQuery += " and c.servicename = :TRNTYPE ";
//                                    params.put("TRNTYPE", wsmodel.getTypefilter());
//                                }
//                                if (wsmodel.getTypefilter() != null) {
//                                    dbQuery += " and c.servicename in (:TRNTYPE) ";
//                                    params.put("TRNTYPE", wsmodel.getTypefilter());
//                                }
                        // =======================================================================================

                        if (Util.hasText(wsmodel.getSearchtext())) {
                            dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                    " or c.nayapayid like :SEARCH_TEXT " +
                                    " or c.destnayapayid like :SEARCH_TEXT " +
                                    " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                            params.put("SEARCH_TEXT", "%" + wsmodel.getSearchtext() + "%");
                        }
                        //////////////////////////////////////////////////////////////////////////////////////////////////////////

                        //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(Change transdatetime to id)
                        //Arsalan Akhter, Date: 10-Aug-2021, Ticket: VC-NAP-202108101-Transactions order issue in Listing Calls
                        dbQuery += " order by c.transdatetime desc, c.id desc ";

                        String query = "select count(*) " + dbQuery;
                        Long size = (Long) GeneralDao.Instance.findObject(query, params);
                        wsmodel.setTotalcount(size + "");

                        logger.info("Page Count [" + wsmodel.getPagecount() + "] Page Size [" + wsmodel.getPagesize() + "]");
                        Integer pageCount = Integer.parseInt(wsmodel.getPagecount());
                        Integer pageSize = Integer.parseInt(wsmodel.getPagesize());
                        logger.info("Converted Page Count [" + pageCount + "] Converted Page Size [" + pageSize + "]");
                        Integer startPosition = (pageCount * pageSize) - pageSize;
                        logger.info("Start Position [" + startPosition + "]");
                        Query query1 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                        query1.setProperties(params);
                        query1.setFirstResult(startPosition);
                        query1.setMaxResults(pageSize);

                        dbtranlist = query1.list(); //GeneralDao.Instance.find(dbQuery, params);
                        usertxns = new ArrayList<UserTransaction>();

                        if (dbtranlist != null && dbtranlist.size() > 0) {
                            logger.info("Transaction records found in db for UserId as Src, processing...");
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //for (MVFinancialLog txn : dbtranlist) { // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            for (WalletCMSWsListingEntity txn : dbtranlist) {
                                //if(GlobalContext.getInstance().getTransactionCodeDescbyCode(GlobalContext.getInstance().getTranCodeByAPI(txn.getServicename())).getIsfinancial())
                                //{
                                try {
                                    logger.info("Service Name from DB [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "]");
                                    UserTransaction utxn = new UserTransaction();
                                    utxn.setTransrefnum(txn.getTranrefnumber());

                                    //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    //utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                    //m.rehman: 08-10-2020, VP-NAP-202010081/ VC-NAP-202010081 - Deployment 08-10-2020
                                    //utxn.setNayapaytype(txn.getServicename());
                                    if (txn.getServicename().contains("Reversal")) {
                                        utxn.setNayapaytype(txn.getServicename());
                                    } else {
                                        utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                    }
                                    ////////////////////////////////////////////////////////////////////////////

                                    utxn.setAcctalias(txn.getAcctalias());

                                    // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    if (Util.hasText(txn.getUsername())) {
                                        utxn.setSrcname(txn.getUsername());
                                    } else {
                                        utxn.setSrcname(txn.getCustomername());
                                    }
                                    // =====================================================================================

                                    utxn.setSrcnayapayid(txn.getNayapayid());
                                    utxn.setDestname(txn.getDestusername());
                                    utxn.setDestnayapayid(txn.getDestnayapayid());
                                    utxn.setCurrency(txn.getCurrency());

                                    //m.rehman: 26-02-2021, Euronet Integration
                                    //utxn.setAmount(txn.getAmounttransaction());
                                    utxn.setAmount((Util.hasText(txn.getCbillamount())) ? txn.getCbillamount() : txn.getAmounttransaction());
                                    /////////////////////////////////////////////////////////////////////////////////////////

                                    utxn.setTransdatetime(txn.getTransdatetime());

                                    // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                    if (Util.hasText(txn.getBenebankcode())) {
                                        utxn.setBankcode(txn.getBenebankcode());
                                    } else {
                                        utxn.setBankcode(txn.getBankcode());
                                    }
                                    //==========================================================================

                                    // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                    if (Util.hasText(txn.getBenebankaccountno())) {
                                        // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                        //utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno().substring(txn.getBenebankaccountno().length()-4, txn.getBenebankaccountno().length()) : "");
                                        utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno() : "");
                                        // =====================================================================================
                                    } else {
                                        // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                        //utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber().substring(txn.getAccountnumber().length() - 4, txn.getAccountnumber().length()) : "");
                                        utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber() : "");
                                        // =====================================================================================
                                    }
                                    //==========================================================================

                                    utxn.setBranchname(txn.getBranchname());
                                    utxn.setSrcid(txn.getUserid());
                                    utxn.setDestid(txn.getDestuserid());
                                    utxn.setTerminalloc(txn.getTermloc());
                                    utxn.setMapid(txn.getMapid());
                                    utxn.setMerchantid(Util.hasText(txn.getMerchantid()) ? txn.getMerchantid() : txn.getBillerid());
                                    utxn.setMerchantname(Util.hasText(txn.getMerchantname()) ? txn.getMerchantname() : txn.getBillername());
                                    utxn.setDepositorname(txn.getCustomername());
                                    utxn.setBankcharge(txn.getNayapaycharges());

                                    // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    if (Util.hasText(txn.getSlipnumber())) {
                                        utxn.setDepositorslipnumber(txn.getSlipnumber());
                                    }
                                    //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                                    if (Util.hasText(txn.getCardlastdigits())) {
                                        utxn.setCardlastdigits(txn.getCardlastdigits());
                                    }
                                    //===============================================================================================================
                                    if (Util.hasText(txn.getCardscheme())) {
                                        utxn.setCardscheme(txn.getCardscheme());
                                    }
                                    if (Util.hasText(txn.getPosentrymode())) {
                                        utxn.setPosentrymode(txn.getPosentrymode());
                                    }
                                    if (Util.hasText(txn.getTerminalid())) {
                                        utxn.setTerminalid(txn.getTerminalid());
                                    }
                                    if (Util.hasText(txn.getCategoryid())) {
                                        utxn.setMerchantcategorycode(txn.getCategoryid());
                                    }
                                    utxn.setSrccharge(txn.getSrcchargeamount());
                                    utxn.setDestcharge(txn.getDestchargeamount());
                                    // =====================================================================================

                                    //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
                                    utxn.setTaxamount(txn.getNayapaytaxamount());
                                    utxn.setOriginalapi(txn.getOriginalapi());
                                    utxn.setOriginaldatetime(txn.getOrigtransdatetime());
                                    utxn.setOriginalrrn(txn.getOrigretrefno());
                                    utxn.setOriginalstan(txn.getOrigstan());
                                    utxn.setNpticket(txn.getNpticket());
                                    utxn.setVrolticket(txn.getVrolticket());
                                    utxn.setRefundtype(txn.getReserved());
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                    // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103117 / VC-NAP-202103116

                                    //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                    //adding check for original channel of dispute transaction
                                    if (txn.getChannelid().equals(ChannelCodes.EURONET)
                                            || (Util.hasText(txn.getOrigChannelId()) && txn.getOrigChannelId().equals(ChannelCodes.EURONET))) {
                                        utxn.setAcquiringcurrency(Util.hasText(txn.getTrancurrency()) ? CustomerService.findCurrency(Integer.valueOf(txn.getTrancurrency())).getName() : "");
                                        utxn.setAcquiringamount(Util.hasText(txn.getAmounttransaction()) ? txn.getAmounttransaction() : "");
                                        utxn.setConversionrate(Util.hasText(txn.getSettlementrate()) ? txn.getSettlementrate() : "");

                                        //utxn.setInternationaltransactionflag(Util.hasText(txn.getIsInternationalTxnsEnabled()) ? Boolean.valueOf(txn.getIsInternationalTxnsEnabled()) : false);
                                        boolean intlFlag = false;
                                        if (Util.hasText(txn.getBranchcode()) &&
                                                (txn.getBranchcode().equals("PSI") || txn.getBranchcode().equals("ESI") || txn.getBranchcode().equals("ATM"))) {
                                            intlFlag = true;
                                        }
                                        utxn.setInternationaltransactionflag(intlFlag);

                                        //utxn.setTotalamount((Util.hasText(tran.getCbillamount()) && Util.hasText(tran.getSrcchargeamount())) ? String.valueOf(Long.parseLong(tran.getCbillamount()) + Long.parseLong(tran.getSrcchargeamount())) : "");
                                        Long totalAmount = (Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : 0L;
                                        if (Util.hasText(txn.getSrcchargeamount())) {
                                            totalAmount = totalAmount + Long.parseLong(txn.getSrcchargeamount());
                                        }
                                        if (Util.hasText(txn.getWithholdingtaxamount())) {
                                            totalAmount = totalAmount + Long.parseLong(txn.getWithholdingtaxamount());
                                        }
                                        //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                        //converting to ISO format
                                        utxn.setTotalamount(StringUtils.leftPad(totalAmount.toString(), 12, "0"));

                                        utxn.setBaseamountafterconversion(Util.hasText(txn.getCbillamount()) ? txn.getCbillamount() : "");

                                        //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                        //converting to ISO format
                                        utxn.setForeigntransactionfee((Util.hasText(txn.getSrcchargeamount()) && Util.hasText(txn.getNayapaytaxamount())) ? StringUtils.leftPad(String.valueOf(Long.parseLong(txn.getSrcchargeamount()) - Long.parseLong(txn.getNayapaytaxamount())), 12, "0") : "");

                                        utxn.setTaxappliedonforeigntransactionfee(Util.hasText(txn.getNayapaytaxamount()) ? txn.getNayapaytaxamount() : "");
                                        utxn.setWithholdingtax(Util.hasText(txn.getWithholdingtaxamount()) ? txn.getWithholdingtaxamount() : "");
                                    }

                                    // =======================================================================================

                                    //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                                    utxn.setJustification(txn.getJustification());
                                    /////////////////////////////////////////////////////////////////////////

                                    // Asim Shahzad, Date : 25th May 2021, Tracking ID : VP-NAP-202105212 / VC-NAP-202105211

                                    if (txn.getServicename().equals("WithHoldingTax")) {
                                        utxn.setAmount(txn.getAmounttransaction());
                                        utxn.setOriginaltxnamount(Util.hasText(txn.getCbillamount()) ? txn.getCbillamount() : "");

                                        Long amtTran = Long.parseLong(txn.getAmounttransaction());
                                        Long cBillAmt = Long.parseLong(utxn.getOriginaltxnamount());
                                        double withHoldingTaxPercentage = Math.round((double) amtTran / (double) cBillAmt * 100);

                                        utxn.setWithholdingtaxpercentage(String.valueOf(withHoldingTaxPercentage));
                                    }

                                    // =====================================================================================

                                    // Asim Shahzad, Date : 29th June 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                                    if (Util.hasText(txn.getIban())) {
                                        utxn.setIban(txn.getIban());
                                    }
                                    // ======================================================================================

                                    // Asim Shahzad, Date : 1st Sep 2021, Tracking ID : VC-NAP-202108271
                                    if (Util.hasText(txn.getAmountFCY())) {
                                        utxn.setAmountFCY(txn.getAmountFCY());
                                    }

                                    if (Util.hasText(txn.getCurrencyFCY())) {
                                        utxn.setCurrencyFCY(txn.getCurrencyFCY());
                                    }

                                    if (Util.hasText(txn.getExchangeRate())) {
                                        utxn.setExchangeRate(txn.getExchangeRate());
                                    }
                                    // =================================================================

                                    usertxns.add(utxn);
                                } catch (Exception e) {
                                    logger.error(e);//s.mehtab on 25-11-2020
                                    logger.error("Unable to Add Txn [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "] to List Reason [" + e.getMessage() + "]");
                                }
                            }
                        } else {
                            logger.error("No Transaction found in DB for Src UserId [" + wsmodel.getUserid() + "]");
                        }

                    } else if (Util.hasText(wsmodel.getInoutfilter()) && wsmodel.getInoutfilter().equals("out")) {
                        logger.info("Getting User Transaction List from DB for Debit/out Transactions...");

                        //m.rehman: 30-09-2020, VP-NAP-202009241 - Original and Reversed transaction in transaction listing
                                /*
                                dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where " +
                                        " c.userid= :USERID " +
                                        " and c.tranrefnumber != :TXN_REF_NUM " +
                                        " and c.servicename in ('UnloadWallet','WalletTransaction','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','CNICBasedCashWithdrawal','IBFT') order by c.transdatetime desc";// +
                                //" and c.respcode = :RESPCODE ";
                                params = new HashMap<String, Object>();
                                params.put("USERID", wsmodel.getUserid());
                                params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                                //params.put("RESPCODE", "00");

                                if (Util.hasText(wsmodel.getTypefilter())) {
                                    dbQuery += " and c.servicename = :TRNTYPE ";
                                    params.put("TRNTYPE", wsmodel.getTypefilter());
                                }

                                if (Util.hasText(wsmodel.getSearchtext())) {
                                    dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                            " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                            " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                            " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                            " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                            " or c.nayapayid like :SEARCH_TEXT " +
                                            " or c.destnayapayid like :SEARCH_TEXT " +
                                            " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                                    params.put("SEARCH_TEXT", wsmodel.getSearchtext());
                                }
                                */

                        // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115

                        params = new HashMap<String, Object>();

                        if (wsmodel.getTypefilter() == null) {
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                    " c.userid= :USERID " +
                                    " and c.tranrefnumber != :TXN_REF_NUM " +
                                    " and " +
                                    //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2 - adding OpenDebitCredit
                                    //m.rehman: 07-05-2021, VG-NAP-202104271 / VP-NAP-202104261 / VC-NAP-202104261==>[ Efforts updated ]==> VISA transaction charging update - adding WithHoldingTax, 'ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund'
                                    //m.rehman: 26-07-2021, VC-NAP-202107261 - Reverse transaction when 0120 message received from Visa
                                    //adding STIP
                                    " (c.servicename in ('UnloadWallet','WalletTransaction','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','CNICBasedCashWithdrawal','IBFT','BalanceInquiry','OpenDebitCredit','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund','STIP') " +

                                    //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(out orignalapi interchanged with in originalapi)
                                    //  " or c.originalapi in ('UnloadWallet','WalletTransaction','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','CNICBasedCashWithdrawal','IBFT','BalanceInquiry','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund')) " +
                                    " or c.originalapi in ('LoadWallet','CashDeposit','ReverseEnvelop','ChequeFT','OnelinkTopupBillPayment','IBFTIn')) " +
                                    //=======================================================================================

                                    //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(Change transdatetime to id)
                                    //Arsalan Akhter, Date: 10-Aug-2021, Ticket: VC-NAP-202108101-Transactions order issue in Listing Calls
                                    " order by c.transdatetime desc, c.id desc";// +
                        } else {
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                    " c.userid= :USERID " +
                                    " and c.tranrefnumber != :TXN_REF_NUM " +
                                    " and " +
                                    " (c.servicename in (:TRNTYPE) " +
                                    " or c.originalapi in (:TRNTYPE)) " +
                                    //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(Change transdatetime to id)
                                    //Arsalan Akhter, Date: 10-Aug-2021, Ticket: VC-NAP-202108101-Transactions order issue in Listing Calls
                                    " order by c.transdatetime desc, c.id desc";

                            params.put("TRNTYPE", wsmodel.getTypefilter());
                        }
                        // =======================================================================================
                        //" and c.respcode = :RESPCODE ";

                        params.put("USERID", wsmodel.getUserid());
                        params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                        //params.put("RESPCODE", "00");


                        // Asim Shahzad, Date : 17th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115
//                                if (Util.hasText(wsmodel.getTypefilter())) {
//                                    dbQuery += " and c.servicename = :TRNTYPE ";
//                                    params.put("TRNTYPE", wsmodel.getTypefilter());
//                                }
//                                if (wsmodel.getTypefilter() != null) {
//                                    dbQuery += " and c.servicename in (:TRNTYPE) ";
//                                    params.put("TRNTYPE", wsmodel.getTypefilter());
//                                }
                        // =======================================================================================

                        if (Util.hasText(wsmodel.getSearchtext())) {
                            dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                    " or c.nayapayid like :SEARCH_TEXT " +
                                    " or c.destnayapayid like :SEARCH_TEXT " +
                                    " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                            params.put("SEARCH_TEXT", "%" + wsmodel.getSearchtext() + "%");
                        }
                        //////////////////////////////////////////////////////////////////////////////////////////////////////

                        //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(Change transdatetime to id)
                        //Arsalan Akhter, Date: 10-Aug-2021, Ticket: VC-NAP-202108101-Transactions order issue in Listing Calls
                        dbQuery += " order by c.transdatetime desc, c.id desc ";

                        String query = "select count(*) " + dbQuery;
                        Long size = (Long) GeneralDao.Instance.findObject(query, params);
                        wsmodel.setTotalcount(size + "");

                        logger.info("Page Count [" + wsmodel.getPagecount() + "] Page Size [" + wsmodel.getPagesize() + "]");
                        Integer pageCount = Integer.parseInt(wsmodel.getPagecount());
                        Integer pageSize = Integer.parseInt(wsmodel.getPagesize());
                        logger.info("Converted Page Count [" + pageCount + "] Converted Page Size [" + pageSize + "]");
                        Integer startPosition = (pageCount * pageSize) - pageSize;
                        logger.info("Start Position [" + startPosition + "]");
                        Query query1 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                        query1.setProperties(params);
                        query1.setFirstResult(startPosition);
                        query1.setMaxResults(pageSize);

                        dbtranlist = query1.list(); //GeneralDao.Instance.find(dbQuery, params);
                        usertxns = new ArrayList<UserTransaction>();

                        if (dbtranlist != null && dbtranlist.size() > 0) {
                            logger.info("Transaction records found in db for UserId as Src and Dest, processing...");
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //for (MVFinancialLog txn : dbtranlist) { // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            for (WalletCMSWsListingEntity txn : dbtranlist) {
                                try {
                                    logger.info("Service Name from DB [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "]");
                                    UserTransaction utxn = new UserTransaction();
                                    utxn.setTransrefnum(txn.getTranrefnumber());

                                    //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    //utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                    //m.rehman: 08-10-2020, VP-NAP-202010081/ VC-NAP-202010081 - Deployment 08-10-2020
                                    //utxn.setNayapaytype(txn.getServicename());
                                    if (txn.getServicename().contains("Reversal")) {
                                        utxn.setNayapaytype(txn.getServicename());
                                    } else {
                                        utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                    }
                                    ////////////////////////////////////////////////////////////////////////////

                                    utxn.setAcctalias(txn.getAcctalias());

                                    // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    if (Util.hasText(txn.getUsername())) {
                                        utxn.setSrcname(txn.getUsername());
                                    } else {
                                        utxn.setSrcname(txn.getCustomername());
                                    }
                                    // =====================================================================================

                                    utxn.setSrcnayapayid(txn.getNayapayid());
                                    utxn.setDestname(txn.getDestusername());
                                    utxn.setDestnayapayid(txn.getDestnayapayid());
                                    utxn.setCurrency(txn.getCurrency());

                                    //m.rehman: 26-02-2021, Euronet Integration
                                    //utxn.setAmount(txn.getAmounttransaction());
                                    utxn.setAmount((Util.hasText(txn.getCbillamount())) ? txn.getCbillamount() : txn.getAmounttransaction());
                                    /////////////////////////////////////////////////////////////////////////////////////////

                                    utxn.setTransdatetime(txn.getTransdatetime());

                                    // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                    if (Util.hasText(txn.getBenebankcode())) {
                                        utxn.setBankcode(txn.getBenebankcode());
                                    } else {
                                        utxn.setBankcode(txn.getBankcode());
                                    }
                                    //==========================================================================

                                    // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                    if (Util.hasText(txn.getBenebankaccountno())) {
                                        // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                        //utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno().substring(txn.getBenebankaccountno().length()-4, txn.getBenebankaccountno().length()) : "");
                                        utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno() : "");
                                        // =====================================================================================
                                    } else {
                                        // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                        //utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber().substring(txn.getAccountnumber().length() - 4, txn.getAccountnumber().length()) : "");
                                        utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber() : "");
                                        // =====================================================================================
                                    }
                                    //==========================================================================

                                    utxn.setBranchname(txn.getBranchname());
                                    utxn.setSrcid(txn.getUserid());
                                    utxn.setDestid(txn.getDestuserid());
                                    utxn.setTerminalloc(txn.getTermloc());
                                    utxn.setMapid(txn.getMapid());
                                    utxn.setMerchantid(Util.hasText(txn.getMerchantid()) ? txn.getMerchantid() : txn.getBillerid());
                                    utxn.setMerchantname(Util.hasText(txn.getMerchantname()) ? txn.getMerchantname() : txn.getBillername());
                                    utxn.setDepositorname(txn.getCustomername());
                                    utxn.setBankcharge(txn.getNayapaycharges());

                                    // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    if (Util.hasText(txn.getSlipnumber())) {
                                        utxn.setDepositorslipnumber(txn.getSlipnumber());
                                    }
                                    //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                                    if (Util.hasText(txn.getCardlastdigits())) {
                                        utxn.setCardlastdigits(txn.getCardlastdigits());
                                    }
                                    //===============================================================================================================
                                    if (Util.hasText(txn.getCardscheme())) {
                                        utxn.setCardscheme(txn.getCardscheme());
                                    }
                                    if (Util.hasText(txn.getPosentrymode())) {
                                        utxn.setPosentrymode(txn.getPosentrymode());
                                    }
                                    if (Util.hasText(txn.getTerminalid())) {
                                        utxn.setTerminalid(txn.getTerminalid());
                                    }
                                    if (Util.hasText(txn.getCategoryid())) {
                                        utxn.setMerchantcategorycode(txn.getCategoryid());
                                    }
                                    utxn.setSrccharge(txn.getSrcchargeamount());
                                    utxn.setDestcharge(txn.getDestchargeamount());
                                    // =====================================================================================

                                    //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
                                    utxn.setTaxamount(txn.getNayapaytaxamount());
                                    utxn.setOriginalapi(txn.getOriginalapi());
                                    utxn.setOriginaldatetime(txn.getOrigtransdatetime());
                                    utxn.setOriginalrrn(txn.getOrigretrefno());
                                    utxn.setOriginalstan(txn.getOrigstan());
                                    utxn.setNpticket(txn.getNpticket());
                                    utxn.setVrolticket(txn.getVrolticket());
                                    utxn.setRefundtype(txn.getReserved());
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                    // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103117 / VC-NAP-202103116

                                    //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                    //adding check for original channel of dispute transaction
                                    if (txn.getChannelid().equals(ChannelCodes.EURONET)
                                            || (Util.hasText(txn.getOrigChannelId()) && txn.getOrigChannelId().equals(ChannelCodes.EURONET))) {
                                        utxn.setAcquiringcurrency(Util.hasText(txn.getTrancurrency()) ? CustomerService.findCurrency(Integer.valueOf(txn.getTrancurrency())).getName() : "");
                                        utxn.setAcquiringamount(Util.hasText(txn.getAmounttransaction()) ? txn.getAmounttransaction() : "");
                                        utxn.setConversionrate(Util.hasText(txn.getSettlementrate()) ? txn.getSettlementrate() : "");

                                        //utxn.setInternationaltransactionflag(Util.hasText(txn.getIsInternationalTxnsEnabled()) ? Boolean.valueOf(txn.getIsInternationalTxnsEnabled()) : false);
                                        boolean intlFlag = false;
                                        if (Util.hasText(txn.getBranchcode()) &&
                                                (txn.getBranchcode().equals("PSI") || txn.getBranchcode().equals("ESI") || txn.getBranchcode().equals("ATM"))) {
                                            intlFlag = true;
                                        }
                                        utxn.setInternationaltransactionflag(intlFlag);

                                        //utxn.setTotalamount((Util.hasText(tran.getCbillamount()) && Util.hasText(tran.getSrcchargeamount())) ? String.valueOf(Long.parseLong(tran.getCbillamount()) + Long.parseLong(tran.getSrcchargeamount())) : "");
                                        Long totalAmount = (Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : 0L;
                                        if (Util.hasText(txn.getSrcchargeamount())) {
                                            totalAmount = totalAmount + Long.parseLong(txn.getSrcchargeamount());
                                        }
                                        if (Util.hasText(txn.getWithholdingtaxamount())) {
                                            totalAmount = totalAmount + Long.parseLong(txn.getWithholdingtaxamount());
                                        }
                                        //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                        //converting to ISO format
                                        utxn.setTotalamount(StringUtils.leftPad(totalAmount.toString(), 12, "0"));

                                        utxn.setBaseamountafterconversion(Util.hasText(txn.getCbillamount()) ? txn.getCbillamount() : "");

                                        //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                        //converting to ISO format
                                        utxn.setForeigntransactionfee((Util.hasText(txn.getSrcchargeamount()) && Util.hasText(txn.getNayapaytaxamount())) ? StringUtils.leftPad(String.valueOf(Long.parseLong(txn.getSrcchargeamount()) - Long.parseLong(txn.getNayapaytaxamount())), 12, "0") : "");

                                        utxn.setTaxappliedonforeigntransactionfee(Util.hasText(txn.getNayapaytaxamount()) ? txn.getNayapaytaxamount() : "");
                                        utxn.setWithholdingtax(Util.hasText(txn.getWithholdingtaxamount()) ? txn.getWithholdingtaxamount() : "");
                                    }

                                    // =======================================================================================

                                    //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                                    utxn.setJustification(txn.getJustification());
                                    ///////////////////////////////////////////////////////////////////////////

                                    // Asim Shahzad, Date : 29th June 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                                    if (Util.hasText(txn.getIban())) {
                                        utxn.setIban(txn.getIban());
                                    }
                                    // ======================================================================================

                                    // Asim Shahzad, Date : 1st Sep 2021, Tracking ID : VC-NAP-202108271
                                    if (Util.hasText(txn.getAmountFCY())) {
                                        utxn.setAmountFCY(txn.getAmountFCY());
                                    }

                                    if (Util.hasText(txn.getCurrencyFCY())) {
                                        utxn.setCurrencyFCY(txn.getCurrencyFCY());
                                    }

                                    if (Util.hasText(txn.getExchangeRate())) {
                                        utxn.setExchangeRate(txn.getExchangeRate());
                                    }
                                    // =================================================================

                                    usertxns.add(utxn);
                                } catch (Exception e) {
                                    logger.error(e);//s.mehtab on 25-11-2020
                                    logger.error("Unable to Add Txn [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "] to List Reason [" + e.getMessage() + "]");
                                }
                            }
                        } else {
                            logger.error("No Transaction found in DB for Src UserId [" + wsmodel.getUserid() + "]");
                        }

                    } else {
                        logger.info("Getting User Transaction List from DB for Credit/Debit in/out Transactions...");

                        //m.rehman: 30-09-2020, VP-NAP-202009241 - Original and Reversed transaction in transaction listing
                                /*
                                dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where " +
                                        //" c.userid= :USERID " +
                                        " (c.userid= :USERID and c.servicename in ('LoadWallet','WalletTransaction','CashDeposit','ReverseEnvelop','ChequeFT','UnloadWallet','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','OnelinkTopupBillPayment','CNICBasedCashWithdrawal','IBFTIn','IBFT')) " +
                                        " or " +
                                        " (c.destuserid= :USERID and c.servicename in ('WalletTransaction')) " +
                                        " and c.tranrefnumber != :TXN_REF_NUM ";
                                //" and c.respcode = :RESPCODE ";

                                params = new HashMap<String, Object>();
                                params.put("USERID", wsmodel.getUserid());
                                params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                                //params.put("RESPCODE", "00");

                                if (Util.hasText(wsmodel.getTypefilter())) {
                                    dbQuery += " and c.servicename = :TRNTYPE ";
                                    params.put("TRNTYPE", wsmodel.getTypefilter());
                                }

                                if (Util.hasText(wsmodel.getSearchtext())) {
                                    dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                            " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                            " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                            " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                            " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                            " or c.nayapayid like :SEARCH_TEXT " +
                                            " or c.destnayapayid like :SEARCH_TEXT " +
                                            " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                                    params.put("SEARCH_TEXT", wsmodel.getSearchtext());
                                }
                                */

                        // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115

                        params = new HashMap<String, Object>();

                        if (wsmodel.getTypefilter() == null) {
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                    //" c.userid= :USERID " +
                                    //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2 - adding OpenDebitCredit
                                    //m.rehman: 07-05-2021, VG-NAP-202104271 / VP-NAP-202104261 / VC-NAP-202104261==>[ Efforts updated ]==> VISA transaction charging update - adding WithHoldingTax, 'ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund'
                                    //m.rehman: 26-07-2021, VC-NAP-202107261 - Reverse transaction when 0120 message received from Visa
                                    //adding STIP
                                    " (c.userid= :USERID and c.servicename in ('LoadWallet','WalletTransaction','CashDeposit','ReverseEnvelop','ChequeFT','UnloadWallet','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','OnelinkTopupBillPayment','CNICBasedCashWithdrawal','IBFTIn','IBFT','BalanceInquiry','OpenDebitCredit','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund','STIP')) " +
                                    " or " +
                                    //s.mehtab 18/11/2020 tracking id : Deployment 10-11-2020
                                    " (c.destuserid= :USERID and c.servicename in ('WalletTransaction','DisputeRefundTransaction','OpenDebitCredit')) " +
                                    " or " +
                                    //m.rehman: 26-07-2021, VC-NAP-202107261 - Reverse transaction when 0120 message received from Visa
                                    //adding STIP
                                    " (c.userid= :USERID and c.originalapi in ('LoadWallet','WalletTransaction','CashDeposit','ReverseEnvelop','ChequeFT','UnloadWallet','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','OnelinkTopupBillPayment','CNICBasedCashWithdrawal','IBFTIn','IBFT','BalanceInquiry','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund','STIP')) " +
                                    " or " +
                                    //s.mehtab 18/11/2020 tracking id : Deployment 10-11-2020
                                    " (c.destuserid= :USERID and c.originalapi in ('WalletTransaction','DisputeRefundTransaction')) ";
                        } else {
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                    //" c.userid= :USERID " +
                                    " (c.userid= :USERID and c.servicename in (:TRNTYPE)) " +
                                    " or " +
                                    //s.mehtab 18/11/2020 tracking id : Deployment 10-11-2020
                                    " (c.destuserid= :USERID and c.servicename in (:TRNTYPE)) " +
                                    " or " +
                                    " (c.userid= :USERID and c.originalapi in (:TRNTYPE)) " +
                                    " or " +
                                    //s.mehtab 18/11/2020 tracking id : Deployment 10-11-2020
                                    " (c.destuserid= :USERID and c.originalapi in (:TRNTYPE)) ";

                            params.put("TRNTYPE", wsmodel.getTypefilter());
                        }
                        dbQuery += " and c.tranrefnumber != :TXN_REF_NUM ";
                        // =======================================================================================
                        //" and c.respcode = :RESPCODE ";

                        params.put("USERID", wsmodel.getUserid());
                        params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                        //params.put("RESPCODE", "00");

                        // Asim Shahzad, Date : 17th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115
//                                if (Util.hasText(wsmodel.getTypefilter())) {
//                                    dbQuery += " and c.servicename = :TRNTYPE ";
//                                    params.put("TRNTYPE", wsmodel.getTypefilter());
//                                }
//                                if (wsmodel.getTypefilter() != null) {
//                                    dbQuery += " and c.servicename in (:TRNTYPE) ";
//                                    params.put("TRNTYPE", wsmodel.getTypefilter());
//                                }
                        // =======================================================================================

                        if (Util.hasText(wsmodel.getSearchtext())) {
                            dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                    " or c.nayapayid like :SEARCH_TEXT " +
                                    " or c.destnayapayid like :SEARCH_TEXT " +
                                    " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                            params.put("SEARCH_TEXT", "%" + wsmodel.getSearchtext() + "%");
                        }
                        //////////////////////////////////////////////////////////////////////////////////////////////////////

                        //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(Change transdatetime to id)
                        //Arsalan Akhter, Date: 10-Aug-2021, Ticket: VC-NAP-202108101-Transactions order issue in Listing Calls
                        dbQuery += " order by c.transdatetime desc, c.id desc ";

                        String query = "select count(*) " + dbQuery;
                        Long size = (Long) GeneralDao.Instance.findObject(query, params);
                        wsmodel.setTotalcount(size + "");

                        logger.info("Page Count [" + wsmodel.getPagecount() + "] Page Size [" + wsmodel.getPagesize() + "]");
                        Integer pageCount = Integer.parseInt(wsmodel.getPagecount());
                        Integer pageSize = Integer.parseInt(wsmodel.getPagesize());
                        logger.info("Converted Page Count [" + pageCount + "] Converted Page Size [" + pageSize + "]");
                        Integer startPosition = (pageCount * pageSize) - pageSize;
                        logger.info("Start Position [" + startPosition + "]");
                        Query query1 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                        query1.setProperties(params);
                        query1.setFirstResult(startPosition);
                        query1.setMaxResults(pageSize);

                        dbtranlist = query1.list(); //GeneralDao.Instance.find(dbQuery, params);
                        usertxns = new ArrayList<UserTransaction>();

                        if (dbtranlist != null && dbtranlist.size() > 0) {
                            logger.info("Transaction records found in db for UserId as Src and Dest, processing...");
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //for (MVFinancialLog txn : dbtranlist) { // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            for (WalletCMSWsListingEntity txn : dbtranlist) {
                                try {
                                    logger.info("Service Name from DB [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "]");
                                    UserTransaction utxn = new UserTransaction();
                                    utxn.setTransrefnum(txn.getTranrefnumber());

                                    //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    //utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                    //m.rehman: 08-10-2020, VP-NAP-202010081/ VC-NAP-202010081 - Deployment 08-10-2020
                                    //utxn.setNayapaytype(txn.getServicename());
                                    if (txn.getServicename().contains("Reversal")) {
                                        utxn.setNayapaytype(txn.getServicename());
                                    } else {
                                        utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                    }
                                    ////////////////////////////////////////////////////////////////////////////

                                    utxn.setAcctalias(txn.getAcctalias());

                                    // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    if (Util.hasText(txn.getUsername())) {
                                        utxn.setSrcname(txn.getUsername());
                                    } else {
                                        utxn.setSrcname(txn.getCustomername());
                                    }
                                    // =====================================================================================

                                    utxn.setSrcnayapayid(txn.getNayapayid());
                                    utxn.setDestname(txn.getDestusername());
                                    utxn.setDestnayapayid(txn.getDestnayapayid());
                                    utxn.setCurrency(txn.getCurrency());

                                    //m.rehman: 26-02-2021, Euronet Integration
                                    //utxn.setAmount(txn.getAmounttransaction());
                                    utxn.setAmount((Util.hasText(txn.getCbillamount())) ? txn.getCbillamount() : txn.getAmounttransaction());
                                    /////////////////////////////////////////////////////////////////////////////////////////

                                    utxn.setTransdatetime(txn.getTransdatetime());

                                    // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                    if (Util.hasText(txn.getBenebankcode())) {
                                        utxn.setBankcode(txn.getBenebankcode());
                                    } else {
                                        utxn.setBankcode(txn.getBankcode());
                                    }
                                    //==========================================================================

                                    // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                    if (Util.hasText(txn.getBenebankaccountno())) {
                                        // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                        //utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno().substring(txn.getBenebankaccountno().length()-4, txn.getBenebankaccountno().length()) : "");
                                        utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno() : "");
                                        // =====================================================================================
                                    } else {
                                        // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                        //utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber().substring(txn.getAccountnumber().length() - 4, txn.getAccountnumber().length()) : "");
                                        utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber() : "");
                                        // =====================================================================================
                                    }
                                    //==========================================================================

                                    utxn.setBranchname(txn.getBranchname());
                                    utxn.setSrcid(txn.getUserid());
                                    utxn.setDestid(txn.getDestuserid());
                                    utxn.setTerminalloc(txn.getTermloc());
                                    utxn.setMapid(txn.getMapid());
                                    utxn.setMerchantid(Util.hasText(txn.getMerchantid()) ? txn.getMerchantid() : txn.getBillerid());
                                    utxn.setMerchantname(Util.hasText(txn.getMerchantname()) ? txn.getMerchantname() : txn.getBillername());
                                    utxn.setDepositorname(txn.getCustomername());
                                    utxn.setBankcharge(txn.getNayapaycharges());

                                    // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    if (Util.hasText(txn.getSlipnumber())) {
                                        utxn.setDepositorslipnumber(txn.getSlipnumber());
                                    }
                                    //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                                    if (Util.hasText(txn.getCardlastdigits())) {
                                        utxn.setCardlastdigits(txn.getCardlastdigits());
                                    }
                                    //===============================================================================================================
                                    if (Util.hasText(txn.getCardscheme())) {
                                        utxn.setCardscheme(txn.getCardscheme());
                                    }
                                    if (Util.hasText(txn.getPosentrymode())) {
                                        utxn.setPosentrymode(txn.getPosentrymode());
                                    }
                                    if (Util.hasText(txn.getTerminalid())) {
                                        utxn.setTerminalid(txn.getTerminalid());
                                    }
                                    if (Util.hasText(txn.getCategoryid())) {
                                        utxn.setMerchantcategorycode(txn.getCategoryid());
                                    }
                                    utxn.setSrccharge(txn.getSrcchargeamount());
                                    utxn.setDestcharge(txn.getDestchargeamount());
                                    // =====================================================================================

                                    //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
                                    utxn.setTaxamount(txn.getNayapaytaxamount());
                                    utxn.setOriginalapi(txn.getOriginalapi());
                                    utxn.setOriginaldatetime(txn.getOrigtransdatetime());
                                    utxn.setOriginalrrn(txn.getOrigretrefno());
                                    utxn.setOriginalstan(txn.getOrigstan());
                                    utxn.setNpticket(txn.getNpticket());
                                    utxn.setVrolticket(txn.getVrolticket());
                                    utxn.setRefundtype(txn.getReserved());
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                    // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103117 / VC-NAP-202103116

                                    //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                    //adding check for original channel of dispute transaction
                                    if (txn.getChannelid().equals(ChannelCodes.EURONET)
                                            || (Util.hasText(txn.getOrigChannelId()) && txn.getOrigChannelId().equals(ChannelCodes.EURONET))) {
                                        utxn.setAcquiringcurrency(Util.hasText(txn.getTrancurrency()) ? CustomerService.findCurrency(Integer.valueOf(txn.getTrancurrency())).getName() : "");
                                        utxn.setAcquiringamount(Util.hasText(txn.getAmounttransaction()) ? txn.getAmounttransaction() : "");
                                        utxn.setConversionrate(Util.hasText(txn.getSettlementrate()) ? txn.getSettlementrate() : "");

                                        //utxn.setInternationaltransactionflag(Util.hasText(txn.getIsInternationalTxnsEnabled()) ? Boolean.valueOf(txn.getIsInternationalTxnsEnabled()) : false);
                                        boolean intlFlag = false;
                                        if (Util.hasText(txn.getBranchcode()) &&
                                                (txn.getBranchcode().equals("PSI") || txn.getBranchcode().equals("ESI") || txn.getBranchcode().equals("ATM"))) {
                                            intlFlag = true;
                                        }
                                        utxn.setInternationaltransactionflag(intlFlag);

                                        //utxn.setTotalamount((Util.hasText(tran.getCbillamount()) && Util.hasText(tran.getSrcchargeamount())) ? String.valueOf(Long.parseLong(tran.getCbillamount()) + Long.parseLong(tran.getSrcchargeamount())) : "");
                                        Long totalAmount = (Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : 0L;
                                        if (Util.hasText(txn.getSrcchargeamount())) {
                                            totalAmount = totalAmount + Long.parseLong(txn.getSrcchargeamount());
                                        }
                                        if (Util.hasText(txn.getWithholdingtaxamount())) {
                                            totalAmount = totalAmount + Long.parseLong(txn.getWithholdingtaxamount());
                                        }
                                        //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                        //converting to ISO format
                                        utxn.setTotalamount(StringUtils.leftPad(totalAmount.toString(), 12, "0"));

                                        utxn.setBaseamountafterconversion(Util.hasText(txn.getCbillamount()) ? txn.getCbillamount() : "");

                                        //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                        //converting to ISO format
                                        utxn.setForeigntransactionfee((Util.hasText(txn.getSrcchargeamount()) && Util.hasText(txn.getNayapaytaxamount())) ? StringUtils.leftPad(String.valueOf(Long.parseLong(txn.getSrcchargeamount()) - Long.parseLong(txn.getNayapaytaxamount())), 12, "0") : "");

                                        utxn.setTaxappliedonforeigntransactionfee(Util.hasText(txn.getNayapaytaxamount()) ? txn.getNayapaytaxamount() : "");
                                        utxn.setWithholdingtax(Util.hasText(txn.getWithholdingtaxamount()) ? txn.getWithholdingtaxamount() : "");
                                    }

                                    // =======================================================================================

                                    //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                                    utxn.setJustification(txn.getJustification());
                                    ////////////////////////////////////////////////////////

                                    // Asim Shahzad, Date : 29th June 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                                    if (Util.hasText(txn.getIban())) {
                                        utxn.setIban(txn.getIban());
                                    }
                                    // ======================================================================================

                                    // Asim Shahzad, Date : 1st Sep 2021, Tracking ID : VC-NAP-202108271
                                    if (Util.hasText(txn.getAmountFCY())) {
                                        utxn.setAmountFCY(txn.getAmountFCY());
                                    }

                                    if (Util.hasText(txn.getCurrencyFCY())) {
                                        utxn.setCurrencyFCY(txn.getCurrencyFCY());
                                    }

                                    if (Util.hasText(txn.getExchangeRate())) {
                                        utxn.setExchangeRate(txn.getExchangeRate());
                                    }
                                    // =================================================================

                                    usertxns.add(utxn);
                                } catch (Exception e) {
                                    logger.error(e);//s.mehtab on 25-11-2020
                                    logger.error("Unable to Add Txn [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "] to List Reason [" + e.getMessage() + "]");
                                }
                            }
                        } else {
                            logger.error("No Transaction found in DB for Src UserId [" + wsmodel.getUserid() + "]");
                        }
                    }
                } else {
                    logger.info("Getting User Transaction List from DB for ALL Debit/out&Credit/in Transactions...");
                    //m.rehman: 30-09-2020, VP-NAP-202009241 - Original and Reversed transaction in transaction listing
                            /*
                            dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where " +
                                    " (c.userid= :USERID " +
                                    " or c.destuserid= :USERID) " +
                                    " and c.tranrefnumber != :TXN_REF_NUM " +
                                    " and c.servicename not in ('UnloadWallet','WalletTransaction','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OnelinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload', 'LoadWallet','WalletTransaction','CashDeposit','ReverseEnvelop','ChequeFT', 'LoadWalletInquiry', 'UnloadWalletInquiry', 'LinkBankAccountInquiry', 'UnLinkBankAccountInquiry', 'VerifyLinkAccountOTP', 'ConfirmLinkBankAccountOTP', 'WalletInquiryForReversal','DebitCardRequest','OnelinkTopupBillPayment','CNICBasedCashWithdrawal','IBFTIn','TitleFetchInquiry','IBFT','DisputeRefundTransaction') "; // + " and c.respcode = :RESPCODE ";
                            params = new HashMap<String, Object>();
                            params.put("USERID", wsmodel.getUserid());
                            params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                            //params.put("RESPCODE", "00");

                            if (Util.hasText(wsmodel.getTypefilter())) {
                                dbQuery += " and c.servicename = :TRNTYPE ";
                                params.put("TRNTYPE", wsmodel.getTypefilter());
                            }

                            if (Util.hasText(wsmodel.getSearchtext())) {
                                dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                        " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                        " or c.nayapayid like :SEARCH_TEXT " +
                                        " or c.destnayapayid like :SEARCH_TEXT " +
                                        " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                                params.put("SEARCH_TEXT", wsmodel.getSearchtext());
                            }
                            */

                    // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115

                    params = new HashMap<String, Object>();

                    if (wsmodel.getTypefilter() == null) {
                        //m.rehman: 10-11-2021 - Nayapay Optimization
                        //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                        dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                " (c.userid= :USERID " +
                                " or c.destuserid= :USERID) " +
                                " and c.tranrefnumber != :TXN_REF_NUM " +
                                " and " +
                                //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2 - adding OpenDebitCredit
                                //m.rehman: 07-05-2021, VG-NAP-202104271 / VP-NAP-202104261 / VC-NAP-202104261==>[ Efforts updated ]==> VISA transaction charging update - adding WithHoldingTax, 'ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund'
                                //m.rehman: 26-07-2021, VC-NAP-202107261 - Reverse transaction when 0120 message received from Visa
                                //adding STIP
                                " (c.servicename not in ('UnloadWallet','WalletTransaction','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OnelinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload', 'LoadWallet','WalletTransaction','CashDeposit','ReverseEnvelop','ChequeFT', 'LoadWalletInquiry', 'UnloadWalletInquiry', 'LinkBankAccountInquiry', 'UnLinkBankAccountInquiry', 'VerifyLinkAccountOTP', 'ConfirmLinkBankAccountOTP', 'WalletInquiryForReversal','DebitCardRequest','OnelinkTopupBillPayment','CNICBasedCashWithdrawal','IBFTIn','TitleFetchInquiry','IBFT','BalanceInquiry','OpenDebitCredit','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund','STIP') " +
                                " or " +
                                " c.originalapi not in ('UnloadWallet','WalletTransaction','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OnelinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload', 'LoadWallet','WalletTransaction','CashDeposit','ReverseEnvelop','ChequeFT', 'LoadWalletInquiry', 'UnloadWalletInquiry', 'LinkBankAccountInquiry', 'UnLinkBankAccountInquiry', 'VerifyLinkAccountOTP', 'ConfirmLinkBankAccountOTP', 'WalletInquiryForReversal','DebitCardRequest','OnelinkTopupBillPayment','CNICBasedCashWithdrawal','IBFTIn','TitleFetchInquiry','IBFT','BalanceInquiry','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund','STIP')) ";
                    } else {
                        //m.rehman: 10-11-2021 - Nayapay Optimization
                        // dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                        dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                " (c.userid= :USERID " +
                                " or c.destuserid= :USERID) " +
                                " and c.tranrefnumber != :TXN_REF_NUM " +
                                " and " +
                                " (c.servicename not in (:TRNTYPE) " +
                                " or " +
                                " c.originalapi not in (:TRNTYPE)) ";

                        params.put("TRNTYPE", wsmodel.getTypefilter());
                    }
                    // =======================================================================================

                    params.put("USERID", wsmodel.getUserid());
                    params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                    //params.put("RESPCODE", "00");

                    // Asim Shahzad, Date : 17th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115
//                            if (Util.hasText(wsmodel.getTypefilter())) {
//                                dbQuery += " and c.servicename = :TRNTYPE ";
//                                params.put("TRNTYPE", wsmodel.getTypefilter());
//                            }
//                            if (wsmodel.getTypefilter() != null) {
//                                dbQuery += " and c.servicename in (:TRNTYPE) ";
//                                params.put("TRNTYPE", wsmodel.getTypefilter());
//                            }
                    // =======================================================================================

                    if (Util.hasText(wsmodel.getSearchtext())) {
                        dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                " or c.nayapayid like :SEARCH_TEXT " +
                                " or c.destnayapayid like :SEARCH_TEXT " +
                                " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                        params.put("SEARCH_TEXT", "%" + wsmodel.getSearchtext() + "%");
                    }
                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                    //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(Change transdatetime to id)
                    //Arsalan Akhter, Date: 10-Aug-2021, Ticket: VC-NAP-202108101-Transactions order issue in Listing Calls
                    dbQuery += " order by c.transdatetime desc, c.id desc ";

                    String query = "select count(*) " + dbQuery;
                    Long size = (Long) GeneralDao.Instance.findObject(query, params);
                    wsmodel.setTotalcount(size + "");


                    logger.info("Page Count [" + wsmodel.getPagecount() + "] Page Size [" + wsmodel.getPagesize() + "]");
                    Integer pageCount = Integer.parseInt(wsmodel.getPagecount());
                    Integer pageSize = Integer.parseInt(wsmodel.getPagesize());
                    logger.info("Converted Page Count [" + pageCount + "] Converted Page Size [" + pageSize + "]");
                    Integer startPosition = (pageCount * pageSize) - pageSize;
                    logger.info("Start Position [" + startPosition + "]");
                    Query query1 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                    query1.setProperties(params);
                    query1.setFirstResult(startPosition);
                    query1.setMaxResults(pageSize);

                    dbtranlist = query1.list(); //GeneralDao.Instance.find(dbQuery, params);
                    usertxns = new ArrayList<UserTransaction>();

                    if (dbtranlist != null && dbtranlist.size() > 0) {
                        logger.info("Transaction records found in db for UserId as Src and Dest, processing...");
                        //m.rehman: 10-11-2021 - Nayapay Optimization
                        //for (MVFinancialLog txn : dbtranlist) { // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                        for (WalletCMSWsListingEntity txn : dbtranlist) {
                            try {
                                logger.info("Service Name from DB [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "]");
                                logger.info("Getting Approved Financial Transaction..");
                                UserTransaction utxn = new UserTransaction();
                                utxn.setTransrefnum(txn.getTranrefnumber());

                                //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                //utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                //m.rehman: 08-10-2020, VP-NAP-202010081/ VC-NAP-202010081 - Deployment 08-10-2020
                                //utxn.setNayapaytype(txn.getServicename());
                                if (txn.getServicename().contains("Reversal")) {
                                    utxn.setNayapaytype(txn.getServicename());
                                } else {
                                    utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                }
                                ////////////////////////////////////////////////////////////////////////////

                                utxn.setAcctalias(txn.getAcctalias());

                                // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                if (Util.hasText(txn.getUsername())) {
                                    utxn.setSrcname(txn.getUsername());
                                } else {
                                    utxn.setSrcname(txn.getCustomername());
                                }
                                // =====================================================================================

                                utxn.setSrcnayapayid(txn.getNayapayid());
                                utxn.setDestname(txn.getDestusername());
                                utxn.setDestnayapayid(txn.getDestnayapayid());
                                utxn.setCurrency(txn.getCurrency());

                                //m.rehman: 26-02-2021, Euronet Integration
                                //utxn.setAmount(txn.getAmounttransaction());
                                utxn.setAmount((Util.hasText(txn.getCbillamount())) ? txn.getCbillamount() : txn.getAmounttransaction());
                                /////////////////////////////////////////////////////////////////////////////////////////

                                utxn.setTransdatetime(txn.getTransdatetime());

                                // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                if (Util.hasText(txn.getBenebankcode())) {
                                    utxn.setBankcode(txn.getBenebankcode());
                                } else {
                                    utxn.setBankcode(txn.getBankcode());
                                }
                                //==========================================================================

                                // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                if (Util.hasText(txn.getBenebankaccountno())) {
                                    // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    //utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno().substring(txn.getBenebankaccountno().length()-4, txn.getBenebankaccountno().length()) : "");
                                    utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno() : "");
                                    // =====================================================================================
                                } else {
                                    // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    //utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber().substring(txn.getAccountnumber().length() - 4, txn.getAccountnumber().length()) : "");
                                    utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber() : "");
                                    // =====================================================================================
                                }
                                //==========================================================================

                                utxn.setBranchname(txn.getBranchname());
                                utxn.setSrcid(txn.getUserid());
                                utxn.setDestid(txn.getDestuserid());
                                utxn.setTerminalloc(txn.getTermloc());
                                utxn.setMapid(txn.getMapid());
                                utxn.setMerchantid(Util.hasText(txn.getMerchantid()) ? txn.getMerchantid() : txn.getBillerid());
                                utxn.setMerchantname(Util.hasText(txn.getMerchantname()) ? txn.getMerchantname() : txn.getBillername());
                                utxn.setDepositorname(txn.getCustomername());
                                utxn.setBankcharge(txn.getNayapaycharges());

                                // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                if (Util.hasText(txn.getSlipnumber())) {
                                    utxn.setDepositorslipnumber(txn.getSlipnumber());
                                }
                                //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                                if (Util.hasText(txn.getCardlastdigits())) {
                                    utxn.setCardlastdigits(txn.getCardlastdigits());
                                }
                                //===============================================================================================================
                                if (Util.hasText(txn.getCardscheme())) {
                                    utxn.setCardscheme(txn.getCardscheme());
                                }
                                if (Util.hasText(txn.getPosentrymode())) {
                                    utxn.setPosentrymode(txn.getPosentrymode());
                                }
                                if (Util.hasText(txn.getTerminalid())) {
                                    utxn.setTerminalid(txn.getTerminalid());
                                }
                                if (Util.hasText(txn.getCategoryid())) {
                                    utxn.setMerchantcategorycode(txn.getCategoryid());
                                }
                                utxn.setSrccharge(txn.getSrcchargeamount());
                                utxn.setDestcharge(txn.getDestchargeamount());
                                // =====================================================================================

                                //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
                                utxn.setTaxamount(txn.getNayapaytaxamount());
                                utxn.setOriginalapi(txn.getOriginalapi());
                                utxn.setOriginaldatetime(txn.getOrigtransdatetime());
                                utxn.setOriginalrrn(txn.getOrigretrefno());
                                utxn.setOriginalstan(txn.getOrigstan());
                                utxn.setNpticket(txn.getNpticket());
                                utxn.setVrolticket(txn.getVrolticket());
                                utxn.setRefundtype(txn.getReserved());
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103117 / VC-NAP-202103116

                                //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                //adding check for original channel of dispute transaction
                                if (txn.getChannelid().equals(ChannelCodes.EURONET)
                                        || (Util.hasText(txn.getOrigChannelId()) && txn.getOrigChannelId().equals(ChannelCodes.EURONET))) {
                                    utxn.setAcquiringcurrency(Util.hasText(txn.getTrancurrency()) ? CustomerService.findCurrency(Integer.valueOf(txn.getTrancurrency())).getName() : "");
                                    utxn.setAcquiringamount(Util.hasText(txn.getAmounttransaction()) ? txn.getAmounttransaction() : "");
                                    utxn.setConversionrate(Util.hasText(txn.getSettlementrate()) ? txn.getSettlementrate() : "");

                                    //utxn.setInternationaltransactionflag(Util.hasText(txn.getIsInternationalTxnsEnabled()) ? Boolean.valueOf(txn.getIsInternationalTxnsEnabled()) : false);
                                    boolean intlFlag = false;
                                    if (Util.hasText(txn.getBranchcode()) &&
                                            (txn.getBranchcode().equals("PSI") || txn.getBranchcode().equals("ESI") || txn.getBranchcode().equals("ATM"))) {
                                        intlFlag = true;
                                    }
                                    utxn.setInternationaltransactionflag(intlFlag);

                                    //utxn.setTotalamount((Util.hasText(tran.getCbillamount()) && Util.hasText(tran.getSrcchargeamount())) ? String.valueOf(Long.parseLong(tran.getCbillamount()) + Long.parseLong(tran.getSrcchargeamount())) : "");
                                    Long totalAmount = (Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : 0L;
                                    if (Util.hasText(txn.getSrcchargeamount())) {
                                        totalAmount = totalAmount + Long.parseLong(txn.getSrcchargeamount());
                                    }
                                    if (Util.hasText(txn.getWithholdingtaxamount())) {
                                        totalAmount = totalAmount + Long.parseLong(txn.getWithholdingtaxamount());
                                    }
                                    //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                    //converting to ISO format
                                    utxn.setTotalamount(StringUtils.leftPad(totalAmount.toString(), 12, "0"));

                                    utxn.setBaseamountafterconversion(Util.hasText(txn.getCbillamount()) ? txn.getCbillamount() : "");

                                    //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                    //converting to ISO format
                                    utxn.setForeigntransactionfee((Util.hasText(txn.getSrcchargeamount()) && Util.hasText(txn.getNayapaytaxamount())) ? StringUtils.leftPad(String.valueOf(Long.parseLong(txn.getSrcchargeamount()) - Long.parseLong(txn.getNayapaytaxamount())), 12, "0") : "");

                                    utxn.setTaxappliedonforeigntransactionfee(Util.hasText(txn.getNayapaytaxamount()) ? txn.getNayapaytaxamount() : "");
                                    utxn.setWithholdingtax(Util.hasText(txn.getWithholdingtaxamount()) ? txn.getWithholdingtaxamount() : "");
                                }

                                // =======================================================================================

                                //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                                utxn.setJustification(txn.getJustification());
                                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                // Asim Shahzad, Date : 29th June 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                                if (Util.hasText(txn.getIban())) {
                                    utxn.setIban(txn.getIban());
                                }
                                // ======================================================================================

                                // Asim Shahzad, Date : 1st Sep 2021, Tracking ID : VC-NAP-202108271
                                if (Util.hasText(txn.getAmountFCY())) {
                                    utxn.setAmountFCY(txn.getAmountFCY());
                                }

                                if (Util.hasText(txn.getCurrencyFCY())) {
                                    utxn.setCurrencyFCY(txn.getCurrencyFCY());
                                }

                                if (Util.hasText(txn.getExchangeRate())) {
                                    utxn.setExchangeRate(txn.getExchangeRate());
                                }
                                // =================================================================

                                usertxns.add(utxn);
                            } catch (Exception e) {
                                logger.error(e);//s.mehtab on 25-11-2020
                                logger.error("Unable to Add Txn [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "] to List Reason [" + e.getMessage() + "]");
                            }
                        }
                    } else {
                        logger.error("No Transaction found in DB for Src UserId [" + wsmodel.getUserid() + "]");
                    }
                }
                wsmodel.setTotalcount((Util.hasText(wsmodel.getTotalcount())) ? wsmodel.getTotalcount() : "0");
                wsmodel.setUsertransactions(usertxns);
                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return wsmodel;
                //}
                //}
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing AdminPortalGetUserTransactionList..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteAdminPortalGetTransactionDetail(WalletCMSWsEntity wsmodel) {
        logger.info("Executing AdminPortalGetTransactionDetail Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //m.rehman: 10-11-2021 - Nayapay Optimization
            //dbQuery = "from " + MVFinancialLog.class.getName() + " c where 1=1 "; // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where 1=1 ";
            params = new HashMap<String, Object>();

            /*
            if(wsmodel.getBanktxnflag()!= null && wsmodel.getBanktxnflag().equals("true")) {

                String stan = wsmodel.getOrigdataelement().substring(0,6);
                String transdatetime = wsmodel.getOrigdataelement().substring(6,wsmodel.getOrigdataelement().length());
                dbQuery += " c.stan = :STAN " + " and c.transdatetime = :TRANSDATETIME ";
                params.put("STAN", stan);
                params.put("TRANSDATETIME", transdatetime);

            }
            else {
                dbQuery += " c.tranrefnumber = :TRANREF ";
                params.put("TRANREF", wsmodel.getOrigdataelement());
            }
            */

            //dbQuery += " c.tranrefnumber = :TRANREF ";
            //params.put("TRANREF", wsmodel.getOrigdataelement());

            if (Util.hasText(wsmodel.getOrigdataelement())) {
                dbQuery += " and c.tranrefnumber = :TRANREF ";
                params.put("TRANREF", wsmodel.getOrigdataelement());
            }

            if (Util.hasText(wsmodel.getOrigstan())) {
                dbQuery += " and c.stan = :STAN ";
                params.put("STAN", wsmodel.getOrigstan());
            }

            if (Util.hasText(wsmodel.getOrigtransdatetime())) {
                dbQuery += " and c.transdatetime = :TRANS_DATE_TIME ";
                params.put("TRANS_DATE_TIME", wsmodel.getOrigtransdatetime());
            }

            dbQuery += " order by c.id desc ";

            //m.rehman: 10-11-2021 - Nayapay Optimization
            //List<MVFinancialLog> tranlist = GeneralDao.Instance.find(dbQuery, params); // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
            List<WalletCMSWsListingEntity> tranlist = GeneralDao.Instance.find(dbQuery, params);

            //m.rehman: 10-11-2021 - Nayapay Optimization
            //MVFinancialLog tran = tranlist.get(0); // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
            WalletCMSWsListingEntity tran = tranlist.get(0);
            TransactionDetail td = new TransactionDetail();

            if (tranlist != null && tranlist.size() > 0) {
                    /*
                    if(tranlist.size() > 1)
                    {
                        logger.error("Multiple Records Found for TxnId [" + wsmodel.getNayapaytxnid() + "]");
                        //wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                        //return wsmodel;
                    } else {
                    */


                //WalletCMSWsEntity tran = tranlist.get(0);
                //TransactionDetail td = new TransactionDetail();
                td.setTransrefnum(tran.getTranrefnumber());
                //Arsalan Akhter, Date: 03-Aug-2021, Tikcet: VC-NAP-202107301 (Get Transaction details of a reversal transaction)
                //td.setNayapaytype(Util.hasText(tran.getNayapaytrantype()) ? tran.getNayapaytrantype() : tran.getServicename());
                if (tran.getServicename().contains("Reversal")) {
                    td.setNayapaytype(tran.getServicename());
                } else {
                    td.setNayapaytype(Util.hasText(tran.getNayapaytrantype()) ? tran.getNayapaytrantype() : tran.getServicename());
                }
                //========================================================================================
                //td.setAcctid(tran.getAcctid());
                td.setAcctalias(tran.getAcctalias());
                td.setSrcid(tran.getUserid());

                // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                if (Util.hasText(tran.getUsername())) {
                    td.setSrcname(tran.getUsername());
                } else {
                    td.setSrcname(tran.getCustomername());
                }
                // =====================================================================================

                td.setSrcnayapayid(tran.getNayapayid());
                //td.setDestid(tran.getMerchantid());
                td.setDestid(tran.getDestuserid());
                //td.setDestname(tran.getMerchantname());
                td.setDestname(tran.getDestusername());
                td.setDestnayapayid(tran.getDestnayapayid());
                td.setParentid(tran.getParentid());
                td.setReferencenumber(tran.getReferencenumber());
                td.setInvoiceid(tran.getInvoiceid());
                td.setCurrency(tran.getCurrency());

                //m.rehman: 26-02-2021, Euronet Integration
                //td.setAmount(tran.getAmounttransaction());
                td.setAmount((Util.hasText(tran.getCbillamount())) ? tran.getCbillamount() : tran.getAmounttransaction());
                /////////////////////////////////////////////////////////////////////////////////////////

                td.setTransdatetime(tran.getTransdatetime());
                td.setMapid(tran.getMapid());
                td.setPosinvoiceref(tran.getPosinvoiceref());
                td.setTerminalid(tran.getTerminalid());
                td.setAgentid(tran.getAgentid());
                td.setStan(tran.getStan());
                td.setDisputeflag(tran.getDisputeflag());
                td.setSrccharge(tran.getSrcchargeamount());
                td.setBankcharge(tran.getNayapaycharges());
                td.setDepositorname(tran.getCustomername());
                td.setTerminalloc(tran.getTermloc());
                td.setOriginaltransactionid(tran.getOrigdataelement());

                // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                if (Util.hasText(tran.getBenebankaccountno())) {
                    // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                    //td.setAccountnumber(Util.hasText(tran.getBenebankaccountno()) ? tran.getBenebankaccountno().substring(tran.getBenebankaccountno().length()-4, tran.getBenebankaccountno().length()) : "");
                    td.setAccountnumber(Util.hasText(tran.getBenebankaccountno()) ? tran.getBenebankaccountno() : "");
                    // =====================================================================================
                } else {
                    // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                    //td.setAccountnumber(Util.hasText(tran.getAccountnumber()) ? tran.getAccountnumber().substring(tran.getAccountnumber().length() - 4, tran.getAccountnumber().length()) : "");
                    td.setAccountnumber(Util.hasText(tran.getAccountnumber()) ? tran.getAccountnumber() : "");
                    // =====================================================================================
                }
                //==========================================================================

                td.setBranchname(tran.getBranchname());
                //td.setMerchantid(tran.getMerchantid());
                //td.setMerchantname(tran.getMerchantname());
                td.setMerchantid(Util.hasText(tran.getMerchantid()) ? tran.getMerchantid() : tran.getBillerid());
                td.setMerchantname(Util.hasText(tran.getMerchantname()) ? tran.getMerchantname() : tran.getBillername());

                // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                if (Util.hasText(tran.getBenebankcode())) {
                    td.setBankcode(tran.getBenebankcode());
                } else {
                    td.setBankcode(tran.getBankcode());
                }
                //==========================================================================

                td.setDepositslipnumber(tran.getSlipnumber());

                // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                if (Util.hasText(tran.getCardlastdigits())) {
                    td.setCardlastdigits(tran.getCardlastdigits());
                }
                //===============================================================================================================
                if (Util.hasText(tran.getCardscheme())) {
                    td.setCardscheme(tran.getCardscheme());
                }
                if (Util.hasText(tran.getPosentrymode())) {
                    td.setPosentrymode(tran.getPosentrymode());
                }
                if (Util.hasText(tran.getCategoryid())) {
                    td.setMerchantcategorycode(tran.getCategoryid());
                }
                td.setDestcharge(tran.getDestchargeamount());
                // =====================================================================================

                //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
                td.setTaxamount(tran.getNayapaytaxamount());
                td.setOriginalapi(tran.getOriginalapi());
                td.setOriginaldatetime(tran.getOrigdataelement());
                td.setOriginalrrn(tran.getOrigretrefno());
                td.setOriginalstan(tran.getOrigstan());
                td.setNpticket(tran.getNpticket());
                td.setVrolticket(tran.getVrolticket());
                td.setRefundtype(tran.getReserved());
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103117 / VC-NAP-202103116

                //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                //adding check for original channel of dispute transaction
                if (tran.getChannelid().equals(ChannelCodes.EURONET)
                        || (Util.hasText(tran.getOrigChannelId()) && tran.getOrigChannelId().equals(ChannelCodes.EURONET))) {
                    td.setAcquiringcurrency(Util.hasText(tran.getTrancurrency()) ? CustomerService.findCurrency(Integer.valueOf(tran.getTrancurrency())).getName() : "");
                    td.setAcquiringamount(Util.hasText(tran.getAmounttransaction()) ? tran.getAmounttransaction() : "");
                    td.setConversionrate(Util.hasText(tran.getSettlementrate()) ? tran.getSettlementrate() : "");

                    //td.setInternationaltransactionflag(Util.hasText(tran.getIsInternationalTxnsEnabled()) ? Boolean.valueOf(tran.getIsInternationalTxnsEnabled()) : false);
                    boolean intlFlag = false;
                    if (Util.hasText(tran.getBranchcode()) &&
                            (tran.getBranchcode().equals("PSI") || tran.getBranchcode().equals("ESI") || tran.getBranchcode().equals("ATM"))) {
                        intlFlag = true;
                    }
                    td.setInternationaltransactionflag(intlFlag);

                    //td.setTotalamount((Util.hasText(tran.getCbillamount()) && Util.hasText(tran.getSrcchargeamount())) ? String.valueOf(Long.parseLong(tran.getCbillamount()) + Long.parseLong(tran.getSrcchargeamount())) : "");
                    Long totalAmount = (Util.hasText(tran.getCbillamount())) ? Long.parseLong(tran.getCbillamount()) : 0L;
                    if (Util.hasText(tran.getSrcchargeamount())) {
                        totalAmount = totalAmount + Long.parseLong(tran.getSrcchargeamount());
                    }
                    if (Util.hasText(tran.getWithholdingtaxamount())) {
                        totalAmount = totalAmount + Long.parseLong(tran.getWithholdingtaxamount());
                    }
                    //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                    //converting to ISO format
                    td.setTotalamount(StringUtils.leftPad(totalAmount.toString(), 12, "0"));

                    td.setBaseamountafterconversion(Util.hasText(tran.getCbillamount()) ? tran.getCbillamount() : "");

                    //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                    //converting to ISO format
                    td.setForeigntransactionfee((Util.hasText(tran.getSrcchargeamount()) && Util.hasText(tran.getNayapaytaxamount())) ? StringUtils.leftPad(String.valueOf(Long.parseLong(tran.getSrcchargeamount()) - Long.parseLong(tran.getNayapaytaxamount())), 12, "0") : "");

                    td.setTaxappliedonforeigntransactionfee(Util.hasText(tran.getNayapaytaxamount()) ? tran.getNayapaytaxamount() : "");
                    td.setWithholdingtax(Util.hasText(tran.getWithholdingtaxamount()) ? tran.getWithholdingtaxamount() : "");
                }

                // =======================================================================================

                //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                td.setJustification(tran.getJustification());
                //////////////////////////////////////////////////////////////////////////////////////////////////

                // Asim Shahzad, Date : 25th May 2021, Tracking ID : VP-NAP-202105212 / VC-NAP-202105211

                if (tran.getServicename().equals("WithHoldingTax")) {
                    td.setAmount(tran.getAmounttransaction());
                    td.setOriginaltxnamount(Util.hasText(tran.getCbillamount()) ? tran.getCbillamount() : "");

                    Long amtTran = Long.parseLong(tran.getAmounttransaction());
                    Long cBillAmt = Long.parseLong(td.getOriginaltxnamount());
                    double withHoldingTaxPercentage = Math.round((double) amtTran / (double) cBillAmt * 100);

                    td.setWithholdingtaxpercentage(String.valueOf(withHoldingTaxPercentage));
                }

                // =====================================================================================

                // Asim Shahzad, Date : 29th June 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                if (Util.hasText(tran.getIban())) {
                    td.setIban(tran.getIban());
                }
                // ======================================================================================

                // Asim Shahzad, Date : 1st Sep 2021, Tracking ID : VC-NAP-202108271
                if (Util.hasText(tran.getAmountFCY())) {
                    td.setAmountFCY(tran.getAmountFCY());
                }

                if (Util.hasText(tran.getCurrencyFCY())) {
                    td.setCurrencyFCY(tran.getCurrencyFCY());
                }

                if (Util.hasText(tran.getExchangeRate())) {
                    td.setExchangeRate(tran.getExchangeRate());
                }
                // =================================================================

                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                //wsmodel.setTransactionDetail(td);
                //}
            } else {
                logger.error("No Transaction found for UserId [" + wsmodel.getUserid() + "], rejecting..");
                wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND);
                //return wsmodel;
            }

            //wsmodel.setRespcode(ISOResponseCodes.APPROVED);
            wsmodel.setTransactionDetail(td);
            return wsmodel;

        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing AdminPortalGetTransactionDetail..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteAdminPortalBlockWalletAccount(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing AdminPortalBlockWalletAccount Request...");
            String dbQuery, prevStatus, status;
            Map<String, Object> params;
            CMSActivityLog cmsActivityLog;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                if (wsmodel.getBlockedflag().equals("true")) {
                    //if account block/softdelete, reject txn
                    if (nprel.getAccount().getStatus().equals("90") || nprel.getAccount().getStatus().equals("07")
                            || nprel.getAccount().getStatus().equals("07") || nprel.getAccount().getStatus().equals("09")) {
                        logger.error("Account already blocked, not updating Status! rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //90 Customer not found
                        return wsmodel;
                    } else {
                        logger.info("Blocking Account ....");

                        //need to check block type (ADMIN/FRAUD/AML)
                        prevStatus = nprel.getAccount().getStatus();
                        if (Util.hasText(wsmodel.getBlocktype())) {
                            if (wsmodel.getBlocktype().equals("FRAUD")) {
                                status = "04";  //04 - Fraud block, refer to document
                            } else if (wsmodel.getBlocktype().equals("AML")) {
                                status = "09";  //09 - AML block, refer to document
                            } else {
                                status = "90";  //90 - Admin block, refer to document
                            }
                        } else {
                            status = "90";  //90 - Admin block, refer to document
                        }
                        nprel.getAccount().setStatus(status);
                        nprel.getAccount().setLastUpdateDate(new Date());
                        GeneralDao.Instance.saveOrUpdate(nprel.getAccount());
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        logger.info("Saving wallet activity ....");
                        cmsActivityLog = new CMSActivityLog();
                        cmsActivityLog.setRelation(nprel.getAccount().getAccountNumber());
                        cmsActivityLog.setPreviousStatus(prevStatus);
                        cmsActivityLog.setCurrentStatus(nprel.getAccount().getStatus());
                        cmsActivityLog.setSourceType("API");
                        cmsActivityLog.setSourceName(wsmodel.getServicename());
                        cmsActivityLog.setActivityDateTime(DateTime.now());
                        GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                        return wsmodel;
                    }
                } else //This will always be true/enable - preverified by webservice validation
                {
                    logger.error("Unblocking not allowed in AdminPortalBlockWalletAccount service, rejecting transaction ...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);  //59 - Host Rejected - refer to document
                    return wsmodel;
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot enable/disable wallet. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing AdminPortalBlockWalletAccount..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }
    //m.rehman: for NayaPay, adding new call for document 2.0 <end>

    public static WalletCMSWsEntity ExecuteGetTransactionCharge(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetTransactionCharge Request...");
        try {
            String dbQuery, serviceName;
            Map<String, Object> params;
            CMSAccount userwalletSrc, userwalletDest, linkedaccount;
            CMSAuth cardrelation;
            Long availBalance, actualBalance, amount, sourceCharge, fee;
            boolean isDebit;

            // Asim Shahzad, Date : 20th Nov 2020, Tracking ID : VP-NAP-202011131 / VC-NAP-202011131 / VG-NAP-202011131
            //Mehtab, Date 29th Dec 2020
            if (Util.hasText(wsmodel.getNayapaytrantype()) &&
                    (wsmodel.getNayapaytrantype().toLowerCase().equals("MerchantRetailTransaction".toLowerCase()) ||
                            wsmodel.getNayapaytrantype().toLowerCase().equals("MerchantBillerTransaction".toLowerCase()) ||
                            wsmodel.getNayapaytrantype().toLowerCase().equals("MerchantBillerCoreTransaction".toLowerCase()) ||
                            wsmodel.getNayapaytrantype().toLowerCase().equals("MerchantRetailCoreTransaction".toLowerCase()))
            ) {

                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();

                if (Util.hasText(wsmodel.getMerchantid())) {
                    params.put("USERID", wsmodel.getMerchantid());
                }

                if (Util.hasText(wsmodel.getBillerid())) {
                    params.put("USERID", wsmodel.getBillerid());
                }

//              if (wsmodel.getNayapaytrantype().toLowerCase().equals("MerchantBillerTransaction".toLowerCase())) {
//                  params.put("USERID", wsmodel.getBillerid());
//              }


                params.put("CAT", AccType.CAT_MERCHANT_WALLET.StringValue());

                CMSAccount merchantwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
                if (merchantwallet != null) {

                    Long actualbalance = (Util.hasText(merchantwallet.getActualBalance()) ? Long.parseLong(merchantwallet.getActualBalance()) : 0L);
                    Long txnamount = (Util.hasText(wsmodel.getAmounttransaction()) ? Long.parseLong(wsmodel.getAmounttransaction()) : 0L);
                    Long maxlimit = (Util.hasText(wsmodel.getMaxmerchantwalletlimit()) ? Long.parseLong(wsmodel.getMaxmerchantwalletlimit()) : 0L);

                    if ((actualbalance + txnamount) > maxlimit) {
                        logger.error("Destination balance limit breached for merchant wallet, rejecting transaction ...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_DEST_LIMIT_EXCEEDED);
                        return wsmodel;
                    } else {
                        logger.info("Destination balance limit is OK, approving transaction ...");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    }
                } else {
                    logger.error("Merchant wallet not found on VaulCard, rejecting transaction ...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND);
                    return wsmodel;
                }

            }

            // ========================================================================================================

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID " + " and category= :CAT";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET_VALUE);

            userwalletSrc = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwalletSrc != null) {
                if (userwalletSrc.getStatus().equals("00") && userwalletSrc.getCustomer().getStatus().equals("00")) {
                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                    params = new HashMap<String, Object>();
                    params.put("relation", userwalletSrc.getAccountNumber());
                    params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                    cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                    if (cardrelation == null) {
                        logger.error("Card Relation not found for account [" + userwalletSrc.getAccountNumber() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                        return wsmodel;
                    }
                } else {
                    logger.info("Invalid Wallet.Customer State, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_WALLET_TRAN_NOT_ALLOWED);
                    return wsmodel;
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }

            Currency currency = GlobalContext.getInstance().getCurrency(Integer.parseInt(userwalletSrc.getCurrency()));
            if (currency != null) {
                wsmodel.setCurrency(currency.getName());
            } else {
                wsmodel.setCurrency(GlobalContext.getInstance().getBaseCurrency().getName());
            }
            //wsmodel.setCurrency(GlobalContext.getInstance().getCurrency(Integer.parseInt(userwalletSrc.getCurrency())).getName());

            //TODO: need to check this flag from db
            //setting debit/credit flag
            serviceName = wsmodel.getNayapaytrantype();
            if (!serviceName.equals("LoadWallet") && !serviceName.equals("CashDeposit")
                    && !serviceName.equals("ReverseEnvelop") && !serviceName.equals("ChequeFT")) {
                isDebit = true;
            } else {
                isDebit = false;
            }

            //get transaction charges
            serviceName = wsmodel.getServicename();
            wsmodel.setServicename(wsmodel.getNayapaytrantype());

            //Arsalan Akhter, Date: 08_Apr_2021, Ticket# VP-NAP-202103291_VC-NAP-202103291 Change in Debit card charges
            if (Util.hasText(wsmodel.getNayapaytrantype()) &&
                    (wsmodel.getNayapaytrantype().equals("DebitCardRequest") || wsmodel.getNayapaytrantype().equals("ReorderDebitCard"))) {
                if (!Util.hasText(wsmodel.getAmounttransaction())) {
                    wsmodel.setAmounttransaction(StringUtils.leftPad("0", 12, "0"));
                }

                String productType = "";
                if (Util.hasText(wsmodel.getCardtype())) {
                    if (wsmodel.getCardtype().equals("visa_virtual")) {
                        productType = "VISA_VIRTUAL";
                    } else if (wsmodel.getCardtype().equals("visa_physical")) {
                        productType = "VISA_DEBIT";
                    } else if (wsmodel.getCardtype().equals("paypak_physical")) {
                        if (userwalletSrc.getLevel().equals("0")) {
                            productType = "CARD_LVL0";
                        } else {
                            productType = "CARD_LVL1";
                        }
                    }
                }

                if (wsmodel.getNayapaytrantype().equals("DebitCardRequest")) {
                    dbQuery = "from " + CMSCard.class.getName() + " c where " +
                            " c.customer= :CUSTOMER " +
                            //" and c.product.productType = 'VISA_VIRTUAL' " +
                            " and c.product.productType = :PRODUCT_TYPE " +
                            " order by c.id desc ";
                    params = new HashMap<String, Object>();
                    params.put("CUSTOMER", userwalletSrc.getCustomer()); //.getCustomerId());
                    params.put("PRODUCT_TYPE", productType);
                    List<CMSCard> existingCard = GeneralDao.Instance.find(dbQuery, params);

                    if (existingCard != null && existingCard.size() > 0) {      //previous card exists
                        logger.info("Previous card exists for card type [" + wsmodel.getCardtype() + "]");
                        FetchTransactionCharge(wsmodel, existingCard.get(0).getProduct(), "0", "1");
                    } else {
                        logger.info("No Previous card exists for card type [" + wsmodel.getCardtype() + "]");

                        dbQuery = "from " + CMSProduct.class.getName() + " p where " +
                                " p.productType = :PRODUCT_TYPE " +
                                " order by p.id desc ";
                        params = new HashMap<String, Object>();
                        params.put("PRODUCT_TYPE", productType);
                        CMSProduct product = (CMSProduct) GeneralDao.Instance.findObject(dbQuery, params);

                        FetchTransactionCharge(wsmodel, product, "0", "0");
                    }
                } else {
                    dbQuery = "from " + CMSProduct.class.getName() + " p where " +
                            " p.productType = :PRODUCT_TYPE " +
                            " order by p.id desc ";
                    params = new HashMap<String, Object>();
                    params.put("PRODUCT_TYPE", productType);
                    CMSProduct product = (CMSProduct) GeneralDao.Instance.findObject(dbQuery, params);

                    FetchTransactionCharge(wsmodel, product, "0", "0");
                }

                wsmodel.setServicename(serviceName);
            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            else {

                //m.rehman: Euronet integration, add local/international flag in charges
                //getting transaction charges
                FetchTransactionCharge(wsmodel, userwalletSrc.getProduct(), "0");      //0-false

                if (!WalletCMSFunctions.VerifyWalletLimit(wsmodel, userwalletSrc, null, isDebit)) {
                    //m.rehman: 02-10-2020, VC-NAP-202009241 - Error codes
                    //logger.error("Limit verifying failed, rejecting...");
                    if (!Util.hasText(wsmodel.getRespcode())) {
                        wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                    }
                    logger.error("Source Wallet Account limit verifying failed, rejecting...");
                    ///////////////////////////////////////////////////////////////////////////////////////////////////////
                    wsmodel.setServicename(serviceName);
                    return wsmodel;
                }

                wsmodel.setServicename(serviceName);

                logger.info("Source Wallet Account limit verified, checking balance ...");
            }

            serviceName = wsmodel.getNayapaytrantype();
            //if (!serviceName.equals("LoadWallet") && !serviceName.equals("CashDeposit")
            //        && !serviceName.equals("ReverseEnvelop") && !serviceName.equals("ChequeFT")) {
            if (isDebit) {
                availBalance = (Util.hasText(userwalletSrc.getAvailableBalance())) ? Long.parseLong(userwalletSrc.getAvailableBalance()) : 0L;
                actualBalance = (Util.hasText(userwalletSrc.getActualBalance())) ? Long.parseLong(userwalletSrc.getActualBalance()) : 0L;
                amount = (Util.hasText(wsmodel.getAmounttransaction())) ? Long.parseLong(wsmodel.getAmounttransaction()) : 0L;
                sourceCharge = (Util.hasText(wsmodel.getSrcchargeamount())) ? Long.parseLong(wsmodel.getSrcchargeamount()) : 0L;
                fee = (Util.hasText(wsmodel.getAmttranfee())) ? Long.parseLong(wsmodel.getAmttranfee()) : 0L;

                if ((availBalance < (amount + sourceCharge + fee)) || (actualBalance < (amount + sourceCharge + fee))) {
                    logger.error("Low Wallet Balance in Source Wallet, rejecting ...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INSUFFICEIENT_BALANCE);
                    return wsmodel;

                } else {
                    logger.info("Source Wallet Account balance verified successfully ...");
                }
            } else {
                logger.info("No need to verify balance for transaction [" + serviceName + "]");
            }

            if (Util.hasText(wsmodel.getDestuserid())) {

                //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID " + " and category= :CAT";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getDestuserid());
                params.put("CAT", AccType.CAT_WALLET_VALUE);

                userwalletDest = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                if (userwalletDest != null) {
                    if ((Util.hasText(userwalletDest.getStatus())
                            && !userwalletDest.getStatus().equals("04")
                            && !userwalletDest.getStatus().equals("07")
                            && !userwalletDest.getStatus().equals("09")
                            && !userwalletDest.getStatus().equals("90"))
                            &&
                            (Util.hasText(userwalletDest.getCustomer().getStatus())
                                    && !userwalletDest.getCustomer().getStatus().equals("04")
                                    && !userwalletDest.getCustomer().getStatus().equals("07")
                                    && !userwalletDest.getCustomer().getStatus().equals("09")
                                    && !userwalletDest.getCustomer().getStatus().equals("90"))
                            && !userwalletDest.getCategory().equals(AccType.CAT_PROV.StringValue())) {
                        dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                        params = new HashMap<String, Object>();
                        params.put("relation", userwalletDest.getAccountNumber());
                        params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                        cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                        if (cardrelation == null) {
                            logger.error("Card Relation not found for account [" + userwalletDest.getAccountNumber() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                            return wsmodel;
                        } else {

                            serviceName = wsmodel.getServicename();
                            wsmodel.setServicename(wsmodel.getNayapaytrantype());

                            if (!WalletCMSFunctions.VerifyWalletLimit(wsmodel, userwalletDest, null, false)) {
                                //m.rehman: 02-10-2020, VC-NAP-202009241 - Error codes
                                //logger.error("Limit verifying failed, rejecting...");
                                if (Util.hasText(wsmodel.getRespcode()) && wsmodel.getRespcode().equals(ISOResponseCodes.NP_SRC_LIMIT_EXCEEDED)) {
                                    wsmodel.setRespcode(ISOResponseCodes.NP_DEST_LIMIT_EXCEEDED);
                                } else {
                                    wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                                }
                                wsmodel.setServicename(serviceName);
                                logger.error("Destination Wallet Account limit verifying failed, rejecting...");
                                ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                return wsmodel;
                            }
                            wsmodel.setServicename(serviceName);

                        /*
                        logger.info("Destination Wallet Account limit verified, checking balance ...");
                        availBalance = (Util.hasText(userwalletDest.getAvailableBalance())) ? Long.parseLong(userwalletDest.getAvailableBalance()) : 0L;
                        actualBalance = (Util.hasText(userwalletDest.getActualBalance())) ? Long.parseLong(userwalletDest.getActualBalance()) : 0L;
                        //amount = Long.parseLong(wsmodel.getAmounttransaction());
                        //sourceCharge = Long.parseLong(wsmodel.getDestchargeamount());

                        //if ((availBalance < (amount + sourceCharge)) || (actualBalance < (amount + sourceCharge))) {
                        if ((availBalance < amount) || (actualBalance < amount)) {
                            logger.error("Low Wallet Balance in Destination Wallet, rejecting ...");
                            wsmodel.setRespcode(ISOResponseCodes.LOW_BALANCE);

                        } else {
                            logger.info("Destination Wallet Account balance verified successfully ...");
                            //wsmodel.setUserid(userwalletDest.getUserId());
                            //wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        }
                        */
                        }
                    } else {
                        logger.info("Invalid Wallet.Customer State, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_DEST_WALLET_TRAN_NOT_ALLOWED); //90 Customer not found
                        return wsmodel;
                    }
                } else {
                    logger.info("No Account Relation Found for UserId [ " + wsmodel.getDestuserid() + ". rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //90 Customer not found
                    return wsmodel;
                }
            }

            if (Util.hasText(wsmodel.getAcctid())) {
                logger.info("Verifying Linked Account...");
                dbQuery = "from " + CMSAccount.class.getName() + " c where c.acctId = :ACCTID " + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("ACCTID", wsmodel.getAcctid());
                params.put("CAT", AccType.CAT_LINKED.StringValue());

                linkedaccount = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                if (linkedaccount != null && linkedaccount.getStatus().equals("00")) {
                    logger.info("Linked Account Verified OK!, Verifying limit...");

                    /*
                    //process wallet limit
                    if (!WalletCMSFunctions.VerifyWalletLimit(wsmodel, linkedaccount, null)) {
                        logger.error("Limit verification failed, rejecting...");
                        return wsmodel;
                    }
                    */

                } else {
                    logger.error("Invalid or No Linked Account found for [" + wsmodel.getAcctid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_NO_LINKED_ACCOUNT); //02 Invalid Account -- refer to Document
                    return wsmodel;
                }
            }

            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
            return wsmodel;
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetTransactionCharge..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteVerifyWalletByCNIC(WalletCMSWsEntity wsmodel) {
        logger.info("Executing VerifyWalletByCNIC Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSCustomer.class.getName() + " c where c.cnic= :CNIC ";
            params = new HashMap<String, Object>();
            params.put("CNIC", wsmodel.getCnic());

            CMSCustomer customer = (CMSCustomer) GeneralDao.Instance.findObject(dbQuery, params);

            if (customer != null) {
                if (customer.getStatus().equals("00")) {
                    logger.info("Customer verified successfully, moving forward for Wallet ...");

                    logger.info("Verifying Wallet Account...");
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.customer= :CUSTOMER " +
                            "and c.category= :CAT ";
                    params = new HashMap<String, Object>();
                    params.put("CUSTOMER", customer);
                    params.put("CAT", AccType.CAT_WALLET.StringValue());

                    CMSAccount wallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                    //Arsalan Akhter, Date: 25-Oct-2021, Ticket: VC-NAP-202110251(Issue in VerfiyWalletByCNIC API (Production))
                    if (wallet != null && !Util.hasText(wsmodel.getUserid())) {
                        wsmodel.setUserid(wallet.getUserId());
                    }
                    //=========================================================================================================

                    if (wsmodel.getVerifiedflag() != null && wsmodel.getVerifiedflag().equals("true")) {
                        if (wallet != null && wallet.getLevel().equals(AccType.LEVEL_ZERO.toString())
                                && wallet.getStatus().equals("00")) {

                            logger.info("Wallet Account Verified ...");

                            //Arsalan Akhter, Date: 25-Oct-2021, Ticket: VC-NAP-202110251(Issue in VerfiyWalletByCNIC API (Production))
                            //wsmodel.setUserid(wallet.getUserId());
                            //=========================================================================================================

                            //wsmodel.setAcctid(wallet.getAcctId());
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        } else if (wallet != null && wallet.getLevel().equals(AccType.LEVEL_ZERO.toString())
                                && !wallet.getStatus().equals("00")) {
                            logger.error("Invalid Wallet Account status found, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.ACCOUNT_INACTIVE); //03 Account Inactive / Wallet Block -- refer to Document

                        } else {
                            logger.error("No Wallet Account found or Wallet level is not zero, rejecting...");
                            //wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //02 Invalid Account -- refer to Document
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12 Invalid Wallet Status -- refer to Document
                        }
                    } else {
                        if (wallet != null && wallet.getStatus().equals("00")) {
                            logger.error("Wallet Account found but already enabled, rejecting ...");
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT_STATUS); //67 - invlaid account status

                        } else if (wallet != null && !wallet.getStatus().equals("00")) {
                            logger.error("Wallet Account found and verified");
                            wsmodel.setUserid(wallet.getUserId());
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        } else {
                            logger.error("No Wallet Account found, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //02 Invalid Account -- refer to Document
                        }
                    }
                } else {
                    logger.error("Invalid Customer state found, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_INACTIVE);
                }
            } else {
                logger.error("No Customer found, rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_NOT_FOUND); //90 Customer Not Found -- refer to Document
            }
            return wsmodel;
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing VerifyWalletByCNIC..!");
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //46 - Unable to process -- refer to document
            return wsmodel;
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteBioOpsUpgradeWalletAccount(WalletCMSWsEntity wsmodel) {
        logger.info("Executing BioOpsUpgradeWalletAccount Request...");

        try {
            String dbQuery, question1Retries = "", question2Retries = ""; // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
            Map<String, Object> params;

            // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301	/ VC-NAP-202009301
            //new start
            dbQuery = "from " + SystemConfig.class.getName() + " c where c.identifier in (:IDENTIFIER)"; // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
            params = new HashMap<String, Object>();

            // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
            List<String> identifiers = new ArrayList<>();
            identifiers.add("SEC_QUES_1_RETRIES");
            identifiers.add("SEC_QUES_2_RETRIES");
            params.put("IDENTIFIER", identifiers);

            List<SystemConfig> list_obj_SystemConfig = GeneralDao.Instance.find(dbQuery, params);

            if (list_obj_SystemConfig.size() > 0) {
                for (int i = 0; i < list_obj_SystemConfig.size(); i++) {
                    if (list_obj_SystemConfig.get(i).getIdentifier().equals("SEC_QUES_1_RETRIES"))
                        question1Retries = list_obj_SystemConfig.get(i).getValue();
                    if (list_obj_SystemConfig.get(i).getIdentifier().equals("SEC_QUES_2_RETRIES"))
                        question2Retries = list_obj_SystemConfig.get(i).getValue();
                }
            } else {
                logger.error("Secret Questions retries not found in DB...");
            }
            // ===============================================================

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSCustomer.class.getName() + " c where c.cnic= :CNIC ";
            params = new HashMap<String, Object>();
            params.put("CNIC", wsmodel.getCnic());

            CMSCustomer customer = (CMSCustomer) GeneralDao.Instance.findObject(dbQuery, params);

            if (customer != null) {
                if (customer.getStatus().equals("00")) {
                    logger.info("Customer verified successfully, moving forward for Wallet ...");
                    if (!Util.hasText(customer.getIsBioVerified()) || customer.getIsBioVerified().equals("0")) {
                        logger.info("Setting Customer Bio Verified flag to true ....");
                        customer.setIsBioVerified("1");
                    }

                    logger.info("Verifying Wallet Account...");
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.customer= :CUSTOMER " +
                            "and c.category= :CAT ";
                    params = new HashMap<String, Object>();
                    params.put("CUSTOMER", customer);
                    params.put("CAT", AccType.CAT_WALLET.StringValue()); //Raza This should always be Wallet, as no upgrade on Provisional Wallet is allowed

                    //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                    //CMSAccount wallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
                    CMSAccount wallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                    //Arsalan Akhter, Date: 25-Oct-2021, Ticket: VC-NAP-202110251(Issue in VerfiyWalletByCNIC API (Production))
                    if (wallet != null && !Util.hasText(wsmodel.getUserid())) {
                        wsmodel.setUserid(wallet.getUserId());
                    }
                    //=========================================================================================================

                    if (wallet != null && wallet.getStatus().equals("00") && wallet.getLevel().equals(AccType.LEVEL_ZERO.toString())) {
                        logger.info("Wallet Account Verified, upgrading to Level 1 ...");

                        if (WalletCMSFunctions.UpgradeAccountProfile(wallet, wsmodel.getServicename())) {
                            logger.info("Account Profile Created Successfully for customer [" + wsmodel.getCnic() + "]");

                            //m.rehman: Euronet integration, add local/international flag in charges
                            //getting transaction charges
                            FetchTransactionCharge(wsmodel, wallet.getProduct(), "0");      //0-false

                            logger.info("Going to deduct charges from Wallet, if any...");
                            if (FinanceManager.BioEnableUpgradeWallet(wsmodel, wallet)) {
                                logger.info("BioEnableUpgradeWallet from Wallet Done successfully!");

                                // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301	/ VC-NAP-202009301
                                logger.info("Refreshing secret question retries..");

                                // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
                                if (Util.hasText(question1Retries))
                                    customer.setSecretQuestion1Retries(question1Retries);
                                if (Util.hasText(question2Retries))
                                    customer.setSecretQuestion2Retries(question2Retries);
                                // ===============================================================
                            } else {
                                logger.info("Unable to do BioEnableUpgradeWallet in Wallet...");
                                //wsmodel.setRespcode(ISOResponseCodes.INVALID_IMD);
                                return wsmodel;
                            }

                            GeneralDao.Instance.saveOrUpdate(customer);
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                            wsmodel.setIncludeinstatement(1);
                            ////////////////////////////////////////////////////////////////////////////////////////////////////

                            return wsmodel;
                        } else {
                            logger.error("Unable to Create Account Profile for customer [" + wsmodel.getCnic() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED);
                            return wsmodel;
                        }

                    } else if (wallet != null && wallet.getStatus().equals("00") && !wallet.getLevel().equals(AccType.LEVEL_ZERO.toString())) {
                        logger.error("Invalid Wallet Account status found, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12 Invalid Wallet Status -- refer to Document

                    } else if (wallet != null && !wallet.getStatus().equals("00")) {
                        logger.error("Wallet Account not found or not enabled, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.ACCOUNT_INACTIVE); //03 Account Inactive / Wallet Block -- refer to Document
                    } else {
                        logger.error("No Wallet Account found, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //02 Invalid Account -- refer to Document
                    }
                } else {
                    logger.error("Invalid Customer state found, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_NOT_FOUND); //90 Customer Not Found -- refer to Document
                }
            } else {
                logger.error("No Customer found, rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_NOT_FOUND); //90 Customer Not Found -- refer to Document
            }
            return wsmodel;
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing BioOpsUpgradeWalletAccount..!");
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //46 - Unable to process -- refer to document
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteBioOpsEnableWalletAccount(WalletCMSWsEntity wsmodel) {
        logger.info("Executing BioOpsEnableWalletAccount Request...");

        try {
            String dbQuery, prevWalletStatus, prevCustStatus, question1Retries = "", question2Retries = ""; // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
            Map<String, Object> params;
            CMSActivityLog cmsActivityLog, cmsActivityLog1;

            // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301	/ VC-NAP-202009301
            dbQuery = "from " + SystemConfig.class.getName() + " c where c.identifier in (:IDENTIFIER)"; // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
            params = new HashMap<String, Object>();

            // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
            List<String> identifiers = new ArrayList<>();
            identifiers.add("SEC_QUES_1_RETRIES");
            identifiers.add("SEC_QUES_2_RETRIES");
            params.put("IDENTIFIER", identifiers);

            List<SystemConfig> list_obj_SystemConfig = GeneralDao.Instance.find(dbQuery, params);

            if (list_obj_SystemConfig.size() > 0) {
                for (int i = 0; i < list_obj_SystemConfig.size(); i++) {
                    if (list_obj_SystemConfig.get(i).getIdentifier().equals("SEC_QUES_1_RETRIES"))
                        question1Retries = list_obj_SystemConfig.get(i).getValue();
                    if (list_obj_SystemConfig.get(i).getIdentifier().equals("SEC_QUES_2_RETRIES"))
                        question2Retries = list_obj_SystemConfig.get(i).getValue();
                }
            } else {
                logger.error("Secret Questions retries not found in DB...");
            }
            // ===============================================================

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSCustomer.class.getName() + " c where c.cnic= :CNIC ";
            params = new HashMap<String, Object>();
            params.put("CNIC", wsmodel.getCnic());

            CMSCustomer customer = (CMSCustomer) GeneralDao.Instance.findObject(dbQuery, params);

            if (customer != null) {
                if (!customer.getStatus().equals("90")) {
                    logger.info("Customer verified successfully, moving forward for Wallet ...");
                    if (!Util.hasText(customer.getIsBioVerified()) || customer.getIsBioVerified().equals("0")) {
                        logger.info("Setting Customer Bio Verified flag to true ....");
                        customer.setIsBioVerified("1");
                    }

                    logger.info("Verifying Wallet Account...");
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.customer= :CUSTOMER " +
                            "and c.category= :CAT ";
                    params = new HashMap<String, Object>();
                    params.put("CUSTOMER", customer);
                    params.put("CAT", AccType.CAT_WALLET.StringValue());

                    //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                    //CMSAccount wallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
                    CMSAccount wallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                    //Arsalan Akhter, Date: 25-Oct-2021, Ticket: VC-NAP-202110251(Issue in VerfiyWalletByCNIC API (Production))
                    if (wallet != null && !Util.hasText(wsmodel.getUserid())) {
                        wsmodel.setUserid(wallet.getUserId());
                    }
                    //=========================================================================================================

                    if (wallet != null
                            && !wallet.getStatus().equals("04")     //Fraud Block
                            && !wallet.getStatus().equals("07")     //KYC Block
                            && !wallet.getStatus().equals("09")     //AML Block
                            && !wallet.getStatus().equals("90")) { //Raza 05082019 Allow User to Unblock except for Block
                        //m.rehman: changing logic to MPIN reset state, Document 4.2
                        //logger.info("Wallet Account found, changing status to Enable ...");
                        //wallet.setStatus("00");

                        logger.info("Wallet Account found, Changing status to AWATING_APP_MPIN Reset ...");
                        prevWalletStatus = wallet.getStatus();
                        wallet.setStatus("08");     //PIN not created (AWATING APP MPIN)
                        prevCustStatus = wallet.getStatus();
                        customer.setStatus("08");
                        //customer.setIsBioVerified("1");
                        //GeneralDao.Instance.saveOrUpdate(customer);

                        //Raza updating Remaining Retries start
                        dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation ";
                        params = new HashMap<String, Object>();
                        params.put("relation", wallet.getAccountNumber());
                        List<CMSAuth> cardrelationlist = GeneralDao.Instance.find(dbQuery, params);

                        if (cardrelationlist != null && cardrelationlist.size() > 0) {
                            for (CMSAuth cr : cardrelationlist) {
                                cr.setStatus("08");     //PIN not created (AWATING APP MPIN)
                                //cr.setRemRetries(cr.getMaxRetries());
                                GeneralDao.Instance.saveOrUpdate(cr);
                            }
                        } else {
                            logger.error("Customer Relation not Found against account [" + wallet.getAccountNumber() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_RELATION_NOT_FOUND);
                            return wsmodel;
                        }
                        //Raza updating Remaining Retries end

                        logger.info("Checking wallet level ...");
                        if (Util.hasText(wallet.getLevel()) && !wallet.getLevel().equals(AccType.LEVEL_ONE.toString())) {
                            if (!WalletCMSFunctions.UpgradeAccountProfile(wallet, wsmodel.getServicename())) {
                                logger.error("Unable to upgrade wallet, rejecting ...");

                                for (CMSAuth cr : cardrelationlist) {
                                    GeneralDao.Instance.evict(cr);
                                }

                                wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED);
                                return wsmodel;
                            }
                            GeneralDao.Instance.flush();

                            // Asim Shahzad, Date : 23rd Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                            wsmodel.setPartialflag("0");
                            // ====================================================================================

                            logger.info("Upgrade wallet successful ...");
                        } else {
                            logger.info("No need to upgrade wallet, proceeding ...");

                            // Asim Shahzad, Date : 23rd Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                            wsmodel.setPartialflag("1");
                            // ====================================================================================
                        }

                        //m.rehman: Euronet integration, add local/international flag in charges
                        //getting transaction charges
                        FetchTransactionCharge(wsmodel, wallet.getProduct(), "0");      //0-false

                        logger.info("Going to deduct charges from Wallet, if any...");
                        if (FinanceManager.BioEnableUpgradeWallet(wsmodel, wallet)) {
                            logger.info("BioEnableUpgradeWallet from Wallet Done successfully!");

                            // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301	/ VC-NAP-202009301
                            logger.info("Refreshing secret question retries..");

                            // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
                            if (Util.hasText(question1Retries))
                                customer.setSecretQuestion1Retries(question1Retries);
                            if (Util.hasText(question2Retries))
                                customer.setSecretQuestion2Retries(question2Retries);
                            // ===============================================================

                        } else {
                            logger.info("Unable to do BioEnableUpgradeWallet in Wallet...");
                            //wsmodel.setRespcode(ISOResponseCodes.INVALID_IMD);
                            return wsmodel;
                        }

                        logger.info("Saving wallet activity ....");
                        cmsActivityLog = new CMSActivityLog();
                        cmsActivityLog.setRelation(wallet.getAccountNumber());
                        cmsActivityLog.setPreviousStatus(prevWalletStatus);
                        cmsActivityLog.setCurrentStatus(wallet.getStatus());
                        cmsActivityLog.setSourceType("API");
                        cmsActivityLog.setSourceName(wsmodel.getServicename());
                        cmsActivityLog.setActivityDateTime(DateTime.now());
                        GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                        logger.info("Saving customer activity ....");
                        cmsActivityLog1 = new CMSActivityLog();
                        cmsActivityLog1.setRelation(customer.getCustomerId());
                        cmsActivityLog1.setPreviousStatus(prevCustStatus);
                        cmsActivityLog1.setCurrentStatus(customer.getStatus());
                        cmsActivityLog1.setSourceType("API");
                        cmsActivityLog1.setSourceName(wsmodel.getServicename());
                        cmsActivityLog1.setActivityDateTime(DateTime.now());
                        GeneralDao.Instance.saveOrUpdate(cmsActivityLog1);

                        GeneralDao.Instance.saveOrUpdate(wallet);
                        GeneralDao.Instance.saveOrUpdate(customer);
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                        wsmodel.setIncludeinstatement(1);
                        ////////////////////////////////////////////////////////////////////////////////////////////////////

                    } else if (wallet != null) {
                        logger.error("Wallet Account found and already enabled, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12 Invalid Card Status used as Invalid Account Status ; Refer to Bio Doc
                    } else {
                        logger.error("No Wallet Account found, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //02 Invalid/No Account -- refer to Document
                    }
                } else {
                    logger.error("Invalid Customer state found, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_NOT_FOUND);
                }
            } else {
                logger.error("No Customer found, rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_NOT_FOUND); //90 Customer Not Found -- refer to Document
            }
            return wsmodel;
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing BioOpsEnableWalletAccount..!");
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //46 - Unable to process -- refer to document
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    public static WalletCMSWsEntity ExecuteVerifyWalletByCNICforCash(WalletCMSWsEntity wsmodel) {
        logger.info("Executing VerifyWalletByCNICforCash Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSCustomer.class.getName() + " c where c.cnic= :CNIC ";
            params = new HashMap<String, Object>();
            params.put("CNIC", wsmodel.getCnic());

            CMSCustomer customer = (CMSCustomer) GeneralDao.Instance.findObject(dbQuery, params);

            if (customer != null) {
                if (customer.getStatus().equals("00")) {
                    logger.info("Customer verified successfully, moving forward for Wallet ...");

                    logger.info("Verifying Wallet Account...");
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.customer= :CUSTOMER " +
                            "and c.category= :CAT ";
                    params = new HashMap<String, Object>();
                    params.put("CUSTOMER", customer);
                    params.put("CAT", AccType.CAT_WALLET.StringValue());

                    CMSAccount wallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                    //Arsalan Akhter, Date: 25-Oct-2021, Ticket: VC-NAP-202110251(Issue in VerfiyWalletByCNIC API (Production))
                    if (wallet != null && !Util.hasText(wsmodel.getUserid())) {
                        wsmodel.setUserid(wallet.getUserId());
                    }
                    //=========================================================================================================

                    if (Util.hasText(wsmodel.getBiometricdata())) {

                        if (wallet != null && wallet.getStatus().equals("00")) {

                            //m.rehman: 10-02-2021, VP-NAP-202011102/ VC-NAP-202011101 - Document version 4.7.3 [Updates]
                            //saving user id for all cases

                            //Arsalan Akhter, Date: 25-Oct-2021, Ticket: VC-NAP-202110251(Issue in VerfiyWalletByCNIC API (Production))
                            //wsmodel.setUserid(wallet.getUserId());
                            //=========================================================================================================

                            ////////////////////////////////////////////////////////////////////////////////////////////

                            logger.info("Wallet Account found, checking balance for CashWithdrawal ...");
                            Long availBalance = Long.parseLong(wallet.getAvailableBalance());
                            Long actualBalance = Long.parseLong(wallet.getActualBalance());
                            Long amount = Long.parseLong(wsmodel.getAmounttransaction());
                            Long fee = Long.parseLong(wsmodel.getAmttranfee());

                            if ((availBalance < (amount + fee)) || (actualBalance < (amount + fee))) {
                                logger.error("Low Wallet Balance, rejecting ...");
                                wsmodel.setRespcode(ISOResponseCodes.LOW_BALANCE);

                                // Asim Shahzad, Date : 30th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                                wsmodel.setAcctbalance(actualBalance.toString());
                                // ====================================================================================

                            } else {
                                logger.info("Wallet Account balance verified successfully ...");
                                wsmodel.setUserid(wallet.getUserId());
                                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                            }

                        } else if (wallet != null && !wallet.getStatus().equals("00")) {
                            logger.error("Wallet Account found but not enabled, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.ACCOUNT_INACTIVE); //03 Account Inactive / Wallet Block -- refer to Document

                        } else {
                            logger.error("No Wallet Account found, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.ACCESS_TOKEN_EXPIRED_MISSING); //26 Wallet Not Found -- refer to Document
                        }
                    } else {

                        if (wallet != null && wallet.getStatus().equals("00") && wallet.getLevel().equals(AccType.LEVEL_ONE.toString())) {

                            logger.info("Wallet Account found, checking balance for CashWithdrawal ...");
                            Long availBalance = Long.parseLong(wallet.getAvailableBalance());
                            Long actualBalance = Long.parseLong(wallet.getActualBalance());
                            Long amount = Long.parseLong(wsmodel.getAmounttransaction());
                            Long fee = Long.parseLong(wsmodel.getAmttranfee());

                            if ((availBalance < (amount + fee)) || (actualBalance < (amount + fee))) {
                                logger.error("Low Wallet Balance, rejecting ...");
                                wsmodel.setRespcode(ISOResponseCodes.LOW_BALANCE);

                            } else {
                                logger.info("Wallet Account balance verified successfully ...");
                                wsmodel.setUserid(wallet.getUserId());
                                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                            }

                        } else if (wallet != null && wallet.getStatus().equals("00") && !wallet.getLevel().equals(AccType.LEVEL_ONE.toString())) {
                            logger.error("Wallet Account found but wallet is not level 1, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12 Invalid Wallet Status -- refer to Document

                        } else if (wallet != null && !wallet.getStatus().equals("00")) {
                            logger.error("Wallet Account found but not enabled, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.ACCOUNT_INACTIVE); //03 Account Inactive / Wallet Block -- refer to Document

                        } else {
                            logger.error("No Wallet Account found, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.ACCESS_TOKEN_EXPIRED_MISSING); //26 Wallet Not Found -- refer to Document
                        }
                    }
                } else {
                    logger.error("Invalid Customer state found, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.ACCOUNT_INACTIVE);//Added by Mehtab on 24-12-2020 VC-NAP-202012151
                }
            } else {
                logger.error("No Customer found, rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_NOT_FOUND); //90 Customer Not Found -- refer to Document
            }
            return wsmodel;
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing VerifyWalletByCNICforCash..!");
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //46 - Unable to process -- refer to document
            return wsmodel;
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteCNICBasedCashWithdrawal(WalletCMSWsEntity wsmodel) {
        logger.info("Executing CNICBasedCashWithdrawal Request...");

        try {
            String dbQuery, question1Retries = "", question2Retries = ""; // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282;
            Map<String, Object> params;

            // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301	/ VC-NAP-202009301
            dbQuery = "from " + SystemConfig.class.getName() + " c where c.identifier in (:IDENTIFIER)"; // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
            params = new HashMap<String, Object>();

            // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
            List<String> identifiers = new ArrayList<>();
            identifiers.add("SEC_QUES_1_RETRIES");
            identifiers.add("SEC_QUES_2_RETRIES");
            params.put("IDENTIFIER", identifiers);

            List<SystemConfig> list_obj_SystemConfig = GeneralDao.Instance.find(dbQuery, params);

            if (list_obj_SystemConfig.size() > 0) {
                for (int i = 0; i < list_obj_SystemConfig.size(); i++) {
                    if (list_obj_SystemConfig.get(i).getIdentifier().equals("SEC_QUES_1_RETRIES"))
                        question1Retries = list_obj_SystemConfig.get(i).getValue();
                    if (list_obj_SystemConfig.get(i).getIdentifier().equals("SEC_QUES_2_RETRIES"))
                        question2Retries = list_obj_SystemConfig.get(i).getValue();
                }
            } else {
                logger.error("Secret Questions retries not found in DB...");
            }
            // ===============================================================

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSCustomer.class.getName() + " c where c.cnic= :CNIC ";
            params = new HashMap<String, Object>();
            params.put("CNIC", wsmodel.getCnic());

            CMSCustomer customer = (CMSCustomer) GeneralDao.Instance.findObject(dbQuery, params);

            if (customer != null) {
                if (customer.getStatus().equals("00")) {
                    logger.info("Customer verified successfully, moving forward for Wallet ...");
                    if ((Util.hasText(wsmodel.getBiometricdata())) &&
                            (!Util.hasText(customer.getIsBioVerified()) || customer.getIsBioVerified().equals("0"))) {
                        logger.info("Setting Customer Bio Verified flag to true ....");
                        customer.setIsBioVerified("1");

                        // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301	/ VC-NAP-202009301
                        logger.info("Refreshing secret question retries..");

                        // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
                        if (Util.hasText(question1Retries))
                            customer.setSecretQuestion1Retries(question1Retries);
                        if (Util.hasText(question2Retries))
                            customer.setSecretQuestion2Retries(question2Retries);
                        // ===============================================================

                        GeneralDao.Instance.saveOrUpdate(customer);
                    }

                    logger.info("Verifying Wallet Account...");
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.customer= :CUSTOMER " +
                            "and c.category= :CAT ";
                    params = new HashMap<String, Object>();
                    params.put("CUSTOMER", customer);
                    params.put("CAT", AccType.CAT_WALLET.StringValue());

                    //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                    //CMSAccount wallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
                    CMSAccount wallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                    //Arsalan Akhter, Date: 25-Oct-2021, Ticket: VC-NAP-202110251(Issue in VerfiyWalletByCNIC API (Production))
                    if (wallet != null && !Util.hasText(wsmodel.getUserid())) {
                        wsmodel.setUserid(wallet.getUserId());
                    }
                    //=========================================================================================================

                    if (wallet != null && wallet.getStatus().equals("00")
                            && !wallet.getLevel().equals(AccType.LEVEL_ONE.toString()) && Util.hasText(wsmodel.getBiometricdata())) {
                        logger.info("Biometric request, upgrading wallet ...");
                        if (!WalletCMSFunctions.UpgradeAccountProfile(wallet, wsmodel.getServicename())) {
                            logger.error("Unable to upgrade wallet, rejecting ...");
                            wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED);
                            return wsmodel;
                        }
                        GeneralDao.Instance.flush();
                        logger.info("Upgrade wallet successful ...");
                    }

                    //Arsalan Akhter, Date: 25-Oct-2021, Ticket: VC-NAP-202110251(Issue in VerfiyWalletByCNIC API (Production))
                    //wsmodel.setUserid(wallet.getUserId());
                    //=========================================================================================================

                    if (wallet != null && wallet.getStatus().equals("00") && wallet.getLevel().equals(AccType.LEVEL_ONE.toString())) {

                        //getting transaction charges
                        String serviceName = wsmodel.getServicename();
                        wsmodel.setServicename(wsmodel.getOriginalapi());

                        //m.rehman: Euronet integration, add local/international flag in charges
                        //getting transaction charges
                        FetchTransactionCharge(wsmodel, wallet.getProduct(), "0");      //0-false

                        logger.info("Wallet Account found, checking balance for CashWithdrawal ...");

                        //process wallet limit
                        if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, wallet, null, Boolean.TRUE)) {
                            if (Util.hasText(wsmodel.getRespcode()) && wsmodel.getRespcode().equals(ISOResponseCodes.NP_SRC_LIMIT_EXCEEDED)) {
                                wsmodel.setRespcode(ISOResponseCodes.LIMIT_EXCEEDED);
                            } else {
                                wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS);
                            }
                            logger.error("Limit processing failed, rejecting...");
                            return wsmodel;
                        }

                        wsmodel.setServicename(serviceName);

                        if (FinanceManager.CNICBasedCashWithdrawal(wsmodel, wallet)) {
                            logger.info("CNICBasedCashWithdrawal processed successfully, returning ...");
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                            wsmodel.setIncludeinstatement(1);
                            ////////////////////////////////////////////////////////////////////////////////////////////////////

                        } else {
                            logger.info("CNICBasedCashWithdrawal processing failed, returning ...");
                            //process wallet limit
                            String respCode = wsmodel.getRespcode();
                            logger.info("Reversing Limit ...");
                            serviceName = wsmodel.getServicename();
                            wsmodel.setServicename(wsmodel.getOriginalapi());
                            if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, wallet, null, Boolean.FALSE)) {
                                logger.error("Limit reversing failed, rejecting...");
                                wsmodel.setServicename(serviceName);
                                return wsmodel;
                            }
                            wsmodel.setServicename(serviceName);

                            if (!Util.hasText(respCode)
                                    || (Util.hasText(respCode) && respCode.equals(ISOResponseCodes.APPROVED))) {
                                wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //46 unable to process - refer document
                            } else {
                                wsmodel.setRespcode(respCode);
                            }
                        }

                    } else if (wallet != null && wallet.getStatus().equals("00") && !wallet.getLevel().equals(AccType.LEVEL_ONE.toString())) {
                        logger.error("Wallet Account found but wallet is not level 1, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12Invalid Wallet Status -- refer to Document

                    } else if (wallet != null && !wallet.getStatus().equals("00")) {
                        logger.error("Wallet Account found but not enabled, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.ACCOUNT_INACTIVE); //03 Account Inactive / Wallet Block -- refer to Document

                    } else {
                        logger.error("No Wallet Account found, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //02 Wallet Not Found -- refer to Document
                    }
                } else {
                    logger.error("Invalid Customer state found, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_NOT_FOUND);
                }
            } else {
                logger.error("No Customer found, rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_NOT_FOUND); //90 Customer Not Found -- refer to Document
            }
            return wsmodel;
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing CNICBasedCashWithdrawal..!");
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //46 - Unable to process -- refer to document
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteCNICBasedCashWithdrawalReversal(WalletCMSWsEntity wsmodel) {
        logger.info("Executing CNICBasedCashWithdrawalReversal Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //find original transaction first
            dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where c.cnic= :CNIC " +
                    "and c.amounttransaction= :AMOUNT " +
                    "and c.tranrefnumber= :TRANREFNUM " +
                    "order by id desc ";
            params = new HashMap<String, Object>();
            params.put("CNIC", wsmodel.getCnic());
            params.put("TRANREFNUM", wsmodel.getOrigdataelement());
            params.put("AMOUNT", wsmodel.getAmounttransaction());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //WalletCMSWsEntity origTransaction = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params);
            WalletCMSWsEntity origTransaction = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);
            if (origTransaction == null) {
                logger.error("Original transaction not found with Ref Num [" + wsmodel.getOrigdataelement() + "], returning ...");
                wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_TRANSACTION_NOT_FOUND); //30 Original transaction not found - refer document
                return wsmodel;

            } else if (origTransaction != null && origTransaction.getRespcode().equals(ISOResponseCodes.ACQUIRER_REVERSAL)) {
                logger.error("Original transaction found and already reversed with Ref Num [" + wsmodel.getOrigdataelement() + "], returning ...");
                wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_ALREADY_REVERSED); //35 Already reversed - refer document
                return wsmodel;

            } else if (origTransaction != null && !origTransaction.getRespcode().equals(ISOResponseCodes.APPROVED)) {
                logger.error("Original transaction found but is not Approved with Ref Num [" + wsmodel.getOrigdataelement() + "], returning ...");
                wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_NOT_AUTHORIZED); //34 Original Not Authorized - refer document
                return wsmodel;

            } else {
                logger.info("Original Transaction found with Approved response ...");
            }

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSCustomer.class.getName() + " c where c.cnic= :CNIC ";
            params = new HashMap<String, Object>();
            params.put("CNIC", wsmodel.getCnic());

            CMSCustomer customer = (CMSCustomer) GeneralDao.Instance.findObject(dbQuery, params);

            if (customer != null) {
                if (customer.getStatus().equals("00")) {
                    logger.info("Customer verified successfully, moving forward for Wallet ...");

                    logger.info("Verifying Wallet Account...");
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.customer= :CUSTOMER " +
                            "and c.category= :CAT ";
                    params = new HashMap<String, Object>();
                    params.put("CUSTOMER", customer);
                    params.put("CAT", AccType.CAT_WALLET.StringValue());

                    CMSAccount wallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                    if (wallet != null && wallet.getStatus().equals("00") && wallet.getLevel().equals(AccType.LEVEL_ONE.toString())) {

                        //verify Maximum Balance Limit
                    /*if (!WalletCMSFunctions.VerifyMaxBalanceLimit(origTransaction, wallet))
                    {
                        logger.error("Maximum Balance Limit verification failed, rejecting...");
                        wsmodel.setRespcode(origTransaction.getRespcode());
                        return wsmodel;
                    }*/

                        //process wallet limit
                        logger.info("Reversing Limit ...");
                        String serviceName = origTransaction.getServicename();
                        origTransaction.setServicename(origTransaction.getOriginalapi());
                        if (!WalletCMSFunctions.ProcessDebitWalletLimit(origTransaction, wallet, null, Boolean.FALSE)) {
                            logger.error("Limit reversing failed, rejecting...");
                            wsmodel.setRespcode(origTransaction.getRespcode());
                            return wsmodel;
                        }
                        origTransaction.setServicename(serviceName);

                        //m.rehman: 24-09-2020, VP-NAP-202009241 - Original and Reversed transaction in transaction listing
                        //setting original api in reversal for listing purpose
                        wsmodel.setOriginalapi(origTransaction.getServicename());
                        wsmodel.setBankcode(origTransaction.getBankcode());//s.mehtab: 07-12-2020 VC-NAP-202012072
                        wsmodel.setUserid(origTransaction.getUserid());//s.mehtab: 15-12-2020 VC-NAP-202012151
                        wsmodel.setSrcchargeamount(origTransaction.getSrcchargeamount());//s.mehtab: 15-12-2020 VC-NAP-202012151
                        wsmodel.setNayapaytaxamount(origTransaction.getNayapaytaxamount());//s.mehtab: 15-12-2020 VC-NAP-202012151
                        //////////////////////////////////////////////////////////////////////////////////////////////////

                        logger.info("Wallet Account found, Reversing balance ...");
                        if (FinanceManager.CNICBasedCashWithdrawalReversal(wsmodel, wallet)) {
                            logger.info("CNICBasedCashWithdrawalReversal processed successfully, returning ...");
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                            origTransaction.setRespcode(ISOResponseCodes.ACQUIRER_REVERSAL);
                            GeneralDao.Instance.saveOrUpdate(origTransaction);

                            //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                            wsmodel.setIncludeinstatement(1);
                            ////////////////////////////////////////////////////////////////////////////////////////////////////

                            //m.rehman: 10-11-2021, Nayapay Optimization
                            //find original transaction first
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where c.cnic= :CNIC " +
                                    "and c.amounttransaction= :AMOUNT " +
                                    "and c.tranrefnumber= :TRANREFNUM " +
                                    "order by id desc ";
                            params = new HashMap<String, Object>();
                            params.put("CNIC", wsmodel.getCnic());
                            params.put("TRANREFNUM", wsmodel.getOrigdataelement());
                            params.put("AMOUNT", wsmodel.getAmounttransaction());

                            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                            //WalletCMSWsListingEntity origTxnListing = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, params);
                            WalletCMSWsListingEntity origTxnListing = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                            if (origTxnListing != null) {
                                logger.info("Original transaction listing found, updating status ...");
                                origTxnListing.setRespcode(ISOResponseCodes.ACQUIRER_REVERSAL);
                                GeneralDao.Instance.saveOrUpdate(origTxnListing);
                            } else {
                                logger.error("Original transaction listing not found ...");
                            }
                            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                        } else {
                            logger.info("CNICBasedCashWithdrawalReversal processing failed, returning ...");

                            //process wallet limit
                            logger.info("Applying Limit ...");
                            if (!WalletCMSFunctions.ProcessDebitWalletLimit(origTransaction, wallet, null, Boolean.TRUE)) {
                                logger.error("Limit processing failed, rejecting...");
                                return wsmodel;
                            }

                            if (!Util.hasText(wsmodel.getRespcode())
                                    || (Util.hasText(wsmodel.getRespcode()) && wsmodel.getRespcode().equals(ISOResponseCodes.APPROVED))) {
                                wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED); //46 unable to process - refer document
                            }
                        }

                    } else if (wallet != null && wallet.getStatus().equals("00") && !wallet.getLevel().equals(AccType.LEVEL_ONE.toString())) {
                        logger.error("Wallet Account found but wallet is not level 1, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12Invalid Wallet Status -- refer to Document

                    } else if (wallet != null && !wallet.getStatus().equals("00")) {
                        logger.error("Wallet Account found but not enabled, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.ACCOUNT_INACTIVE); //03 Account Inactive / Wallet Block -- refer to Document

                    } else {
                        logger.error("No Wallet Account found, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.ACCESS_TOKEN_EXPIRED_MISSING); //26 Wallet Not Found -- refer to Document
                    }
                } else {
                    logger.error("Invalid Customer state found, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.ACCOUNT_INACTIVE); //s.mehtab: 15-12-2020 VC-NAP-202012151
                }
            } else {
                logger.error("No Customer found, rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_NOT_FOUND); //90 Customer Not Found -- refer to Document
            }
            return wsmodel;
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing CNICBasedCashWithdrawalReversal..!");
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //46 - Unable to process -- refer to document
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    public static WalletCMSWsEntity ExecuteWalletInquiryForReversal(WalletCMSWsEntity wsmodel) {
        logger.info("Executing WalletInquiryForReversal Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null && userwallet.getStatus().equals("00") && userwallet.getCustomer().getStatus().equals("00")) {
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", userwallet.getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for account [" + userwallet.getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                } else {
                    logger.info("Verifying Linked Account...");
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.acctId = :ACCTID " + " and c.category = :CAT ";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getUserid());
                    params.put("ACCTID", wsmodel.getAcctid());
                    params.put("CAT", AccType.CAT_LINKED.StringValue());

                    CMSAccount linkedaccount = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                    if (linkedaccount != null && linkedaccount.getStatus().equals("00")) {
                        //TODO Verify PIN
                        logger.info("Linked Account Verified OK!");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        wsmodel.setAccountnumber(linkedaccount.getAccountNumber());
                        wsmodel.setBankcode(linkedaccount.getBranchId());
                        wsmodel.setCnic(linkedaccount.getCustomer().getCnic());
                        wsmodel.setDestaccount(linkedaccount.getAccountNumber());
                        return wsmodel;
                    } else {
                        logger.error("Invalid or No Linked Account found for [" + wsmodel.getAcctid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //02 Invalid Account -- refer to Document
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing WalletInquiryForReversal..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteCreateMerchantWallet(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing CreateMerchantWallet Request...");
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getMerchantid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                logger.info("NayaPay Relation found for MerchantId [" + wsmodel.getMerchantid() + "]");

                if (nprel.getAccount().getStatus().equals("07") && (nprel.getAccount().getCustomer().getStatus().equals("07"))) {
                    logger.info("Merchant Wallet Soft Deleted, Re-registering...");
                    if (WalletCMSFunctions.CreateMerchantWalletProfile(wsmodel, nprel.getAccount())) {
                        logger.info("Account Profile Created Successfully for Merchant [" + wsmodel.getMerchantid() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        logger.error("Unable to Create Account Profile for Merchant [" + wsmodel.getMerchantid() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                        return wsmodel;
                    }
                } else {
                    logger.error("Inactive Account or Merchant Status Found, rejecting");
                    wsmodel.setRespcode(ISOResponseCodes.ACCOUNT_INACTIVE); //02 for Invalid Account refer NayaPay Doc
                    return wsmodel;
                }
            } else {
                logger.info("Merchant Wallet not found, registering...");

                if (WalletCMSFunctions.CreateMerchantWalletProfile(wsmodel, null)) {
                    logger.info("Account Profile Created Successfully for Merchant [" + wsmodel.getMerchantid() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                } else {
                    logger.error("Unable to Create Account Profile for Merchant [" + wsmodel.getMerchantid() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                    return wsmodel;
                }
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing CreateWallet..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGeneratePINBlock(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing GeneratePINBlock Request...");

            logger.info("Generating PIN Block for Wallet...");
            if (WalletCMSFunctions.GeneratePINBlock(wsmodel)) //Raza Generate PIN for 1 Channel then map same to all
            {
                logger.info("PIN Block generated Successfully for [" + wsmodel.getAccountnumber() + "]");
                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return wsmodel;
            } else {
                logger.error("Unable to generate PIN Block [" + wsmodel.getAccountnumber() + "]");
                //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN);
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GeneratePINBlock..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteReversalTransaction(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing ReverseTransaction Request...");

            String Originalapi = wsmodel.getOriginalapi(); //.replace("RevTxn", "");
            String dbQuery;
            Map<String, Object> params;
            WalletCMSWsEntity origTxn = null;

            logger.info("Reversing " + wsmodel.getOriginalapi() + " Transaction for Txn [" + wsmodel.getTranrefnumber() + "] and ODE [" + wsmodel.getOrigdataelement() + "]");
            dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where " +
                    " c.servicename = :SERVICE_NAME " +
                    " and c.tranrefnumber = :ORIG_DATA_ELEM";
            params = new HashMap<String, Object>();
            params.put("ORIG_DATA_ELEM", wsmodel.getOrigdataelement());
            params.put("SERVICE_NAME", wsmodel.getOriginalapi());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //origTxn = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params);
            origTxn = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);
            if (origTxn == null) {
                logger.error("Original Transaction not found, rejecting ...");
                wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_TRANSACTION_NOT_FOUND);
                return wsmodel;

            } else if (origTxn != null && Util.hasText(origTxn.getRespcode())
                    && (origTxn.getRespcode().equals(ISOResponseCodes.ACQUIRER_REVERSAL) || origTxn.getRespcode().equals(ISOResponseCodes.ISSUER_REVERSAL))) {
                logger.error("Original Transaction was reversed already, rejecting ...");
                wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_ALREADY_REVERSED);
                return wsmodel;

            } else if (origTxn != null && Util.hasText(origTxn.getRespcode()) && !origTxn.getRespcode().equals(ISOResponseCodes.APPROVED)) {
                logger.error("Original Transaction was declined, rejecting ...");
                wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_ALREADY_REJECTED);
                return wsmodel;

            } else {
                logger.error("Original Transaction found, moving forward ...");
            }

            ////////////////////////////////////////////////////////////////////////////////////////////////////////
            /////////////////                                                      /////////////////////////////////
            ////////////////             UnloadWallet                                /////////////////////////////////
            ///////////////                                                        /////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////////////////////////

            if (Originalapi.equals("UnloadWallet")) {

                logger.info("Reversing Unload Wallet Transaction for Txn [" + wsmodel.getTranrefnumber() + "]");
                if (Util.hasText(wsmodel.getOrigdataelement())) {
                    logger.info("Reversing Unload Wallet Transaction for Txn ODE [" + wsmodel.getOrigdataelement() + "]");
                }

                //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getUserid());
                //m.rehman: for NayaPay, changing category
                //params.put("CAT", AccType.WALLET.StringValue());
                params.put("CAT", AccType.CAT_WALLET.StringValue());

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                //CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
                CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                if (userwallet != null && userwallet.getStatus().equals("00") && userwallet.getCustomer().getStatus().equals("00")) {

                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                    params = new HashMap<String, Object>();
                    params.put("relation", userwallet.getAccountNumber());
                    params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                    CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                    if (cardrelation == null) {
                        logger.error("Card Relation not found for account [" + userwallet.getAccountNumber() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                        return wsmodel;
                    } else {
                        logger.info("Verifying Linked Account...");
                        dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.acctId = :ACCTID " + " and c.category = :CAT ";
                        params = new HashMap<String, Object>();
                        params.put("USERID", wsmodel.getUserid());
                        params.put("ACCTID", wsmodel.getAcctid());
                        params.put("CAT", AccType.CAT_LINKED.StringValue());

                        CMSAccount linkedaccount = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                        if (linkedaccount != null && linkedaccount.getStatus().equals("00")) {
                            //TODO Verify PIN
                            logger.info("Linked Account Verified OK!, unloading wallet...");

                            logger.info("Going to Reverse UnLoad Wallet...");

                            //process wallet limit
                            String respCode = origTxn.getRespcode();
                            if (!WalletCMSFunctions.ProcessDebitWalletLimit(origTxn, userwallet, null, Boolean.FALSE)) {
                                logger.error("Limit processing failed, rejecting...");
                                wsmodel.setRespcode(origTxn.getRespcode());
                                origTxn.setRespcode(respCode);
                                return wsmodel;
                            }

                            //m.rehman: 30-07-2020, reversal handling for GL
                            //if (FinanceManager.LoadWallet(origTxn, userwallet, linkedaccount)) {
                            if (FinanceManager.LoadWallet(wsmodel, userwallet, linkedaccount)) {
                                logger.info("Unload Wallet reversed successfully!");
                                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                logger.info("Setting original transaction as reversal");
                                origTxn.setRespcode(ISOResponseCodes.ACQUIRER_REVERSAL);
                                GeneralDao.Instance.saveOrUpdate(origTxn);

                                //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                                wsmodel.setIncludeinstatement(1);
                                ////////////////////////////////////////////////////////////////////////////////////////////////////

                                //m.rehman: 10-11-2021, Nayapay Optimization
                                dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                        " c.servicename = :SERVICE_NAME " +
                                        " and c.tranrefnumber = :ORIG_DATA_ELEM";
                                params = new HashMap<String, Object>();
                                params.put("ORIG_DATA_ELEM", wsmodel.getOrigdataelement());
                                params.put("SERVICE_NAME", wsmodel.getOriginalapi());

                                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                                //WalletCMSWsListingEntity origTxnListing = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, params);
                                WalletCMSWsListingEntity origTxnListing = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                                if (origTxnListing != null) {
                                    logger.info("Original transaction found, updating status ...");
                                    origTxnListing.setRespcode(ISOResponseCodes.ACQUIRER_REVERSAL);
                                    GeneralDao.Instance.saveOrUpdate(origTxnListing);
                                } else {
                                    logger.error("Original transaction not found ...");
                                }
                                ///////////////////////////////////////////////////////////////////////////////////////

                                return wsmodel;
                            } else {
                                logger.info("Unable to reversed Unload Wallet... **********Manual Process Required!**********");

                                //reversing wallet limit
                                respCode = origTxn.getRespcode();
                                logger.info("Applying back Wallet limit ...");
                                if (!WalletCMSFunctions.ProcessDebitWalletLimit(origTxn, userwallet, null, Boolean.TRUE)) {
                                    logger.error("Limit processing failed, rejecting...");
                                    return wsmodel;
                                }
                                wsmodel.setRespcode(origTxn.getRespcode());
                                origTxn.setRespcode(respCode);
                                return wsmodel;
                            }

                            /*
                            if (FinanceManager.RevUnLoadWallet(wsmodel, userwallet, linkedaccount)) {
                                logger.info("Wallet Reversed successfully!");
                                //Raza TODO: Reverse Limit
                                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                return wsmodel;
                            } else {
                                logger.info("Unable to Reverse Unload Wallet... **********Manual Process May be Required!**********");
                                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                return wsmodel;
                            }
                            */
                        } else {
                            logger.error("Invalid or No Linked Account found for [" + wsmodel.getAcctid() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //02 Invalid Account -- refer to Document
                            return wsmodel;
                        }
                    }
                } else {
                    logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND); //90 Customer not found
                    return wsmodel;
                }
            }

            ////////////////////////////////////////////////////////////////////////////////////////////////////////
            /////////////////                                                      /////////////////////////////////
            ////////////////             LoadWallet                                /////////////////////////////////
            ///////////////                                                        /////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////////////////////////

            else if (Originalapi.equals("LoadWallet")) {
                //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("USERID", origTxn.getUserid());
                //m.rehman: for NayaPay, changing category
                //params.put("CAT", AccType.WALLET.StringValue());
                params.put("CAT", AccType.CAT_WALLET.StringValue());

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                //CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
                CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                if (userwallet != null && userwallet.getStatus().equals("00") && userwallet.getCustomer().getStatus().equals("00")) {

                    logger.info("Verifying Linked Account...");
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.acctId = :ACCTID " + " and c.category = :CAT ";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getUserid());
                    params.put("ACCTID", wsmodel.getAcctid());
                    params.put("CAT", AccType.CAT_LINKED.StringValue());

                    CMSAccount linkedaccount = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                    if (linkedaccount != null && linkedaccount.getStatus().equals("00")) {
                        ///TODO Verify PIN
                        logger.info("Linked Account Verified OK!, loading wallet...");
                        logger.info("Going to Unload Wallet...");

                        //process wallet limit
                        String respCode = origTxn.getRespcode();
                        if (!WalletCMSFunctions.ProcessCreditWalletLimit(origTxn, userwallet, null, Boolean.FALSE)) {
                            logger.error("Limit processing failed, rejecting...");
                            wsmodel.setRespcode(origTxn.getRespcode());
                            origTxn.setRespcode(respCode);
                            return wsmodel;
                        }

                        //m.rehman: 30-07-2020, reversal handling for GL
                        //if (FinanceManager.UnLoadWallet(origTxn, userwallet, linkedaccount)) {
                        if (FinanceManager.UnLoadWallet(wsmodel, userwallet, linkedaccount)) {
                            logger.info("Load Wallet reversed successfully!");
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                            logger.info("Setting original transaction as reversal");
                            origTxn.setRespcode(ISOResponseCodes.ACQUIRER_REVERSAL);
                            GeneralDao.Instance.saveOrUpdate(origTxn);

                            //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                            wsmodel.setIncludeinstatement(1);
                            ////////////////////////////////////////////////////////////////////////////////////////////////////

                            //m.rehman: 10-11-2021, Nayapay Optimization
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                    " c.servicename = :SERVICE_NAME " +
                                    " and c.tranrefnumber = :ORIG_DATA_ELEM";
                            params = new HashMap<String, Object>();
                            params.put("ORIG_DATA_ELEM", wsmodel.getOrigdataelement());
                            params.put("SERVICE_NAME", wsmodel.getOriginalapi());

                            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                            //WalletCMSWsListingEntity origTxnListing = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, params);
                            WalletCMSWsListingEntity origTxnListing = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                            if (origTxnListing != null) {
                                logger.info("Original transcation found, updating status ...");
                                origTxnListing.setRespcode(ISOResponseCodes.ACQUIRER_REVERSAL);
                                GeneralDao.Instance.saveOrUpdate(origTxnListing);
                            } else {
                                logger.error("Original trasnaction not found ...");
                            }
                            ///////////////////////////////////////////////////////////////////////////////////////

                            return wsmodel;
                        } else {
                            logger.info("Unable to reversed Load Wallet... **********Manual Process Required!**********");

                            //reversing wallet limit
                            respCode = origTxn.getRespcode();
                            logger.info("Applying back Wallet limit ...");
                            if (!WalletCMSFunctions.ProcessCreditWalletLimit(origTxn, userwallet, null, Boolean.TRUE)) {
                                logger.error("Limit processing failed, rejecting...");
                                return wsmodel;
                            }
                            wsmodel.setRespcode(origTxn.getRespcode());
                            origTxn.setRespcode(respCode);
                            return wsmodel;
                        }
                    } else {
                        logger.error("Invalid or No Linked Account found for [" + origTxn.getAcctid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //02 Invalid Account -- refer to Document
                        return wsmodel;
                    }
                } else {
                    logger.info("No Account Relation Found for UserId [ " + origTxn.getUserid() + ", cannot change wallet PIN. rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                    return wsmodel;
                }
            }

            ////////////////////////////////////////////////////////////////////////////////////////////////////////
            /////////////////                                                      /////////////////////////////////
            ////////////////             MerchantUnloadWallet                      /////////////////////////////////
            ///////////////                                                        /////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////////////////////////

            else if (Originalapi.equals("MerchantUnloadWallet")) {

                logger.info("Reversing MerchantUnloadWallet Transaction for Txn [" + wsmodel.getTranrefnumber() + "]");

                boolean walletFlag = false;
                CMSAccount merchantWallet;

                dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getMerchantid());

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                //List<NayaPayRelation> nayaPayRelationList = GeneralDao.Instance.find(dbQuery, params);
                List<NayaPayRelation> nayaPayRelationList = GeneralDao.Instance.find(dbQuery, params, "c", LockMode.UPGRADE);

                if (nayaPayRelationList != null && nayaPayRelationList.size() > 0) {
                    for (NayaPayRelation nayaPayRelation : nayaPayRelationList) {
                        merchantWallet = nayaPayRelation.getAccount();

                        if (merchantWallet != null && merchantWallet.getCategory().equals(AccType.CAT_MERCHANT_WALLET_VALUE)) {

                            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                            merchantWallet = (CMSAccount) GeneralDao.Instance.getCurrentSession().get(CMSAccount.class, merchantWallet.getId(), LockMode.UPGRADE);
                            GeneralDao.Instance.getCurrentSession().refresh(merchantWallet);
                            ////////////////////////////////////////////////////////////////////////////////////

                            walletFlag = true;
                            logger.info("Merchant Wallet found, proceeding ...");

                            //process wallet limit
                            if (!WalletCMSFunctions.ProcessDebitWalletLimit(origTxn, merchantWallet, null, Boolean.FALSE)) {
                                logger.error("Limit processing failed, rejecting...");
                                return wsmodel;
                            }

                            //m.rehman: 30-07-2020, reversal handling for GL
                            //if (FinanceManager.MerchantLoadWallet(origTxn, merchantWallet)) {
                            if (FinanceManager.MerchantLoadWallet(wsmodel, merchantWallet)) {
                                logger.info("Merchant Unload Wallet reversed successfully, returning ...");
                                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                logger.info("Setting original transaction as reversal");
                                origTxn.setRespcode(ISOResponseCodes.ACQUIRER_REVERSAL);
                                GeneralDao.Instance.saveOrUpdate(origTxn);

                                //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                                wsmodel.setIncludeinstatement(1);
                                ////////////////////////////////////////////////////////////////////////////////////////////////////

                                //m.rehman: 10-11-2021, Nayapay Optimization
                                dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                        " c.servicename = :SERVICE_NAME " +
                                        " and c.tranrefnumber = :ORIG_DATA_ELEM";
                                params = new HashMap<String, Object>();
                                params.put("ORIG_DATA_ELEM", wsmodel.getOrigdataelement());
                                params.put("SERVICE_NAME", wsmodel.getOriginalapi());

                                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                                //WalletCMSWsListingEntity origTxnListing = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, params);
                                WalletCMSWsListingEntity origTxnListing = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                                if (origTxnListing != null) {
                                    logger.info("Original transcation found, updating status ...");
                                    origTxnListing.setRespcode(ISOResponseCodes.ACQUIRER_REVERSAL);
                                    GeneralDao.Instance.saveOrUpdate(origTxnListing);
                                } else {
                                    logger.error("Original trasnaction not found ...");
                                }
                                ///////////////////////////////////////////////////////////////////////////////////////

                            } else {
                                logger.error("Merchant Unload Wallet revsersal failed, rejecting ...");

                                //process wallet limit
                                logger.error("Applying back Limit ...");
                                String respCode = origTxn.getRespcode();
                                if (!WalletCMSFunctions.ProcessDebitWalletLimit(origTxn, merchantWallet, null, Boolean.TRUE)) {
                                    logger.error("Limit processing failed, rejecting...");
                                    return wsmodel;
                                }
                                wsmodel.setRespcode(origTxn.getRespcode());
                                origTxn.setRespcode(respCode);
                            }

                            break;
                        }
                    }

                    if (!walletFlag) {
                        logger.error("No Prepaid Wallet Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                    }

                    return wsmodel;
                } else {
                    logger.error("No Account Relation Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                    return wsmodel;
                }

            }

            ////////////////////////////////////////////////////////////////////////////////////////////////////////
            /////////////////                                                      /////////////////////////////////
            ////////////////               OneLinkBillPayment                      /////////////////////////////////
            ///////////////                                                        /////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////////////////////////

            else if (Originalapi.equals("OneLinkBillPayment")) {

                //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getUserid());
                params.put("CAT", AccType.CAT_WALLET.StringValue());

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                //CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
                CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                if (userwallet != null && userwallet.getStatus().equals("00") && userwallet.getCustomer().getStatus().equals("00")) {

                    //process wallet limit
                    if (!WalletCMSFunctions.ProcessDebitWalletLimit(origTxn, userwallet, null, Boolean.FALSE)) {
                        logger.error("Limit processing failed, rejecting...");
                        return wsmodel;
                    }

                    logger.info("Going to Reverse Bill Payment in Wallet...");

                    //m.rehman: 30-07-2020, reversal handling for GL
                    //if (FinanceManager.ReverseBillPayment(origTxn, userwallet)) {
                    if (FinanceManager.ReverseBillPayment(wsmodel, userwallet)) {
                        logger.info("Bill Payment reversed successfully!");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        logger.info("Setting original transaction as reversal");
                        origTxn.setRespcode(ISOResponseCodes.ACQUIRER_REVERSAL);
                        GeneralDao.Instance.saveOrUpdate(origTxn);

                        //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                        wsmodel.setIncludeinstatement(1);
                        ////////////////////////////////////////////////////////////////////////////////////////////////////

                        //m.rehman: 10-11-2021, Nayapay Optimization
                        dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                " c.servicename = :SERVICE_NAME " +
                                " and c.tranrefnumber = :ORIG_DATA_ELEM";
                        params = new HashMap<String, Object>();
                        params.put("ORIG_DATA_ELEM", wsmodel.getOrigdataelement());
                        params.put("SERVICE_NAME", wsmodel.getOriginalapi());

                        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                        //WalletCMSWsListingEntity origTxnListing = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, params);
                        WalletCMSWsListingEntity origTxnListing = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                        if (origTxnListing != null) {
                            logger.info("Original transcation found, updating status ...");
                            origTxnListing.setRespcode(ISOResponseCodes.ACQUIRER_REVERSAL);
                            GeneralDao.Instance.saveOrUpdate(origTxnListing);
                        } else {
                            logger.error("Original trasnaction not found ...");
                        }
                        ///////////////////////////////////////////////////////////////////////////////////////

                    } else {
                        logger.info("Unable to reverse Bill Payment in Wallet... **********Manual Process Required!**********");

                        //reversing wallet limit
                        logger.info("Reversing Limit ...");
                        String respCode = wsmodel.getRespcode();
                        if (!WalletCMSFunctions.ProcessDebitWalletLimit(origTxn, userwallet, null, Boolean.TRUE)) {
                            logger.error("Limit reversing failed, rejecting...");
                            return wsmodel;
                        }
                        wsmodel.setRespcode(respCode);
                    }
                } else {
                    logger.error("Wallet not found or Invalid wallet or Customer status, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE);
                }
                return wsmodel;
            }

            //m.rehman: Euronet Integration
            ////////////////////////////////////////////////////////////////////////////////////////////////////////
            /////////////////                                                      /////////////////////////////////
            ////////////////             QRMerchantPayment                         /////////////////////////////////
            ///////////////                                                        /////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////////////////////////

            else if (Originalapi.equals("QRMerchantPayment")) {
                return ExecuteQRMerchantPaymentReversal(wsmodel);
            } else {
                logger.error("Unrecognized Service [" + Originalapi + "] to Reverse Transaction");
                logger.error("*************************");
                logger.error("WARNING MANUAL PROCESS REQUIRED FOR REVERSAL!!!!!!!");
                logger.error("*************************");
            }

            //wsmodel.setRespcode(ISOResponseCodes.APPROVED);
            return wsmodel;
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing Reverse Transaction..!");
            logger.error("*************************");
            logger.error("WARNING MANUAL PROCESS REQUIRED FOR REVERSAL!!!!!!!");
            logger.error("*************************");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    public static Boolean ValidateWallet_PerformPinAction(WalletCMSWsEntity wsmodel, Boolean isdestination, Integer PinAction, String WalletAction, Boolean ProvisionalRestrict, Boolean requestCard, String CardAction) {
        NayaPayRelation nprel = null;
        CMSAuth cardrelation = null;
        String dbQuery = "";
        Map<String, Object> params = null;

        if (!isdestination) {
            logger.info("Verifying User Wallet");

            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                //Change Wallet PIN
                if (!nprel.getAccount().getStatus().equals("00") || !nprel.getAccount().getCustomer().getStatus().equals("00")) {

                    if (nprel.getAccount().getStatus().equals("90") || nprel.getAccount().getCustomer().getStatus().equals("90")) {
                        logger.error("BLOCKED Wallet Account or Customer Status, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.ACCOUNT_LOCKED); //92 Blocked Account/Customer ; refer NayaPay Doc
                        return false;
                    } else if (!nprel.getAccount().getStatus().equals("08") && !nprel.getAccount().getCustomer().getStatus().equals("08")) {
                        logger.error("Invalid Wallet Account or Customer Status, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //67 Invalid Account/Customer Status ; refer NayaPay Doc
                        return false;
                    }
                }

                if (ProvisionalRestrict && nprel.getAccount().getCategory().equals(AccType.CAT_PROV.StringValue())) {
                    logger.error("Wallet Account in Provisional State, cannot Link Account rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.WALLET_IN_PROVISIONAL_STATE); //31 Account-In-Provisional State refer to Doc
                    return false;
                }

                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channel = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", nprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + nprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //93- Customer Relation not Found ; Refer to Doc
                    return false;
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot verify wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return false;
            }
        } else {
            logger.info("Verifying Destination User Wallet");

            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getDestuserid());

            nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                if (!nprel.getAccount().getStatus().equals("00") || !nprel.getAccount().getCustomer().getStatus().equals("00")) {
                    logger.error("Invalid Destination Wallet Account or Customer Status, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DEST_NOT_FOUND); //68 Invalid To Account ; refer NayaPay Doc
                    return false;
                }

                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channel = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", nprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Destination Card Relation not found for relation [" + nprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DEST_NOT_FOUND); //68 Invalid To Account ; refer NayaPay Doc
                    return false;
                }
            } else {
                logger.info("No Destination Account Relation Found for UserId [ " + wsmodel.getDestuserid() + ", cannot verify wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DEST_NOT_FOUND); //68 Invalid To Account ; refer NayaPay Doc
                return false;
            }
        }

        if (PinAction != null) {
            switch (PinAction) {
                case 0: {
                    logger.info("Generating Wallet PIN.....");

                    if (nprel.getAccount().getStatus().equals("08") && (nprel.getAccount().getCustomer().getStatus().equals("08"))) {
                        dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation ";
                        params = new HashMap<String, Object>();
                        params.put("relation", nprel.getAccount().getAccountNumber());


                        List<CMSAuth> listcardrelation = GeneralDao.Instance.find(dbQuery, params);

                        if (listcardrelation != null && listcardrelation.size() > 0) {
                            logger.info("Generating PIN for Customer Wallet...");
                            if (!WalletCMSFunctions.GeneratePIN(wsmodel, listcardrelation)) //Raza Generate PIN for 1 Channel then map same to all
                            {
                                logger.info("Unable to Generate PIN for UserId [" + wsmodel.getUserid() + ", rejecting...");
                                //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN);
                                return false;
                            }
                        } else {
                            logger.error("Card Relation not found for relation [" + nprel.getAccount().getAccountNumber() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //93 - Customer Relation not Found ; Refer to Doc
                            return false;
                        }
                    } else {
                        logger.error("Inactive Account or Customer Status Found, rejecting");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //67 for Invalid Account Status refer NayaPay Doc
                        return false;
                    }
                    break;
                }
                case 1: {
                    logger.info("Validating Wallet PIN.....");
                    if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                        logger.error("PIN validation failed, rejecting...");
                        return false;
                    }
                    break;
                }
                case 2: {
                    logger.info("Changing Wallet PIN.....");
                    if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                        logger.error("PIN validation failed, rejecting...");
                        return false;
                    }
                    logger.info("PIN validated successfully");

                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation ";
                    params = new HashMap<String, Object>();
                    params.put("relation", nprel.getAccount().getAccountNumber());


                    List<CMSAuth> listcardrelation = GeneralDao.Instance.find(dbQuery, params);
                    if (listcardrelation != null && listcardrelation.size() > 0) {
                        if (!WalletCMSFunctions.ChangePIN(wsmodel, listcardrelation)) {
                            logger.error("PIN change failed, rejecting...");
                            //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                            return false;
                        }
                    } else {
                        logger.error("Card Relation not found for relation [" + nprel.getAccount().getAccountNumber() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //93 - Customer Relation not Found ; Refer to Doc
                        return false;
                    }
                    break;
                }
                case 3: {
                    logger.info("Resetting Wallet PIN.....");
                    break;

                }
                default: {
                    logger.error("Invalid PinAction, ignoring...");
                    break;
                }
            }
        }

        if (Util.hasText(WalletAction)) {
            switch (WalletAction) {
                case "ENABLE": {
                    if (wsmodel.getEnableflag().equals("true")) {
                        //account enable/block/softdelete, reject txn
                        if (!nprel.getAccount().getStatus().equals("01")) {
                            logger.error("Invalid Account or Customer Status, not updating Status! rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Inactive Account/Customer ; refer NayaPay Doc
                            return false;
                        } else {
                            logger.info("Enabling Wallet Account...");
                            nprel.getAccount().setStatus("00");
                            nprel.getAccount().setLastUpdateDate(new Date());
                            GeneralDao.Instance.saveOrUpdate(nprel.getAccount());
                            return true;
                        }
                    } else //This will always be false/disable - preverified by webservice validation
                    {
                        if (nprel.getAccount().getStatus().equals("90") || nprel.getAccount().getStatus().equals("07")
                                || nprel.getAccount().getStatus().equals("09") || nprel.getAccount().getStatus().equals("01") || nprel.getAccount().getStatus().equals("08")) {
                            logger.error("Account in blocked/Softdelete state, not updating Status! rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Invalid Customer/Account Status
                            return false;
                        } else {
                            logger.info("Disabling Wallet Account...");
                            nprel.getAccount().setStatus("01");     //01 --> Warn/Temporary Block
                            nprel.getAccount().setLastUpdateDate(new Date());
                            GeneralDao.Instance.saveOrUpdate(nprel.getAccount());
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                            return true;
                        }
                    }
                    //break;
                }
                case "BLOCK": {
                    break;
                }
                default: {
                    logger.error("Invalid WalletAction, ignoring...");
                    break;
                }
            }
        }

        if (requestCard != null && requestCard) {
            logger.info("Wallet Pin verified through HSM. Requesting DebitCard.");

            dbQuery = "from " + CMSCard.class.getName() + " c where c.customer= :CUSTOMER ";
            params = new HashMap<String, Object>();
            params.put("CUSTOMER", nprel.getAccount().getCustomer()); //.getCustomerId());
            CMSCard prevcard = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);

            if (prevcard != null && !prevcard.getCardStatus().equals("90")) {
                logger.error("Card already created for Customer [" + wsmodel.getUserid() + "] cannot request card, rejecting....");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //08 Invalid Card Record, refer to Doc
                return false;
            }

            //Check Card of Customer if any end

            if (WalletCMSFunctions.CreateCardProfile(wsmodel, nprel.getAccount())) {
                logger.info("Account Profile Created Successfully for customer [" + wsmodel.getCnic() + "]");
                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return true;
            } else {
                logger.error("Unable to Create Account Profile for customer [" + wsmodel.getCnic() + "]");
                wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                return false;
            }
        }

        if (Util.hasText(CardAction)) {
            logger.info("Validating Card...");
            switch (CardAction) {
                case "ENABLE": {
                    if (!ValidateCard_PerformPinAction(wsmodel, null, "ENABLE", nprel)) {
                        return false;
                    }
                    break;
                }
                case "BLOCK": {
                    if (!ValidateCard_PerformPinAction(wsmodel, 1, "BLOCK", nprel)) {
                        return false;
                    }
                }
                case "TEMPBLOCK": {
                    if (!ValidateCard_PerformPinAction(wsmodel, 1, "TEMPBLOCK", nprel)) {
                        return false;
                    }
                    break;
                }
                case "PINCHANGE": {
                    if (!ValidateCard_PerformPinAction(wsmodel, 2, "PINCHANGE", nprel)) {
                        return false;
                    }
                    break;
                }
                default: {
                    logger.info("Invalid CardAction, ignoring...");
                    break;
                }


            }
        }

        return true;
    }

    public static Boolean ValidateCard_PerformPinAction(WalletCMSWsEntity wsmodel, Integer PinAction, String CardAction, NayaPayRelation nprel) {
        CMSCard card = null;
        CMSAuth cardrelation = null;
        String dbQuery = "";
        Map<String, Object> params = null;

        logger.info("Verifying Card");

        dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO ";
        params = new HashMap<String, Object>();
        params.put("CARDNO", wsmodel.getCardnumber());
        card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);

        if (card == null) {
            logger.error("Card not found for Customer [" + nprel.getAccount().getCustomer().getCustomerId() + "], rejecting...");
            wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD); //05-Invalid Card ; Refer to Doc
            return false;
        } else {
            if (!card.getCustomer().equals(nprel.getAccount().getCustomer())) {
                logger.error("Invalid Card Number [" + wsmodel.getCardnumber() + "] for UserId [" + wsmodel.getUserid() + "]");
                wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_DATA); //07-Invalid Card Data ; Refer to Doc
                return false;
            }

            //Validate Card Pin
            dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channel = :chnnl ";
            params = new HashMap<String, Object>();
            params.put("relation", card.getCardNumberExpiryRelation());
            params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
            cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

            if (cardrelation == null) {
                logger.error("Card Relation not found for relation [" + card.getCardNumberExpiryRelation() + "], rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                return false;
            }
        }


        if (PinAction != null) {
            switch (PinAction) {
                case 0: {
                    logger.info("Generating Card PIN.....");

                    break;
                }
                case 1: {
                    logger.info("Validating Wallet PIN.....");
                    if (!WalletCMSFunctions.ValidateCardPIN(wsmodel, cardrelation)) {
                        logger.error("Card PIN validation failed, rejecting...");
                        return false;
                    }
                    break;
                }
                case 2: {
                    logger.info("Changing Card PIN.....");
                    if (!WalletCMSFunctions.ValidateCardPIN(wsmodel, cardrelation)) {
                        logger.error("Card PIN validation failed, rejecting...");
                        return false;
                    }
                    logger.info("PIN validated successfully");

                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation ";
                    params = new HashMap<String, Object>();
                    params.put("relation", card.getCardNumberExpiryRelation());


                    List<CMSAuth> listcardrelation = GeneralDao.Instance.find(dbQuery, params);
                    if (listcardrelation != null && listcardrelation.size() > 0) {
                        if (!WalletCMSFunctions.ChangeCardPIN(wsmodel, listcardrelation)) {
                            logger.error("Card PIN validation failed, rejecting...");
                            return false;
                        }
                    } else {
                        logger.error("Card Relation not found for relation [" + nprel.getAccount().getAccountNumber() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //08 - Invalid Card Record ; Refer to Doc
                        return false;
                    }
                    break;
                }
                case 3: {
                    logger.info("Resetting Card PIN.....");
                    break;

                }
                default: {
                    logger.error("Invalid Card PinAction, ignoring...");
                    break;
                }
            }
        }

        if (Util.hasText(CardAction)) {
            switch (CardAction) {
                case "ENABLE": {
                    if (wsmodel.getEnableflag().equals("true")) {
                        if (!card.getCardStatus().equals("02")) //Raza only do if 02
                        {
                            logger.error("Card already in Active/Blocked State, cannot Enable Card. rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.BAD_CARD_STATUS); //16 Bad Card Status ; Refer NayaPay Doc
                            return false;
                        } else {
                            logger.info("Enabling Card ...");
                            card.setCardStatus("00");
                            card.setActivationDate(WebServiceUtil.dateFormat.format(new Date()));
                            GeneralDao.Instance.saveOrUpdate(card);
                            return true;
                        }
                    } else //will always be false
                    {
                        if (!card.getCardStatus().equals("00")) //90 also covered Block
                        {
                            logger.error("Card already in Inactive/Blocked State, cannot Disbale Card. rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.BAD_CARD_STATUS); //16 Bad Card Status ; Refer NayaPay Doc
                            return false;
                        } else {
                            logger.info("Disabling Card ...");
                            card.setCardStatus("02");
                            GeneralDao.Instance.saveOrUpdate(card);
                            return true;
                        }
                    }
                }
                case "BLOCK": {
                    break;
                }
                case "TEMPBLOCK": {
                    break;
                }
                default: {
                    logger.error("Invalid WalletAction, ignoring...");
                    break;
                }
            }
        }

        return true;
    }

    public static boolean ValidateEncryptedKey(WalletCMSWsEntity wsmodel) //String EncryptKey)
    {
        //Implement Encrypt Key verification here
        try {

            return true; //Return True as no Encrypted Key Validation Required between Switch & WalletCMS


//            //Raza Askari TEMP ; TODO: Update THIS start
//            if(!Util.hasText(wsmodel.getChannelid()))
//            {
//                logger.info("Verifying Encrypted Key for Askari");
//                //Implement Encrypt Key verification here
//                String Key = "ee42981afb8ba7e703bb9cb159cc4d4977255d262a23e0256f0418d5e2852517"; //Raza TODO put in DB
//                String Data = "c8330b81653825022e001716ad97d7fabaf620dba41183f223e329090ad422e4"; //Raza TODO put in DB
//
//                String DecryptedData = WSEncrptionUtil.AES256Decrypt(Base64.getDecoder().decode(wsmodel.getEncryptkey()), Key);
//
//                if (DecryptedData.equals(Data)) {
//                    logger.info("EncryptedKey Validated successfully!");
//                    return true;
//                } else {
//                    logger.error("EncryptedKey Validated failed!");
//                    return false;
//                }
//            }
//            //Raza Askari TEMP ; TODO: Update THIS end
//
//            //Implement Encrypt Key verification here
//            Terminal endPointTerminal = null;
//            //String institutionCode = (GlobalContext.getInstance().getWebserver(ChannelCodes.WALLET)).getInstitutionId();
//            String institutionCode = (GlobalContext.getInstance().getWebserver(wsmodel.getChannelid())).getInstitutionId();
//            //endPointTerminal = wsmodel.getProcessContext().getAcquierSwitchTerminal(institutionCode); //Raza commenting
//            ProcessContext processContext = new ProcessContext();
//            processContext.init();
//            endPointTerminal = processContext.getAcquierSwitchTerminal(institutionCode);
//            Set<SecureKey> incomingKeySet = endPointTerminal.getKeySet();
//            SecureDESKey AESKey = SecureDESKey.getKeyByType(KeyType.TYPE_AES_KEY, incomingKeySet);
//            SecureDESKey AESData = SecureDESKey.getKeyByType(KeyType.TYPE_AES_VALUE, incomingKeySet);
//
//            //String Key = "8a0e35bb17f6b07104d967d0f39646ccc492f333460d7e8d942daa007daf6d6"; //Raza TODO put in DB
//            //String Data = "baebd8095263eed4beb79ced664c054f32a707b5e7c31049d5a3236860c1a904"; //Raza TODO put in DB
//
//            String DecryptedData = WSEncrptionUtil.AES256Decrypt(Base64.getDecoder().decode(wsmodel.getEncryptkey()), AESKey.getKeyBytes());
//
//            if (DecryptedData.equals(AESData.getKeyBytes())) {
//                logger.info("EncryptedKey Validated successfully!");
//                return true;
//            } else {
//                logger.error("EncryptedKey Validated failed!");
//                return false;
//            }

        } catch (Exception e) {
            logger.error("Exception caught while decrypting Encryption Key!");
            logger.error(e);//s.mehtab on 25-11-2020
            return false;
        }
    }

    public static WalletCMSWsEntity ExecuteGetUserKYCAddress(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetUserKYCAddress Request...");

        try {
            String dbQuery;
            Map<String, Object> params;
            CMSCustomer cmsCustomer;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (usernprel != null) {
                cmsCustomer = usernprel.getAccount().getCustomer();

                if (cmsCustomer == null) {
                    logger.error("Customer not found for User ID [" + wsmodel.getUserid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //93-Customer Relation not Found ; Refer to Doc
                    return wsmodel;
                } else {
                    if (Util.hasText(cmsCustomer.getStatus()) && cmsCustomer.getStatus().equals("00")) {
                        //Get and Verify Access Token start
                        logger.info("verifying AccessToken...");
                        dbQuery = "from " + AccessToken.class.getName() + " c where c.userid= :USERID " + " and c.tokenId= :TOKEN " + " and c.isExpired = :ISEXPIRED " + " and c.expireDate > :EXPIRY ";
                        params = new HashMap<String, Object>();
                        params.put("USERID", wsmodel.getUserid());
                        params.put("TOKEN", wsmodel.getAccesstoken());
                        params.put("ISEXPIRED", false);
                        params.put("EXPIRY", Long.parseLong(WebServiceUtil.dateFormat.format(new Date())));

                        AccessToken token = (AccessToken) GeneralDao.Instance.findObject(dbQuery, params);

                        if (token == null) {
                            logger.error("No AccessToken found for customer, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_ACCESS_TOKEN_EXPIRED_MISSING); //26-Access Token not found Refer to Doc
                            return wsmodel;
                        }
                        logger.info("AccessToken verified OK");
                        //Get and Verify Access Token end

                        logger.info("Getting Customer's Address...");
                        wsmodel.setAddress(cmsCustomer.getHomeAddress());
                        wsmodel.setCity(cmsCustomer.getCity());
                        wsmodel.setProvince(cmsCustomer.getProvince());
                        wsmodel.setCountry(cmsCustomer.getCountry());
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        logger.error("Invalid Customer Status found for User ID [" + wsmodel.getUserid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Account Inactive -- refer to Document
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetUserKYCAddress..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteUpdateUserKYCAddress(WalletCMSWsEntity wsmodel) {
        logger.info("Executing UpdateUserKYCAddress Request...");

        try {
            String dbQuery;
            Map<String, Object> params;
            CMSCustomer cmsCustomer;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (usernprel != null) {
                cmsCustomer = usernprel.getAccount().getCustomer();

                if (cmsCustomer == null) {
                    logger.error("Customer not found for User ID [" + wsmodel.getUserid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //93-Customer Relation not Found ; Refer to Doc
                    return wsmodel;
                } else {
                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                    params = new HashMap<String, Object>();
                    params.put("relation", usernprel.getAccount().getAccountNumber());
                    params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                    CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                    if (cardrelation == null) {
                        logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //93-Customer Relation Not Found ; Raza update THIS
                        return wsmodel;
                    }

                    if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                        logger.error("PIN validation failed, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_BAD_PIN); //24-BAD PIN; refer to Doc
                        return wsmodel;
                    }

                    if (Util.hasText(cmsCustomer.getStatus()) && cmsCustomer.getStatus().equals("00")) {
                        logger.info("Updating Customer's Address...");
                        cmsCustomer.setHomeAddress(wsmodel.getAddress());
                        cmsCustomer.setCity(wsmodel.getCity());
                        cmsCustomer.setProvince(wsmodel.getProvince());
                        cmsCustomer.setCountry(cmsCustomer.getCountry());
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        logger.error("Invalid Customer Status found for User ID [" + wsmodel.getUserid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Account Inactive -- refer to Document
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing UpdateUserKYCAddress..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetUserKYCQuestionList(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetUserKYCQuestionList Request...");

        try {
            String dbQuery;
            Map<String, Object> params;
            CMSAccount userwallet;
            CMSCustomer cmsCustomer;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (usernprel != null) {
                userwallet = usernprel.getAccount();
                cmsCustomer = userwallet.getCustomer();

                if (cmsCustomer == null) {
                    logger.error("Customer not found for User ID [" + wsmodel.getUserid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //93-Customer Relation not Found ; Refer to Doc
                    return wsmodel;
                } else {
                    if (Util.hasText(cmsCustomer.getStatus()) && cmsCustomer.getStatus().equals("00")) {
                        if (userwallet != null && userwallet.getStatus().equals("05"))       //Status 05 - AWAITING_APP_QUESTION
                        {
                            logger.info("Wallet Status verified (AWAITING_APP_QUESTION), proceeding ...");
                            if (!WalletCMSFunctions.GetSecurityQuestions(wsmodel, cmsCustomer)) {
                                logger.error("Security Questions not found for User ID  [" + wsmodel.getUserid() + "], rejecting...");
                                wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //NP_6002 - Secondary Data Element not found
                                return wsmodel;

                            } else {
                                logger.info("Security Questions found, returning ...");
                                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                return wsmodel;
                            }

                            /*
                            dbQuery = "from " + CMSCustSecurQuestions.class.getName() + " c where c.customer= :CUSTOMER ";
                            params = new HashMap<String, Object>();
                            params.put("CUSTOMER", cmsCustomer);
                            List<CMSCustSecurQuestions> cmsCustSecurQuestionsList = GeneralDao.Instance.find(dbQuery, params);

                            if(cmsCustSecurQuestionsList == null || cmsCustSecurQuestionsList.size() <=0)
                            {
                                logger.error("Security Questions not found for User ID  [" + wsmodel.getUserid() + "], rejecting...");
                                wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //NP_6002 - Secondary Data Element not found
                                return wsmodel;
                            }
                            else
                            {
                                logger.info("Getting Customer's Security Questions...");

                                for (CMSCustSecurQuestions cmsCustSecurQuestions : cmsCustSecurQuestionsList) {
                                    if (cmsCustSecurQuestions.getQuestionnumber() != null && cmsCustSecurQuestions.getQuestionnumber().equals(1)) {
                                        wsmodel.setSecretquestion1(cmsCustSecurQuestions.getQuestion().getQuestion());
                                    }

                                    if (cmsCustSecurQuestions.getQuestionnumber() != null && cmsCustSecurQuestions.getQuestionnumber().equals(2)) {
                                        wsmodel.setSecretquestion2(cmsCustSecurQuestions.getQuestion().getQuestion());
                                    }
                                }

                                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                return wsmodel;
                            }
                            */
                        } else {
                            logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + " with AWAITING_APP_QUESTION status, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //NP_6011 - Source Invalid State
                            return wsmodel;
                        }
                    } else {
                        logger.error("Invalid Customer Status found for User ID [" + wsmodel.getUserid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Account Inactive -- refer to Document
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetUserKYCQuestionList..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteVerifyUserSecretQuestion(WalletCMSWsEntity wsmodel) {
        logger.info("Executing VerifyUserSecretQuestion Request...");

        try {
            String dbQuery, question1Retries = "", question2Retries = ""; // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
            Map<String, Object> params;
            CMSAccount userwallet;
            CMSCustomer cmsCustomer;
            Boolean verifyFlagQues1, verifyFlagQues2;

            // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301	/ VC-NAP-202009301
            //new start
            dbQuery = "from " + SystemConfig.class.getName() + " c where c.identifier in (:IDENTIFIER)"; // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
            params = new HashMap<String, Object>();

            // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
            List<String> identifiers = new ArrayList<>();
            identifiers.add("SEC_QUES_1_RETRIES");
            identifiers.add("SEC_QUES_2_RETRIES");
            params.put("IDENTIFIER", identifiers);

            List<SystemConfig> list_obj_SystemConfig = GeneralDao.Instance.find(dbQuery, params);

            if (list_obj_SystemConfig.size() > 0) {
                for (int i = 0; i < list_obj_SystemConfig.size(); i++) {
                    if (list_obj_SystemConfig.get(i).getIdentifier().equals("SEC_QUES_1_RETRIES"))
                        question1Retries = list_obj_SystemConfig.get(i).getValue();
                    if (list_obj_SystemConfig.get(i).getIdentifier().equals("SEC_QUES_2_RETRIES"))
                        question2Retries = list_obj_SystemConfig.get(i).getValue();
                }
            } else {
                logger.error("Secret Questions retries not found in DB...");
            }
            // ===============================================================

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (usernprel != null) {
                userwallet = usernprel.getAccount();
                cmsCustomer = userwallet.getCustomer();

                if (cmsCustomer == null) {
                    logger.error("Customer not found for User ID [" + wsmodel.getUserid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //93-Customer Relation not Found ; Refer to Doc
                    return wsmodel;
                } else {
                    if (Util.hasText(cmsCustomer.getStatus()) && cmsCustomer.getStatus().equals("00")) {
                        if (userwallet != null && userwallet.getStatus().equals("05"))       //status 05: AWAITING_APP_QUESTION
                        {
                            // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301	/ VC-NAP-202009301
//                            if(Util.hasText(cmsCustomer.getSecretQuestionRetries())) {
//                                if(Integer.valueOf(cmsCustomer.getSecretQuestionRetries()) > 0) {
//                            //================================================================
//                                    dbQuery = "from " + CMSCustSecurQuestions.class.getName() + " c where c.customer= :CUSTOMER ";
//                                    params = new HashMap<String, Object>();
//                                    params.put("CUSTOMER", cmsCustomer);
//                                    List<CMSCustSecurQuestions> cmsCustSecurQuestionsList = GeneralDao.Instance.find(dbQuery, params);
//
//                                    if (cmsCustSecurQuestionsList == null || cmsCustSecurQuestionsList.size() <= 0) {
//                                        logger.error("Security Questions not found for User ID  [" + wsmodel.getUserid() + "], rejecting...");
//                                        wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //Invalid Card Record ; Raza update THIS
//                                        return wsmodel;
//                                    } else {
//                                        logger.info("Verifying Customer's Security Questions/Answers...");
//                                        verifyFlag = Boolean.TRUE;
//                                        for (CMSCustSecurQuestions cmsCustSecurQuestions : cmsCustSecurQuestionsList) {
//                                            if (cmsCustSecurQuestions.getQuestionnumber() != null && cmsCustSecurQuestions.getQuestionnumber().equals(1)) {
//                                                if (cmsCustSecurQuestions.getQuestion().getQuestion().equals(wsmodel.getSecretquestion1())
//                                                        && !cmsCustSecurQuestions.getAnswer().toUpperCase().equals(wsmodel.getSecretquestionanswer1().toUpperCase())) {
//                                                    verifyFlag = Boolean.FALSE;
//                                                }
//                                            }
//
//                                            if (cmsCustSecurQuestions.getQuestionnumber() != null && cmsCustSecurQuestions.getQuestionnumber().equals(2)) {
//                                                if (cmsCustSecurQuestions.getQuestion().getQuestion().equals(wsmodel.getSecretquestion2())
//                                                        && !cmsCustSecurQuestions.getAnswer().toUpperCase().equals(wsmodel.getSecretquestionanswer2().toUpperCase())) {
//                                                    verifyFlag = Boolean.FALSE;
//                                                }
//                                            }
//                                        }
//
//                                        if (verifyFlag.equals(Boolean.TRUE)) {
//                                            wsmodel.setVerifiedflag("true");
//                                            //setting wallet status to AWAITING_APP_MPIN
//                                            userwallet.setStatus("08");
//                                            cmsCustomer.setStatus("08");
//
//                                            // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301
//                                            // Refreshing the secret question retries upon successful verification
//                                            cmsCustomer.setSecretQuestionRetries(obj_SystemConfig.getValue());
//
//                                            // ==============================================================
//
//                                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
//                                        } else {
//                                            wsmodel.setVerifiedflag("false");
//
//                                            // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301
//                                            //setting wallet status to AWAITING_ATM_BIOMETRIC
//                                            //userwallet.setStatus("06");
//                                            // Decreasing count of secret question retries
//
//                                            cmsCustomer.setSecretQuestionRetries(String.valueOf(Integer.valueOf(cmsCustomer.getSecretQuestionRetries()) - 1));
//
//                                            // ==============================================================
//
//                                            wsmodel.setRespcode(ISOResponseCodes.NP_VERIFICATION_FAILED);
//
//                                            // Asim Shahzad, Date : 30th Sep 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301
//                                            if(cmsCustomer.getSecretQuestionRetries().equals("0")) {
//                                                logger.info("Secret Question retries zero for the User [ " + wsmodel.getUserid() + "]");
//
//                                                logger.info("Setting wallet status to AWAITING_ATM_BIOMETRIC, rejecting...");
//                                                //setting wallet status to AWAITING_ATM_BIOMETRIC
//                                                userwallet.setStatus("06");
//                                            }
//                                            // ==============================================================
//                                        }
//
//                                        GeneralDao.Instance.saveOrUpdate(cmsCustomer);
//                                        GeneralDao.Instance.saveOrUpdate(userwallet);
//                                        //wsmodel.setRespcode(ISOResponseCodes.APPROVED);
//                                        return wsmodel;
//                                    }
//                            // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301
//                                }
//                                else {
//                                    //if(cmsCustomer.getSecretQuestionRetries().equals("0")) {
//                                        logger.info("Secret Question retries exhausted for the User [ " + wsmodel.getUserid() + "]");
//                                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //No Secret Question retries found
//
//                                        // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301
//
//                                        //logger.info("Setting wallet status to AWAITING_ATM_BIOMETRIC, rejecting...");
//                                        //setting wallet status to AWAITING_ATM_BIOMETRIC
//                                        //userwallet.setStatus("06");
//                                    //}
//
//                                    // ===============================================================
//
//                                    return wsmodel;
//                                }
//                            }

                            if (Util.hasText(cmsCustomer.getSecretQuestion1Retries()) && Util.hasText(cmsCustomer.getSecretQuestion2Retries())) {
                                if (Integer.valueOf(cmsCustomer.getSecretQuestion1Retries()) > 0 || Integer.valueOf(cmsCustomer.getSecretQuestion2Retries()) > 0) {
                                    //================================================================
                                    dbQuery = "from " + CMSCustSecurQuestions.class.getName() + " c where c.customer= :CUSTOMER ";
                                    params = new HashMap<String, Object>();
                                    params.put("CUSTOMER", cmsCustomer);
                                    List<CMSCustSecurQuestions> cmsCustSecurQuestionsList = GeneralDao.Instance.find(dbQuery, params);

                                    if (cmsCustSecurQuestionsList == null || cmsCustSecurQuestionsList.size() <= 0) {
                                        logger.error("Security Questions not found for User ID  [" + wsmodel.getUserid() + "], rejecting...");
                                        wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                                        return wsmodel;
                                    } else {
                                        logger.info("Verifying Customer's Security Questions/Answers...");
                                        verifyFlagQues1 = Boolean.TRUE; // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
                                        verifyFlagQues2 = Boolean.TRUE; // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
                                        for (CMSCustSecurQuestions cmsCustSecurQuestions : cmsCustSecurQuestionsList) {
                                            if (Util.hasText(wsmodel.getSecretquestion1())) {
                                                if (Integer.valueOf(cmsCustomer.getSecretQuestion1Retries()) > 0) {
                                                    if (cmsCustSecurQuestions.getQuestionnumber() != null && cmsCustSecurQuestions.getQuestionnumber().equals(1)) {
                                                        if (cmsCustSecurQuestions.getQuestion().getQuestion().equals(wsmodel.getSecretquestion1())
                                                                && !cmsCustSecurQuestions.getAnswer().toUpperCase().equals(wsmodel.getSecretquestionanswer1().toUpperCase())) {
                                                            logger.error("Customer provided wrong answer of question # 1...");
                                                            verifyFlagQues1 = Boolean.FALSE;
                                                        }
                                                        // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
                                                        else {
                                                            wsmodel.setVerifiedflag("true");
                                                            //setting wallet status to AWAITING_APP_MPIN
                                                            userwallet.setStatus("08");
                                                            cmsCustomer.setStatus("08");

                                                            logger.info("Customer provided correct answer of question # 1. Refreshing retries...");

                                                            // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301
                                                            // Refreshing the secret question retries upon successful verification
                                                            if (Util.hasText(question1Retries))
                                                                cmsCustomer.setSecretQuestion1Retries(question1Retries);
                                                            if (Util.hasText(question2Retries))
                                                                cmsCustomer.setSecretQuestion2Retries(question2Retries);

                                                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                                        }
                                                    }
                                                } else {

                                                    logger.info("Secret Question 1 retries exhausted for the User [ " + wsmodel.getUserid() + "]");
                                                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //No Secret Question retries found

                                                    return wsmodel;
                                                }
                                            }


                                            if (Util.hasText(wsmodel.getSecretquestion2())) {
                                                if (Integer.valueOf(cmsCustomer.getSecretQuestion2Retries()) > 0) {
                                                    if (cmsCustSecurQuestions.getQuestionnumber() != null && cmsCustSecurQuestions.getQuestionnumber().equals(2)) {
                                                        if (cmsCustSecurQuestions.getQuestion().getQuestion().equals(wsmodel.getSecretquestion2())
                                                                && !cmsCustSecurQuestions.getAnswer().toUpperCase().equals(wsmodel.getSecretquestionanswer2().toUpperCase())) {
                                                            logger.error("Customer provided wrong answer of question # 2...");
                                                            verifyFlagQues2 = Boolean.FALSE;
                                                        }
                                                        // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
                                                        else {
                                                            wsmodel.setVerifiedflag("true");
                                                            //setting wallet status to AWAITING_APP_MPIN
                                                            userwallet.setStatus("08");
                                                            cmsCustomer.setStatus("08");

                                                            logger.info("Customer provided correct answer of question # 2. Refreshing retries...");

                                                            // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301
                                                            // Refreshing the secret question retries upon successful verification
                                                            if (Util.hasText(question1Retries))
                                                                cmsCustomer.setSecretQuestion1Retries(question1Retries);
                                                            if (Util.hasText(question2Retries))
                                                                cmsCustomer.setSecretQuestion2Retries(question2Retries);
                                                            // ==============================================================

                                                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                                        }
                                                    }
                                                } else {

                                                    logger.info("Secret Question 2 retries exhausted for the User [ " + wsmodel.getUserid() + "]");
                                                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //No Secret Question retries found

                                                    return wsmodel;
                                                }
                                            }
                                        }

                                        if (verifyFlagQues1.equals(Boolean.FALSE) || verifyFlagQues2.equals(Boolean.FALSE)) {
                                            wsmodel.setVerifiedflag("false");

                                            // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301
                                            //setting wallet status to AWAITING_ATM_BIOMETRIC
                                            //userwallet.setStatus("06");
                                            // Decreasing count of secret question retries

                                            logger.info("Customer provided wrong answer of questions. Decrementing retries...");

                                            // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
                                            if (verifyFlagQues1.equals(Boolean.FALSE)) {
//                                                logger.info("Customer current retries : [" + cmsCustomer.getSecretQuestion1Retries() + "]");
                                                cmsCustomer.setSecretQuestion1Retries(String.valueOf(Integer.valueOf(cmsCustomer.getSecretQuestion1Retries()) - 1));
//                                                logger.info("Customer updated retries : [" + cmsCustomer.getSecretQuestion1Retries() + "]");
                                            }
                                            if (verifyFlagQues2.equals(Boolean.FALSE)) {
//                                                logger.info("Customer current retries : [" + cmsCustomer.getSecretQuestion2Retries() + "]");
                                                cmsCustomer.setSecretQuestion2Retries(String.valueOf(Integer.valueOf(cmsCustomer.getSecretQuestion2Retries()) - 1));
//                                                logger.info("Customer updated retries : [" + cmsCustomer.getSecretQuestion2Retries() + "]");
                                            }

                                            // ==============================================================

//                                            logger.info("Customer provided wrong answer of questions. Setting response code, rejecting...");
                                            wsmodel.setRespcode(ISOResponseCodes.NP_VERIFICATION_FAILED);

                                            // Asim Shahzad, Date : 30th Sep 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301
                                            if (cmsCustomer.getSecretQuestion1Retries().equals("0") && cmsCustomer.getSecretQuestion2Retries().equals("0")) { // Asim Shahzad, Date : 1st Nov 2021, Call ID : VC-NAP-202110282
                                                logger.info("All secret question retries zero for the User [ " + wsmodel.getUserid() + "]");

                                                logger.info("Setting wallet status to AWAITING_ATM_BIOMETRIC, rejecting...");
                                                //setting wallet status to AWAITING_ATM_BIOMETRIC
                                                userwallet.setStatus("06");
                                            }
                                            // ==============================================================
                                        }

                                        GeneralDao.Instance.saveOrUpdate(cmsCustomer);
                                        GeneralDao.Instance.saveOrUpdate(userwallet);
                                        //wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                        return wsmodel;
                                    }
                                    // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301
                                } else {
                                    //if(cmsCustomer.getSecretQuestionRetries().equals("0")) {
                                    logger.info("Secret Question retries exhausted for the User [ " + wsmodel.getUserid() + "]");
                                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //No Secret Question retries found

                                    // Asim Shahzad, Date : 27th Aug 2020, Call ID : VC-NAP-202008073/ VC-NAP-202009301

                                    //logger.info("Setting wallet status to AWAITING_ATM_BIOMETRIC, rejecting...");
                                    //setting wallet status to AWAITING_ATM_BIOMETRIC
                                    //userwallet.setStatus("06");
                                    //}

                                    // ===============================================================

                                    return wsmodel;
                                }
                            } else {
                                logger.info("No Secret Question retries found for the User [ " + wsmodel.getUserid() + ", rejecting...");
                                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //No Secret Question retries found
                                return wsmodel;
                            }
                            // ===============================================================
                        } else {
                            logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + " with AWAITING_APP_QUESTION status, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //90 Customer not found
                            return wsmodel;
                        }
                    } else {
                        logger.error("Invalid Customer Status found for User ID [" + wsmodel.getUserid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Account Inactive -- refer to Document
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing VerifyUserSecretQuestion..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetUserCNICName(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetUserCNICName Request...");

        try {
            String dbQuery, name;
            Map<String, Object> params;
            CMSAccount userwallet;
            CMSCustomer cmsCustomer;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (usernprel != null) {
                userwallet = usernprel.getAccount();
                cmsCustomer = userwallet.getCustomer();

                if (cmsCustomer == null) {
                    logger.error("Customer not found for User ID [" + wsmodel.getUserid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //93-Customer Relation not Found ; Refer to Doc
                    return wsmodel;
                } else {
                    //Arsalan Akhter, Date:24-Aug-2021, Ticket: VC-NAP-202108163(User Status check to be removed from GetUserCNICName API)
                    // if(Util.hasText(cmsCustomer.getStatus()) && cmsCustomer.getStatus().equals("00")) {
                    name = "";
                    if (Util.hasText(cmsCustomer.getFirstname())) {
                        name += cmsCustomer.getFirstname();
                    }

                    if (Util.hasText(cmsCustomer.getMidname())) {
                        if (Util.hasText(name)) {
                            name += " " + cmsCustomer.getMidname();
                        } else {
                            name = cmsCustomer.getMidname();
                        }
                    }

                    if (Util.hasText(cmsCustomer.getLastname())) {
                        if (Util.hasText(name)) {
                            name += " " + cmsCustomer.getLastname();
                        } else {
                            name = cmsCustomer.getLastname();
                        }
                    }

                    wsmodel.setCustomername(name);
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                    //}
//                    else
//                    {
//                        logger.error("Invalid Customer Status found for User ID [" + wsmodel.getUserid() + "], rejecting...");
//                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Account Inactive -- refer to Document
//                        return wsmodel;
//                    }
                    //==================================================================================================
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetUserCNICName..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetWalletState(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetWalletState Request...");

        try {
            String dbQuery;
            Map<String, Object> params;
            CMSAccount userwallet;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (usernprel != null) {
                userwallet = usernprel.getAccount();
                if (userwallet != null) {
                    logger.info("Getting Wallet Info ...");
                    wsmodel.setStatus(userwallet.getStatus());
                    wsmodel.setState(userwallet.getCategory() + "_" + userwallet.getLevel());
                    wsmodel.setAcctbalance(StringUtils.leftPad(userwallet.getAvailableBalance(), 12, "0"));

                    // Asim Shahzad, Date : 15th July 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                    if (Util.hasText(userwallet.getiBan())) {
                        wsmodel.setIban(userwallet.getiBan());
                    }
                    // ======================================================================================

                    //get user cards list
                    dbQuery = "from " + CMSCard.class.getName() + " c where c.customer= :CUSTOMER";
                    params = new HashMap<String, Object>();
                    params.put("CUSTOMER", userwallet.getCustomer());
                    List<CMSCard> cmsCardList = GeneralDao.Instance.find(dbQuery, params);
                    if (cmsCardList != null && cmsCardList.size() > 0) {
                        List<CardObject> cardObjectList = new ArrayList<CardObject>();

                        for (CMSCard cmsCard : cmsCardList) {
                            CardObject cardObject = new CardObject();
                            cardObject.setId(cmsCard.getId().toString());
                            cardObject.setCardnumber(cmsCard.getCardNumber());
                            cardObject.setCardexpiry((Util.hasText(cmsCard.getExpiryDate())) ? cmsCard.getExpiryDate().substring(2, 6) : "");
                            cardObject.setCreationdate((Util.hasText(cmsCard.getRequestDate())) ? cmsCard.getRequestDate().substring(0, 8) : "");
                            cardObject.setCardstatus(cmsCard.getCardStatus());
                            cardObject.setCardnumberlastdigits(cmsCard.getCardNoLastDigits());
                            cardObject.setActivationdate((Util.hasText(cmsCard.getActivationDate())) ? cmsCard.getActivationDate().substring(0, 8) : "");

                            // Asim Shahzad, Date : 25th May 2021, Tracking ID : VP-NAP-202105212 / VC-NAP-202105211

                            cardObject.setNameoncard(Util.hasText(userwallet.getNameOnCard()) ? userwallet.getNameOnCard() : "");

                            // =====================================================================================

                            cardObjectList.add(cardObject);
                        }

                        if (cardObjectList != null && cardObjectList.size() > 0) {
                            wsmodel.setCardobjectlist(cardObjectList);
                        }
                    }

                    // Bilal Hussain, Date : 8th june 2021, Tracking ID : VP-NAP-202106072
                    wsmodel.setNameoncard(Util.hasText(userwallet.getNameOnCard()) ? userwallet.getNameOnCard() : "");

                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;

                } else {
                    logger.info("No Wallet found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                    return wsmodel;
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetWalletState..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteDisableDebitCard(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing DisableDebitCard Request...");
            String dbQuery, prevStatus;
            Map<String, Object> params;
            CMSActivityLog cmsActivityLog;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                dbQuery = "from " + CMSCard.class.getName() +
                        " c where c.cardNumber= :CARDNO " +
                        " order by c.id desc ";
                params = new HashMap<String, Object>();
                params.put("CARDNO", wsmodel.getCardnumber());
                CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);

                if (card != null) {

                    if (!card.getCardStatus().equals("00")) //90 also covered Block
                    {
                        logger.error("Card already in Inactive/Blocked State, cannot Disbale Card. rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //32 Inactive Account/Customer ; refer NayaPay Doc
                        return wsmodel;
                    } else {
                        logger.info("Disabling Card ...");
                        prevStatus = card.getCardStatus();
                        card.setCardStatus("02");
                        GeneralDao.Instance.saveOrUpdate(card);
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        logger.info("Saving card activity ....");
                        cmsActivityLog = new CMSActivityLog();
                        cmsActivityLog.setRelation(card.getCardNumber());
                        cmsActivityLog.setPreviousStatus(prevStatus);
                        cmsActivityLog.setCurrentStatus(card.getCardStatus());
                        cmsActivityLog.setSourceType("API");
                        cmsActivityLog.setSourceName(wsmodel.getServicename());
                        cmsActivityLog.setActivityDateTime(DateTime.now());
                        GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                        return wsmodel;
                    }
                } else {
                    logger.error("Card not found for UserId [" + wsmodel.getUserid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //05 Card not found refer to Document
                    return wsmodel;
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing DisableDebitCard ..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetDebitCardPAN(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing GetDebitCardPAN Request...");
            String dbQuery;
            Map<String, Object> params;
            CMSCustomer cmsCustomer;
            CardObject cardObject;
            List<CardObject> cardObjectList;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                cmsCustomer = nprel.getAccount().getCustomer();
                if (cmsCustomer == null) {
                    logger.error("Customer not found, rejecting ...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND);
                    return wsmodel;
                }

                dbQuery = "from " + CMSCard.class.getName() + " c where c.customer= :CUSTOMER ";
                params = new HashMap<String, Object>();
                params.put("CUSTOMER", cmsCustomer);
                List<CMSCard> cardList = GeneralDao.Instance.find(dbQuery, params);

                if (cardList != null && cardList.size() > 0) {
                    logger.info("Card List found against User ID [" + wsmodel.getUserid() + "]");
                    cardObjectList = new ArrayList<CardObject>();
                    for (CMSCard cmsCard : cardList) {
                        //if (cmsCard.getCardStatus().equals("00"))
                        //{
                        cardObject = new CardObject();
                        cardObject.setId(cmsCard.getId().toString());
                        cardObject.setCardnumber(cmsCard.getCardNumber());
                        cardObject.setCardexpiry((Util.hasText(cmsCard.getExpiryDate())) ? cmsCard.getExpiryDate().substring(2, 6) : "");
                        cardObject.setCreationdate((Util.hasText(cmsCard.getRequestDate())) ? cmsCard.getRequestDate().substring(0, 8) : "");
                        cardObject.setCardstatus(cmsCard.getCardStatus());
                        cardObject.setCardnumberlastdigits(cmsCard.getCardNoLastDigits());
                        cardObject.setActivationdate((Util.hasText(cmsCard.getActivationDate())) ? cmsCard.getActivationDate().substring(0, 8) : "");


                        // Asim Shahzad, Date : 14th Jan 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 (Release # 1

                        dbQuery = "from " + CMSCardControlConfig.class.getName() + " c where c.card= :card ";
                        params = new HashMap<String, Object>();
                        params.put("card", cmsCard);
                        CMSCardControlConfig obj_CardControlConfig = (CMSCardControlConfig) GeneralDao.Instance.findObject(dbQuery, params);

                        //m.rehman: 16-02-2021, in case card control not found, set default controls
                        if (obj_CardControlConfig == null) {
                            obj_CardControlConfig = new CMSCardControlConfig();
                            obj_CardControlConfig.setOnlineEnabled(true);
                            obj_CardControlConfig.setNFCEnabled(true);
                            obj_CardControlConfig.setMagStripeEnabled(true);
                            obj_CardControlConfig.setInternationalTxnsEnabled(true);
                            obj_CardControlConfig.setCashWithdrawalEnabled(true);
                            obj_CardControlConfig.setChipPinEnabled(true);
                        }

                        cardObject.setIsChipPinEnabled((obj_CardControlConfig.getChipPinEnabled() ? "true" : "false"));
                        cardObject.setIsMagStripeEnabled((obj_CardControlConfig.getMagStripeEnabled() ? "true" : "false"));
                        cardObject.setIsCashWithdrawalEnabled((obj_CardControlConfig.getCashWithdrawalEnabled() ? "true" : "false"));
                        cardObject.setIsNFCEnabled((obj_CardControlConfig.getNFCEnabled() ? "true" : "false"));
                        cardObject.setIsOnlineEnabled((obj_CardControlConfig.getOnlineEnabled() ? "true" : "false"));
                        cardObject.setIsInternationalTxnsEnabled((obj_CardControlConfig.getInternationalTxnsEnabled() ? "true" : "false"));

                        // ========================================================================================================

                        // Asim Shahzad, Date : 4th Feb 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 (Release # 3)

                        if (cmsCard.getProduct().getProductType().equals("CARD_LVL0") || cmsCard.getProduct().getProductType().equals("CARD_LVL1")) {
                            cardObject.setCardtype("paypak_physical");
                        }
                        if (cmsCard.getProduct().getProductType().equals("VISA_DEBIT")) {
                            cardObject.setCardtype("visa_physical");
                        }
                        if (cmsCard.getProduct().getProductType().equals("VISA_VIRTUAL")) {
                            cardObject.setCardtype("visa_virtual");
                        }

                        // ========================================================================================================

                        cardObjectList.add(cardObject);
                        //}
                    }

                    if (cardObjectList != null && cardObjectList.size() > 0) {
                        wsmodel.setCardobjectlist(cardObjectList);
                    } else {
                        logger.info("No Card found with active status, returning ....");
                    }
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                } else {
                    logger.error("Card not found for UserId [" + wsmodel.getUserid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //05 Card not found refer to Document
                    return wsmodel;
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetDebitCardPAN ..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteCreatePrepaidCardWallet(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing CreateMerchantPrepaidCardWallet Request...");
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID " +
                    " and c.account.product.productType = 'PREPAID'";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getMerchantid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                logger.info("NayaPay Relation found for MerchantId [" + wsmodel.getMerchantid() + "]");

                if (nprel.getAccount().getStatus().equals("07") && (nprel.getAccount().getCustomer().getStatus().equals("07"))) {
                    logger.info("Merchant Prepaid Wallet Soft Deleted, Re-registering...");
                    if (WalletCMSFunctions.CreatePrepaidWalletProfile(wsmodel, nprel.getAccount())) {
                        logger.info("Prepaid Account Profile Created Successfully for Merchant [" + wsmodel.getMerchantid() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        logger.error("Unable to Create Account Profile for Merchant [" + wsmodel.getMerchantid() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                        return wsmodel;
                    }
                } else {
                    logger.error("Inactive Account or Merchant Status Found, rejecting");
                    wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //02 for Invalid Account refer NayaPay Doc
                    return wsmodel;
                }
            } else {
                logger.info("Merchant Prepaid Wallet not found, registering...");

                if (WalletCMSFunctions.CreatePrepaidWalletProfile(wsmodel, null)) {
                    logger.info("Prepaid Account Profile Created Successfully for Merchant [" + wsmodel.getMerchantid() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                } else {
                    logger.error("Unable to Create Prepaid Account Profile for Merchant [" + wsmodel.getMerchantid() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                    return wsmodel;
                }
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing CreateMerchantPrepaidCardWallet..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteMarkDisputedTransaction(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing MarkDisputedTransaction Request...");
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + WalletCMSWsEntity.class.getName() + " w where w.tranrefnumber= :TXN_REF_NO ";
            params = new HashMap<String, Object>();
            params.put("TXN_REF_NO", wsmodel.getOrigdataelement());

            WalletCMSWsEntity oldTxn = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params);

            if (oldTxn != null) {
                logger.info("Transaction found with reference no [" + wsmodel.getOrigdataelement() + "], setting dispute flag [" + wsmodel.getDisputeflag() + "]");
                oldTxn.setDisputeflag(wsmodel.getDisputeflag());
                GeneralDao.Instance.saveOrUpdate(oldTxn);
                wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                //m.rehman: 10-11-2021, Nayapay Optimization
                dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " w where w.tranrefnumber= :TXN_REF_NO ";
                params = new HashMap<String, Object>();
                params.put("TXN_REF_NO", wsmodel.getOrigdataelement());

                WalletCMSWsListingEntity oldTxnListing = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, params);

                if (oldTxnListing != null) {
                    logger.info("Original transaction listing found, updating status ...");
                    oldTxnListing.setDisputeflag(wsmodel.getDisputeflag());
                    GeneralDao.Instance.saveOrUpdate(oldTxnListing);
                } else {
                    logger.error("Original transaction listing not found ...");
                }
                //////////////////////////////////////////////////////////////////////////////////////

                return wsmodel;
            } else {
                logger.error("Transaction not found with reference no [" + wsmodel.getOrigdataelement() + "], rejecting ...");
                wsmodel.setRespcode(ISOResponseCodes.NP_TRAN_SRC_NOT_FOUND);
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing MarkDisputedTransaction..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecutesAdminPortalLockMerchantWallet(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing AdminPortalLockMerchantWallet Request...");
            String dbQuery, prevStatus;
            Map<String, Object> params;
            CMSAccount userwallet;
            CMSActivityLog cmsActivityLog;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getMerchantid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                userwallet = nprel.getAccount();
                if (wsmodel.getBlockedflag().equals("true")) {

                    if (!userwallet.getStatus().equals("00") || userwallet.getStatus().equals("02")) {
                        logger.error("Account is not active or already locked, not updating Status! rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //32 Invalid Customer Status ; Refer to Doc
                        //return wsmodel;
                    } else {
                        logger.info("Blocking Account ....");
                        prevStatus = userwallet.getStatus();
                        userwallet.setStatus("02");
                        userwallet.setLastUpdateDate(new Date());
                        GeneralDao.Instance.saveOrUpdate(userwallet);
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        logger.info("Saving wallet activity ....");
                        cmsActivityLog = new CMSActivityLog();
                        cmsActivityLog.setRelation(userwallet.getAccountNumber());
                        cmsActivityLog.setPreviousStatus(prevStatus);
                        cmsActivityLog.setCurrentStatus(userwallet.getStatus());
                        cmsActivityLog.setSourceType("API");
                        cmsActivityLog.setSourceName(wsmodel.getServicename());
                        cmsActivityLog.setActivityDateTime(DateTime.now());
                        GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                        //return wsmodel;
                    }

                } else if (wsmodel.getBlockedflag().equals("false")) {

                    if (userwallet.getStatus().equals("00") || !userwallet.getStatus().equals("02")) {
                        logger.error("Account not in lock state or Account is already unlocked, not updating Status! rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //67 Invalid Account status; Refer to Doc
                        //return wsmodel;
                    } else {
                        logger.info("Unblocking Account ....");
                        prevStatus = userwallet.getStatus();
                        userwallet.setStatus("00");
                        userwallet.setLastUpdateDate(new Date());
                        GeneralDao.Instance.saveOrUpdate(userwallet);
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        logger.info("Saving wallet activity ....");
                        cmsActivityLog = new CMSActivityLog();
                        cmsActivityLog.setRelation(userwallet.getAccountNumber());
                        cmsActivityLog.setPreviousStatus(prevStatus);
                        cmsActivityLog.setCurrentStatus(userwallet.getStatus());
                        cmsActivityLog.setSourceType("API");
                        cmsActivityLog.setSourceName(wsmodel.getServicename());
                        cmsActivityLog.setActivityDateTime(DateTime.now());
                        GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                        //return wsmodel;
                    }

                } else {
                    logger.error("Not a valid value for block flag, rejecting transaction ...");
                    wsmodel.setRespcode(ISOResponseCodes.MESSAGE_FORMAT_ERROR);  //59 - Host Rejected - refer to document
                    //return wsmodel;
                }

                //wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return wsmodel;

            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot enable/disable wallet. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing AdminPortalLockMerchantWallet..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteSupportPortalGetAdvanceInfo(WalletCMSWsEntity wsmodel) {
        logger.info("Executing SupportPortalGetAdvanceInfo Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID " + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET_VALUE);

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null) {// && userwallet.getStatus().equals("00")) {
                logger.info("Wallet found, verifying data...");
                WebServiceUtil.dobdFormat.setLenient(false);
                logger.info("wsmodel DateOfBirth [" + wsmodel.getDateofbirth() + "] DB DateOfBirth [" + WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth()) + "]");
                logger.info("wsmodel Cnic [" + wsmodel.getCnic() + "] DB Cnic [" + userwallet.getCustomer().getCnic() + "]");
                if ((!wsmodel.getDateofbirth().equals(WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth())))
                        || !wsmodel.getCnic().equals(userwallet.getCustomer().getCnic())) {
                    logger.error("Invalid Input Fields, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //02 for Invalid Account refer NayaPay Doc
                    return wsmodel;
                }

                //setting balance
                wsmodel.setAcctbalance(StringUtils.leftPad(userwallet.getAvailableBalance(), 12, "0"));

                //setting linked account list
                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID " + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getUserid());
                params.put("CAT", AccType.CAT_LINKED.StringValue());

                List<CMSAccount> linkedacctlist = GeneralDao.Instance.find(dbQuery, params);

                if (linkedacctlist != null && linkedacctlist.size() > 0) {
                    List<NayaPayAccount> acctlist = new ArrayList<NayaPayAccount>();
                    for (CMSAccount ac : linkedacctlist) {
                        NayaPayAccount npa = new NayaPayAccount();
                        //npa.setAccountid(ac.getAcctId());
                        npa.setAccountnumber(ac.getAccountNumber().substring((ac.getAccountNumber().length() - 6), ac.getAccountNumber().length()));
                        npa.setBankname(GlobalContext.getInstance().getAllBanks().get(Integer.parseInt(ac.getBranchId())).getName());
                        //npa.setLinkdate(WebServiceUtil.dateFormat.format(ac.getCreateDate()));
                        acctlist.add(npa);
                    }

                    wsmodel.setAccountlist(acctlist);

                } else {
                    logger.error("No Linked Account Found..");
                }

                //setting transactions list
                dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where " +
                        //" (c.userid= :USERID or c.destuserid= :USERID) ";
                        " ((c.userid= :USERID and c.servicename in ('LoadWallet','WalletTransaction','CashDeposit','ReverseEnvelop','ChequeFT','UnloadWallet','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','OnelinkTopupBillPayment','CNICBasedCashWithdrawal','IBFTIn')) " +
                        " or " +
                        " (c.destuserid= :USERID and c.servicename in ('WalletTransaction'))) ";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getUserid());
                //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(Change transdatetime to id)
                //Arsalan Akhter, Date: 10-Aug-2021, Ticket: VC-NAP-202108101-Transactions order issue in Listing Calls
                dbQuery += " order by c.transdatetime desc, c.id desc ";

                List<WalletCMSWsEntity> wsEntityList = GeneralDao.Instance.find(dbQuery, params, 1, 3);
                if (wsEntityList != null && wsEntityList.size() > 0) {
                    List<Transaction> transactionList = new ArrayList<Transaction>();
                    for (WalletCMSWsEntity wsEntity : wsEntityList) {
                        Transaction transaction = new Transaction();
                        transaction.setUsername(wsEntity.getDestusername());

                        //m.rehman: 26-02-2021, Euronet Integration
                        //transaction.setAmount(wsEntity.getAmounttransaction());
                        transaction.setAmount((Util.hasText(wsEntity.getCbillamount())) ? wsEntity.getCbillamount() : wsEntity.getAmounttransaction());
                        /////////////////////////////////////////////////////////////////////////////////////////

                        transaction.setTransdatetime(wsEntity.getTransdatetime());
                        transaction.setType(wsEntity.getServicename());
                        if (wsEntity.getSecurityparams() != null) {
                            transaction.setGpslatitude(wsEntity.getSecurityparams().getGpslatitude());
                            transaction.setGpslongitude(wsEntity.getSecurityparams().getGpslongitude());
                        }
                        transactionList.add(transaction);
                    }

                    if (transactionList != null && transactionList.size() > 0) {
                        wsmodel.setTransactions(transactionList);
                    }
                } else {
                    logger.error("No transactions found ...");
                }

                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return wsmodel;

            } else {
                logger.info("No Wallet Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }

        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing SupportPortalGetAdvanceInfo..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteSupportPortalLockWallet(WalletCMSWsEntity wsmodel) {
        logger.info("Executing SupportPortalLockWallet Request...");

        try {
            String dbQuery, prevStatus;
            Map<String, Object> params;
            CMSActivityLog cmsActivityLog;

            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID and c.category = :CAT";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET_VALUE);

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null) {
                logger.info("Wallet found, verifying data...");
                WebServiceUtil.dobdFormat.setLenient(false);
                logger.info("wsmodel DateOfBirth [" + wsmodel.getDateofbirth() + "] DB DateOfBirth [" + WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth()) + "]");
                logger.info("wsmodel Cnic [" + wsmodel.getCnic() + "] DB Cnic [" + userwallet.getCustomer().getCnic() + "]");
                if ((!wsmodel.getDateofbirth().equals(WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth())))
                        || !wsmodel.getCnic().equals(userwallet.getCustomer().getCnic())) {
                    logger.error("Invalid Input Fields, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //02 for Invalid Account refer NayaPay Doc
                    return wsmodel;

                    //if wallet is in block state, reject transaction
                }
                /*
                else if (userwallet.getStatus().equals("04") || userwallet.getStatus().equals("07")   //04 - Fraud Block, 07 - KYC Block
                        || userwallet.getStatus().equals("09") || userwallet.getStatus().equals("90")) {    //09 - AML Block, 90 - ADMIN Block
                    logger.error("Wallet is in Fraud/KYC/AML/ADMIN Block state, unable to update status, rejecting ...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION);
                    return wsmodel;
                }
                */
                else if (Util.hasText(userwallet.getStatus()) && !userwallet.getStatus().equals("00")) {
                    logger.error("Wallet is not active, unable to update status, rejecting ...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION);
                    return wsmodel;

                } else {
                    logger.info("Wallet found in active status, Locking wallet ...");
                    prevStatus = userwallet.getStatus();
                    userwallet.setStatus("02");     //02 - Temporary block from Support portal
                    GeneralDao.Instance.saveOrUpdate(userwallet);
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                    logger.info("Saving wallet activity ....");
                    cmsActivityLog = new CMSActivityLog();
                    cmsActivityLog.setRelation(userwallet.getAccountNumber());
                    cmsActivityLog.setPreviousStatus(prevStatus);
                    cmsActivityLog.setCurrentStatus(userwallet.getStatus());
                    cmsActivityLog.setSourceType("API");
                    cmsActivityLog.setSourceName(wsmodel.getServicename());
                    cmsActivityLog.setActivityDateTime(DateTime.now());
                    GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                    return wsmodel;
                }

            } else {
                logger.info("No Wallet Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }

        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing SupportPortalLockWallet..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteSupportPortalUpdateLockState(WalletCMSWsEntity wsmodel) {
        logger.info("Executing SupportPortalUpdateLockState Request...");

        try {
            String dbQuery, state, prevStatus;
            Map<String, Object> params;
            CMSActivityLog cmsActivityLog;

            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID and c.category = :CAT";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET_VALUE);

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null) {
                logger.info("Wallet found, verifying data...");
                if (userwallet.getStatus().equals("04") || userwallet.getStatus().equals("06") || userwallet.getStatus().equals("07")   //04 - Fraud Block, 06 - Awaiting ATM Bio, 07 - KYC Block
                        || userwallet.getStatus().equals("09") || userwallet.getStatus().equals("90")) {    //09 - AML Block, 90 - ADMIN Block
                    logger.error("Wallet is in Fraud/KYC/AML/ADMIN Block stateor in AWAITING_ATM_BIOMETRIC lock state, unable to update status, rejecting ...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION);
                    return wsmodel;

                } else {
                    logger.info("Updating Wallet Status ...");

                    state = "";
                    if (Util.hasText(wsmodel.getLockstate())) {
                        if (wsmodel.getLockstate().equals("AWAITING_APP_QUESTION") && userwallet.getStatus().equals("05")) {
                            logger.error("Already in [" + wsmodel.getLockstate() + "] state, rejecting ...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION);
                            return wsmodel;

                        } else if (wsmodel.getLockstate().equals("AWAITING_ATM_BIOMETRIC") && userwallet.getStatus().equals("06")) {
                            logger.error("Already in [" + wsmodel.getLockstate() + "] state, rejecting ...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION);
                            return wsmodel;

                        } else if (wsmodel.getLockstate().equals("AWAITING_APP_QUESTION")) {
                            state = "05";   //05 - awaiting app question
                        } else if (wsmodel.getLockstate().equals("AWAITING_ATM_BIOMETRIC")) {
                            state = "06";   //06 - awaiting atm biometric
                        } else {
                            logger.error("Invalid Lock State [" + wsmodel.getLockstate() + "], rejecting ...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION);
                            return wsmodel;
                        }
                    }
                    prevStatus = userwallet.getStatus();
                    userwallet.setStatus(state);
                    GeneralDao.Instance.saveOrUpdate(userwallet);
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                    logger.info("Saving wallet activity ....");
                    cmsActivityLog = new CMSActivityLog();
                    cmsActivityLog.setRelation(userwallet.getAccountNumber());
                    cmsActivityLog.setPreviousStatus(prevStatus);
                    cmsActivityLog.setCurrentStatus(userwallet.getStatus());
                    cmsActivityLog.setSourceType("API");
                    cmsActivityLog.setSourceName(wsmodel.getServicename());
                    cmsActivityLog.setActivityDateTime(DateTime.now());
                    GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                    return wsmodel;
                }

            } else {
                logger.info("No Wallet Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }

        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing SupportPortalUpdateLockState..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteSupportPortalGetWallet(WalletCMSWsEntity wsmodel) {
        logger.info("Executing SupportPortalGetWallet Request...");

        try {
            String dbQuery, state;
            Map<String, Object> params;
            List<CMSDebitRemainingLimit> cmsDebitRemainingLimits;
            List<CMSCreditRemainingLimit> cmsCreditRemainingLimits;
            List<NayaPayLimit> nayaPayLimitList;
            NayaPayLimit nl;

            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID and c.category = :CAT";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET_VALUE);

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null) {
                logger.info("Wallet found, verifying data...");
                WebServiceUtil.dobdFormat.setLenient(false);
                logger.info("wsmodel DateOfBirth [" + wsmodel.getDateofbirth() + "] DB DateOfBirth [" + WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth()) + "]");
                logger.info("wsmodel Cnic [" + wsmodel.getCnic() + "] DB Cnic [" + userwallet.getCustomer().getCnic() + "]");
                if ((!wsmodel.getDateofbirth().equals(WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth())))
                        || !wsmodel.getCnic().equals(userwallet.getCustomer().getCnic())) {
                    logger.error("Invalid Input Fields, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //02 for Invalid Account refer NayaPay Doc
                    return wsmodel;

                } else {
                    logger.info("Getting User Wallet...");
                    nayaPayLimitList = new ArrayList<NayaPayLimit>();
                    //m.rehman: 30-08-2021, VC-NAP-202108021 - Limit Structure update
                    //updating below query
                    dbQuery = "from " + CMSDebitRemainingLimit.class.getName() + " c where c.relation= :ACCTNUMBER and c.limitId.isActive='1' ";
                    params = new HashMap<String, Object>();
                    params.put("ACCTNUMBER", userwallet.getAccountNumber());
                    cmsDebitRemainingLimits = GeneralDao.Instance.find(dbQuery, params);

                    if (cmsDebitRemainingLimits != null && cmsDebitRemainingLimits.size() > 0) {
                        for (CMSDebitRemainingLimit al : cmsDebitRemainingLimits) {
                            if (al.getLimitId().getProductId().equals(userwallet.getProduct())) {
                                nl = new NayaPayLimit();
                                if (Util.hasText(al.getLimitId().getDescription())) {
                                    logger.info(al.getLimitId().getDescription());
                                    nl.setTransaction(al.getLimitId().getDescription());
                                } else {
                                    logger.info(al.getLimitId().getTransactionType().getServicename());
                                    nl.setTransaction(al.getLimitId().getTransactionType().getServicename());
                                }
                                nl.setAmount(al.getLimitId().getAmount());

                                // Asim, Logging to be removed
                                logger.info("Current cycle date : [" + al.getCycleEndDate() + "]");
                                logger.info("Checking for month : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6) + "]");
                                logger.info("Checking for year : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4) + "]");
                                logger.info("Checking for current date : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()) + "]");
                                // =================================

                                // Asim Shahzad, Date : 6th Oct 2020, Tracking ID : VC-NAP-202009231
                                CMSLimitCycleType cmsLimitCycleType = new CMSLimitCycleType(Integer.parseInt(al.getLimitId().getCycleLengthType()));

                                if (cmsLimitCycleType.equals(CMSLimitCycleType.DAILY)) {
                                    if (WebServiceUtil.limitcycleDateFormat.format(new Date()).equals(al.getCycleEndDate())) {
                                        nl.setAvaillimit(al.getRemainingAmount());
                                        nl.setAvaillimitfreq(al.getRemainingFrequency());

                                        logger.info("Executing Daily Limit flow...");
                                        logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                    } else {
                                        nl.setAvaillimit(al.getLimitId().getAmount());
                                        nl.setAvaillimitfreq(al.getLimitId().getFrequencyLength());

                                        logger.info("Executing Daily Limit flow...");
                                        logger.info("Current Debit Limit : [" + al.getId() + "]");
                                        logger.info("Debit Limit : [" + al.getLimitId().getId() + "]");
                                        logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                    }
                                }

                                if (cmsLimitCycleType.equals(CMSLimitCycleType.MONTHLY)) {
                                    if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6).equals(al.getCycleEndDate().substring(4, 6))) {
                                        nl.setAvaillimit(al.getRemainingAmount());
                                        nl.setAvaillimitfreq(al.getRemainingFrequency());

                                        logger.info("Executing Monthly Limit flow...");
                                        logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                    } else {
                                        nl.setAvaillimit(al.getLimitId().getAmount());
                                        nl.setAvaillimitfreq(al.getLimitId().getFrequencyLength());

                                        logger.info("Executing Monthly Limit flow...");
                                        logger.info("Current Debit Limit : [" + al.getId() + "]");
                                        logger.info("Debit Limit : [" + al.getLimitId().getId() + "]");
                                        logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                    }
                                }

                                if (cmsLimitCycleType.equals(CMSLimitCycleType.YEARLY)) {
                                    if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4).equals(al.getCycleEndDate().substring(2, 4))) {
                                        nl.setAvaillimit(al.getRemainingAmount());
                                        nl.setAvaillimitfreq(al.getRemainingFrequency());

                                        logger.info("Executing Yearly Limit flow...");
                                        logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                    } else {
                                        nl.setAvaillimit(al.getLimitId().getAmount());
                                        nl.setAvaillimitfreq(al.getLimitId().getFrequencyLength());

                                        logger.info("Executing Yearly Limit flow...");
                                        logger.info("Current Debit Limit : [" + al.getId() + "]");
                                        logger.info("Debit Limit : [" + al.getLimitId().getId() + "]");
                                        logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                    }
                                }
                                // ================================================================

                                nayaPayLimitList.add(nl);
                            }
                            /*
                            nl = new NayaPayLimit();
                            SwitchTransactionCodes switchTransactionCodes = GlobalContext.getInstance().getTransactionCodeDescbyCode(al.getLimitId().getTransactionType().getTxncode());
                            nl.setTransaction(switchTransactionCodes.getServicename());
                            nl.setAmount(al.getLimitId().getAmount());
                            nl.setAvaillimit(al.getRemainingAmount());
                            nl.setAvaillimitfreq(al.getRemainingFrequency());
                            nayaPayLimitList.add(nl);
                            */
                        }
                        //wsmodel.setNayapaylimits(nayaPayLimitList);
                    }

                    dbQuery = "from " + CMSCreditRemainingLimit.class.getName() + " c where c.relation= :ACCTNUMBER ";
                    params = new HashMap<String, Object>();
                    params.put("ACCTNUMBER", userwallet.getAccountNumber());
                    cmsCreditRemainingLimits = GeneralDao.Instance.find(dbQuery, params);

                    if (cmsCreditRemainingLimits != null && cmsCreditRemainingLimits.size() > 0) {
                        for (CMSCreditRemainingLimit a2 : cmsCreditRemainingLimits) {
                            if (a2.getLimitId().getProductId().equals(userwallet.getProduct())) {
                                nl = new NayaPayLimit();
                                if (Util.hasText(a2.getLimitId().getDescription())) {
                                    logger.info(a2.getLimitId().getDescription());
                                    nl.setTransaction(a2.getLimitId().getDescription());
                                } else {
                                    logger.info(a2.getLimitId().getTransactionType().getServicename());
                                    nl.setTransaction(a2.getLimitId().getTransactionType().getServicename());
                                }
                                nl.setAmount(a2.getLimitId().getAmount());

                                // Asim, Logging to be removed
                                logger.info("Current cycle date : [" + a2.getCycleEndDate() + "]");
                                logger.info("Checking for month : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6) + "]");
                                logger.info("Checking for year : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4) + "]");
                                logger.info("Checking for current date : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()) + "]");
                                // =================================

                                // Asim Shahzad, Date : 6th Oct 2020, Tracking ID : VC-NAP-202009231
                                CMSLimitCycleType cmsLimitCycleType = new CMSLimitCycleType(Integer.parseInt(a2.getLimitId().getCycleLengthType()));

                                if (cmsLimitCycleType.equals(CMSLimitCycleType.DAILY)) {
                                    if (WebServiceUtil.limitcycleDateFormat.format(new Date()).equals(a2.getCycleEndDate())) {
                                        nl.setAvaillimit(a2.getRemainingAmount());
                                        nl.setAvaillimitfreq(a2.getRemainingFrequency());

                                        logger.info("Executing Daily Limit flow...");
                                        logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                    } else {
                                        nl.setAvaillimit(a2.getLimitId().getAmount());
                                        nl.setAvaillimitfreq(a2.getLimitId().getFrequencyLength());

                                        logger.info("Executing Daily Limit flow...");
                                        logger.info("Current Debit Limit : [" + a2.getId() + "]");
                                        logger.info("Debit Limit : [" + a2.getLimitId().getId() + "]");
                                        logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                    }
                                }

                                if (cmsLimitCycleType.equals(CMSLimitCycleType.MONTHLY)) {
                                    if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6).equals(a2.getCycleEndDate().substring(4, 6))) {
                                        nl.setAvaillimit(a2.getRemainingAmount());
                                        nl.setAvaillimitfreq(a2.getRemainingFrequency());

                                        logger.info("Executing Monthly Limit flow...");
                                        logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                    } else {
                                        nl.setAvaillimit(a2.getLimitId().getAmount());
                                        nl.setAvaillimitfreq(a2.getLimitId().getFrequencyLength());

                                        logger.info("Executing Monthly Limit flow...");
                                        logger.info("Current Debit Limit : [" + a2.getId() + "]");
                                        logger.info("Debit Limit : [" + a2.getLimitId().getId() + "]");
                                        logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                    }
                                }

                                if (cmsLimitCycleType.equals(CMSLimitCycleType.YEARLY)) {
                                    if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4).equals(a2.getCycleEndDate().substring(2, 4))) {
                                        nl.setAvaillimit(a2.getRemainingAmount());
                                        nl.setAvaillimitfreq(a2.getRemainingFrequency());

                                        logger.info("Executing Yearly Limit flow...");
                                        logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                    } else {
                                        nl.setAvaillimit(a2.getLimitId().getAmount());
                                        nl.setAvaillimitfreq(a2.getLimitId().getFrequencyLength());

                                        logger.info("Executing Yearly Limit flow...");
                                        logger.info("Current Debit Limit : [" + a2.getId() + "]");
                                        logger.info("Debit Limit : [" + a2.getLimitId().getId() + "]");
                                        logger.info("Available Limit : [" + nl.getAvaillimit() + "]");
                                        logger.info("Available Frequency : [" + nl.getAvaillimitfreq() + "]");
                                    }
                                }
                                // ================================================================

                                nayaPayLimitList.add(nl);
                            }
                            /*
                            nl = new NayaPayLimit();
                            SwitchTransactionCodes switchTransactionCodes = GlobalContext.getInstance().getTransactionCodeDescbyCode(a2.getLimitId().getTransactionType().getTxncode());
                            nl.setTransaction(switchTransactionCodes.getServicename());
                            nl.setAmount(a2.getLimitId().getAmount());
                            nl.setAvaillimit(a2.getRemainingAmount());
                            nl.setAvaillimitfreq(a2.getRemainingFrequency());
                            nayaPayLimitList.add(nl);
                            */
                        }
                        //wsmodel.setNayapaylimits(nayaPayLimitList);
                    }
                    wsmodel.setNayapaylimits(nayaPayLimitList);

                    /*
                    if (nayaPayLimitList != null && nayaPayLimitList.size() > 0) {
                        wsmodel.setAcctbalance(userwallet.getAvailableBalance());
                        logger.info("Curr [" + userwallet.getCurrency() + "] State [" +  userwallet.getCategory() + "]");

                        Currency currency = GlobalContext.getInstance().getCurrency(Integer.parseInt(userwallet.getCurrency()));
                        if (currency != null) {
                            wsmodel.setAccountcurrency(currency.getName());
                        } else {
                            wsmodel.setAccountcurrency(GlobalContext.getInstance().getBaseCurrency().getName());
                        }
                        //wsmodel.setCurrency(GlobalContext.getInstance().getCurrency(Integer.parseInt(userwallet.getCurrency())).getName());

                        wsmodel.setState(userwallet.getCategory() + "_" + userwallet.getLevel());
                        //wsmodel.setAcctlevel(usernprel.getAccount().getLevel());
                        //wsmodel.setAcctStatus(userwallet.getStatus());
                        wsmodel.setStatus(userwallet.getStatus());
                        wsmodel.setAccountnumber(userwallet.getAccountNumber()); //Raza Setting Account Number for Response -- Middleware 2.0 PIN BLOCK required form Middleware
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    }
                    else
                    {
                        logger.error("No Wallet Limit record found, rejecting...");
                        //wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND);
                        //return wsmodel;
                    }
                    */

                    if (nayaPayLimitList == null || nayaPayLimitList.size() <= 0) {
                        logger.error("No Wallet Limit record found ...");
                    }

                    wsmodel.setAcctbalance(StringUtils.leftPad(userwallet.getAvailableBalance(), 12, "0"));
                    logger.info("Curr [" + userwallet.getCurrency() + "] State [" + userwallet.getCategory() + "]");

                    Currency currency = GlobalContext.getInstance().getCurrency(Integer.parseInt(userwallet.getCurrency()));
                    if (currency != null) {
                        wsmodel.setAccountcurrency(currency.getName());
                    } else {
                        wsmodel.setAccountcurrency(GlobalContext.getInstance().getBaseCurrency().getName());
                    }
                    //wsmodel.setCurrency(GlobalContext.getInstance().getCurrency(Integer.parseInt(userwallet.getCurrency())).getName());

                    wsmodel.setState(userwallet.getCategory() + "_" + userwallet.getLevel());
                    //wsmodel.setAcctlevel(usernprel.getAccount().getLevel());
                    //wsmodel.setAcctStatus(userwallet.getStatus());
                    wsmodel.setStatus(userwallet.getStatus());
                    wsmodel.setAccountnumber(userwallet.getAccountNumber()); //Raza Setting Account Number for Response -- Middleware 2.0 PIN BLOCK required form Middleware
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                    // Asim Shahzad, Date : 8th Jan 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071
//                    wsmodel.setAtlStatus(userwallet.getCustomer().getATLActive());
                    // ========================================================================================================

                    return wsmodel;
                }

            } else {
                logger.info("No Wallet Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }

        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing SupportPortalGetWallet..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteSupportPortalGetLinkedAccountList(WalletCMSWsEntity wsmodel) {
        logger.info("Executing SupportPortalGetLinkedAccountList Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID and c.category = :CAT";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET_VALUE);

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null) {// && userwallet.getStatus().equals("00")) {
                logger.info("Wallet found, verifying data...");
                WebServiceUtil.dobdFormat.setLenient(false);
                logger.info("wsmodel DateOfBirth [" + wsmodel.getDateofbirth() + "] DB DateOfBirth [" + WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth()) + "]");
                logger.info("wsmodel Cnic [" + wsmodel.getCnic() + "] DB Cnic [" + userwallet.getCustomer().getCnic() + "]");
                if ((!wsmodel.getDateofbirth().equals(WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth())))
                        || !wsmodel.getCnic().equals(userwallet.getCustomer().getCnic())) {
                    logger.error("Invalid Input Fields, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //02 for Invalid Account refer NayaPay Doc
                    return wsmodel;

                    //if wallet is in block state, reject transaction
                } else {
                    logger.info("Getting User Linked Accounts...");

                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID and c.category = :CAT";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getUserid());
                    params.put("CAT", AccType.CAT_LINKED_VALUE);
                    List<CMSAccount> accountList = GeneralDao.Instance.find(dbQuery, params);

                    if (accountList != null && accountList.size() > 0) {
                        List<NayaPayLinkedAccount> linkedAccounts = new ArrayList<NayaPayLinkedAccount>();

                        for (CMSAccount acct : accountList) {
                            if (acct.getCategory().equals(AccType.CAT_LINKED.StringValue())) {
                                NayaPayLinkedAccount npla = new NayaPayLinkedAccount();
                                npla.setAccountid(acct.getAcctId());
                                npla.setBankcode(GlobalContext.getInstance().getBankCodeByBin(acct.getBranchId()));
                                npla.setAccountnumber(acct.getAccountNumber().substring(acct.getAccountNumber().length() - 4, acct.getAccountNumber().length()));
                                npla.setAlias(acct.getAcctalias());

                                Currency currency = GlobalContext.getInstance().getCurrency(Integer.parseInt(acct.getCurrency()));
                                if (currency != null) {
                                    //wsmodel.setAccountcurrency(currency.getName());
                                    npla.setCurrency(currency.getName());
                                } else {
                                    //wsmodel.setAccountcurrency(GlobalContext.getInstance().getBaseCurrency().getName());
                                    npla.setCurrency(GlobalContext.getInstance().getBaseCurrency().getName());
                                }
                                //npla.setCurrency(GlobalContext.getInstance().getCurrency(Integer.parseInt(acct.getCurrency())).getName());

                                npla.setPrimary(acct.getIsprimary());

                                // Asim Shahzad, Date : 23rd Feb 2021, Tracking ID : VP-NAP-202102151 / VC-NAP-202102151
                                //npla.setState(acct.getCategory() + "_" + acct.getLevel());

                                if (Util.hasText(acct.getStatus()) && acct.getStatus().equals("00")) {
                                    npla.setState("LINKED");
                                }
                                if (Util.hasText(acct.getStatus()) && acct.getStatus().equals("DL")) {
                                    npla.setState("UNLINKED");
                                }
                                if (Util.hasText(acct.getStatus()) && (acct.getStatus().equals("OTP") || acct.getStatus().equals("ROTP"))) {
                                    npla.setState("WAITING_OTP");
                                }

                                // =====================================================================================

                                npla.setCreationtime(WebServiceUtil.dateFormat.format(acct.getCreateDate()));
                                linkedAccounts.add(npla);
                            }
                        }
                        wsmodel.setLinkedaccounts(linkedAccounts);
                    } else {
                        logger.error("No Linked Account found for User Id [" + wsmodel.getUserid() + "], rejecting...");
                        //wsmodel.setRespcode(ISOResponseCodes.NP_NO_LINKED_ACCOUNT); //NP_4001 - No linked account found -- refer to Document
                        //return wsmodel;
                    }

                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ". rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing SupportPortalGetLinkedAccountList..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteSupportPortalMarkDisputedTransaction(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing SupportPortalMarkDisputedTransaction Request...");
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID and c.category = :CAT";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET_VALUE);

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null) { // && userwallet.getStatus().equals("00")) {
                logger.info("Wallet found, verifying data...");

                // Asim Shahzad, Date : 20th Oct 2020, Tracking ID : VP-NAP-202010152 / VC-NAP-202010151
//                WebServiceUtil.dobdFormat.setLenient(false);
//                logger.info("wsmodel DateOfBirth [" + wsmodel.getDateofbirth() + "] DB DateOfBirth [" + WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth()) + "]");
//                logger.info("wsmodel Cnic [" + wsmodel.getCnic() + "] DB Cnic [" + userwallet.getCustomer().getCnic() + "]");
//                if ((!wsmodel.getDateofbirth().equals(WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth())))
//                        || !wsmodel.getCnic().equals(userwallet.getCustomer().getCnic())) {
//                    logger.error("Invalid Input Fields, rejecting...");
//                    wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //02 for Invalid Account refer NayaPay Doc
//                    return wsmodel;
//
//                    //if wallet is in block state, reject transaction
//                } else {

                dbQuery = "from " + WalletCMSWsEntity.class.getName() + " w where w.tranrefnumber= :TXN_REF_NO ";
                params = new HashMap<String, Object>();
                params.put("TXN_REF_NO", wsmodel.getOrigdataelement());

                WalletCMSWsEntity oldTxn = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params);

                if (oldTxn != null) {
                    logger.info("Transaction found with reference no [" + wsmodel.getOrigdataelement() + "], setting dispute flag [" + wsmodel.getDisputeflag() + "]");
                    oldTxn.setDisputeflag(wsmodel.getDisputeflag());
                    GeneralDao.Instance.saveOrUpdate(oldTxn);
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                    //m.rehman: 10-11-2021, Nayapay Optimization
                    dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " w where w.tranrefnumber= :TXN_REF_NO ";
                    params = new HashMap<String, Object>();
                    params.put("TXN_REF_NO", wsmodel.getOrigdataelement());

                    WalletCMSWsListingEntity oldTxnListing = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, params);

                    if (oldTxnListing != null) {
                        logger.info("Original transaction listing found, updating status ...");
                        oldTxnListing.setDisputeflag(wsmodel.getDisputeflag());
                        GeneralDao.Instance.saveOrUpdate(oldTxnListing);
                    } else {
                        logger.error("Original transaction listing not found ...");
                    }
                    //////////////////////////////////////////////////////////////////////////////////////

                    return wsmodel;

                } else {
                    logger.error("Transaction not found with reference no [" + wsmodel.getOrigdataelement() + "], rejecting ...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND);
                    return wsmodel;
                }
                //}
                // ===========================================================================================
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ". rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing MarkDisputedTransaction..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteSupportPortalGetUserTransactionList(WalletCMSWsEntity wsmodel) {
        logger.info("Executing SupportPortalGetUserTransactionList Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID and c.category = :CAT";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET_VALUE);

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null) { // && userwallet.getStatus().equals("00")) {

                logger.info("Wallet found, verifying data...");
                WebServiceUtil.dobdFormat.setLenient(false);
                logger.info("wsmodel DateOfBirth [" + wsmodel.getDateofbirth() + "] DB DateOfBirth [" + WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth()) + "]");
                logger.info("wsmodel Cnic [" + wsmodel.getCnic() + "] DB Cnic [" + userwallet.getCustomer().getCnic() + "]");
                if ((!wsmodel.getDateofbirth().equals(WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth())))
                        || !wsmodel.getCnic().equals(userwallet.getCustomer().getCnic())) {
                    logger.error("Invalid Input Fields, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //02 for Invalid Account refer NayaPay Doc
                    return wsmodel;

                    //if wallet is in block state, reject transaction
                }

                List<UserTransaction> usertxns = new ArrayList<UserTransaction>();
                //m.rehman: 10-11-2021 - Nayapay Optimization
                //List<MVFinancialLog> dbtranlist = null; // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                List<WalletCMSWsListingEntity> dbtranlist = null;

                if (Util.hasText(wsmodel.getFinancialflag()) && wsmodel.getFinancialflag().equals("true")) {

                    if (Util.hasText(wsmodel.getInoutfilter()) && wsmodel.getInoutfilter().equals("in")) {
                        logger.info("Getting User Transaction List from DB for Credit/in Transactions...");

                        /*
                        dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where " +
                                " (c.userid= :USERID " +
                                " or c.destuserid= :USERID) " +
                                " and c.tranrefnumber != :TXN_REF_NUM " +
                                " and c.servicename in ('LoadWallet','WalletTransaction','CashDeposit','ReverseEnvelop','ChequeFT') ";// +
                        //" and c.respcode = :RESPCODE ";
                        params = new HashMap<String, Object>();
                        params.put("USERID", wsmodel.getUserid());
                        params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                        //params.put("RESPCODE", "00");
                        */

                        //m.rehman: 30-09-2020, VP-NAP-202009241 - Original and Reversed transaction in transaction listing
                        /*
                        dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where " +
                                " (c.userid= :USERID and c.servicename in ('LoadWallet','CashDeposit','ReverseEnvelop','ChequeFT','OnelinkTopupBillPayment','IBFTIn','DisputeRefundTransaction')) " +
                                " or " +
                                " (c.destuserid= :USERID and c.servicename in ('WalletTransaction')) " +
                                " and c.tranrefnumber != :TXN_REF_NUM ";// +
                                //" and c.respcode = :RESPCODE ";
                        params = new HashMap<String, Object>();
                        params.put("USERID", wsmodel.getUserid());
                        params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                        //params.put("RESPCODE", "00");

                        if (Util.hasText(wsmodel.getTypefilter())) {
                            dbQuery += " and c.servicename = :TRNTYPE ";
                            params.put("TRNTYPE", wsmodel.getTypefilter());
                        }

                        if (Util.hasText(wsmodel.getSearchtext())) {
                            dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                    " or c.nayapayid like :SEARCH_TEXT " +
                                    " or c.destnayapayid like :SEARCH_TEXT " +
                                    " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                            params.put("SEARCH_TEXT", wsmodel.getSearchtext());
                        }
                        */

                        // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115

                        params = new HashMap<String, Object>();

                        if (wsmodel.getTypefilter() == null) {
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                    " (c.userid= :USERID and c.servicename in ('LoadWallet','CashDeposit','ReverseEnvelop','ChequeFT','OnelinkTopupBillPayment','IBFTIn')) " +
                                    " or " +
                                    //s.mehtab 18/11/2020 tracking id : Deployment 10-11-2020
                                    //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2 - adding OpenDebitCredit
                                    " (c.destuserid= :USERID and c.servicename in ('WalletTransaction','DisputeRefundTransaction','OpenDebitCredit')) " +
                                    " or " +
                                    //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(out orignalapi interchanged with in originalapi)
                                    " (c.userid= :USERID and c.originalapi in ('UnloadWallet','WalletTransaction','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','CNICBasedCashWithdrawal','IBFT','BalanceInquiry','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund')) " +
                                    //=============================================================================================================
                                    " or " +
                                    //s.mehtab 18/11/2020 tracking id : Deployment 10-11-2020
                                    " (c.destuserid= :USERID and c.originalapi in ('WalletTransaction','DisputeRefundTransaction')) ";
                        } else {
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                    " (c.userid= :USERID and c.servicename in (:TRNTYPE)) " +
                                    " or " +
                                    //s.mehtab 18/11/2020 tracking id : Deployment 10-11-2020
                                    " (c.destuserid= :USERID and c.servicename in (:TRNTYPE)) " +
                                    " or " +
                                    " (c.userid= :USERID and c.originalapi in (:TRNTYPE)) " +
                                    " or " +
                                    //s.mehtab 18/11/2020 tracking id : Deployment 10-11-2020
                                    " (c.destuserid= :USERID and c.originalapi in (:TRNTYPE)) ";

                            params.put("TRNTYPE", wsmodel.getTypefilter());
                        }

                        dbQuery += " and c.tranrefnumber != :TXN_REF_NUM ";// +
                        // =======================================================================================

                        //" and c.respcode = :RESPCODE ";

                        params.put("USERID", wsmodel.getUserid());
                        params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                        //params.put("RESPCODE", "00");

                        // Asim Shahzad, Date : 17th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115
//                        if (Util.hasText(wsmodel.getTypefilter())) {
//                            dbQuery += " and c.servicename = :TRNTYPE ";
//                            params.put("TRNTYPE", wsmodel.getTypefilter());
//                        }
//                        if (wsmodel.getTypefilter() != null) {
//                            dbQuery += " and c.servicename in (:TRNTYPE) ";
//                            params.put("TRNTYPE", wsmodel.getTypefilter());
//                        }
                        // ========================================================================================

                        if (Util.hasText(wsmodel.getSearchtext())) {
                            dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                    " or c.nayapayid like :SEARCH_TEXT " +
                                    " or c.destnayapayid like :SEARCH_TEXT " +
                                    " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                            params.put("SEARCH_TEXT", "%" + wsmodel.getSearchtext() + "%");
                        }
                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

                        //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(Change transdatetime to id)
                        //Arsalan Akhter, Date: 10-Aug-2021, Ticket: VC-NAP-202108101-Transactions order issue in Listing Calls
                        dbQuery += " order by c.transdatetime desc, c.id desc ";

                        String query = "select count(*) " + dbQuery;
                        Long size = (Long) GeneralDao.Instance.findObject(query, params);
                        wsmodel.setTotalcount(size + "");


                        logger.info("Page Count [" + wsmodel.getPagecount() + "] Page Size [" + wsmodel.getPagesize() + "]");
                        Integer pageCount = Integer.parseInt(wsmodel.getPagecount());
                        Integer pageSize = Integer.parseInt(wsmodel.getPagesize());
                        logger.info("Converted Page Count [" + pageCount + "] Converted Page Size [" + pageSize + "]");
                        Integer startPosition = (pageCount * pageSize) - pageSize;
                        logger.info("Start Position [" + startPosition + "]");
                        Query query1 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                        query1.setProperties(params);
                        query1.setFirstResult(startPosition);
                        query1.setMaxResults(pageSize);

                        dbtranlist = query1.list(); //GeneralDao.Instance.find(dbQuery, params);
                        usertxns = new ArrayList<UserTransaction>();

                        if (dbtranlist != null && dbtranlist.size() > 0) {
                            logger.info("Transaction records found in db for UserId as Src, processing...");
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //for (MVFinancialLog txn : dbtranlist) { // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            for (WalletCMSWsListingEntity txn : dbtranlist) {
                                try {
                                    logger.info("Service Name from DB [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "]");
                                    //if (!txn.getTranrefnumber().equals(wsmodel.getTranrefnumber())) { //&& txn.getRespcode().equals("00")) {
                                    UserTransaction utxn = new UserTransaction();
                                    utxn.setTransrefnum(txn.getTranrefnumber());

                                    //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    //utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                    //m.rehman: 08-10-2020, VP-NAP-202010081/ VC-NAP-202010081 - Deployment 08-10-2020
                                    //utxn.setNayapaytype(txn.getServicename());
                                    if (txn.getServicename().contains("Reversal")) {
                                        utxn.setNayapaytype(txn.getServicename());
                                    } else {
                                        utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                    }
                                    ////////////////////////////////////////////////////////////////////////////

                                    utxn.setAcctalias(txn.getAcctalias());

                                    // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    if (Util.hasText(txn.getUsername())) {
                                        utxn.setSrcname(txn.getUsername());
                                    } else {
                                        utxn.setSrcname(txn.getCustomername());
                                    }
                                    // =====================================================================================

                                    utxn.setSrcnayapayid(txn.getNayapayid());
                                    utxn.setDestname(txn.getDestusername());
                                    utxn.setDestnayapayid(txn.getDestnayapayid());
                                    utxn.setCurrency(txn.getCurrency());

                                    //m.rehman: 26-02-2021, Euronet Integration
                                    //utxn.setAmount(txn.getAmounttransaction());
                                    utxn.setAmount((Util.hasText(txn.getCbillamount())) ? txn.getCbillamount() : txn.getAmounttransaction());
                                    /////////////////////////////////////////////////////////////////////////////////////////

                                    utxn.setTransdatetime(txn.getTransdatetime());

                                    // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                    if (Util.hasText(txn.getBenebankcode())) {
                                        utxn.setBankcode(txn.getBenebankcode());
                                    } else {
                                        utxn.setBankcode(txn.getBankcode());
                                    }
                                    //==========================================================================

                                    // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                    if (Util.hasText(txn.getBenebankaccountno())) {
                                        // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                        //utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno().substring(txn.getBenebankaccountno().length()-4, txn.getBenebankaccountno().length()) : "");
                                        utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno() : "");
                                        // =====================================================================================
                                    } else {
                                        // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                        //utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber().substring(txn.getAccountnumber().length() - 4, txn.getAccountnumber().length()) : "");
                                        utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber() : "");
                                        // =====================================================================================
                                    }
                                    //==========================================================================

                                    utxn.setBranchname(txn.getBranchname());
                                    utxn.setSrcid(txn.getUserid());
                                    utxn.setDestid(txn.getDestuserid());
                                    utxn.setTerminalloc(txn.getTermloc());
                                    utxn.setMapid(txn.getMapid());
                                    utxn.setMerchantid(Util.hasText(txn.getMerchantid()) ? txn.getMerchantid() : txn.getBillerid());
                                    utxn.setMerchantname(Util.hasText(txn.getMerchantname()) ? txn.getMerchantname() : txn.getBillername());
                                    utxn.setDepositorname(txn.getCustomername());
                                    utxn.setBankcharge(txn.getNayapaycharges());

                                    // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    if (Util.hasText(txn.getSlipnumber())) {
                                        utxn.setDepositorslipnumber(txn.getSlipnumber());
                                    }
                                    //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                                    if (Util.hasText(txn.getCardlastdigits())) {
                                        utxn.setCardlastdigits(txn.getCardlastdigits());
                                    }
                                    //===============================================================================================================
                                    if (Util.hasText(txn.getCardscheme())) {
                                        utxn.setCardscheme(txn.getCardscheme());
                                    }
                                    if (Util.hasText(txn.getPosentrymode())) {
                                        utxn.setPosentrymode(txn.getPosentrymode());
                                    }
                                    if (Util.hasText(txn.getTerminalid())) {
                                        utxn.setTerminalid(txn.getTerminalid());
                                    }
                                    if (Util.hasText(txn.getCategoryid())) {
                                        utxn.setMerchantcategorycode(txn.getCategoryid());
                                    }
                                    utxn.setSrccharge(txn.getSrcchargeamount());
                                    utxn.setDestcharge(txn.getDestchargeamount());
                                    // =====================================================================================

                                    //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
                                    utxn.setTaxamount(txn.getNayapaytaxamount());
                                    utxn.setOriginalapi(txn.getOriginalapi());
                                    utxn.setOriginaldatetime(txn.getOrigtransdatetime());
                                    utxn.setOriginalrrn(txn.getOrigretrefno());
                                    utxn.setOriginalstan(txn.getOrigstan());
                                    utxn.setNpticket(txn.getNpticket());
                                    utxn.setVrolticket(txn.getVrolticket());
                                    utxn.setRefundtype(txn.getReserved());
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                    // Asim Shahzad, Date : 22nd Feb 2021, Tracking ID : VP-NAP-202102151 / VC-NAP-202102151
                                    utxn.setResponsecode(txn.getRespcode());
                                    // =====================================================================================

                                    // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103117 / VC-NAP-202103116

                                    //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                    //adding check for original channel of dispute transaction
                                    if (txn.getChannelid().equals(ChannelCodes.EURONET)
                                            || (Util.hasText(txn.getOrigChannelId()) && txn.getOrigChannelId().equals(ChannelCodes.EURONET))) {
                                        utxn.setAcquiringcurrency(Util.hasText(txn.getTrancurrency()) ? CustomerService.findCurrency(Integer.valueOf(txn.getTrancurrency())).getName() : "");
                                        utxn.setAcquiringamount(Util.hasText(txn.getAmounttransaction()) ? txn.getAmounttransaction() : "");
                                        utxn.setConversionrate(Util.hasText(txn.getSettlementrate()) ? txn.getSettlementrate() : "");

                                        //utxn.setInternationaltransactionflag(Util.hasText(txn.getIsInternationalTxnsEnabled()) ? Boolean.valueOf(txn.getIsInternationalTxnsEnabled()) : false);
                                        boolean intlFlag = false;
                                        if (Util.hasText(txn.getBranchcode()) &&
                                                (txn.getBranchcode().equals("PSI") || txn.getBranchcode().equals("ESI") || txn.getBranchcode().equals("ATM"))) {
                                            intlFlag = true;
                                        }
                                        utxn.setInternationaltransactionflag(intlFlag);

                                        //utxn.setTotalamount((Util.hasText(tran.getCbillamount()) && Util.hasText(tran.getSrcchargeamount())) ? String.valueOf(Long.parseLong(tran.getCbillamount()) + Long.parseLong(tran.getSrcchargeamount())) : "");
                                        Long totalAmount = (Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : 0L;
                                        if (Util.hasText(txn.getSrcchargeamount())) {
                                            totalAmount = totalAmount + Long.parseLong(txn.getSrcchargeamount());
                                        }
                                        if (Util.hasText(txn.getWithholdingtaxamount())) {
                                            totalAmount = totalAmount + Long.parseLong(txn.getWithholdingtaxamount());
                                        }
                                        //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                        //converting to ISO format
                                        utxn.setTotalamount(StringUtils.leftPad(totalAmount.toString(), 12, "0"));

                                        utxn.setBaseamountafterconversion(Util.hasText(txn.getCbillamount()) ? txn.getCbillamount() : "");

                                        //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                        //converting to ISO format
                                        utxn.setForeigntransactionfee((Util.hasText(txn.getSrcchargeamount()) && Util.hasText(txn.getNayapaytaxamount())) ? StringUtils.leftPad(String.valueOf(Long.parseLong(txn.getSrcchargeamount()) - Long.parseLong(txn.getNayapaytaxamount())), 12, "0") : "");

                                        utxn.setTaxappliedonforeigntransactionfee(Util.hasText(txn.getNayapaytaxamount()) ? txn.getNayapaytaxamount() : "");
                                        utxn.setWithholdingtax(Util.hasText(txn.getWithholdingtaxamount()) ? txn.getWithholdingtaxamount() : "");
                                    }

                                    // =======================================================================================

                                    //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                                    utxn.setJustification(txn.getJustification());
                                    /////////////////////////////////////////////////////////////////////////////////////////////////////

                                    // Asim Shahzad, Date : 29th June 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                                    if (Util.hasText(txn.getIban())) {
                                        utxn.setIban(txn.getIban());
                                    }
                                    // ======================================================================================

                                    // Asim Shahzad, Date : 1st Sep 2021, Tracking ID : VC-NAP-202108271
                                    if (Util.hasText(txn.getAmountFCY())) {
                                        utxn.setAmountFCY(txn.getAmountFCY());
                                    }

                                    if (Util.hasText(txn.getCurrencyFCY())) {
                                        utxn.setCurrencyFCY(txn.getCurrencyFCY());
                                    }

                                    if (Util.hasText(txn.getExchangeRate())) {
                                        utxn.setExchangeRate(txn.getExchangeRate());
                                    }
                                    // =================================================================

                                    usertxns.add(utxn);
                                } catch (Exception e) {
                                    logger.error(e);//s.mehtab on 25-11-2020
                                    logger.error("Unable to Add Txn [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "] to List Reason [" + e.getMessage() + "]");
                                }
                            }
                        } else {
                            logger.error("No Transaction found in DB for Src UserId [" + wsmodel.getUserid() + "]");
                        }

                    } else if (Util.hasText(wsmodel.getInoutfilter()) && wsmodel.getInoutfilter().equals("out")) {
                        logger.info("Getting User Transaction List from DB for Debit/out Transactions...");

                        //m.rehman: 30-09-2020, VP-NAP-202009241 - Original and Reversed transaction in transaction listing
                        /*
                        dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where " +
                                " c.userid= :USERID " +
                                " and c.tranrefnumber != :TXN_REF_NUM " +
                                " and c.servicename in ('UnloadWallet','WalletTransaction','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','CNICBasedCashWithdrawal','IBFT') ";// +
                        //" and c.respcode = :RESPCODE ";
                        params = new HashMap<String, Object>();
                        params.put("USERID", wsmodel.getUserid());
                        params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                        //params.put("RESPCODE", "00");


                        if (Util.hasText(wsmodel.getTypefilter())) {
                            dbQuery += " and c.servicename = :TRNTYPE ";
                            params.put("TRNTYPE", wsmodel.getTypefilter());
                        }

                        if (Util.hasText(wsmodel.getSearchtext())) {
                            dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                    " or c.nayapayid like :SEARCH_TEXT " +
                                    " or c.destnayapayid like :SEARCH_TEXT " +
                                    " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                            params.put("SEARCH_TEXT", wsmodel.getSearchtext());
                        }
                        */

                        // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115

                        params = new HashMap<String, Object>();

                        if (wsmodel.getTypefilter() == null) {
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                    " c.userid= :USERID " +
                                    " and c.tranrefnumber != :TXN_REF_NUM " +
                                    " and " +
                                    //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2 - adding OpenDebitCredit
                                    //m.rehman: 07-05-2021, VG-NAP-202104271 / VP-NAP-202104261 / VC-NAP-202104261==>[ Efforts updated ]==> VISA transaction charging update - adding WithHoldingTax, 'ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund'
                                    //m.rehman: 26-07-2021, VC-NAP-202107261 - Reverse transaction when 0120 message received from Visa
                                    //adding STIP
                                    " (c.servicename in ('UnloadWallet','WalletTransaction','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','CNICBasedCashWithdrawal','IBFT','BalanceInquiry','OpenDebitCredit','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund','STIP') " +
                                    //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(out orignalapi interchanged with in originalapi)
                                    //  " or c.originalapi in ('UnloadWallet','WalletTransaction','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','CNICBasedCashWithdrawal','IBFT','BalanceInquiry','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund')) " +
                                    " or c.originalapi in ('LoadWallet','CashDeposit','ReverseEnvelop','ChequeFT','OnelinkTopupBillPayment','IBFTIn')) "; // +
                            //=======================================================================================
                        } else {
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                    " c.userid= :USERID " +
                                    " and c.tranrefnumber != :TXN_REF_NUM " +
                                    " and " +
                                    " (c.servicename in (:TRNTYPE) " +
                                    " or c.originalapi in (:TRNTYPE))";// +

                            params.put("TRNTYPE", wsmodel.getTypefilter());
                        }
                        // =======================================================================================
                        //" and c.respcode = :RESPCODE ";

                        params.put("USERID", wsmodel.getUserid());
                        params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                        //params.put("RESPCODE", "00");

                        // Asim Shahzad, Date : 17th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115
//                        if (Util.hasText(wsmodel.getTypefilter())) {
//                            dbQuery += " and c.servicename = :TRNTYPE ";
//                            params.put("TRNTYPE", wsmodel.getTypefilter());
//                        }
//                        if (wsmodel.getTypefilter() != null) {
//                            dbQuery += " and c.servicename in (:TRNTYPE) ";
//                            params.put("TRNTYPE", wsmodel.getTypefilter());
//                        }
                        // =======================================================================================

                        if (Util.hasText(wsmodel.getSearchtext())) {
                            dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                    " or c.nayapayid like :SEARCH_TEXT " +
                                    " or c.destnayapayid like :SEARCH_TEXT " +
                                    " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                            params.put("SEARCH_TEXT", "%" + wsmodel.getSearchtext() + "%");
                        }
                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

                        //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(Change transdatetime to id)
                        //Arsalan Akhter, Date: 10-Aug-2021, Ticket: VC-NAP-202108101-Transactions order issue in Listing Calls
                        dbQuery += " order by c.transdatetime desc, c.id desc ";

                        String query = "select count(*) " + dbQuery;
                        Long size = (Long) GeneralDao.Instance.findObject(query, params);
                        wsmodel.setTotalcount(size + "");


                        logger.info("Page Count [" + wsmodel.getPagecount() + "] Page Size [" + wsmodel.getPagesize() + "]");
                        Integer pageCount = Integer.parseInt(wsmodel.getPagecount());
                        Integer pageSize = Integer.parseInt(wsmodel.getPagesize());
                        logger.info("Converted Page Count [" + pageCount + "] Converted Page Size [" + pageSize + "]");
                        Integer startPosition = (pageCount * pageSize) - pageSize;
                        logger.info("Start Position [" + startPosition + "]");
                        Query query1 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                        query1.setProperties(params);
                        query1.setFirstResult(startPosition);
                        query1.setMaxResults(pageSize);

                        dbtranlist = query1.list(); //GeneralDao.Instance.find(dbQuery, params);
                        usertxns = new ArrayList<UserTransaction>();

                        if (dbtranlist != null && dbtranlist.size() > 0) {
                            logger.info("Transaction records found in db for UserId as Src and Dest, processing...");
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //for (MVFinancialLog txn : dbtranlist) { // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            for (WalletCMSWsListingEntity txn : dbtranlist) {
                                try {
                                    logger.info("Service Name from DB [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "]");
                                    UserTransaction utxn = new UserTransaction();
                                    utxn.setTransrefnum(txn.getTranrefnumber());

                                    //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    //utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                    //m.rehman: 08-10-2020, VP-NAP-202010081/ VC-NAP-202010081 - Deployment 08-10-2020
                                    //utxn.setNayapaytype(txn.getServicename());
                                    if (txn.getServicename().contains("Reversal")) {
                                        utxn.setNayapaytype(txn.getServicename());
                                    } else {
                                        utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                    }
                                    ////////////////////////////////////////////////////////////////////////////

                                    utxn.setAcctalias(txn.getAcctalias());

                                    // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    if (Util.hasText(txn.getUsername())) {
                                        utxn.setSrcname(txn.getUsername());
                                    } else {
                                        utxn.setSrcname(txn.getCustomername());
                                    }
                                    // =====================================================================================

                                    utxn.setSrcnayapayid(txn.getNayapayid());
                                    utxn.setDestname(txn.getDestusername());
                                    utxn.setDestnayapayid(txn.getDestnayapayid());
                                    utxn.setCurrency(txn.getCurrency());

                                    //m.rehman: 26-02-2021, Euronet Integration
                                    //utxn.setAmount(txn.getAmounttransaction());
                                    utxn.setAmount((Util.hasText(txn.getCbillamount())) ? txn.getCbillamount() : txn.getAmounttransaction());
                                    /////////////////////////////////////////////////////////////////////////////////////////

                                    utxn.setTransdatetime(txn.getTransdatetime());

                                    // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                    if (Util.hasText(txn.getBenebankcode())) {
                                        utxn.setBankcode(txn.getBenebankcode());
                                    } else {
                                        utxn.setBankcode(txn.getBankcode());
                                    }
                                    //==========================================================================

                                    // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                    if (Util.hasText(txn.getBenebankaccountno())) {
                                        // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                        //utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno().substring(txn.getBenebankaccountno().length()-4, txn.getBenebankaccountno().length()) : "");
                                        utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno() : "");
                                        // =====================================================================================
                                    } else {
                                        // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                        //utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber().substring(txn.getAccountnumber().length() - 4, txn.getAccountnumber().length()) : "");
                                        utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber() : "");
                                        // =====================================================================================
                                    }
                                    //==========================================================================

                                    utxn.setBranchname(txn.getBranchname());
                                    utxn.setSrcid(txn.getUserid());
                                    utxn.setDestid(txn.getDestuserid());
                                    utxn.setTerminalloc(txn.getTermloc());
                                    utxn.setMapid(txn.getMapid());
                                    utxn.setMerchantid(Util.hasText(txn.getMerchantid()) ? txn.getMerchantid() : txn.getBillerid());
                                    utxn.setMerchantname(Util.hasText(txn.getMerchantname()) ? txn.getMerchantname() : txn.getBillername());
                                    utxn.setDepositorname(txn.getCustomername());
                                    utxn.setBankcharge(txn.getNayapaycharges());

                                    // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    if (Util.hasText(txn.getSlipnumber())) {
                                        utxn.setDepositorslipnumber(txn.getSlipnumber());
                                    }
                                    //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                                    if (Util.hasText(txn.getCardlastdigits())) {
                                        utxn.setCardlastdigits(txn.getCardlastdigits());
                                    }
                                    //===============================================================================================================
                                    if (Util.hasText(txn.getCardscheme())) {
                                        utxn.setCardscheme(txn.getCardscheme());
                                    }
                                    if (Util.hasText(txn.getPosentrymode())) {
                                        utxn.setPosentrymode(txn.getPosentrymode());
                                    }
                                    if (Util.hasText(txn.getTerminalid())) {
                                        utxn.setTerminalid(txn.getTerminalid());
                                    }
                                    if (Util.hasText(txn.getCategoryid())) {
                                        utxn.setMerchantcategorycode(txn.getCategoryid());
                                    }
                                    utxn.setSrccharge(txn.getSrcchargeamount());
                                    utxn.setDestcharge(txn.getDestchargeamount());
                                    // =====================================================================================

                                    //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
                                    utxn.setTaxamount(txn.getNayapaytaxamount());
                                    utxn.setOriginalapi(txn.getOriginalapi());
                                    utxn.setOriginaldatetime(txn.getOrigtransdatetime());
                                    utxn.setOriginalrrn(txn.getOrigretrefno());
                                    utxn.setOriginalstan(txn.getOrigstan());
                                    utxn.setNpticket(txn.getNpticket());
                                    utxn.setVrolticket(txn.getVrolticket());
                                    utxn.setRefundtype(txn.getReserved());
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                    // Asim Shahzad, Date : 22nd Feb 2021, Tracking ID : VP-NAP-202102151 / VC-NAP-202102151
                                    utxn.setResponsecode(txn.getRespcode());
                                    // =====================================================================================

                                    // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103117 / VC-NAP-202103116

                                    //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                    //adding check for original channel of dispute transaction
                                    if (txn.getChannelid().equals(ChannelCodes.EURONET)
                                            || (Util.hasText(txn.getOrigChannelId()) && txn.getOrigChannelId().equals(ChannelCodes.EURONET))) {
                                        utxn.setAcquiringcurrency(Util.hasText(txn.getTrancurrency()) ? CustomerService.findCurrency(Integer.valueOf(txn.getTrancurrency())).getName() : "");
                                        utxn.setAcquiringamount(Util.hasText(txn.getAmounttransaction()) ? txn.getAmounttransaction() : "");
                                        utxn.setConversionrate(Util.hasText(txn.getSettlementrate()) ? txn.getSettlementrate() : "");

                                        //utxn.setInternationaltransactionflag(Util.hasText(txn.getIsInternationalTxnsEnabled()) ? Boolean.valueOf(txn.getIsInternationalTxnsEnabled()) : false);
                                        boolean intlFlag = false;
                                        if (Util.hasText(txn.getBranchcode()) &&
                                                (txn.getBranchcode().equals("PSI") || txn.getBranchcode().equals("ESI") || txn.getBranchcode().equals("ATM"))) {
                                            intlFlag = true;
                                        }
                                        utxn.setInternationaltransactionflag(intlFlag);

                                        //utxn.setTotalamount((Util.hasText(tran.getCbillamount()) && Util.hasText(tran.getSrcchargeamount())) ? String.valueOf(Long.parseLong(tran.getCbillamount()) + Long.parseLong(tran.getSrcchargeamount())) : "");
                                        Long totalAmount = (Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : 0L;
                                        if (Util.hasText(txn.getSrcchargeamount())) {
                                            totalAmount = totalAmount + Long.parseLong(txn.getSrcchargeamount());
                                        }
                                        if (Util.hasText(txn.getWithholdingtaxamount())) {
                                            totalAmount = totalAmount + Long.parseLong(txn.getWithholdingtaxamount());
                                        }
                                        //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                        //converting to ISO format
                                        utxn.setTotalamount(StringUtils.leftPad(totalAmount.toString(), 12, "0"));

                                        utxn.setBaseamountafterconversion(Util.hasText(txn.getCbillamount()) ? txn.getCbillamount() : "");

                                        //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                        //converting to ISO format
                                        utxn.setForeigntransactionfee((Util.hasText(txn.getSrcchargeamount()) && Util.hasText(txn.getNayapaytaxamount())) ? StringUtils.leftPad(String.valueOf(Long.parseLong(txn.getSrcchargeamount()) - Long.parseLong(txn.getNayapaytaxamount())), 12, "0") : "");

                                        utxn.setTaxappliedonforeigntransactionfee(Util.hasText(txn.getNayapaytaxamount()) ? txn.getNayapaytaxamount() : "");
                                        utxn.setWithholdingtax(Util.hasText(txn.getWithholdingtaxamount()) ? txn.getWithholdingtaxamount() : "");
                                    }

                                    // =======================================================================================

                                    //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                                    utxn.setJustification(txn.getJustification());
                                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                    // Asim Shahzad, Date : 25th May 2021, Tracking ID : VP-NAP-202105212 / VC-NAP-202105211

                                    if (txn.getServicename().equals("WithHoldingTax")) {
                                        utxn.setAmount(txn.getAmounttransaction());
                                        utxn.setOriginaltxnamount(Util.hasText(txn.getCbillamount()) ? txn.getCbillamount() : "");

                                        Long amtTran = Long.parseLong(txn.getAmounttransaction());
                                        Long cBillAmt = Long.parseLong(utxn.getOriginaltxnamount());
                                        double withHoldingTaxPercentage = Math.round((double) amtTran / (double) cBillAmt * 100);

                                        utxn.setWithholdingtaxpercentage(String.valueOf(withHoldingTaxPercentage));
                                    }

                                    // =====================================================================================

                                    // Asim Shahzad, Date : 29th June 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                                    if (Util.hasText(txn.getIban())) {
                                        utxn.setIban(txn.getIban());
                                    }
                                    // ======================================================================================

                                    // Asim Shahzad, Date : 1st Sep 2021, Tracking ID : VC-NAP-202108271
                                    if (Util.hasText(txn.getAmountFCY())) {
                                        utxn.setAmountFCY(txn.getAmountFCY());
                                    }

                                    if (Util.hasText(txn.getCurrencyFCY())) {
                                        utxn.setCurrencyFCY(txn.getCurrencyFCY());
                                    }

                                    if (Util.hasText(txn.getExchangeRate())) {
                                        utxn.setExchangeRate(txn.getExchangeRate());
                                    }
                                    // =================================================================

                                    usertxns.add(utxn);
                                } catch (Exception e) {
                                    logger.error(e);//s.mehtab on 25-11-2020
                                    logger.error("Unable to Add Txn [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "] to List Reason [" + e.getMessage() + "]");
                                }
                            }
                        } else {
                            logger.error("No Transaction found in DB for Src UserId [" + wsmodel.getUserid() + "]");
                        }
                    } else {
                        logger.info("Getting User Transaction List from DB for Credit/Debit in/out Transactions...");

                        /*
                        dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where " +
                                " (c.userid= :USERID " +
                                " or c.destuserid= :USERID) " +
                                " and c.tranrefnumber != :TXN_REF_NUM " +
                                " and c.servicename in ('LoadWallet','CashDeposit','ReverseEnvelop','ChequeFT','UnloadWallet','WalletTransaction','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest') ";// +
                        //" and c.respcode = :RESPCODE ";
                        */

                        //m.rehman: 30-09-2020, VP-NAP-202009241 - Original and Reversed transaction in transaction listing
                        /*
                        dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where " +
                                //" c.userid= :USERID " +
                                " (c.userid= :USERID and c.servicename in ('LoadWallet','WalletTransaction','CashDeposit','ReverseEnvelop','ChequeFT','UnloadWallet','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','OnelinkTopupBillPayment','CNICBasedCashWithdrawal','IBFTIn','IBFT','DisputeRefundTransaction')) " +
                                " or " +
                                " (c.destuserid= :USERID and c.servicename in ('WalletTransaction')) " +
                                " and c.tranrefnumber != :TXN_REF_NUM ";
                        //" and c.respcode = :RESPCODE ";

                        params = new HashMap<String, Object>();
                        params.put("USERID", wsmodel.getUserid());
                        params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                        //params.put("RESPCODE", "00");

                        if (Util.hasText(wsmodel.getTypefilter())) {
                            dbQuery += " and c.servicename = :TRNTYPE ";
                            params.put("TRNTYPE", wsmodel.getTypefilter());
                        }

                        if (Util.hasText(wsmodel.getSearchtext())) {
                            dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                    " or c.nayapayid like :SEARCH_TEXT " +
                                    " or c.destnayapayid like :SEARCH_TEXT " +
                                    " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                            params.put("SEARCH_TEXT", wsmodel.getSearchtext());
                        }
                        */

                        // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115

                        params = new HashMap<String, Object>();

                        if (wsmodel.getTypefilter() == null) {
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                    //" c.userid= :USERID " +
                                    //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2 - adding OpenDebitCredit
                                    //m.rehman: 07-05-2021, VG-NAP-202104271 / VP-NAP-202104261 / VC-NAP-202104261==>[ Efforts updated ]==> VISA transaction charging update - adding WithHoldingTax,'ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund'
                                    //m.rehman: 26-07-2021, VC-NAP-202107261 - Reverse transaction when 0120 message received from Visa
                                    //adding STIP
                                    " (c.userid= :USERID and c.servicename in ('LoadWallet','WalletTransaction','CashDeposit','ReverseEnvelop','ChequeFT','UnloadWallet','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','OnelinkTopupBillPayment','CNICBasedCashWithdrawal','IBFTIn','IBFT','BalanceInquiry','OpenDebitCredit','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund','STIP')) " +
                                    " or " +
                                    //s.mehtab 18/11/2020 tracking id : Deployment 10-11-2020
                                    //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2 - adding OpenDebitCredit
                                    " (c.destuserid= :USERID and c.servicename in ('WalletTransaction','DisputeRefundTransaction','OpenDebitCredit')) " +
                                    " or " +
                                    //m.rehman: 26-07-2021, VC-NAP-202107261 - Reverse transaction when 0120 message received from Visa
                                    //adding STIP
                                    " (c.userid= :USERID and c.originalapi in ('LoadWallet','WalletTransaction','CashDeposit','ReverseEnvelop','ChequeFT','UnloadWallet','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload','DebitCardRequest','OnelinkTopupBillPayment','CNICBasedCashWithdrawal','IBFTIn','IBFT','BalanceInquiry','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund','STIP')) " +
                                    " or " +
                                    //s.mehtab 18/11/2020 tracking id : Deployment 10-11-2020
                                    " (c.destuserid= :USERID and c.originalapi in ('WalletTransaction','DisputeRefundTransaction')) ";
                        } else {
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                    //" c.userid= :USERID " +
                                    " (c.userid= :USERID and c.servicename in (:TRNTYPE)) " +
                                    " or " +
                                    //s.mehtab 18/11/2020 tracking id : Deployment 10-11-2020
                                    " (c.destuserid= :USERID and c.servicename in (:TRNTYPE)) " +
                                    " or " +
                                    " (c.userid= :USERID and c.originalapi in (:TRNTYPE)) " +
                                    " or " +
                                    //s.mehtab 18/11/2020 tracking id : Deployment 10-11-2020
                                    " (c.destuserid= :USERID and c.originalapi in (:TRNTYPE)) ";

                            params.put("TRNTYPE", wsmodel.getTypefilter());
                        }

                        dbQuery += " and c.tranrefnumber != :TXN_REF_NUM ";
                        // =======================================================================================
                        //" and c.respcode = :RESPCODE ";

                        params.put("USERID", wsmodel.getUserid());
                        params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                        //params.put("RESPCODE", "00");

                        // Asim Shahzad, Date : 17th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115
//                        if (Util.hasText(wsmodel.getTypefilter())) {
//                            dbQuery += " and c.servicename = :TRNTYPE ";
//                            params.put("TRNTYPE", wsmodel.getTypefilter());
//                        }
//                        if (wsmodel.getTypefilter() != null) {
//                            dbQuery += " and c.servicename in (:TRNTYPE) ";
//                            params.put("TRNTYPE", wsmodel.getTypefilter());
//                        }
                        // =======================================================================================

                        if (Util.hasText(wsmodel.getSearchtext())) {
                            dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                    " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                    " or c.nayapayid like :SEARCH_TEXT " +
                                    " or c.destnayapayid like :SEARCH_TEXT " +
                                    " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                            params.put("SEARCH_TEXT", "%" + wsmodel.getSearchtext() + "%");
                        }
                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                        //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(Change transdatetime to id)
                        //Arsalan Akhter, Date: 10-Aug-2021, Ticket: VC-NAP-202108101-Transactions order issue in Listing Calls
                        dbQuery += " order by c.transdatetime desc, c.id desc ";

                        String query = "select count(*) " + dbQuery;
                        Long size = (Long) GeneralDao.Instance.findObject(query, params);
                        wsmodel.setTotalcount(size + "");

                        logger.info("Page Count [" + wsmodel.getPagecount() + "] Page Size [" + wsmodel.getPagesize() + "]");
                        Integer pageCount = Integer.parseInt(wsmodel.getPagecount());
                        Integer pageSize = Integer.parseInt(wsmodel.getPagesize());
                        logger.info("Converted Page Count [" + pageCount + "] Converted Page Size [" + pageSize + "]");
                        Integer startPosition = (pageCount * pageSize) - pageSize;
                        logger.info("Start Position [" + startPosition + "]");
                        Query query1 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                        query1.setProperties(params);
                        query1.setFirstResult(startPosition);
                        query1.setMaxResults(pageSize);

                        dbtranlist = query1.list(); //GeneralDao.Instance.find(dbQuery, params);
                        usertxns = new ArrayList<UserTransaction>();

                        if (dbtranlist != null && dbtranlist.size() > 0) {
                            logger.info("Transaction records found in db for UserId as Src and Dest, processing...");
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //for (MVFinancialLog txn : dbtranlist) { // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            for (WalletCMSWsListingEntity txn : dbtranlist) {
                                try {
                                    logger.info("Service Name from DB [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "]");
                                    UserTransaction utxn = new UserTransaction();
                                    utxn.setTransrefnum(txn.getTranrefnumber());

                                    //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    //utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                    //m.rehman: 08-10-2020, VP-NAP-202010081/ VC-NAP-202010081 - Deployment 08-10-2020
                                    //utxn.setNayapaytype(txn.getServicename());
                                    if (txn.getServicename().contains("Reversal")) {
                                        utxn.setNayapaytype(txn.getServicename());
                                    } else {
                                        utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                    }
                                    ////////////////////////////////////////////////////////////////////////////

                                    utxn.setAcctalias(txn.getAcctalias());

                                    // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    if (Util.hasText(txn.getUsername())) {
                                        utxn.setSrcname(txn.getUsername());
                                    } else {
                                        utxn.setSrcname(txn.getCustomername());
                                    }
                                    // =====================================================================================

                                    utxn.setSrcnayapayid(txn.getNayapayid());
                                    utxn.setDestname(txn.getDestusername());
                                    utxn.setDestnayapayid(txn.getDestnayapayid());
                                    utxn.setCurrency(txn.getCurrency());

                                    //m.rehman: 26-02-2021, Euronet Integration
                                    //utxn.setAmount(txn.getAmounttransaction());
                                    utxn.setAmount((Util.hasText(txn.getCbillamount())) ? txn.getCbillamount() : txn.getAmounttransaction());
                                    /////////////////////////////////////////////////////////////////////////////////////////

                                    utxn.setTransdatetime(txn.getTransdatetime());

                                    // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                    if (Util.hasText(txn.getBenebankcode())) {
                                        utxn.setBankcode(txn.getBenebankcode());
                                    } else {
                                        utxn.setBankcode(txn.getBankcode());
                                    }
                                    //==========================================================================

                                    // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                    if (Util.hasText(txn.getBenebankaccountno())) {
                                        // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                        //utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno().substring(txn.getBenebankaccountno().length()-4, txn.getBenebankaccountno().length()) : "");
                                        utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno() : "");
                                        // =====================================================================================
                                    } else {
                                        // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                        //utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber().substring(txn.getAccountnumber().length() - 4, txn.getAccountnumber().length()) : "");
                                        utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber() : "");
                                        // =====================================================================================
                                    }
                                    //==========================================================================

                                    utxn.setBranchname(txn.getBranchname());
                                    utxn.setSrcid(txn.getUserid());
                                    utxn.setDestid(txn.getDestuserid());
                                    utxn.setTerminalloc(txn.getTermloc());
                                    utxn.setMapid(txn.getMapid());
                                    utxn.setMerchantid(Util.hasText(txn.getMerchantid()) ? txn.getMerchantid() : txn.getBillerid());
                                    utxn.setMerchantname(Util.hasText(txn.getMerchantname()) ? txn.getMerchantname() : txn.getBillername());
                                    utxn.setDepositorname(txn.getCustomername());
                                    utxn.setBankcharge(txn.getNayapaycharges());

                                    // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    if (Util.hasText(txn.getSlipnumber())) {
                                        utxn.setDepositorslipnumber(txn.getSlipnumber());
                                    }
                                    //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                                    if (Util.hasText(txn.getCardlastdigits())) {
                                        utxn.setCardlastdigits(txn.getCardlastdigits());
                                    }
                                    //===============================================================================================================
                                    if (Util.hasText(txn.getCardscheme())) {
                                        utxn.setCardscheme(txn.getCardscheme());
                                    }
                                    if (Util.hasText(txn.getPosentrymode())) {
                                        utxn.setPosentrymode(txn.getPosentrymode());
                                    }
                                    if (Util.hasText(txn.getTerminalid())) {
                                        utxn.setTerminalid(txn.getTerminalid());
                                    }
                                    if (Util.hasText(txn.getCategoryid())) {
                                        utxn.setMerchantcategorycode(txn.getCategoryid());
                                    }
                                    utxn.setSrccharge(txn.getSrcchargeamount());
                                    utxn.setDestcharge(txn.getDestchargeamount());
                                    // =====================================================================================

                                    //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
                                    utxn.setTaxamount(txn.getNayapaytaxamount());
                                    utxn.setOriginalapi(txn.getOriginalapi());
                                    utxn.setOriginaldatetime(txn.getOrigtransdatetime());
                                    utxn.setOriginalrrn(txn.getOrigretrefno());
                                    utxn.setOriginalstan(txn.getOrigstan());
                                    utxn.setNpticket(txn.getNpticket());
                                    utxn.setVrolticket(txn.getVrolticket());
                                    utxn.setRefundtype(txn.getReserved());
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                    // Asim Shahzad, Date : 22nd Feb 2021, Tracking ID : VP-NAP-202102151 / VC-NAP-202102151
                                    utxn.setResponsecode(txn.getRespcode());
                                    // =====================================================================================

                                    // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103117 / VC-NAP-202103116

                                    //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                    //adding check for original channel of dispute transaction
                                    if (txn.getChannelid().equals(ChannelCodes.EURONET)
                                            || (Util.hasText(txn.getOrigChannelId()) && txn.getOrigChannelId().equals(ChannelCodes.EURONET))) {
                                        utxn.setAcquiringcurrency(Util.hasText(txn.getTrancurrency()) ? CustomerService.findCurrency(Integer.valueOf(txn.getTrancurrency())).getName() : "");
                                        utxn.setAcquiringamount(Util.hasText(txn.getAmounttransaction()) ? txn.getAmounttransaction() : "");
                                        utxn.setConversionrate(Util.hasText(txn.getSettlementrate()) ? txn.getSettlementrate() : "");

                                        //utxn.setInternationaltransactionflag(Util.hasText(txn.getIsInternationalTxnsEnabled()) ? Boolean.valueOf(txn.getIsInternationalTxnsEnabled()) : false);
                                        boolean intlFlag = false;
                                        if (Util.hasText(txn.getBranchcode()) &&
                                                (txn.getBranchcode().equals("PSI") || txn.getBranchcode().equals("ESI") || txn.getBranchcode().equals("ATM"))) {
                                            intlFlag = true;
                                        }
                                        utxn.setInternationaltransactionflag(intlFlag);

                                        //utxn.setTotalamount((Util.hasText(tran.getCbillamount()) && Util.hasText(tran.getSrcchargeamount())) ? String.valueOf(Long.parseLong(tran.getCbillamount()) + Long.parseLong(tran.getSrcchargeamount())) : "");
                                        Long totalAmount = (Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : 0L;
                                        if (Util.hasText(txn.getSrcchargeamount())) {
                                            totalAmount = totalAmount + Long.parseLong(txn.getSrcchargeamount());
                                        }
                                        if (Util.hasText(txn.getWithholdingtaxamount())) {
                                            totalAmount = totalAmount + Long.parseLong(txn.getWithholdingtaxamount());
                                        }
                                        //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                        //converting to ISO format
                                        utxn.setTotalamount(StringUtils.leftPad(totalAmount.toString(), 12, "0"));

                                        utxn.setBaseamountafterconversion(Util.hasText(txn.getCbillamount()) ? txn.getCbillamount() : "");

                                        //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                        //converting to ISO format
                                        utxn.setForeigntransactionfee((Util.hasText(txn.getSrcchargeamount()) && Util.hasText(txn.getNayapaytaxamount())) ? StringUtils.leftPad(String.valueOf(Long.parseLong(txn.getSrcchargeamount()) - Long.parseLong(txn.getNayapaytaxamount())), 12, "0") : "");

                                        utxn.setTaxappliedonforeigntransactionfee(Util.hasText(txn.getNayapaytaxamount()) ? txn.getNayapaytaxamount() : "");
                                        utxn.setWithholdingtax(Util.hasText(txn.getWithholdingtaxamount()) ? txn.getWithholdingtaxamount() : "");
                                    }

                                    // =======================================================================================

                                    //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                                    utxn.setJustification(txn.getJustification());
                                    /////////////////////////////////////////////////////////////////////////////////////

                                    // Asim Shahzad, Date : 25th May 2021, Tracking ID : VP-NAP-202105212 / VC-NAP-202105211

                                    if (txn.getServicename().equals("WithHoldingTax")) {
                                        utxn.setAmount(txn.getAmounttransaction());
                                        utxn.setOriginaltxnamount(Util.hasText(txn.getCbillamount()) ? txn.getCbillamount() : "");

                                        Long amtTran = Long.parseLong(txn.getAmounttransaction());
                                        Long cBillAmt = Long.parseLong(utxn.getOriginaltxnamount());
                                        double withHoldingTaxPercentage = Math.round((double) amtTran / (double) cBillAmt * 100);

                                        utxn.setWithholdingtaxpercentage(String.valueOf(withHoldingTaxPercentage));
                                    }

                                    // =====================================================================================

                                    // Asim Shahzad, Date : 29th June 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                                    if (Util.hasText(txn.getIban())) {
                                        utxn.setIban(txn.getIban());
                                    }
                                    // ======================================================================================

                                    // Asim Shahzad, Date : 1st Sep 2021, Tracking ID : VC-NAP-202108271
                                    if (Util.hasText(txn.getAmountFCY())) {
                                        utxn.setAmountFCY(txn.getAmountFCY());
                                    }

                                    if (Util.hasText(txn.getCurrencyFCY())) {
                                        utxn.setCurrencyFCY(txn.getCurrencyFCY());
                                    }

                                    if (Util.hasText(txn.getExchangeRate())) {
                                        utxn.setExchangeRate(txn.getExchangeRate());
                                    }
                                    // =================================================================

                                    usertxns.add(utxn);
                                } catch (Exception e) {
                                    logger.error(e);//s.mehtab on 25-11-2020
                                    logger.error("Unable to Add Txn [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "] to List Reason [" + e.getMessage() + "]");
                                }
                            }
                        } else {
                            logger.error("No Transaction found in DB for Src UserId [" + wsmodel.getUserid() + "]");
                        }
                    }
                } else {
                    logger.info("Getting User Transaction List from DB for ALL Debit/out&Credit/in Transactions...");

                    //m.rehman: 30-09-2020, VP-NAP-202009241 - Original and Reversed transaction in transaction listing
                    /*
                    dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where " +
                            " (c.userid= :USERID " +
                            " or c.destuserid= :USERID) " +
                            " and c.tranrefnumber != :TXN_REF_NUM " +
                            " and c.servicename not in ('UnloadWallet','WalletTransaction','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload', 'LoadWallet','WalletTransaction','CashDeposit','ReverseEnvelop','ChequeFT', 'LoadWalletInquiry', 'UnloadWalletInquiry', 'LinkBankAccountInquiry', 'UnLinkBankAccountInquiry', 'VerifyLinkAccountOTP', 'ConfirmLinkBankAccountOTP', 'WalletInquiryForReversal','DebitCardRequest','OnelinkTopupBillPayment','CNICBasedCashWithdrawal','IBFTIn','TitleFetchInquiry','IBFT','DisputeRefundTransaction') "; // + " and c.respcode = :RESPCODE ";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getUserid());
                    params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                    //params.put("RESPCODE", "00");

                    if (Util.hasText(wsmodel.getTypefilter())) {
                        dbQuery += " and c.servicename = :TRNTYPE ";
                        params.put("TRNTYPE", wsmodel.getTypefilter());
                    }

                    if (Util.hasText(wsmodel.getSearchtext())) {
                        dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                " or c.nayapayid like :SEARCH_TEXT " +
                                " or c.destnayapayid like :SEARCH_TEXT " +
                                " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                        params.put("SEARCH_TEXT", wsmodel.getSearchtext());
                    }
                    */

                    // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115

                    params = new HashMap<String, Object>();

                    if (wsmodel.getTypefilter() == null) {
                        //m.rehman: 10-11-2021 - Nayapay Optimization
                        //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                        dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                " (c.userid= :USERID " +
                                " or c.destuserid= :USERID) " +
                                " and c.tranrefnumber != :TXN_REF_NUM " +
                                " and " +
                                //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2 - adding OpenDebitCredit
                                //m.rehman: 07-05-2021, VG-NAP-202104271 / VP-NAP-202104261 / VC-NAP-202104261==>[ Efforts updated ]==> VISA transaction charging update - adding WithHoldingTax,'ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund'
                                //m.rehman: 26-07-2021, VC-NAP-202107261 - Reverse transaction when 0120 message received from Visa
                                //adding STIP
                                " (c.servicename not in ('UnloadWallet','WalletTransaction','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload', 'LoadWallet','WalletTransaction','CashDeposit','ReverseEnvelop','ChequeFT', 'LoadWalletInquiry', 'UnloadWalletInquiry', 'LinkBankAccountInquiry', 'UnLinkBankAccountInquiry', 'VerifyLinkAccountOTP', 'ConfirmLinkBankAccountOTP', 'WalletInquiryForReversal','DebitCardRequest','OnelinkTopupBillPayment','CNICBasedCashWithdrawal','IBFTIn','TitleFetchInquiry','IBFT','BalanceInquiry','OpenDebitCredit','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund','STIP') " +
                                " or " +
                                " c.originalapi not in ('UnloadWallet','WalletTransaction','MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','OnelinkBillerCoreTransaction','EnvelopLoad','EnvelopUnload', 'LoadWallet','WalletTransaction','CashDeposit','ReverseEnvelop','ChequeFT', 'LoadWalletInquiry', 'UnloadWalletInquiry', 'LinkBankAccountInquiry', 'UnLinkBankAccountInquiry', 'VerifyLinkAccountOTP', 'ConfirmLinkBankAccountOTP', 'WalletInquiryForReversal','DebitCardRequest','OnelinkTopupBillPayment','CNICBasedCashWithdrawal','IBFTIn','TitleFetchInquiry','IBFT','BalanceInquiry','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund','STIP')) "; // + " and c.respcode = :RESPCODE ";
                    } else {
                        //m.rehman: 10-11-2021 - Nayapay Optimization
                        //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                        dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                " (c.userid= :USERID " +
                                " or c.destuserid= :USERID) " +
                                " and c.tranrefnumber != :TXN_REF_NUM " +
                                " and " +
                                " (c.servicename not in (:TRNTYPE) " +
                                " or " +
                                " c.originalapi not in (:TRNTYPE)) "; // + " and c.respcode = :RESPCODE ";

                        params.put("TRNTYPE", wsmodel.getTypefilter());
                    }
                    // =======================================================================================

                    params.put("USERID", wsmodel.getUserid());
                    params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                    //params.put("RESPCODE", "00");

                    // Asim Shahzad, Date : 17th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115
//                    if (Util.hasText(wsmodel.getTypefilter())) {
//                        dbQuery += " and c.servicename = :TRNTYPE ";
//                        params.put("TRNTYPE", wsmodel.getTypefilter());
//                    }
//                    if (wsmodel.getTypefilter() != null) {
//                        dbQuery += " and c.servicename in (:TRNTYPE) ";
//                        params.put("TRNTYPE", wsmodel.getTypefilter());
//                    }
                    // =======================================================================================

                    if (Util.hasText(wsmodel.getSearchtext())) {
                        dbQuery += " and (UPPER(c.customername) like UPPER(:SEARCH_TEXT) " +
                                " or UPPER(c.username) like UPPER(:SEARCH_TEXT) " +
                                " or UPPER(c.merchantname) like UPPER(:SEARCH_TEXT) " +
                                " or UPPER(c.destusername) like UPPER(:SEARCH_TEXT) " +
                                " or UPPER(c.billername) like UPPER(:SEARCH_TEXT) " +
                                " or c.nayapayid like :SEARCH_TEXT " +
                                " or c.destnayapayid like :SEARCH_TEXT " +
                                " or UPPER(c.acctalias) like UPPER(:SEARCH_TEXT)) ";
                        params.put("SEARCH_TEXT", "%" + wsmodel.getSearchtext() + "%");
                    }
                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                    //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(Change transdatetime to id)
                    //Arsalan Akhter, Date: 10-Aug-2021, Ticket: VC-NAP-202108101-Transactions order issue in Listing Calls
                    dbQuery += " order by c.transdatetime desc, c.id desc ";

                    String query = "select count(*) " + dbQuery;
                    Long size = (Long) GeneralDao.Instance.findObject(query, params);
                    wsmodel.setTotalcount(size + "");


                    logger.info("Page Count [" + wsmodel.getPagecount() + "] Page Size [" + wsmodel.getPagesize() + "]");
                    Integer pageCount = Integer.parseInt(wsmodel.getPagecount());
                    Integer pageSize = Integer.parseInt(wsmodel.getPagesize());
                    logger.info("Converted Page Count [" + pageCount + "] Converted Page Size [" + pageSize + "]");
                    Integer startPosition = (pageCount * pageSize) - pageSize;
                    logger.info("Start Position [" + startPosition + "]");
                    Query query1 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                    query1.setProperties(params);
                    query1.setFirstResult(startPosition);
                    query1.setMaxResults(pageSize);

                    dbtranlist = query1.list(); //GeneralDao.Instance.find(dbQuery, params);
                    usertxns = new ArrayList<UserTransaction>();

                    if (dbtranlist != null && dbtranlist.size() > 0) {
                        logger.info("Transaction records found in db for UserId as Src and Dest, processing...");
                        //m.rehman: 10-11-2021 - Nayapay Optimization
                        //for (MVFinancialLog txn : dbtranlist) { // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                        for (WalletCMSWsListingEntity txn : dbtranlist) {
                            try {
                                logger.info("Service Name from DB [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "]");

                                UserTransaction utxn = new UserTransaction();
                                utxn.setTransrefnum(txn.getTranrefnumber());

                                //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                //utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                //m.rehman: 08-10-2020, VP-NAP-202010081/ VC-NAP-202010081 - Deployment 08-10-2020
                                //utxn.setNayapaytype(txn.getServicename());
                                if (txn.getServicename().contains("Reversal")) {
                                    utxn.setNayapaytype(txn.getServicename());
                                } else {
                                    utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                }
                                ////////////////////////////////////////////////////////////////////////////

                                utxn.setAcctalias(txn.getAcctalias());

                                // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                if (Util.hasText(txn.getUsername())) {
                                    utxn.setSrcname(txn.getUsername());
                                } else {
                                    utxn.setSrcname(txn.getCustomername());
                                }
                                // =====================================================================================

                                utxn.setSrcnayapayid(txn.getNayapayid());
                                utxn.setDestname(txn.getDestusername());
                                utxn.setDestnayapayid(txn.getDestnayapayid());
                                utxn.setCurrency(txn.getCurrency());

                                //m.rehman: 26-02-2021, Euronet Integration
                                //utxn.setAmount(txn.getAmounttransaction());
                                utxn.setAmount((Util.hasText(txn.getCbillamount())) ? txn.getCbillamount() : txn.getAmounttransaction());
                                /////////////////////////////////////////////////////////////////////////////////////////

                                utxn.setTransdatetime(txn.getTransdatetime());

                                // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                if (Util.hasText(txn.getBenebankcode())) {
                                    utxn.setBankcode(txn.getBenebankcode());
                                } else {
                                    utxn.setBankcode(txn.getBankcode());
                                }
                                //==========================================================================

                                // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                if (Util.hasText(txn.getBenebankaccountno())) {
                                    // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    //utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno().substring(txn.getBenebankaccountno().length()-4, txn.getBenebankaccountno().length()) : "");
                                    utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno() : "");
                                    // =====================================================================================
                                } else {
                                    // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    //utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber().substring(txn.getAccountnumber().length() - 4, txn.getAccountnumber().length()) : "");
                                    utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber() : "");
                                    // =====================================================================================
                                }
                                //==========================================================================

                                utxn.setBranchname(txn.getBranchname());
                                utxn.setSrcid(txn.getUserid());
                                utxn.setDestid(txn.getDestuserid());
                                utxn.setTerminalloc(txn.getTermloc());
                                utxn.setMapid(txn.getMapid());
                                utxn.setMerchantid(Util.hasText(txn.getMerchantid()) ? txn.getMerchantid() : txn.getBillerid());
                                utxn.setMerchantname(Util.hasText(txn.getMerchantname()) ? txn.getMerchantname() : txn.getBillername());
                                utxn.setDepositorname(txn.getCustomername());
                                utxn.setBankcharge(txn.getNayapaycharges());

                                // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                if (Util.hasText(txn.getSlipnumber())) {
                                    utxn.setDepositorslipnumber(txn.getSlipnumber());
                                }
                                //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                                if (Util.hasText(txn.getCardlastdigits())) {
                                    utxn.setCardlastdigits(txn.getCardlastdigits());
                                }
                                //===============================================================================================================
                                if (Util.hasText(txn.getCardscheme())) {
                                    utxn.setCardscheme(txn.getCardscheme());
                                }
                                if (Util.hasText(txn.getPosentrymode())) {
                                    utxn.setPosentrymode(txn.getPosentrymode());
                                }
                                if (Util.hasText(txn.getTerminalid())) {
                                    utxn.setTerminalid(txn.getTerminalid());
                                }
                                if (Util.hasText(txn.getCategoryid())) {
                                    utxn.setMerchantcategorycode(txn.getCategoryid());
                                }
                                utxn.setSrccharge(txn.getSrcchargeamount());
                                utxn.setDestcharge(txn.getDestchargeamount());
                                // =====================================================================================

                                //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
                                utxn.setTaxamount(txn.getNayapaytaxamount());
                                utxn.setOriginalapi(txn.getOriginalapi());
                                utxn.setOriginaldatetime(txn.getOrigtransdatetime());
                                utxn.setOriginalrrn(txn.getOrigretrefno());
                                utxn.setOriginalstan(txn.getOrigstan());
                                utxn.setNpticket(txn.getNpticket());
                                utxn.setVrolticket(txn.getVrolticket());
                                utxn.setRefundtype(txn.getReserved());
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                // Asim Shahzad, Date : 22nd Feb 2021, Tracking ID : VP-NAP-202102151 / VC-NAP-202102151
                                utxn.setResponsecode(txn.getRespcode());
                                // =====================================================================================

                                // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103117 / VC-NAP-202103116

                                //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                //adding check for original channel of dispute transaction
                                if (txn.getChannelid().equals(ChannelCodes.EURONET)
                                        || (Util.hasText(txn.getOrigChannelId()) && txn.getOrigChannelId().equals(ChannelCodes.EURONET))) {
                                    utxn.setAcquiringcurrency(Util.hasText(txn.getTrancurrency()) ? CustomerService.findCurrency(Integer.valueOf(txn.getTrancurrency())).getName() : "");
                                    utxn.setAcquiringamount(Util.hasText(txn.getAmounttransaction()) ? txn.getAmounttransaction() : "");
                                    utxn.setConversionrate(Util.hasText(txn.getSettlementrate()) ? txn.getSettlementrate() : "");

                                    //utxn.setInternationaltransactionflag(Util.hasText(txn.getIsInternationalTxnsEnabled()) ? Boolean.valueOf(txn.getIsInternationalTxnsEnabled()) : false);
                                    boolean intlFlag = false;
                                    if (Util.hasText(txn.getBranchcode()) &&
                                            (txn.getBranchcode().equals("PSI") || txn.getBranchcode().equals("ESI") || txn.getBranchcode().equals("ATM"))) {
                                        intlFlag = true;
                                    }
                                    utxn.setInternationaltransactionflag(intlFlag);

                                    //utxn.setTotalamount((Util.hasText(tran.getCbillamount()) && Util.hasText(tran.getSrcchargeamount())) ? String.valueOf(Long.parseLong(tran.getCbillamount()) + Long.parseLong(tran.getSrcchargeamount())) : "");
                                    Long totalAmount = (Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : 0L;
                                    if (Util.hasText(txn.getSrcchargeamount())) {
                                        totalAmount = totalAmount + Long.parseLong(txn.getSrcchargeamount());
                                    }
                                    if (Util.hasText(txn.getWithholdingtaxamount())) {
                                        totalAmount = totalAmount + Long.parseLong(txn.getWithholdingtaxamount());
                                    }
                                    //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                    //converting to ISO format
                                    utxn.setTotalamount(StringUtils.leftPad(totalAmount.toString(), 12, "0"));

                                    utxn.setBaseamountafterconversion(Util.hasText(txn.getCbillamount()) ? txn.getCbillamount() : "");

                                    //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                    //converting to ISO format
                                    utxn.setForeigntransactionfee((Util.hasText(txn.getSrcchargeamount()) && Util.hasText(txn.getNayapaytaxamount())) ? StringUtils.leftPad(String.valueOf(Long.parseLong(txn.getSrcchargeamount()) - Long.parseLong(txn.getNayapaytaxamount())), 12, "0") : "");

                                    utxn.setTaxappliedonforeigntransactionfee(Util.hasText(txn.getNayapaytaxamount()) ? txn.getNayapaytaxamount() : "");
                                    utxn.setWithholdingtax(Util.hasText(txn.getWithholdingtaxamount()) ? txn.getWithholdingtaxamount() : "");
                                }

                                // =======================================================================================

                                //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                                utxn.setJustification(txn.getJustification());
                                ////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                // Asim Shahzad, Date : 29th June 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                                if (Util.hasText(txn.getIban())) {
                                    utxn.setIban(txn.getIban());
                                }
                                // ======================================================================================

                                // Asim Shahzad, Date : 1st Sep 2021, Tracking ID : VC-NAP-202108271
                                if (Util.hasText(txn.getAmountFCY())) {
                                    utxn.setAmountFCY(txn.getAmountFCY());
                                }

                                if (Util.hasText(txn.getCurrencyFCY())) {
                                    utxn.setCurrencyFCY(txn.getCurrencyFCY());
                                }

                                if (Util.hasText(txn.getExchangeRate())) {
                                    utxn.setExchangeRate(txn.getExchangeRate());
                                }
                                // =================================================================

                                usertxns.add(utxn);
                            } catch (Exception e) {
                                logger.error(e);//s.mehtab on 25-11-2020
                                logger.error("Unable to Add Txn [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "] to List Reason [" + e.getMessage() + "]");
                            }
                        }
                    } else {
                        logger.error("No Transaction found in DB for Src UserId [" + wsmodel.getUserid() + "]");
                    }
                }
                wsmodel.setTotalcount((Util.hasText(wsmodel.getTotalcount())) ? wsmodel.getTotalcount() : "0");
                wsmodel.setUsertransactions(usertxns);
                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return wsmodel;
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ". rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing SupportPortalGetUserTransactionList..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteSupportPortalGetUserTransaction(WalletCMSWsEntity wsmodel) {
        logger.info("Executing SupportPortalGetUserTransaction Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID and c.category = :CAT";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET_VALUE);

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null) { // && userwallet.getStatus().equals("00")) {

                logger.info("Wallet found, verifying data...");
                WebServiceUtil.dobdFormat.setLenient(false);
                logger.info("wsmodel DateOfBirth [" + wsmodel.getDateofbirth() + "] DB DateOfBirth [" + WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth()) + "]");
                logger.info("wsmodel Cnic [" + wsmodel.getCnic() + "] DB Cnic [" + userwallet.getCustomer().getCnic() + "]");
                if ((!wsmodel.getDateofbirth().equals(WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth())))
                        || !wsmodel.getCnic().equals(userwallet.getCustomer().getCnic())) {
                    logger.error("Invalid Input Fields, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //02 for Invalid Account refer NayaPay Doc
                    return wsmodel;

                    //if wallet is in block state, reject transaction
                }

                //m.rehman: 10-11-2021 - Nayapay Optimization
                //dbQuery = "from " + MVFinancialLog.class.getName() + " c where (c.userid= :USERID or c.destuserid= :USERID) "; // + " and c.tranrefnumber = :TRANREF "; // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where (c.userid= :USERID or c.destuserid= :USERID) ";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getUserid());
                //params.put("TRANREF", wsmodel.getNayapaytxnid());

                        /*
                        if(wsmodel.getBanktxnflag().equals("true")) {

                            String stan = wsmodel.getOrigdataelement().substring(0,6);
                            String transdatetime = wsmodel.getOrigdataelement().substring(6,wsmodel.getOrigdataelement().length());
                            dbQuery += " and c.stan = :STAN " + " and c.transdatetime = :TRANSDATETIME ";
                            params.put("STAN", stan);
                            params.put("TRANSDATETIME", transdatetime);

                        }
                        else {
                            dbQuery += " and c.tranrefnumber = :TRANREF ";
                            params.put("TRANREF", wsmodel.getOrigdataelement());
                        }
                        */

                dbQuery += " and c.tranrefnumber = :TRANREF ";
                params.put("TRANREF", wsmodel.getOrigdataelement());

                if (Util.hasText(wsmodel.getOrigstan())) {
                    dbQuery += " and c.stan = :STAN ";
                    params.put("STAN", wsmodel.getOrigstan());
                }

                dbQuery += " order by c.id desc ";

                //m.rehman: 10-11-2021 - Nayapay Optimization
                //List<MVFinancialLog> tranlist = GeneralDao.Instance.find(dbQuery, params); // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                List<WalletCMSWsListingEntity> tranlist = GeneralDao.Instance.find(dbQuery, params);

                TransactionDetail td = new TransactionDetail();
                if (tranlist != null && tranlist.size() > 0) {
                    /*
                    if (tranlist.size() > 1) {
                        logger.error("Multiple Records Found for TxnId [" + wsmodel.getNayapaytxnid() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND);
                        //return wsmodel;
                    } else {

                    */

                    //m.rehman: 10-11-2021 - Nayapay Optimization
                    //MVFinancialLog tran = tranlist.get(0); // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                    WalletCMSWsListingEntity tran = tranlist.get(0);
                    td.setTransrefnum(tran.getTranrefnumber());
                    //Arsalan Akhter, Date: 03-Aug-2021, Tikcet: VC-NAP-202107301 (Get Transaction details of a reversal transaction)
                    //td.setNayapaytype(Util.hasText(tran.getNayapaytrantype()) ? tran.getNayapaytrantype() : tran.getServicename());
                    if (tran.getServicename().contains("Reversal")) {
                        td.setNayapaytype(tran.getServicename());
                    } else {
                        td.setNayapaytype(Util.hasText(tran.getNayapaytrantype()) ? tran.getNayapaytrantype() : tran.getServicename());
                    }
                    //========================================================================================
                    td.setAcctalias(tran.getAcctalias());
                    td.setSrcid(tran.getUserid());

                    // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                    if (Util.hasText(tran.getUsername())) {
                        td.setSrcname(tran.getUsername());
                    } else {
                        td.setSrcname(tran.getCustomername());
                    }
                    // =====================================================================================

                    td.setSrcnayapayid(tran.getNayapayid());
                    td.setDestid(tran.getDestuserid());
                    td.setDestname(tran.getDestusername());
                    td.setDestnayapayid(tran.getDestnayapayid());
                    td.setParentid(tran.getParentid());
                    td.setReferencenumber(tran.getReferencenumber());
                    td.setInvoiceid(tran.getInvoiceid());
                    td.setCurrency(tran.getCurrency());

                    //m.rehman: 26-02-2021, Euronet Integration
                    //td.setAmount(tran.getAmounttransaction());
                    td.setAmount((Util.hasText(tran.getCbillamount())) ? tran.getCbillamount() : tran.getAmounttransaction());
                    /////////////////////////////////////////////////////////////////////////////////////////

                    td.setTransdatetime(tran.getTransdatetime());
                    td.setMapid(tran.getMapid());
                    td.setPosinvoiceref(tran.getPosinvoiceref());
                    td.setTerminalid(tran.getTerminalid());
                    td.setAgentid(tran.getAgentid());
                    td.setStan(tran.getStan());
                    td.setDisputeflag(tran.getDisputeflag());
                    td.setSrccharge(tran.getSrcchargeamount());
                    td.setBankcharge(tran.getNayapaycharges());
                    td.setDepositorname(tran.getCustomername());
                    td.setTerminalloc(tran.getTermloc());
                    td.setOriginaltransactionid(tran.getOrigdataelement());

                    // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                    if (Util.hasText(tran.getBenebankaccountno())) {
                        // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                        //td.setAccountnumber(Util.hasText(tran.getBenebankaccountno()) ? tran.getBenebankaccountno().substring(tran.getBenebankaccountno().length()-4, tran.getBenebankaccountno().length()) : "");
                        td.setAccountnumber(Util.hasText(tran.getBenebankaccountno()) ? tran.getBenebankaccountno() : "");
                        // =====================================================================================
                    } else {
                        // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                        //td.setAccountnumber(Util.hasText(tran.getAccountnumber()) ? tran.getAccountnumber().substring(tran.getAccountnumber().length() - 4, tran.getAccountnumber().length()) : "");
                        td.setAccountnumber(Util.hasText(tran.getAccountnumber()) ? tran.getAccountnumber() : "");
                        // =====================================================================================
                    }
                    //==========================================================================

                    td.setBranchname(tran.getBranchname());
                    td.setMerchantid(Util.hasText(tran.getMerchantid()) ? tran.getMerchantid() : tran.getBillerid());
                    td.setMerchantname(Util.hasText(tran.getMerchantname()) ? tran.getMerchantname() : tran.getBillername());

                    // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                    if (Util.hasText(tran.getBenebankcode())) {
                        td.setBankcode(tran.getBenebankcode());
                    } else {
                        td.setBankcode(tran.getBankcode());
                    }
                    //==========================================================================

                    // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                    //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                    if (Util.hasText(tran.getCardlastdigits())) {
                        td.setCardlastdigits(tran.getCardlastdigits());
                    }
                    //===============================================================================================================
                    if (Util.hasText(tran.getCardscheme())) {
                        td.setCardscheme(tran.getCardscheme());
                    }
                    if (Util.hasText(tran.getPosentrymode())) {
                        td.setPosentrymode(tran.getPosentrymode());
                    }
                    if (Util.hasText(tran.getCategoryid())) {
                        td.setMerchantcategorycode(tran.getCategoryid());
                    }
                    td.setDestcharge(tran.getDestchargeamount());
                    // =====================================================================================

                    td.setDepositslipnumber(tran.getSlipnumber());
                    //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
                    td.setTaxamount(tran.getNayapaytaxamount());
                    td.setOriginalapi(tran.getOriginalapi());
                    td.setOriginaldatetime(tran.getOrigdataelement());
                    td.setOriginalrrn(tran.getOrigretrefno());
                    td.setOriginalstan(tran.getOrigstan());
                    td.setNpticket(tran.getNpticket());
                    td.setVrolticket(tran.getVrolticket());
                    td.setRefundtype(tran.getReserved());
                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                    // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103117 / VC-NAP-202103116

                    //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                    //adding check for original channel of dispute transaction
                    if (tran.getChannelid().equals(ChannelCodes.EURONET)
                            || (Util.hasText(tran.getOrigChannelId()) && tran.getOrigChannelId().equals(ChannelCodes.EURONET))) {
                        td.setAcquiringcurrency(Util.hasText(tran.getTrancurrency()) ? CustomerService.findCurrency(Integer.valueOf(tran.getTrancurrency())).getName() : "");
                        td.setAcquiringamount(Util.hasText(tran.getAmounttransaction()) ? tran.getAmounttransaction() : "");
                        td.setConversionrate(Util.hasText(tran.getSettlementrate()) ? tran.getSettlementrate() : "");

                        //td.setInternationaltransactionflag(Util.hasText(tran.getIsInternationalTxnsEnabled()) ? Boolean.valueOf(tran.getIsInternationalTxnsEnabled()) : false);
                        boolean intlFlag = false;
                        if (Util.hasText(tran.getBranchcode()) &&
                                (tran.getBranchcode().equals("PSI") || tran.getBranchcode().equals("ESI") || tran.getBranchcode().equals("ATM"))) {
                            intlFlag = true;
                        }
                        td.setInternationaltransactionflag(intlFlag);

                        //td.setTotalamount((Util.hasText(tran.getCbillamount()) && Util.hasText(tran.getSrcchargeamount())) ? String.valueOf(Long.parseLong(tran.getCbillamount()) + Long.parseLong(tran.getSrcchargeamount())) : "");
                        Long totalAmount = (Util.hasText(tran.getCbillamount())) ? Long.parseLong(tran.getCbillamount()) : 0L;
                        if (Util.hasText(tran.getSrcchargeamount())) {
                            totalAmount = totalAmount + Long.parseLong(tran.getSrcchargeamount());
                        }
                        if (Util.hasText(tran.getWithholdingtaxamount())) {
                            totalAmount = totalAmount + Long.parseLong(tran.getWithholdingtaxamount());
                        }
                        //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                        //converting to ISO format
                        td.setTotalamount(StringUtils.leftPad(totalAmount.toString(), 12, "0"));

                        td.setBaseamountafterconversion(Util.hasText(tran.getCbillamount()) ? tran.getCbillamount() : "");

                        //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                        //converting to ISO format
                        td.setForeigntransactionfee((Util.hasText(tran.getSrcchargeamount()) && Util.hasText(tran.getNayapaytaxamount())) ? StringUtils.leftPad(String.valueOf(Long.parseLong(tran.getSrcchargeamount()) - Long.parseLong(tran.getNayapaytaxamount())), 12, "0") : "");

                        td.setTaxappliedonforeigntransactionfee(Util.hasText(tran.getNayapaytaxamount()) ? tran.getNayapaytaxamount() : "");
                        td.setWithholdingtax(Util.hasText(tran.getWithholdingtaxamount()) ? tran.getWithholdingtaxamount() : "");
                    }

                    // =======================================================================================

                    //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                    td.setJustification(tran.getJustification());
                    //////////////////////////////////////////////////////////////////////////////////////////////////

                    // Asim Shahzad, Date : 25th May 2021, Tracking ID : VP-NAP-202105212 / VC-NAP-202105211

                    if (tran.getServicename().equals("WithHoldingTax")) {
                        td.setAmount(tran.getAmounttransaction());
                        td.setOriginaltxnamount(Util.hasText(tran.getCbillamount()) ? tran.getCbillamount() : "");

                        Long amtTran = Long.parseLong(tran.getAmounttransaction());
                        Long cBillAmt = Long.parseLong(td.getOriginaltxnamount());
                        double withHoldingTaxPercentage = Math.round((double) amtTran / (double) cBillAmt * 100);

                        td.setWithholdingtaxpercentage(String.valueOf(withHoldingTaxPercentage));
                    }

                    // =====================================================================================

                    // Asim Shahzad, Date : 1st July 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                    if (Util.hasText(tran.getIban())) {
                        td.setIban(tran.getIban());
                    }
                    // ======================================================================================

                    // Asim Shahzad, Date : 1st Sep 2021, Tracking ID : VC-NAP-202108271
                    if (Util.hasText(tran.getAmountFCY())) {
                        td.setAmountFCY(tran.getAmountFCY());
                    }

                    if (Util.hasText(tran.getCurrencyFCY())) {
                        td.setCurrencyFCY(tran.getCurrencyFCY());
                    }

                    if (Util.hasText(tran.getExchangeRate())) {
                        td.setExchangeRate(tran.getExchangeRate());
                    }
                    // =================================================================

                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    //}
                } else {
                    logger.error("No Transaction found for UserId [" + wsmodel.getUserid() + "], rejecting..");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND);
                    //return wsmodel;
                }

                //wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                wsmodel.setTransactionDetail(td);
                return wsmodel;
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing SupportPortalGetUserTransaction..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteSupportPortalBlockMerchantDebitCard(WalletCMSWsEntity wsmodel) {
        logger.info("Executing " + wsmodel.getServicename() + " Request...");

        try {
            String dbQuery, prevStatus;
            Map<String, Object> params;
            boolean walletFlag = false;
            CMSCard prepaidCard;
            CMSActivityLog cmsActivityLog;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getMerchantid());

            List<NayaPayRelation> nprel = GeneralDao.Instance.find(dbQuery, params);

            if (nprel != null && nprel.size() > 0) {
                CMSAccount prepaidWallet;
                for (NayaPayRelation nayaPayRelation : nprel) {
                    prepaidWallet = nayaPayRelation.getAccount();

                    if (prepaidWallet != null && prepaidWallet.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {

                        walletFlag = true;
                        logger.info("Prepaid Wallet found, proceeding ...");
                        logger.info("Checking Prepaid Card ...");

                        prepaidCard = prepaidWallet.getCard();
                        if (prepaidCard == null) {
                            logger.error("No Prepaid Card found, rejecting ...");
                            //wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD);

                        } else if (!prepaidCard.getCardNumber().equals(wsmodel.getCardnumber())) {
                            logger.error("Prepaid Card number not matched with gievn card number found, rejecting ...");
                            //wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_DATA);

                        } else {

                            if (prepaidCard.getCardStatus().equals("90")) //Raza only do if not 90
                            {
                                logger.error("Prepaid Card already in Blocked State, cannot Block Card. rejecting...");
                                //wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS);
                                //return wsmodel;

                            } else {
                                logger.info("Blocking Prepaid Card ...");
                                prevStatus = prepaidCard.getCardStatus();
                                prepaidCard.setCardStatus("90");
                                prepaidCard.setActivationDate(WebServiceUtil.dateFormat.format(new Date()));
                                GeneralDao.Instance.saveOrUpdate(prepaidCard);
                                //wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                                logger.info("Saving card activity ....");
                                cmsActivityLog = new CMSActivityLog();
                                cmsActivityLog.setRelation(prepaidCard.getCardNumber());
                                cmsActivityLog.setPreviousStatus(prevStatus);
                                cmsActivityLog.setCurrentStatus(prepaidCard.getCardStatus());
                                cmsActivityLog.setSourceType("API");
                                cmsActivityLog.setSourceName(wsmodel.getServicename());
                                cmsActivityLog.setActivityDateTime(DateTime.now());
                                GeneralDao.Instance.saveOrUpdate(cmsActivityLog);
                            }
                        }

                        break;
                    }
                }

                if (!walletFlag) {
                    logger.info("No Prepaid Wallet Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                    //wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                }

                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return wsmodel;
            } else {
                logger.info("No Account Relation Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND);
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing " + wsmodel.getServicename() + "..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteSupportPortalGetUserDebitCard(WalletCMSWsEntity wsmodel) {
        logger.info("Executing SupportPortalGetUserDebitCard Request...");

        try {
            String dbQuery;
            Map<String, Object> params;
            CardObject cardObject;
            List<CardObject> cardObjectList;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (usernprel != null) {
                CMSAccount userwallet = usernprel.getAccount();

                if (userwallet != null && userwallet.getStatus().equals("00")) {
                    logger.info("Wallet found, verifying data...");
                    WebServiceUtil.dobdFormat.setLenient(false);
                    logger.info("wsmodel DateOfBirth [" + wsmodel.getDateofbirth() + "] DB DateOfBirth [" + WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth()) + "]");
                    logger.info("wsmodel Cnic [" + wsmodel.getCnic() + "] DB Cnic [" + userwallet.getCustomer().getCnic() + "]");
                    if ((!wsmodel.getDateofbirth().equals(WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth())))
                            || !wsmodel.getCnic().equals(userwallet.getCustomer().getCnic())) {
                        logger.error("Invalid Input Fields, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //02 for Invalid Account refer NayaPay Doc
                        return wsmodel;

                        //if wallet is in block state, reject transaction
                    }

                    logger.info("Getting User Debit Card...");

                    dbQuery = "from " + CMSCard.class.getName() + " c where c.customer= :custID ";
                    params = new HashMap<String, Object>();
                    params.put("custID", usernprel.getAccount().getCustomer());
                    List<CMSCard> cardList = GeneralDao.Instance.find(dbQuery, params);

                    if (cardList != null && cardList.size() > 0) {
                        cardObjectList = new ArrayList<CardObject>();
                        for (CMSCard cmsCard : cardList) {
                            cardObject = new CardObject();
                            cardObject.setId(cmsCard.getId().toString());
                            cardObject.setCardnumber(cmsCard.getCardNumber());
                            cardObject.setCardexpiry((Util.hasText(cmsCard.getExpiryDate())) ? cmsCard.getExpiryDate().substring(2, 6) : "");
                            cardObject.setCreationdate((Util.hasText(cmsCard.getRequestDate())) ? cmsCard.getRequestDate().substring(0, 8) : "");
                            cardObject.setCardstatus(cmsCard.getCardStatus());
                            cardObject.setCardnumberlastdigits(cmsCard.getCardNoLastDigits());
                            cardObject.setActivationdate((Util.hasText(cmsCard.getActivationDate())) ? cmsCard.getActivationDate().substring(0, 8) : "");
                            cardObject.setNayapaylimits(new ArrayList<NayaPayLimit>());

                            //m.rehman: 30-08-2021, VC-NAP-202108021 - Limit Structure update
                            //commenting below logic and adding update logic
                            /*
                            //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                            //updating query
                            dbQuery = "from " + CMSDebitRemainingLimit.class.getName() + " c where c.relation= :ACCTNUMBER or c.relation= :CARD_NO ";
                            params = new HashMap<String, Object>();

                            //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                            params.put("CARD_NO", cardObject.getCardnumber());
                            params.put("ACCTNUMBER", usernprel.getAccount().getAccountNumber());
                            ////////////////////////////////////////////////////////////////////////////////////////////////

                            List<CMSDebitRemainingLimit> debitRemainingLimits = GeneralDao.Instance.find(dbQuery, params);
                            if (debitRemainingLimits != null && debitRemainingLimits.size() > 0) {
                                for (CMSDebitRemainingLimit debitRemainingLimit : debitRemainingLimits) {
                                    //m.rehman: 21-01-2020, VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 - VISA (Switch-Middleware Integration document v 4.7.6) - Release 4
                                    //adding conditions for ecommerce transaction
                                    if ((debitRemainingLimit.getLimitId().getTransactionType() == null &&
                                            (debitRemainingLimit.getLimitId().getDescription().toUpperCase().contains("ECOMMERCE")))
                                            ||
                                            (debitRemainingLimit.getLimitId().getTransactionType() == null
                                                    && debitRemainingLimit.getLimitId().getDescription().toUpperCase().contains("CASHWITHDRAWALLIMIT"))
                                            ||
                                            (debitRemainingLimit.getLimitId().getTransactionType() == null
                                                    && debitRemainingLimit.getLimitId().getDescription().toUpperCase().contains("GLOBALCARDLIMIT"))
                                            ||
                                            (debitRemainingLimit.getLimitId().getTransactionType() == null
                                                    && debitRemainingLimit.getLimitId().getDescription().toUpperCase().contains("PURCHASELIMIT")))
                                    {

                                        //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                        //if visa virtual card, only show online and global limit
                                        if (cmsCard.getProduct().getProductType().equals("VISA_VIRTUAL")
                                                &&
                                                !((debitRemainingLimit.getLimitId().getTransactionType() == null &&
                                                        (debitRemainingLimit.getLimitId().getDescription().toUpperCase().contains("ECOMMERCE")))
                                                        ||
                                                        (debitRemainingLimit.getLimitId().getTransactionType() == null
                                                                && (debitRemainingLimit.getLimitId().getDescription().toUpperCase().contains("GLOBALCARDLIMIT"))))) {
                                            continue;
                                        }

                                        NayaPayLimit nayaPayLimit = new NayaPayLimit();

                                        //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                        //adding check for transaction description
                                        //nayaPayLimit.setTransaction(debitRemainingLimit.getLimitId().getTransactionType().getTxndesc());
                                        if (Util.hasText(debitRemainingLimit.getLimitId().getDescription())) {
                                            nayaPayLimit.setTransaction(debitRemainingLimit.getLimitId().getDescription());
                                        } else {
                                            nayaPayLimit.setTransaction(debitRemainingLimit.getLimitId().getTransactionType().getTxndesc());
                                        }
                                        /////////////////////////////////////////////////////////////////////////////////////////////////////

                                        // Asim, Logging to be removed
                                        logger.info("Current cycle date : [" + debitRemainingLimit.getCycleEndDate() + "]");
                                        logger.info("Checking for month : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6) + "]");
                                        logger.info("Checking for year : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4) + "]");
                                        logger.info("Checking for current date : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()) + "]");
                                        // =================================

                                        // Asim Shahzad, Date : 6th Oct 2020, Tracking ID : VC-NAP-202009231
                                        CMSLimitCycleType cmsLimitCycleType = new CMSLimitCycleType(Integer.parseInt(debitRemainingLimit.getLimitId().getCycleLengthType()));

                                        //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                        Long amount = 0L;
                                        if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                && debitRemainingLimit.getIndividualLimitId() != null) {
                                            amount = Long.parseLong(debitRemainingLimit.getIndividualLimitId().getAmount())
                                                    - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                        } else {
                                            amount = Long.parseLong(debitRemainingLimit.getLimitId().getAmount())
                                                    - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                        }
                                        nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                        /////////////////////////////////////////////////////////////////////////////////////

                                        if (cmsLimitCycleType.equals(CMSLimitCycleType.DAILY)) {
                                            if (WebServiceUtil.limitcycleDateFormat.format(new Date()).equals(debitRemainingLimit.getCycleEndDate())) {
                                                nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                                nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                                logger.info("Executing Daily Limit flow...");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                            } else {
                                                //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                                if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                        && debitRemainingLimit.getIndividualLimitId() != null) {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                } else {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                                }
                                                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                                logger.info("Executing Daily Limit flow...");
                                                logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                                logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                            }
                                        }

                                        if (cmsLimitCycleType.equals(CMSLimitCycleType.MONTHLY)) {
                                            if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6).equals(debitRemainingLimit.getCycleEndDate().substring(4, 6))) {
                                                nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                                nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                                logger.info("Executing Monthly Limit flow...");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                            } else {
                                                //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                                if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                        && debitRemainingLimit.getIndividualLimitId() != null) {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                } else {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                                }
                                                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                                logger.info("Executing Monthly Limit flow...");
                                                logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                                logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                            }
                                        }

                                        if (cmsLimitCycleType.equals(CMSLimitCycleType.YEARLY)) {
                                            if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4).equals(debitRemainingLimit.getCycleEndDate().substring(2, 4))) {
                                                nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                                nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                                logger.info("Executing Yearly Limit flow...");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                            } else {
                                                //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                                if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                        && debitRemainingLimit.getIndividualLimitId() != null) {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                } else {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                                }
                                                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                                logger.info("Executing Yearly Limit flow...");
                                                logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                                logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                            }
                                        }
                                        // ================================================================

                                        //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                        //nayaPayLimit.setAmount(debitRemainingLimit.getTxnAmount());

                                        //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                        if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                && debitRemainingLimit.getIndividualLimitId() != null) {
                                            nayaPayLimit.setCustomlimitflag("true");
                                        } else {
                                            nayaPayLimit.setCustomlimitflag("false");
                                        }
                                        ///////////////////////////////////////////////////////////////////////////////////////////////////////

                                        cardObject.getNayapaylimits().add(nayaPayLimit);
                                    }
                                }
                            }
                            */

                            dbQuery = "from " + CMSDebitRemainingLimit.class.getName() + " c where (c.relation= :ACCTNUMBER or c.relation= :CARD_NO) and c.limitId.isActive= '1' ";
                            params = new HashMap<String, Object>();

                            params.put("CARD_NO", cardObject.getCardnumber());
                            params.put("ACCTNUMBER", usernprel.getAccount().getAccountNumber());

                            List<CMSDebitRemainingLimit> debitRemainingLimits = GeneralDao.Instance.find(dbQuery, params);
                            if (debitRemainingLimits != null && debitRemainingLimits.size() > 0) {
                                for (CMSDebitRemainingLimit debitRemainingLimit : debitRemainingLimits) {

                                    NayaPayLimit nayaPayLimit = new NayaPayLimit();

                                    if (Util.hasText(debitRemainingLimit.getLimitId().getDescription())) {
                                        nayaPayLimit.setTransaction(debitRemainingLimit.getLimitId().getDescription());
                                    } else {
                                        nayaPayLimit.setTransaction(debitRemainingLimit.getLimitId().getTransactionType().getTxndesc());
                                    }

                                    logger.info("Current cycle date : [" + debitRemainingLimit.getCycleEndDate() + "]");
                                    logger.info("Checking for month : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6) + "]");
                                    logger.info("Checking for year : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4) + "]");
                                    logger.info("Checking for current date : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()) + "]");

                                    CMSLimitCycleType cmsLimitCycleType = new CMSLimitCycleType(Integer.parseInt(debitRemainingLimit.getLimitId().getCycleLengthType()));

                                    if (cmsLimitCycleType.equals(CMSLimitCycleType.DAILY)) {
                                        if (WebServiceUtil.limitcycleDateFormat.format(new Date()).equals(debitRemainingLimit.getCycleEndDate())) {
                                            nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                            nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                            Long amount = 0L;
                                            if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                    && debitRemainingLimit.getIndividualLimitId() != null) {
                                                amount = Long.parseLong(debitRemainingLimit.getIndividualLimitId().getAmount())
                                                        - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                            } else {
                                                amount = Long.parseLong(debitRemainingLimit.getLimitId().getAmount())
                                                        - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                            }
                                            nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                            logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                        } else {
                                            if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                    && debitRemainingLimit.getIndividualLimitId() != null) {
                                                nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                                nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                            } else {
                                                nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                            }

                                            nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                            logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                            logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                            logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                        }
                                    }

                                    if (cmsLimitCycleType.equals(CMSLimitCycleType.MONTHLY)) {
                                        if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6).equals(debitRemainingLimit.getCycleEndDate().substring(4, 6))) {
                                            nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                            nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                            Long amount = 0L;
                                            if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                    && debitRemainingLimit.getIndividualLimitId() != null) {
                                                amount = Long.parseLong(debitRemainingLimit.getIndividualLimitId().getAmount())
                                                        - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                            } else {
                                                amount = Long.parseLong(debitRemainingLimit.getLimitId().getAmount())
                                                        - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                            }
                                            nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                            logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                        } else {
                                            if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                    && debitRemainingLimit.getIndividualLimitId() != null) {
                                                nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                                nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                            } else {
                                                nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                            }

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                            logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                            logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                            nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                            logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                        }
                                    }

                                    if (cmsLimitCycleType.equals(CMSLimitCycleType.YEARLY)) {
                                        if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4).equals(debitRemainingLimit.getCycleEndDate().substring(2, 4))) {
                                            nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                            nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                            Long amount = 0L;
                                            if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                    && debitRemainingLimit.getIndividualLimitId() != null) {
                                                amount = Long.parseLong(debitRemainingLimit.getIndividualLimitId().getAmount())
                                                        - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                            } else {
                                                amount = Long.parseLong(debitRemainingLimit.getLimitId().getAmount())
                                                        - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                            }
                                            nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                            logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                        } else {
                                            //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                            if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                    && debitRemainingLimit.getIndividualLimitId() != null) {
                                                nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                                nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                            } else {
                                                nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                            }

                                            logger.info("Executing Daily Limit flow...");
                                            logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                            logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                            logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                            logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                            nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                            logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                        }
                                    }

                                    if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                            && debitRemainingLimit.getIndividualLimitId() != null) {
                                        nayaPayLimit.setCustomlimitflag("true");
                                    } else {
                                        nayaPayLimit.setCustomlimitflag("false");
                                    }

                                    cardObject.getNayapaylimits().add(nayaPayLimit);

                                }
                            }

                            dbQuery = "from " + CMSCreditRemainingLimit.class.getName() + " c where (c.relation= :ACCTNUMBER or c.relation= :CARD_NO) and c.limitId.isActive='1' ";
                            params = new HashMap<String, Object>();
                            params.put("CARD_NO", cardObject.getCardnumber());
                            params.put("ACCTNUMBER", usernprel.getAccount().getAccountNumber());
                            List<CMSCreditRemainingLimit> cmsCreditRemainingLimits = GeneralDao.Instance.find(dbQuery, params);

                            if (cmsCreditRemainingLimits != null && cmsCreditRemainingLimits.size() > 0) {
                                for (CMSCreditRemainingLimit cmsCreditRemainingLimit : cmsCreditRemainingLimits) {
                                    if (cmsCreditRemainingLimit.getLimitId().getProductId().equals(usernprel.getAccount().getProduct())) {
                                        NayaPayLimit nayaPayLimit = new NayaPayLimit();

                                        if (Util.hasText(cmsCreditRemainingLimit.getLimitId().getDescription())) {
                                            nayaPayLimit.setTransaction(cmsCreditRemainingLimit.getLimitId().getDescription());
                                        } else {
                                            nayaPayLimit.setTransaction(cmsCreditRemainingLimit.getLimitId().getTransactionType().getTxndesc());
                                        }

                                        logger.info("Current cycle date : [" + cmsCreditRemainingLimit.getCycleEndDate() + "]");
                                        logger.info("Checking for month : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6) + "]");
                                        logger.info("Checking for year : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4) + "]");
                                        logger.info("Checking for current date : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()) + "]");

                                        CMSLimitCycleType cmsLimitCycleType = new CMSLimitCycleType(Integer.parseInt(cmsCreditRemainingLimit.getLimitId().getCycleLengthType()));

                                        if (cmsLimitCycleType.equals(CMSLimitCycleType.DAILY)) {
                                            if (WebServiceUtil.limitcycleDateFormat.format(new Date()).equals(cmsCreditRemainingLimit.getCycleEndDate())) {
                                                nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getRemainingAmount());
                                                nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getRemainingFrequency());

                                                logger.info("Executing Daily Limit flow...");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                Long amount = 0L;
                                                if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                        && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                    amount = Long.parseLong(cmsCreditRemainingLimit.getIndividualLimitId().getAmount())
                                                            - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                                } else {
                                                    amount = Long.parseLong(cmsCreditRemainingLimit.getLimitId().getAmount())
                                                            - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                                }
                                                nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                                logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                            } else {
                                                if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                        && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                    nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getIndividualLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                } else {
                                                    nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getLimitId().getFrequencyLength());
                                                }

                                                nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                                logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                                logger.info("Executing Daily Limit flow...");
                                                logger.info("Current Debit Limit : [" + cmsCreditRemainingLimit.getId() + "]");
                                                logger.info("Debit Limit : [" + cmsCreditRemainingLimit.getLimitId().getId() + "]");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                            }
                                        }

                                        if (cmsLimitCycleType.equals(CMSLimitCycleType.MONTHLY)) {
                                            if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6).equals(cmsCreditRemainingLimit.getCycleEndDate().substring(4, 6))) {
                                                nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getRemainingAmount());
                                                nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getRemainingFrequency());

                                                logger.info("Executing Daily Limit flow...");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                Long amount = 0L;
                                                if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                        && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                    amount = Long.parseLong(cmsCreditRemainingLimit.getIndividualLimitId().getAmount())
                                                            - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                                } else {
                                                    amount = Long.parseLong(cmsCreditRemainingLimit.getLimitId().getAmount())
                                                            - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                                }
                                                nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                                logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                            } else {
                                                if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                        && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                    nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getIndividualLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                } else {
                                                    nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getLimitId().getFrequencyLength());
                                                }

                                                logger.info("Executing Daily Limit flow...");
                                                logger.info("Current Debit Limit : [" + cmsCreditRemainingLimit.getId() + "]");
                                                logger.info("Debit Limit : [" + cmsCreditRemainingLimit.getLimitId().getId() + "]");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                                logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                            }
                                        }

                                        if (cmsLimitCycleType.equals(CMSLimitCycleType.YEARLY)) {
                                            if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4).equals(cmsCreditRemainingLimit.getCycleEndDate().substring(2, 4))) {
                                                nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getRemainingAmount());
                                                nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getRemainingFrequency());

                                                logger.info("Executing Daily Limit flow...");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                Long amount = 0L;
                                                if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                        && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                    amount = Long.parseLong(cmsCreditRemainingLimit.getIndividualLimitId().getAmount())
                                                            - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                                } else {
                                                    amount = Long.parseLong(cmsCreditRemainingLimit.getLimitId().getAmount())
                                                            - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                                }
                                                nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                                logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                            } else {
                                                //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                                if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                        && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                    nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getIndividualLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                } else {
                                                    nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getLimitId().getFrequencyLength());
                                                }

                                                logger.info("Executing Daily Limit flow...");
                                                logger.info("Current Debit Limit : [" + cmsCreditRemainingLimit.getId() + "]");
                                                logger.info("Debit Limit : [" + cmsCreditRemainingLimit.getLimitId().getId() + "]");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                                logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                            }
                                        }

                                        if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                            nayaPayLimit.setCustomlimitflag("true");
                                        } else {
                                            nayaPayLimit.setCustomlimitflag("false");
                                        }

                                        cardObject.getNayapaylimits().add(nayaPayLimit);
                                    }
                                }
                            }
                            //////////////////////////////////////////////////////////////////////////////////////////////////////////

                            // Asim Shahzad, Date : 14th Jan 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 (Release # 1)

                            dbQuery = "from " + CMSCardControlConfig.class.getName() + " c where c.card= :card ";
                            params = new HashMap<String, Object>();
                            params.put("card", cmsCard);
                            CMSCardControlConfig obj_CardControlConfig = (CMSCardControlConfig) GeneralDao.Instance.findObject(dbQuery, params);

                            //m.rehman: 16-02-2021, in case card control not found, set default controls
                            if (obj_CardControlConfig == null) {
                                obj_CardControlConfig = new CMSCardControlConfig();
                                obj_CardControlConfig.setOnlineEnabled(true);
                                obj_CardControlConfig.setNFCEnabled(true);
                                obj_CardControlConfig.setMagStripeEnabled(true);
                                obj_CardControlConfig.setInternationalTxnsEnabled(true);
                                obj_CardControlConfig.setCashWithdrawalEnabled(true);
                                obj_CardControlConfig.setChipPinEnabled(true);
                            }

                            cardObject.setIsChipPinEnabled((obj_CardControlConfig.getChipPinEnabled() ? "true" : "false"));
                            cardObject.setIsMagStripeEnabled((obj_CardControlConfig.getMagStripeEnabled() ? "true" : "false"));
                            cardObject.setIsCashWithdrawalEnabled((obj_CardControlConfig.getCashWithdrawalEnabled() ? "true" : "false"));
                            cardObject.setIsNFCEnabled((obj_CardControlConfig.getNFCEnabled() ? "true" : "false"));
                            cardObject.setIsOnlineEnabled((obj_CardControlConfig.getOnlineEnabled() ? "true" : "false"));
                            cardObject.setIsInternationalTxnsEnabled((obj_CardControlConfig.getInternationalTxnsEnabled() ? "true" : "false"));

                            // ========================================================================================================

                            // Asim Shahzad, Date : 4th Feb 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 (Release # 3)

                            if (cmsCard.getProduct().getProductType().equals("CARD_LVL0") || cmsCard.getProduct().getProductType().equals("CARD_LVL1")) {
                                cardObject.setCardtype("paypak_physical");
                            }
                            if (cmsCard.getProduct().getProductType().equals("VISA_DEBIT")) {
                                cardObject.setCardtype("visa_physical");
                            }
                            if (cmsCard.getProduct().getProductType().equals("VISA_VIRTUAL")) {
                                cardObject.setCardtype("visa_virtual");
                            }

                            // ========================================================================================================

                            cardObjectList.add(cardObject);
                        }

                        if (cardObjectList != null && cardObjectList.size() > 0) {
                            wsmodel.setCardobjectlist(cardObjectList);
                        }

                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        logger.error("No Card Record found, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //05 Invalid Card refer To Document Update THIS
                        return wsmodel;
                    }
                } else {
                    logger.error("No Wallet Account found for User Id [" + wsmodel.getUserid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //03 Account Inactive -- refer to Document
                    return wsmodel;
                }

            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing SupportPortalGetUserDebitCard..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetMerchantWallet(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing GetMerchantWallet Request...");
            String dbQuery;
            Map<String, Object> params;
            boolean walletFound = false;

            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getMerchantid());

            List<NayaPayRelation> nayaPayRelationList = GeneralDao.Instance.find(dbQuery, params);

            if (nayaPayRelationList != null && nayaPayRelationList.size() > 0) {
                CMSAccount userwallet;// = nrp.getAccount();

                for (NayaPayRelation nayaPayRelation : nayaPayRelationList) {

                    userwallet = nayaPayRelation.getAccount();

                    if (userwallet != null && userwallet.getCategory().equals(AccType.CAT_MERCHANT_WALLET_VALUE)) {

                        logger.info("Wallet found, getting data...");
                        walletFound = true;

                        Currency currency = GlobalContext.getInstance().getCurrency(Integer.parseInt(userwallet.getCurrency()));
                        if (currency != null) {
                            wsmodel.setAccountcurrency(currency.getName());
                        } else {
                            wsmodel.setAccountcurrency(GlobalContext.getInstance().getBaseCurrency().getName());
                        }
                        //wsmodel.setCurrency(GlobalContext.getInstance().getCurrency(Integer.parseInt(userwallet.getCurrency())).getName());

                        wsmodel.setAcctbalance(StringUtils.leftPad(userwallet.getAvailableBalance(), 12, "0"));
                        wsmodel.setAccountnumber(userwallet.getAccountNumber());

                        // Asim Shahzad, Date : 8th Jan 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071
//                        wsmodel.setAtlStatus(userwallet.getCustomer().getATLActive());
                        // ========================================================================================================

                        break;
                    }
                }

                if (walletFound) {
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                } else {
                    logger.info("No Wallet Account Found for Merchant [ " + wsmodel.getMerchantid() + ". rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);

                }

                return wsmodel;

            } else {
                logger.info("No Account Relation Found for Merchant [ " + wsmodel.getMerchantid() + ". rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                return wsmodel;
            }

        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing MarkDisputedTransaction..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetMerchantDebitCardWallet(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing GetMerchantDebitCardWallet Request...");
            String dbQuery;
            Map<String, Object> params;
            boolean walletFound = false;

            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getMerchantid());

            List<NayaPayRelation> nayaPayRelationList = GeneralDao.Instance.find(dbQuery, params);

            if (nayaPayRelationList != null && nayaPayRelationList.size() > 0) {
                CMSAccount userwallet;// = nrp.getAccount();

                for (NayaPayRelation nayaPayRelation : nayaPayRelationList) {

                    userwallet = nayaPayRelation.getAccount();

                    if (userwallet != null && userwallet.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {

                        logger.info("Wallet found, getting data...");
                        walletFound = true;

                        Currency currency = GlobalContext.getInstance().getCurrency(Integer.parseInt(userwallet.getCurrency()));
                        if (currency != null) {
                            wsmodel.setAccountcurrency(currency.getName());
                        } else {
                            wsmodel.setAccountcurrency(GlobalContext.getInstance().getBaseCurrency().getName());
                        }
                        //wsmodel.setCurrency(GlobalContext.getInstance().getCurrency(Integer.parseInt(userwallet.getCurrency())).getName());
                        wsmodel.setAcctbalance(StringUtils.leftPad(userwallet.getAvailableBalance(), 12, "0"));
                        wsmodel.setAccountnumber(userwallet.getAccountNumber());
                        break;
                    }
                }

                if (walletFound) {
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                } else {
                    logger.info("No Prepaid Wallet Account Found for Merchant [ " + wsmodel.getMerchantid() + ". rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);

                }

                return wsmodel;

            } else {
                logger.info("No Account Relation Found for Merchant [ " + wsmodel.getMerchantid() + ". rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                return wsmodel;
            }

        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing MarkDisputedTransaction..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetMerchantDebitCard(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing GetMerchantDebitCard Request...");
            String dbQuery;
            Map<String, Object> params;
            boolean cardFound = false;
            CardObject cardObject;
            List<CardObject> cardObjectList;

            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getMerchantid());

            List<NayaPayRelation> nayaPayRelationList = GeneralDao.Instance.find(dbQuery, params);

            if (nayaPayRelationList != null && nayaPayRelationList.size() > 0) {
                CMSAccount prepaidWallet;// = nrp.getAccount();
                cardObjectList = new ArrayList<CardObject>();
                for (NayaPayRelation nayaPayRelation : nayaPayRelationList) {

                    prepaidWallet = nayaPayRelation.getAccount();

                    if (prepaidWallet != null && prepaidWallet.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {

                        logger.info("Prepaid Wallet found, now searching for prepaid card ...");

                        CMSCard prepaidCard = prepaidWallet.getCard();

                        if (prepaidCard != null && prepaidCard.getProduct().getProductType().equals("PREPAID")) {
                            cardObject = new CardObject();
                            cardObject.setId(prepaidCard.getId().toString());
                            cardObject.setCardnumber(prepaidCard.getCardNumber());
                            cardObject.setCardexpiry((Util.hasText(prepaidCard.getExpiryDate())) ? prepaidCard.getExpiryDate().substring(2, 6) : "");
                            cardObject.setCreationdate((Util.hasText(prepaidCard.getRequestDate())) ? prepaidCard.getRequestDate().substring(0, 8) : "");
                            cardObject.setCardstatus(prepaidCard.getCardStatus());
                            cardObject.setCardnumberlastdigits(prepaidCard.getCardNoLastDigits());
                            cardObject.setActivationdate((Util.hasText(prepaidCard.getActivationDate())) ? prepaidCard.getActivationDate().substring(0, 8) : "");
                            cardObjectList.add(cardObject);
                        }
                    }
                }

                if (cardObjectList != null && cardObjectList.size() > 0) {
                    logger.info("Prepaid card found, returning ...");
                    wsmodel.setCardobjectlist(cardObjectList);
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                } else {
                    logger.info("No Prepaid Card Found for Merchant [ " + wsmodel.getMerchantid() + ". rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);

                }

                return wsmodel;

            } else {
                logger.info("No Account Relation Found for Merchant [ " + wsmodel.getMerchantid() + ". rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                return wsmodel;
            }

        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing MarkDisputedTransaction..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteRequestMerchantDebitCard(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing RequestMerchantDebitCard Request...");
            String dbQuery, prevStatus;
            Map<String, Object> params;
            CMSActivityLog cmsActivityLog;
            boolean walletFlag = false;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getMerchantid());

            List<NayaPayRelation> nprel = GeneralDao.Instance.find(dbQuery, params);

            if (nprel != null && nprel.size() > 0) {
                CMSAccount prepaidWallet;
                for (NayaPayRelation nayaPayRelation : nprel) {
                    prepaidWallet = nayaPayRelation.getAccount();

                    if (prepaidWallet != null && prepaidWallet.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {

                        walletFlag = true;
                        //checking if existing prepaid card available, disable that card and assign new one
                        if (prepaidWallet.getCard() != null) {
                            logger.info("Existing prepaid card available, blocking card ...");
                            prevStatus = prepaidWallet.getCard().getCardStatus();
                            prepaidWallet.getCard().setCardStatus("02");
                            GeneralDao.Instance.saveOrUpdate(prepaidWallet.getCard());

                            logger.info("Saving card activity ....");
                            cmsActivityLog = new CMSActivityLog();
                            cmsActivityLog.setRelation(prepaidWallet.getCard().getCardNumber());
                            cmsActivityLog.setPreviousStatus(prevStatus);
                            cmsActivityLog.setCurrentStatus(prepaidWallet.getCard().getCardStatus());
                            cmsActivityLog.setSourceType("API");
                            cmsActivityLog.setSourceName(wsmodel.getServicename());
                            cmsActivityLog.setActivityDateTime(DateTime.now());
                            GeneralDao.Instance.saveOrUpdate(cmsActivityLog);
                        }

                        //if COD flag is false, need to calculate charges and deduct from wallet
                        if (Util.hasText(wsmodel.getCodflag()) && wsmodel.getCodflag().equals("false")) {
                            logger.info("COD flag is false, need to calculate card issuance charges, if any, and deduct from wallet ...");

                            //m.rehman: Euronet integration, add local/international flag in charges
                            //getting transaction charges
                            FetchTransactionCharge(wsmodel, prepaidWallet.getProduct(), "0");      //0-false

                            //deduct from wallet
                            if (!FinanceManager.DebitCardRequest(wsmodel, prepaidWallet)) {
                                logger.error("Unable to apply charges for Merchant Debit Card Request ...");
                                break;
                                //return wsmodel;
                            }

                        } else {
                            logger.info("COD flag is true, no need to calculate card issuance charges ...");
                        }

                        if (WalletCMSFunctions.CreatePrepaidCardProfile(wsmodel, prepaidWallet)) {
                            logger.info("Prepaid Card Profile Created Successfully for Merchant [" + wsmodel.getMerchantid() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                            wsmodel.setIncludeinstatement(1);
                            ////////////////////////////////////////////////////////////////////////////////////////////////////

                        } else {
                            logger.error("Unable to Create Prepaid Card Profile for Merchant [" + wsmodel.getMerchantid() + "]");
                            //wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                        }
                        break;
                    }
                }

                if (!walletFlag) {
                    logger.info("No Prepaid Wallet Found for Merchant [ " + wsmodel.getMerchantid() + ". rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                }

                return wsmodel;
            } else {
                logger.info("No Account Relation Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND);
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing RequestMerchantDebitCard ..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    public static WalletCMSWsEntity ExecuteActivateMerchantDebitCard(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing ActivateMerchantDebitCard Request...");
            String dbQuery, prevStatus;
            Map<String, Object> params;
            boolean walletFlag = false;
            CMSCard prepaidCard;
            CMSActivityLog cmsActivityLog;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getMerchantid());

            List<NayaPayRelation> nprel = GeneralDao.Instance.find(dbQuery, params);

            if (nprel != null && nprel.size() > 0) {
                CMSAccount prepaidWallet;
                for (NayaPayRelation nayaPayRelation : nprel) {
                    prepaidWallet = nayaPayRelation.getAccount();

                    if (prepaidWallet != null && prepaidWallet.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {

                        walletFlag = true;
                        logger.info("Prepaid Wallet found, proceeding ...");
                        /*
                        logger.info("Checking previous Prepaid Card, if exists");

                        prepaidCard = prepaidWallet.getCard();
                        if (prepaidCard != null) {
                            logger.info("Prepaid Card already exist, block existing card ...");
                            prevStatus = prepaidCard.getCardStatus();
                            prepaidCard.setCardStatus("90");    //90 - Permanent block
                            GeneralDao.Instance.saveOrUpdate(prepaidCard);

                            logger.info("Saving card activity ....");
                            cmsActivityLog = new CMSActivityLog();
                            cmsActivityLog.setRelation(prepaidCard.getCardNumber());
                            cmsActivityLog.setPreviousStatus(prevStatus);
                            cmsActivityLog.setCurrentStatus(prepaidCard.getCardStatus());
                            cmsActivityLog.setSourceType("API");
                            cmsActivityLog.setSourceName(wsmodel.getServicename());
                            cmsActivityLog.setActivityDateTime(DateTime.now());
                            GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                        } else {
                            logger.info("No existing Prepaid Card found ...");
                        }
                        */

                        dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO ";
                        params = new HashMap<String, Object>();
                        params.put("CARDNO", wsmodel.getCardnumber());
                        prepaidCard = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);

                        if (prepaidCard != null && prepaidWallet.getCard() != null && prepaidCard.equals(prepaidWallet.getCard())) {

                            if (prepaidCard.getCardStatus().equals("00") || prepaidCard.getCardStatus().equals("90")) {
                                logger.error("Card already in Active or Blocked State, cannot Activate Card. rejecting...");
                                wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //12 Invalid Card Status refer to Document
                                return wsmodel;

                            } else if (prepaidCard.getCardStatus().equals("14")) {

                                logger.info("Prepaid Card found with Fresh Card status, proceeding ...");
                                List<CMSAuth> lstcardrelation = null;
                                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation ";// + " and c.channel = :chnnl ";
                                params = new HashMap<String, Object>();
                                params.put("relation", prepaidCard.getCardNumberExpiryRelation());
                                lstcardrelation = GeneralDao.Instance.find(dbQuery, params);

                                if (lstcardrelation == null || lstcardrelation.size() <= 0) {
                                    logger.error("Card Relation not found for relation [" + prepaidCard.getCardNumberExpiryRelation() + "], rejecting...");
                                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //Invalid Card Record ; Raza update THIS
                                    return wsmodel;
                                }

                                logger.info("Generating Prepaid Card PIN ...");
                                //m.rehman: setting last digits in WSEntity object for verification after decryption
                                //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                                wsmodel.setCardlastdigits(prepaidCard.getCardNoLastDigits());
                                //===============================================================================================================
                                if (!WalletCMSFunctions.GenerateCardPIN(wsmodel, lstcardrelation)) {
                                    logger.error("Prepaid Card PIN generation failed, rejecting...");
                                    //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                                    return wsmodel;
                                }

                                logger.info("Activating Prepaid Card ...");
                                Set<CMSAccount> acctlist = new HashSet<CMSAccount>();
                                acctlist.add(prepaidWallet);
                                prepaidCard.setList_CustAccounts(acctlist);
                                prevStatus = prepaidCard.getCardStatus();
                                prepaidCard.setCardStatus("00");
                                prepaidCard.setActivationDate(WebServiceUtil.dateFormat.format(new Date()));
                                GeneralDao.Instance.saveOrUpdate(prepaidCard);
                                wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                                logger.info("Saving card activity ....");
                                cmsActivityLog = new CMSActivityLog();
                                cmsActivityLog.setRelation(prepaidCard.getCardNumber());
                                cmsActivityLog.setPreviousStatus(prevStatus);
                                cmsActivityLog.setCurrentStatus(prepaidCard.getCardStatus());
                                cmsActivityLog.setSourceType("API");
                                cmsActivityLog.setSourceName(wsmodel.getServicename());
                                cmsActivityLog.setActivityDateTime(DateTime.now());
                                GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                                return wsmodel;
                            } else {
                                logger.error("Invalid Card Status [" + prepaidCard.getCardStatus() + "], cannot Activate Prepaid Card rejecting...");
                                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //12 Invalid Card Status refer to Document
                            }
                        } else {
                            logger.error("Card not found for UserId [" + wsmodel.getUserid() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //05 Card not found refer to Document
                        }

                        break;
                    }
                }

                if (!walletFlag) {
                    logger.info("No Prepaid Wallet Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                }

                return wsmodel;
            } else {
                logger.info("No Account Relation Found for Merchant [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing ActivateMerchantDebitCard ..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteUpdateMerchantDebitCardPIN(WalletCMSWsEntity wsmodel) {
        logger.info("Executing UpdateMerchantDebitCardPIN Request...");

        try {
            String dbQuery;
            Map<String, Object> params;
            boolean walletFlag = false;
            CMSCard prepaidCard;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getMerchantid());

            List<NayaPayRelation> nprel = GeneralDao.Instance.find(dbQuery, params);

            if (nprel != null && nprel.size() > 0) {
                CMSAccount prepaidWallet;
                for (NayaPayRelation nayaPayRelation : nprel) {
                    prepaidWallet = nayaPayRelation.getAccount();

                    if (prepaidWallet != null && prepaidWallet.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {

                        walletFlag = true;
                        logger.info("Prepaid Wallet found, proceeding ...");
                        logger.info("Checking Prepaid Card ...");

                        prepaidCard = prepaidWallet.getCard();
                        if (prepaidCard == null) {
                            logger.error("No Prepaid Card found, rejecting ...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND);

                        } else if (!prepaidCard.getCardNumber().equals(wsmodel.getCardnumber())) {
                            logger.error("Prepaid Card number not matched with given card number found, rejecting ...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND);

                        } else {
                            dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                            params = new HashMap<String, Object>();
                            params.put("relation", prepaidCard.getCardNumberExpiryRelation());
                            params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                            CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                            if (cardrelation == null) {
                                logger.error("Card Relation not found for relation [" + prepaidCard.getCardNumberExpiryRelation() + "], rejecting...");
                                wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //93
                                return wsmodel;
                            }

                            //m.rehman: setting last digits in WSEntity object for verification after decryption
                            //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                            wsmodel.setCardlastdigits(prepaidCard.getCardNoLastDigits());
                            //===============================================================================================================
                            //document 4.6.3 - No existing pin send in this call
                            /*
                            if(!WalletCMSFunctions.ValidateCardPIN(wsmodel,cardrelation))
                            {
                                logger.error("Card PIN validation failed, rejecting...");
                                //wsmodel.setRespcode(ISOResponseCodes.NP_BAD_CARD_PIN);
                                return wsmodel;
                            }
                            */

                            //need to change card pin for all channels
                            dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation ";
                            params = new HashMap<String, Object>();
                            params.put("relation", prepaidCard.getCardNumberExpiryRelation());
                            List<CMSAuth> cardrelationList = GeneralDao.Instance.find(dbQuery, params);
                            if (!WalletCMSFunctions.ChangeCardPIN(wsmodel, cardrelationList)) {
                                logger.error("Card PIN validation failed, rejecting...");
                                wsmodel.setRespcode(ISOResponseCodes.NP_BAD_CARD_PIN);
                                return wsmodel;
                            }

                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        }

                        break;
                    }
                }

                if (!walletFlag) {
                    logger.info("No Prepaid Wallet Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                }

                return wsmodel;
            } else {
                logger.info("No Account Relation Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing ExecuteUpdateMerchantDebitCardPIN..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteEnableMerchantDebitCard(WalletCMSWsEntity wsmodel) {
        logger.info("Executing " + wsmodel.getServicename() + " Request...");

        try {
            String dbQuery, prevStatus;
            Map<String, Object> params;
            boolean walletFlag = false;
            CMSCard prepaidCard;
            CMSActivityLog cmsActivityLog;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getMerchantid());

            List<NayaPayRelation> nprel = GeneralDao.Instance.find(dbQuery, params);

            if (nprel != null && nprel.size() > 0) {
                CMSAccount prepaidWallet;
                for (NayaPayRelation nayaPayRelation : nprel) {
                    prepaidWallet = nayaPayRelation.getAccount();

                    if (prepaidWallet != null && prepaidWallet.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {

                        walletFlag = true;
                        logger.info("Prepaid Wallet found, proceeding ...");
                        logger.info("Checking Prepaid Card ...");

                        prepaidCard = prepaidWallet.getCard();
                        if (prepaidCard == null) {
                            logger.error("No Prepaid Card found, rejecting ...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND);

                        } else if (!prepaidCard.getCardNumber().equals(wsmodel.getCardnumber())) {
                            logger.error("Prepaid Card number not matched with gievn card number found, rejecting ...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND);

                        } else {

                            if (wsmodel.getEnableflag().equals("true")) {
                                if (!prepaidCard.getCardStatus().equals("02")) //Raza only do if 02
                                {
                                    logger.error("Prepaid Card not in Disable State, cannot Enable Card. rejecting...");
                                    wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION);
                                    //return wsmodel;

                                } else {
                                    logger.info("Enabling Prepaid Card ...");
                                    prevStatus = prepaidCard.getCardStatus();
                                    prepaidCard.setCardStatus("00");
                                    prepaidCard.setActivationDate(WebServiceUtil.dateFormat.format(new Date()));
                                    GeneralDao.Instance.saveOrUpdate(prepaidCard);
                                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                                    logger.info("Saving card activity ....");
                                    cmsActivityLog = new CMSActivityLog();
                                    cmsActivityLog.setRelation(prepaidCard.getCardNumber());
                                    cmsActivityLog.setPreviousStatus(prevStatus);
                                    cmsActivityLog.setCurrentStatus(prepaidCard.getCardStatus());
                                    cmsActivityLog.setSourceType("API");
                                    cmsActivityLog.setSourceName(wsmodel.getServicename());
                                    cmsActivityLog.setActivityDateTime(DateTime.now());
                                    GeneralDao.Instance.saveOrUpdate(cmsActivityLog);
                                }
                            } else {
                                if (!prepaidCard.getCardStatus().equals("00")) //Raza only do if 02
                                {
                                    logger.error("Prepaid Card already in Active/Blocked State, cannot disable Card. rejecting...");
                                    wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION);
                                    //return wsmodel;

                                } else {
                                    logger.info("Disabling Prepaid Card ...");
                                    prevStatus = prepaidCard.getCardStatus();
                                    prepaidCard.setCardStatus("02");
                                    prepaidCard.setActivationDate(WebServiceUtil.dateFormat.format(new Date()));
                                    GeneralDao.Instance.saveOrUpdate(prepaidCard);
                                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                                    logger.info("Saving card activity ....");
                                    cmsActivityLog = new CMSActivityLog();
                                    cmsActivityLog.setRelation(prepaidCard.getCardNumber());
                                    cmsActivityLog.setPreviousStatus(prevStatus);
                                    cmsActivityLog.setCurrentStatus(prepaidCard.getCardStatus());
                                    cmsActivityLog.setSourceType("API");
                                    cmsActivityLog.setSourceName(wsmodel.getServicename());
                                    cmsActivityLog.setActivityDateTime(DateTime.now());
                                    GeneralDao.Instance.saveOrUpdate(cmsActivityLog);
                                }
                            }
                        }

                        break;
                    }
                }

                if (!walletFlag) {
                    logger.info("No Prepaid Wallet Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                }

                return wsmodel;
            } else {
                logger.info("No Account Relation Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing " + wsmodel.getServicename() + "..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteMerchantRefundTransaction(WalletCMSWsEntity wsmodel) {
        logger.info("Executing " + wsmodel.getServicename() + " Request...");

        try {
            String dbQuery;
            Map<String, Object> params;
            boolean walletFlag = false;
            CMSAccount userWallet, merchantWallet;

            //fetching original transaction
            dbQuery = "from " + WalletCMSWsEntity.class.getName() + " n where n.tranrefnumber = :TXN_REF_NUM";
            params = new HashMap<String, Object>();
            params.put("TXN_REF_NUM", wsmodel.getOrigdataelement());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //WalletCMSWsEntity origTxn = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params);
            WalletCMSWsEntity origTxn = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params, "n", LockMode.UPGRADE);

            if (origTxn != null) {
                if (origTxn.getRespcode() != null && origTxn.getRespcode().equals(ISOResponseCodes.APPROVED)) {
                    logger.info("Original Transaction found with approved response code, proceeding ...");
                    Integer refundAmount = Integer.parseInt(wsmodel.getAmounttransaction());
                    Integer origAmount = Integer.parseInt(origTxn.getAmounttransaction());

                    //s.mehtab: VP-NAP-202010292/ VC-NAP-202010294 - 29,Oct 2020 - Merchant Refund Transactions in customer listing
                    if (Util.hasText(origTxn.getUserid())) {
                        wsmodel.setUserid(origTxn.getUserid());
                    }

                    if (refundAmount > origAmount) {
                        logger.error("Refund Amount [" + wsmodel.getAmounttransaction() + "] is greater than " +
                                "Original Transaction Amount [ " + origTxn.getAmounttransaction() + "], rejecting ...");
                        wsmodel.setRespcode(ISOResponseCodes.BAD_AMOUNT);
                        return wsmodel;

                    } else if (Util.hasText(wsmodel.getNayapaytrantype())
                            && wsmodel.getNayapaytrantype().toUpperCase().equals(origTxn.getServicename().toUpperCase())) {
                        logger.error("Given Transaction Type [" + wsmodel.getNayapaytrantype() + "] does not match with " +
                                "Original Transaction Type [ " + origTxn.getServicename() + "], rejecting ...");
                        wsmodel.setRespcode(ISOResponseCodes.BAD_TRANSACTION_TYPE);
                        return wsmodel;

                    } else if (!origTxn.getServicename().equals("MerchantBillerTransaction")
                            && !origTxn.getServicename().equals("MerchantBillerCoreTransaction")
                            && !origTxn.getServicename().equals("MerchantRetailTransaction")
                            && !origTxn.getServicename().equals("MerchantRetailCoreTransaction")) {
                        logger.error("Refund do not allow for Transaction Type [" + origTxn.getServicename() + "], rejecting ...");
                        wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED);
                        return wsmodel;
                    }
                } else {
                    logger.error("Original Transaction already rejected with response code [ " + origTxn.getRespcode() + "], rejecting ...");
                    wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_ALREADY_REJECTED);
                    return wsmodel;
                }
            } else {
                logger.error("Original Transaction not found with Txn Ref No [ " + wsmodel.getOrigdataelement() + "], rejecting ...");
                wsmodel.setRespcode(ISOResponseCodes.NP_TRAN_SRC_NOT_FOUND);
                return wsmodel;
            }

            //fetching user wallet
            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", origTxn.getUserid());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);
            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

            if (nprel != null) {
                userWallet = nprel.getAccount();

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                userWallet = (CMSAccount) GeneralDao.Instance.getCurrentSession().get(CMSAccount.class, userWallet.getId(), LockMode.UPGRADE);
                GeneralDao.Instance.getCurrentSession().refresh(userWallet);
                ////////////////////////////////////////////////////////////////////////////////////

                if (userWallet != null) {
                    if (!userWallet.getStatus().equals("00")) {
                        logger.info("User Wallet state in not active for User Id [ " + origTxn.getUserid() + ", rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_DEST_INVALID_STATE);
                        return wsmodel;

                    } else {
                        logger.info("User Wallet found and active, proceeding ...");
                    }
                } else {
                    logger.info("User Wallet state in not active for User Id [ " + origTxn.getUserid() + ", rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DEST_INVALID_STATE);
                    return wsmodel;
                }
            } else {
                logger.info("No Wallet found for User Id [ " + origTxn.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND);
                return wsmodel;
            }

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getMerchantid());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //List<NayaPayRelation> nayaPayRelationList = GeneralDao.Instance.find(dbQuery, params);
            List<NayaPayRelation> nayaPayRelationList = GeneralDao.Instance.find(dbQuery, params, "c", LockMode.UPGRADE);

            if (nayaPayRelationList != null && nayaPayRelationList.size() > 0) {
                for (NayaPayRelation nayaPayRelation : nayaPayRelationList) {
                    merchantWallet = nayaPayRelation.getAccount();

                    if (merchantWallet != null && merchantWallet.getCategory().equals(AccType.CAT_MERCHANT_WALLET_VALUE)) {

                        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                        merchantWallet = (CMSAccount) GeneralDao.Instance.getCurrentSession().get(CMSAccount.class, merchantWallet.getId(), LockMode.UPGRADE);
                        GeneralDao.Instance.getCurrentSession().refresh(merchantWallet);
                        ////////////////////////////////////////////////////////////////////////////////////

                        walletFlag = true;
                        logger.info("Merchant Wallet found, proceeding ...");
                        if (FinanceManager.MerchantRefund(wsmodel, origTxn, merchantWallet, userWallet)) {
                            logger.info("Merchant Refund successful, returning ...");
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                            wsmodel.setIncludeinstatement(1);
                            ////////////////////////////////////////////////////////////////////////////////////////////////////

                        } else {
                            logger.error("Merchant Refund failed, rejecting ...");
                        }

                        break;
                    }
                }

                if (!walletFlag) {
                    logger.error("No Prepaid Wallet Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                }

                return wsmodel;
            } else {
                logger.error("No Account Relation Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND);
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing " + wsmodel.getServicename() + "..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteMerchantLoadUnloadDebitCard(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing MerchantDebitCard Request...");
            String dbQuery;
            Map<String, Object> params;
            boolean walletFound = true;
            CMSAccount merchantWallet = null, prepaidWallet = null;

            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getMerchantid());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //List<NayaPayRelation> nayaPayRelationList = GeneralDao.Instance.find(dbQuery, params);
            List<NayaPayRelation> nayaPayRelationList = GeneralDao.Instance.find(dbQuery, params, "c", LockMode.UPGRADE);

            if (nayaPayRelationList != null && nayaPayRelationList.size() > 0) {

                for (NayaPayRelation nayaPayRelation : nayaPayRelationList) {

                    if (nayaPayRelation.getAccount() != null && nayaPayRelation.getAccount().getCategory().equals(AccType.CAT_MERCHANT_WALLET_VALUE)) {
                        logger.info("Merchant Wallet found...");
                        merchantWallet = nayaPayRelation.getAccount();

                        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                        merchantWallet = (CMSAccount) GeneralDao.Instance.getCurrentSession().get(CMSAccount.class, merchantWallet.getId(), LockMode.UPGRADE);
                        GeneralDao.Instance.getCurrentSession().refresh(merchantWallet);
                        ////////////////////////////////////////////////////////////////////////////////////

                    } else if (nayaPayRelation.getAccount() != null && nayaPayRelation.getAccount().getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                        logger.info("Prepaid Wallet found...");
                        prepaidWallet = nayaPayRelation.getAccount();

                        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                        prepaidWallet = (CMSAccount) GeneralDao.Instance.getCurrentSession().get(CMSAccount.class, prepaidWallet.getId(), LockMode.UPGRADE);
                        GeneralDao.Instance.getCurrentSession().refresh(prepaidWallet);
                        ////////////////////////////////////////////////////////////////////////////////////
                    }
                }

                if (merchantWallet == null) {
                    logger.error("Merchant Wallet not found");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                    walletFound = false;
                }

                if (prepaidWallet == null) {
                    logger.error("Prepaid Wallet not found");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                    walletFound = false;
                }

                if (walletFound) {

                    if (!merchantWallet.getStatus().equals("00")) {
                        logger.error("Merchant Wallet is not active, rejecting ...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE);

                    } else if (!prepaidWallet.getStatus().equals("00")) {
                        logger.error("Prepaid Wallet is not active, rejecting ...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE);

                    } else {

                        //m.rehman: Euronet integration, add local/international flag in charges
                        //getting transaction charges
                        FetchTransactionCharge(wsmodel, merchantWallet.getProduct(), "0");      //0-false

                        if (wsmodel.getServicename().equals("MerchantLoadDebitCard")) {
                            if (FinanceManager.MerchantDebitCard(wsmodel, merchantWallet, prepaidWallet)) {
                                logger.info("Merchant Load Debit Card successful, returning ...");
                                wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                                //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                                wsmodel.setIncludeinstatement(1);
                                ////////////////////////////////////////////////////////////////////////////////////////////////////

                            } else {
                                logger.error("Merchant Load Debit Card failed, rejecting ...");
                            }
                        } else {
                            if (FinanceManager.MerchantDebitCard(wsmodel, prepaidWallet, merchantWallet)) {
                                logger.info("Merchant Unload Debit Card successful, returning ...");
                                wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                                //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                                wsmodel.setIncludeinstatement(1);
                                ////////////////////////////////////////////////////////////////////////////////////////////////////

                            } else {
                                logger.error("Merchant Unload Debit Card failed, rejecting ...");
                            }
                        }
                    }

                } else {
                    logger.info("Merchant/Prepaid Wallet Account not found for Merchant [ " + wsmodel.getMerchantid() + ". rejecting...");
                    //wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                }

                return wsmodel;

            } else {
                logger.info("No Account Relation Found for Merchant [ " + wsmodel.getMerchantid() + ". rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                return wsmodel;
            }

        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing MerchantDebitCard..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteMerchantUnloadWallet(WalletCMSWsEntity wsmodel) {
        logger.info("Executing " + wsmodel.getServicename() + " Request...");

        try {
            String dbQuery;
            Map<String, Object> params;
            boolean walletFlag = false;
            CMSAccount merchantWallet;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getMerchantid());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //List<NayaPayRelation> nayaPayRelationList = GeneralDao.Instance.find(dbQuery, params);
            List<NayaPayRelation> nayaPayRelationList = GeneralDao.Instance.find(dbQuery, params, "c", LockMode.UPGRADE);

            if (nayaPayRelationList != null && nayaPayRelationList.size() > 0) {
                for (NayaPayRelation nayaPayRelation : nayaPayRelationList) {
                    merchantWallet = nayaPayRelation.getAccount();

                    if (merchantWallet != null && merchantWallet.getCategory().equals(AccType.CAT_MERCHANT_WALLET_VALUE)) {

                        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                        merchantWallet = (CMSAccount) GeneralDao.Instance.getCurrentSession().get(CMSAccount.class, merchantWallet.getId(), LockMode.UPGRADE);
                        GeneralDao.Instance.getCurrentSession().refresh(merchantWallet);
                        ////////////////////////////////////////////////////////////////////////////////////

                        walletFlag = true;
                        logger.info("Merchant Wallet found, proceeding ...");

                        Currency currency = GlobalContext.getInstance().getCurrency(Integer.parseInt(merchantWallet.getCurrency()));
                        if (currency != null) {
                            wsmodel.setCurrency(currency.getName());
                        } else {
                            wsmodel.setCurrency(GlobalContext.getInstance().getBaseCurrency().getName());
                        }
                        //wsmodel.setCurrency(GlobalContext.getInstance().getCurrency(Integer.parseInt(merchantWallet.getCurrency())).getName());

                        //m.rehman: Euronet integration, add local/international flag in charges
                        //getting transaction charges
                        FetchTransactionCharge(wsmodel, merchantWallet.getProduct(), "0");      //0-false

                        //process wallet limit
                        if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, merchantWallet, null, Boolean.TRUE)) {
                            logger.error("Limit processing failed, rejecting...");
                            return wsmodel;
                        }

                        if (FinanceManager.MerchantUnloadWallet(wsmodel, merchantWallet)) {
                            logger.info("Merchant Unload Wallet successful, returning ...");
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                            wsmodel.setIncludeinstatement(1);
                            ////////////////////////////////////////////////////////////////////////////////////////////////////

                        } else {
                            logger.error("Merchant Unload Wallet failed, rejecting ...");

                            //process wallet limit
                            logger.error("Reversing Limit ...");
                            String respCode = wsmodel.getRespcode();
                            if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, merchantWallet, null, Boolean.FALSE)) {
                                logger.error("Limit processing failed, rejecting...");
                                return wsmodel;
                            }
                            wsmodel.setRespcode(respCode);
                        }

                        break;
                    }
                }

                if (!walletFlag) {
                    logger.error("No Prepaid Wallet Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                }

                return wsmodel;
            } else {
                logger.error("No Account Relation Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing " + wsmodel.getServicename() + "..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    public static WalletCMSWsEntity ExecuteGetMerchantWalletTransactionCharge(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing " + wsmodel.getServicename() + " Request...");

            String dbQuery, serviceName;
            Map<String, Object> params;
            boolean walletFlag = false;
            CMSAccount merchantWallet;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getMerchantid());

            List<NayaPayRelation> nayaPayRelationList = GeneralDao.Instance.find(dbQuery, params);

            if (nayaPayRelationList != null && nayaPayRelationList.size() > 0) {
                for (NayaPayRelation nayaPayRelation : nayaPayRelationList) {
                    merchantWallet = nayaPayRelation.getAccount();

                    if (merchantWallet != null && merchantWallet.getCategory().equals(AccType.CAT_MERCHANT_WALLET_VALUE)) {

                        walletFlag = true;
                        if (Util.hasText(merchantWallet.getStatus()) && merchantWallet.getStatus().equals("00")) {

                            logger.info("Merchant Wallet found, proceeding ...");

                            Currency currency = GlobalContext.getInstance().getCurrency(Integer.parseInt(merchantWallet.getCurrency()));
                            if (currency != null) {
                                wsmodel.setCurrency(currency.getName());
                            } else {
                                wsmodel.setCurrency(GlobalContext.getInstance().getBaseCurrency().getName());
                            }
                            //wsmodel.setCurrency(GlobalContext.getInstance().getCurrency(Integer.parseInt(merchantWallet.getCurrency())).getName());

                            //get transaction charges
                            serviceName = wsmodel.getServicename();
                            wsmodel.setServicename(wsmodel.getNayapaytrantype());

                            //m.rehman: Euronet integration, add local/international flag in charges
                            //getting transaction charges
                            FetchTransactionCharge(wsmodel, merchantWallet.getProduct(), "0");      //0-false

                            /*
                            if (!WalletCMSFunctions.VerifyWalletLimit(wsmodel, merchantWallet, null)) {
                                logger.error("Limit verifying failed, rejecting...");
                                wsmodel.setServicename(serviceName);
                                return wsmodel;
                            }
                            */
                            wsmodel.setServicename(serviceName);

                            serviceName = wsmodel.getNayapaytrantype();
                            logger.info("Merchant Wallet Account limit verified, checking balance ...");
                            if (!serviceName.equals("MerchantUnloadDebitCard")) {
                                Long availBalance = Long.parseLong(merchantWallet.getAvailableBalance());
                                Long actualBalance = Long.parseLong(merchantWallet.getActualBalance());
                                Long amount = Long.parseLong(wsmodel.getAmounttransaction());
                                Long sourceCharge = (Util.hasText(wsmodel.getAmttranfee())) ? Long.parseLong(wsmodel.getSrcchargeamount()) : 0L;
                                Long fee = (Util.hasText(wsmodel.getAmttranfee())) ? Long.parseLong(wsmodel.getAmttranfee()) : 0L;

                                if ((availBalance < (amount + sourceCharge + fee)) || (actualBalance < (amount + sourceCharge + fee))) {
                                    logger.error("Low Wallet Balance, rejecting ...");
                                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INSUFFICEIENT_BALANCE);

                                } else {
                                    logger.info("Wallet Account balance verified successfully ...");
                                }
                            } else {
                                logger.info("No need to verify balance for transaction [" + serviceName + "]");
                            }

                            break;
                        } else {
                            logger.error("Merchant Wallet is not active, rejecting ...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE);
                        }
                    }
                }

                if (!walletFlag) {
                    logger.error("No Prepaid Wallet Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                }

                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return wsmodel;
            } else {
                logger.error("No Account Relation Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing " + wsmodel.getServicename() + "..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetMerchantWalletTransactionList(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetMerchantWalletTransactionList Request...");

        try {
            String dbQuery;
            Map<String, Object> params;
            CMSAccount merchantWallet;
            boolean walletFlag = false;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getMerchantid());

            List<NayaPayRelation> nayaPayRelationList = GeneralDao.Instance.find(dbQuery, params);

            if (nayaPayRelationList != null && nayaPayRelationList.size() > 0) {
                for (NayaPayRelation nayaPayRelation : nayaPayRelationList) {
                    merchantWallet = nayaPayRelation.getAccount();

                    if (merchantWallet != null && merchantWallet.getCategory().equals(AccType.CAT_MERCHANT_WALLET_VALUE)) {

                        walletFlag = true;
                        logger.info("Merchant Wallet found, getting transaction from System ...");

                        //get transaction charges
                        params = new HashMap<String, Object>();
                        //m.rehman: 10-11-2021 - Nayapay Optimization
                        //dbQuery = "from " + MVFinancialLog.class.getName() + " t where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                        dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " t where " +
                                " t.merchantid = :MERCHANT_ID ";
                        params.put("MERCHANT_ID", wsmodel.getMerchantid());

                        if (Util.hasText(wsmodel.getAgentid())) {
                            dbQuery += " and t.agentid = :AGENT_ID ";
                            params.put("AGENT_ID", wsmodel.getAgentid());
                        }

                        if (Util.hasText(wsmodel.getFinancialflag()) && wsmodel.getFinancialflag().equals("true")) {
                            dbQuery += " and t.servicename in ('MerchantRefundTransaction', 'MerchantUnloadWallet', 'MerchantLoadDebitCard', 'MerchantUnloadDebitCard') ";
                        } else {
                            dbQuery += " and t.servicename not in ('MerchantRefundTransaction', 'MerchantUnloadWallet', 'MerchantLoadDebitCard', 'MerchantUnloadDebitCard') ";
                        }

                        dbQuery += " and t.respcode = '00' order by t.transdatetime desc ";

                        String query = "select count(*) " + dbQuery;
                        Long size = (Long) GeneralDao.Instance.findObject(query, params);
                        wsmodel.setTotalcount(size + "");

                        logger.info("Page Count [" + wsmodel.getPagecount() + "] Page Size [" + wsmodel.getPagesize() + "]");
                        Integer pageCount = Integer.parseInt(wsmodel.getPagecount());
                        Integer pageSize = Integer.parseInt(wsmodel.getPagesize());
                        logger.info("Converted Page Count [" + pageCount + "] Converted Page Size [" + pageSize + "]");
                        Integer startPosition = (pageCount * pageSize) - pageSize;
                        logger.info("Start Position [" + startPosition + "]");
                        Query query1 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                        query1.setProperties(params);
                        query1.setFirstResult(startPosition);
                        query1.setMaxResults(pageSize);

                        //m.rehman: 10-11-2021 - Nayapay Optimization
                        //List<MVFinancialLog> walletCMSWsEntityList = query1.list(); // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                        List<WalletCMSWsListingEntity> walletCMSWsEntityList = query1.list();

                        //List<WalletCMSWsEntity> walletCMSWsEntityList = GeneralDao.Instance.find(dbQuery, params);

                        List<UserTransaction> userTransactionList;
                        UserTransaction userTransaction;
                        if (walletCMSWsEntityList != null && walletCMSWsEntityList.size() > 0) {
                            logger.info("Transactions found, populating data ...");
                            userTransactionList = new ArrayList<UserTransaction>();

                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //for (MVFinancialLog wsEntity : walletCMSWsEntityList) { // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            for (WalletCMSWsListingEntity wsEntity : walletCMSWsEntityList) {
                                userTransaction = new UserTransaction();
                                userTransaction.setParentid(wsEntity.getParentid());
                                userTransaction.setMerchantid(wsEntity.getMerchantid());
                                userTransaction.setTransrefnum(wsEntity.getTranrefnumber());
                                //s.mehtab: VP-NAP-202010292/ VC-NAP-202010294 - 29,Oct 2020 - Merchant Refund Transactions in customer listing
                                userTransaction.setOrigdataelement(wsEntity.getOrigdataelement());

                                //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                //utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                //m.rehman: 08-10-2020, VP-NAP-202010081/ VC-NAP-202010081 - Deployment 08-10-2020
                                //userTransaction.setNayapaytype(wsEntity.getServicename());
                                if (wsEntity.getServicename().contains("Reversal")) {
                                    userTransaction.setNayapaytype(wsEntity.getServicename());
                                } else {
                                    userTransaction.setNayapaytype(Util.hasText(wsEntity.getNayapaytrantype()) ? wsEntity.getNayapaytrantype() : wsEntity.getServicename());
                                }
                                ////////////////////////////////////////////////////////////////////////////

                                userTransaction.setCurrency(wsEntity.getCurrency());

                                //m.rehman: 26-02-2021, Euronet Integration
                                //userTransaction.setAmount(wsEntity.getAmounttransaction());
                                userTransaction.setAmount((Util.hasText(wsEntity.getCbillamount())) ? wsEntity.getCbillamount() : wsEntity.getAmounttransaction());
                                /////////////////////////////////////////////////////////////////////////////////////////

                                userTransaction.setAgentid(wsEntity.getAgentid());
                                userTransaction.setTransdatetime(wsEntity.getTransdatetime());

                                // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                if (Util.hasText(wsEntity.getBenebankcode())) {
                                    userTransaction.setBankcode(wsEntity.getBenebankcode());
                                } else {
                                    userTransaction.setBankcode(wsEntity.getBankcode());
                                }
                                //==========================================================================

                                // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                if (Util.hasText(wsEntity.getBenebankaccountno())) {
                                    userTransaction.setAccountnumber(Util.hasText(wsEntity.getBenebankaccountno()) ? wsEntity.getBenebankaccountno().substring(wsEntity.getBenebankaccountno().length() - 4, wsEntity.getBenebankaccountno().length()) : "");
                                } else {
                                    userTransaction.setAccountnumber(Util.hasText(wsEntity.getAccountnumber()) ? wsEntity.getAccountnumber().substring(wsEntity.getAccountnumber().length() - 4, wsEntity.getAccountnumber().length()) : "");
                                }
                                //==========================================================================

                                userTransaction.setBranchname(wsEntity.getBranchname());
                                userTransaction.setSrcid(wsEntity.getUserid());
                                userTransaction.setDestid(wsEntity.getDestuserid());
                                userTransaction.setTerminalloc(wsEntity.getTermloc());
                                userTransaction.setMapid(wsEntity.getMapid());
                                userTransaction.setMerchantid(Util.hasText(wsEntity.getMerchantid()) ? wsEntity.getMerchantid() : wsEntity.getBillerid());
                                userTransaction.setMerchantname(Util.hasText(wsEntity.getMerchantname()) ? wsEntity.getMerchantname() : wsEntity.getBillername());
                                userTransaction.setDepositorname(wsEntity.getCustomername());
                                userTransaction.setBankcharge(wsEntity.getNayapaycharges());
                                //m.rehman: 19-08-2020, VC-NAP-202008112 - 'Purchase' and 'Cash withdrawal' transaction on SIT
                                //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                                userTransaction.setCardlastdigits(wsEntity.getCardlastdigits());
                                //===============================================================================================================

                                //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
                                userTransaction.setTaxamount(wsEntity.getNayapaytaxamount());
                                userTransaction.setOriginalapi(wsEntity.getOriginalapi());
                                userTransaction.setOriginaldatetime(wsEntity.getOrigtransdatetime());
                                userTransaction.setOriginalrrn(wsEntity.getOrigretrefno());
                                userTransaction.setOriginalstan(wsEntity.getOrigstan());
                                userTransaction.setNpticket(wsEntity.getNpticket());
                                userTransaction.setVrolticket(wsEntity.getVrolticket());
                                userTransaction.setRefundtype(wsEntity.getReserved());
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                userTransactionList.add(userTransaction);
                            }

                            //wsmodel.setTotalcount(userTransactionList.size()+"");
                            //wsmodel.setUsertransactions(userTransactionList);
                            //wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        } else {
                            logger.error("Transactions not found for Merchant Id [" + wsmodel.getMerchantid() + "]");
                            //wsmodel.setRespcode(ISOResponseCodes.NP_TRAN_SRC_NOT_FOUND);
                            break;
                        }

                        wsmodel.setUsertransactions(userTransactionList);
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        break;
                    }
                }

                if (!walletFlag) {
                    logger.error("No Wallet Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                }

                return wsmodel;
            } else {
                logger.error("No Account Relation Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetMerchantWalletTransactionList..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetMerchantWalletTransactionDetail(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetMerchantWalletTransactionDetail Request...");

        try {
            String dbQuery;
            Map<String, Object> params;
            CMSAccount merchantWallet;
            boolean walletFlag = false;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getMerchantid());

            List<NayaPayRelation> nayaPayRelationList = GeneralDao.Instance.find(dbQuery, params);

            if (nayaPayRelationList != null && nayaPayRelationList.size() > 0) {
                for (NayaPayRelation nayaPayRelation : nayaPayRelationList) {
                    merchantWallet = nayaPayRelation.getAccount();

                    if (merchantWallet != null && merchantWallet.getCategory().equals(AccType.CAT_MERCHANT_WALLET_VALUE)) {

                        walletFlag = true;
                        logger.info("Merchant Wallet found, getting transaction from System ...");

                        //get transaction charges
                        params = new HashMap<String, Object>();
                        //m.rehman: 10-11-2021 - Nayapay Optimization
                        //dbQuery = "from " + MVFinancialLog.class.getName() + " t where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                        dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " t where " +
                                " t.merchantid = :MERCHANT_ID " +
                                " and t.tranrefnumber = :TXN_REF_NUM " +
                                " order by t.id desc ";
                        params.put("MERCHANT_ID", wsmodel.getMerchantid());
                        params.put("TXN_REF_NUM", wsmodel.getOrigdataelement());
                        //m.rehman: 10-11-2021 - Nayapay Optimization
                        //List<MVFinancialLog> wsEntity = GeneralDao.Instance.find(dbQuery, params); // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                        List<WalletCMSWsListingEntity> wsEntity = GeneralDao.Instance.find(dbQuery, params);

                        if (wsEntity != null && wsEntity.size() > 0) {
                            logger.info("Transaction found, populating data ...");
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //MVFinancialLog tran = wsEntity.get(0); // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            WalletCMSWsListingEntity tran = wsEntity.get(0);
                            TransactionDetail td = new TransactionDetail();
                            td.setTransrefnum(tran.getTranrefnumber());
                            td.setNayapaytype(Util.hasText(tran.getNayapaytrantype()) ? tran.getNayapaytrantype() : tran.getServicename());
                            //td.setAcctid(tran.getAcctid());
                            td.setAcctalias(tran.getAcctalias());
                            td.setSrcid(tran.getUserid());
                            td.setSrcname(tran.getUsername());
                            td.setSrcnayapayid(tran.getNayapayid());
                            //td.setDestid(tran.getMerchantid());
                            td.setDestid(tran.getDestuserid());
                            //td.setDestname(tran.getMerchantname());
                            td.setDestname(tran.getDestusername());
                            td.setDestnayapayid(tran.getDestnayapayid());
                            td.setParentid(tran.getParentid());
                            td.setReferencenumber(tran.getReferencenumber());
                            td.setInvoiceid(tran.getInvoiceid());
                            td.setCurrency(tran.getCurrency());

                            //m.rehman: 26-02-2021, Euronet Integration
                            //td.setAmount(tran.getAmounttransaction());
                            td.setAmount((Util.hasText(tran.getCbillamount())) ? tran.getCbillamount() : tran.getAmounttransaction());
                            /////////////////////////////////////////////////////////////////////////////////////////

                            td.setTransdatetime(tran.getTransdatetime());
                            td.setMapid(tran.getMapid());
                            td.setPosinvoiceref(tran.getPosinvoiceref());
                            td.setTerminalid(tran.getTerminalid());
                            td.setAgentid(tran.getAgentid());
                            td.setStan(tran.getStan());
                            td.setDisputeflag(tran.getDisputeflag());
                            td.setSrccharge(tran.getSrcchargeamount());
                            td.setBankcharge(tran.getNayapaycharges());
                            td.setDepositorname(tran.getCustomername());
                            td.setTerminalloc(tran.getTermloc());
                            td.setOriginaltransactionid(tran.getOrigdataelement());

                            // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                            if (Util.hasText(tran.getBenebankaccountno())) {
                                td.setAccountnumber(Util.hasText(tran.getBenebankaccountno()) ? tran.getBenebankaccountno().substring(tran.getBenebankaccountno().length() - 4, tran.getBenebankaccountno().length()) : "");
                            } else {
                                td.setAccountnumber(Util.hasText(tran.getAccountnumber()) ? tran.getAccountnumber().substring(tran.getAccountnumber().length() - 4, tran.getAccountnumber().length()) : "");
                            }
                            //==========================================================================

                            td.setBranchname(tran.getBranchname());
                            //wsmodel.setTransactionDetail(td);
                            //td.setMerchantid(tran.getMerchantid());
                            //td.setMerchantname(tran.getMerchantname());
                            td.setMerchantid(Util.hasText(tran.getMerchantid()) ? tran.getMerchantid() : tran.getBillerid());
                            td.setMerchantname(Util.hasText(tran.getMerchantname()) ? tran.getMerchantname() : tran.getBillername());

                            // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                            if (Util.hasText(tran.getBenebankcode())) {
                                td.setBankcode(tran.getBenebankcode());
                            } else {
                                td.setBankcode(tran.getBankcode());
                            }
                            //==========================================================================

                            td.setDepositslipnumber(tran.getSlipnumber());

                            //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
                            td.setTaxamount(tran.getNayapaytaxamount());
                            td.setOriginalapi(tran.getOriginalapi());
                            td.setOriginaldatetime(tran.getOrigdataelement());
                            td.setOriginalrrn(tran.getOrigretrefno());
                            td.setOriginalstan(tran.getOrigstan());
                            td.setNpticket(tran.getNpticket());
                            td.setVrolticket(tran.getVrolticket());
                            td.setRefundtype(tran.getReserved());
                            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                            wsmodel.setTransactionDetail(td);
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        } else {
                            logger.error("Transaction not found with Ref no [" + wsmodel.getOrigdataelement() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND);
                            break;
                        }
                        break;
                    }
                }

                if (!walletFlag) {
                    logger.error("No Wallet Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                }

                return wsmodel;
            } else {
                logger.error("No Account Relation Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetMerchantWalletTransactionDetail..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetMerchantDebitCardTransactionList(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetMerchantDebitCardTransactionList Request...");

        try {
            String dbQuery;
            Map<String, Object> params;
            CMSAccount prepaidWallet;
            CMSCard prepaidCard;
            boolean walletFlag = false;
            boolean cardFlag = false;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getMerchantid());

            List<NayaPayRelation> nayaPayRelationList = GeneralDao.Instance.find(dbQuery, params);

            if (nayaPayRelationList != null && nayaPayRelationList.size() > 0) {
                for (NayaPayRelation nayaPayRelation : nayaPayRelationList) {
                    prepaidWallet = nayaPayRelation.getAccount();

                    if (prepaidWallet != null && prepaidWallet.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {

                        walletFlag = true;
                        logger.info("Merchant Prepaid Wallet found, getting transaction from System ...");

                        prepaidCard = prepaidWallet.getCard();
                        if (prepaidCard != null && prepaidCard.getCardNumber().equals(wsmodel.getCardnumber())) {
                            cardFlag = true;
                            logger.info("Merchant Prepaid Card found, getting transactions ...");

                            //get transaction charges
                            params = new HashMap<String, Object>();
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //dbQuery = "from " + MVFinancialLog.class.getName() + " t where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " t where " +
                                    " t.merchantid = :MERCHANT_ID " +
                                    " and t.cardnumber = :CARD_NO ";
                            params.put("MERCHANT_ID", wsmodel.getMerchantid());
                            params.put("CARD_NO", wsmodel.getCardnumber());

                            if (Util.hasText(wsmodel.getAgentid())) {
                                dbQuery += " and t.agentid = :AGENT_ID ";
                                params.put("AGENT_ID", wsmodel.getAgentid());
                            }

                            //m.rehman: 26-07-2021, VC-NAP-202107261 - Reverse transaction when 0120 message received from Visa
                            //adding STIP
                            if (Util.hasText(wsmodel.getFinancialflag()) && wsmodel.getFinancialflag().equals("true")) {
                                dbQuery += " and t.servicename in ('MerchantLoadDebitCard', 'MerchantUnloadDebitCard', 'RequestMerchantDebitCard', 'CashWithDrawal', 'Purchase','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund','STIP') ";  //m.rehman: 15-03-2021, Euronet integration, adding visa transactions
                            } else {
                                dbQuery += " and t.servicename not in ('MerchantLoadDebitCard', 'MerchantUnloadDebitCard', 'RequestMerchantDebitCard', 'CashWithDrawal', 'Purchase','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund','STIP') ";  //m.rehman: 15-03-2021, Euronet integration, adding visa transactions
                            }

                            dbQuery += " order by t.transdatetime desc ";

                            String query = "select count(*) " + dbQuery;
                            Long size = (Long) GeneralDao.Instance.findObject(query, params);
                            wsmodel.setTotalcount(size + "");

                            logger.info("Page Count [" + wsmodel.getPagecount() + "] Page Size [" + wsmodel.getPagesize() + "]");
                            Integer pageCount = Integer.parseInt(wsmodel.getPagecount());
                            Integer pageSize = Integer.parseInt(wsmodel.getPagesize());
                            logger.info("Converted Page Count [" + pageCount + "] Converted Page Size [" + pageSize + "]");
                            Integer startPosition = (pageCount * pageSize) - pageSize;
                            logger.info("Start Position [" + startPosition + "]");
                            Query query1 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                            query1.setProperties(params);
                            query1.setFirstResult(startPosition);
                            query1.setMaxResults(pageSize);

                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //List<MVFinancialLog> walletCMSWsEntityList = query1.list(); // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            List<WalletCMSWsListingEntity> walletCMSWsEntityList = query1.list();

                            //List<WalletCMSWsEntity> walletCMSWsEntityList = GeneralDao.Instance.find(dbQuery, params);

                            List<UserTransaction> userTransactionList = new ArrayList<UserTransaction>();
                            if (walletCMSWsEntityList != null && walletCMSWsEntityList.size() > 0) {
                                logger.info("Transactions found, populating data ...");
                                //List<UserTransaction> userTransactionList = new ArrayList<UserTransaction>();
                                UserTransaction userTransaction;

                                //m.rehman: 10-11-2021 - Nayapay Optimization
                                //for (MVFinancialLog wsEntity : walletCMSWsEntityList) { // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                                for (WalletCMSWsListingEntity wsEntity : walletCMSWsEntityList) {
                                    userTransaction = new UserTransaction();
                                    userTransaction.setParentid(wsEntity.getParentid());
                                    userTransaction.setMerchantid(wsEntity.getMerchantid());
                                    userTransaction.setTransrefnum(wsEntity.getTranrefnumber());

                                    //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                    //utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                    //m.rehman: 08-10-2020, VP-NAP-202010081/ VC-NAP-202010081 - Deployment 08-10-2020
                                    //userTransaction.setNayapaytype(wsEntity.getServicename());
                                    if (wsEntity.getServicename().contains("Reversal")) {
                                        userTransaction.setNayapaytype(wsEntity.getServicename());
                                    } else {
                                        userTransaction.setNayapaytype(Util.hasText(wsEntity.getNayapaytrantype()) ? wsEntity.getNayapaytrantype() : wsEntity.getServicename());
                                    }
                                    ////////////////////////////////////////////////////////////////////////////

                                    userTransaction.setCurrency(wsEntity.getCurrency());

                                    //m.rehman: 26-02-2021, Euronet Integration
                                    //userTransaction.setAmount(wsEntity.getAmounttransaction());
                                    userTransaction.setAmount((Util.hasText(wsEntity.getCbillamount())) ? wsEntity.getCbillamount() : wsEntity.getAmounttransaction());
                                    /////////////////////////////////////////////////////////////////////////////////////////

                                    userTransaction.setAgentid(wsEntity.getAgentid());
                                    userTransaction.setTransdatetime(wsEntity.getTransdatetime());

                                    // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                    if (Util.hasText(wsEntity.getBenebankcode())) {
                                        userTransaction.setBankcode(wsEntity.getBenebankcode());
                                    } else {
                                        userTransaction.setBankcode(wsEntity.getBankcode());
                                    }
                                    //==========================================================================

                                    // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                    if (Util.hasText(wsEntity.getBenebankaccountno())) {
                                        userTransaction.setAccountnumber(Util.hasText(wsEntity.getBenebankaccountno()) ? wsEntity.getBenebankaccountno().substring(wsEntity.getBenebankaccountno().length() - 4, wsEntity.getBenebankaccountno().length()) : "");
                                    } else {
                                        userTransaction.setAccountnumber(Util.hasText(wsEntity.getAccountnumber()) ? wsEntity.getAccountnumber().substring(wsEntity.getAccountnumber().length() - 4, wsEntity.getAccountnumber().length()) : "");
                                    }
                                    //==========================================================================

                                    userTransaction.setBranchname(wsEntity.getBranchname());
                                    userTransaction.setSrcid(wsEntity.getUserid());
                                    userTransaction.setDestid(wsEntity.getDestuserid());
                                    userTransaction.setTerminalloc(wsEntity.getTermloc());
                                    userTransaction.setMapid(wsEntity.getMapid());
                                    userTransaction.setMerchantid(Util.hasText(wsEntity.getMerchantid()) ? wsEntity.getMerchantid() : wsEntity.getBillerid());
                                    userTransaction.setMerchantname(Util.hasText(wsEntity.getMerchantname()) ? wsEntity.getMerchantname() : wsEntity.getBillername());
                                    userTransaction.setDepositorname(wsEntity.getCustomername());
                                    userTransaction.setBankcharge(wsEntity.getNayapaycharges());
                                    //m.rehman: 19-08-2020, VC-NAP-202008112 - 'Purchase' and 'Cash withdrawal' transaction on SIT
                                    //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                                    userTransaction.setCardlastdigits(wsEntity.getCardlastdigits());
                                    //===============================================================================================================
                                    //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
                                    userTransaction.setTaxamount(wsEntity.getNayapaytaxamount());
                                    userTransaction.setOriginalapi(wsEntity.getOriginalapi());
                                    userTransaction.setOriginaldatetime(wsEntity.getOrigtransdatetime());
                                    userTransaction.setOriginalrrn(wsEntity.getOrigretrefno());
                                    userTransaction.setOriginalstan(wsEntity.getOrigstan());
                                    userTransaction.setNpticket(wsEntity.getNpticket());
                                    userTransaction.setVrolticket(wsEntity.getVrolticket());
                                    userTransaction.setRefundtype(wsEntity.getReserved());
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                    userTransactionList.add(userTransaction);
                                }
                            } else {
                                logger.error("Transactions not found for Merchant Id [" + wsmodel.getMerchantid() + "]");
                                //wsmodel.setRespcode(ISOResponseCodes.NP_TRAN_SRC_NOT_FOUND);
                                break;
                            }

                            wsmodel.setUsertransactions(userTransactionList);
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            break;

                        } else {
                            logger.error("Invalid Card Number, rejecting ...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND);
                        }
                    }
                }

                if (!walletFlag || !cardFlag) {
                    logger.error("No Prepaid Wallet/Prepaid Card Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                }

                return wsmodel;
            } else {
                logger.error("No Account Relation Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetMerchantDebitCardTransactionList..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetMerchantDebitCardTransactionDetails(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetMerchantDebitCardTransactionDetails Request...");

        try {
            String dbQuery;
            Map<String, Object> params;
            CMSAccount prepaidWallet;
            CMSCard prepaidCard;
            boolean walletFlag = false;
            boolean cardFlag = false;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getMerchantid());

            List<NayaPayRelation> nayaPayRelationList = GeneralDao.Instance.find(dbQuery, params);

            if (nayaPayRelationList != null && nayaPayRelationList.size() > 0) {
                for (NayaPayRelation nayaPayRelation : nayaPayRelationList) {
                    prepaidWallet = nayaPayRelation.getAccount();

                    if (prepaidWallet != null && prepaidWallet.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {

                        walletFlag = true;
                        logger.info("Merchant Prepaid Wallet found, getting transaction from System ...");

                        prepaidCard = prepaidWallet.getCard();
                        if (prepaidCard != null && prepaidCard.getCardNumber().equals(wsmodel.getCardnumber())) {
                            cardFlag = true;
                            logger.info("Merchant Prepaid Card found, getting transactions ...");

                            //get transaction charges
                            params = new HashMap<String, Object>();
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //dbQuery = "from " + MVFinancialLog.class.getName() + " t where " +  // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " t where " +
                                    " t.merchantid = :MERCHANT_ID " +
                                    " and t.cardnumber = :CARD_NO " +
                                    " and (t.tranrefnumber = :TXN_REF_NUM or t.stan = :TXN_REF_NUM) ";
                            params.put("MERCHANT_ID", wsmodel.getMerchantid());
                            params.put("CARD_NO", wsmodel.getCardnumber());
                            params.put("TXN_REF_NUM", wsmodel.getOrigdataelement());

                            if (Util.hasText(wsmodel.getTerminalid())) {
                                dbQuery += " and t.terminalid = :TERM_ID ";
                                params.put("TERM_ID", wsmodel.getTerminalid());
                            }

                            dbQuery += " order by t.id desc ";
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //List<MVFinancialLog> walletCMSWsEntity = GeneralDao.Instance.find(dbQuery, params); // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            List<WalletCMSWsListingEntity> walletCMSWsEntity = GeneralDao.Instance.find(dbQuery, params);

                            if (walletCMSWsEntity != null) {
                                logger.info("Transaction found, populating data ...");
                                //m.rehman: 10-11-2021 - Nayapay Optimization
                                //MVFinancialLog tran = walletCMSWsEntity.get(0); // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                                WalletCMSWsListingEntity tran = walletCMSWsEntity.get(0);
                                TransactionDetail td = new TransactionDetail();
                                td.setTransrefnum(tran.getTranrefnumber());
                                td.setNayapaytype(Util.hasText(tran.getNayapaytrantype()) ? tran.getNayapaytrantype() : tran.getServicename());
                                //td.setAcctid(tran.getAcctid());
                                td.setAcctalias(tran.getAcctalias());
                                td.setSrcid(tran.getUserid());
                                td.setSrcname(tran.getUsername());
                                td.setSrcnayapayid(tran.getNayapayid());
                                //td.setDestid(tran.getMerchantid());
                                td.setDestid(tran.getDestuserid());
                                //td.setDestname(tran.getMerchantname());
                                td.setDestname(tran.getDestusername());
                                td.setDestnayapayid(tran.getDestnayapayid());
                                td.setParentid(tran.getParentid());
                                td.setReferencenumber(tran.getReferencenumber());
                                td.setInvoiceid(tran.getInvoiceid());
                                td.setCurrency(tran.getCurrency());

                                //m.rehman: 26-02-2021, Euronet Integration
                                //td.setAmount(tran.getAmounttransaction());
                                td.setAmount((Util.hasText(tran.getCbillamount())) ? tran.getCbillamount() : tran.getAmounttransaction());
                                /////////////////////////////////////////////////////////////////////////////////////////

                                td.setTransdatetime(tran.getTransdatetime());
                                td.setMapid(tran.getMapid());
                                td.setPosinvoiceref(tran.getPosinvoiceref());
                                td.setTerminalid(tran.getTerminalid());
                                td.setAgentid(tran.getAgentid());
                                td.setStan(tran.getStan());
                                td.setDisputeflag(tran.getDisputeflag());
                                td.setSrccharge(tran.getSrcchargeamount());
                                td.setBankcharge(tran.getNayapaycharges());
                                td.setDepositorname(tran.getCustomername());
                                td.setTerminalloc(tran.getTermloc());
                                td.setOriginaltransactionid(tran.getOrigdataelement());

                                // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                if (Util.hasText(tran.getBenebankaccountno())) {
                                    td.setAccountnumber(Util.hasText(tran.getBenebankaccountno()) ? tran.getBenebankaccountno().substring(tran.getBenebankaccountno().length() - 4, tran.getBenebankaccountno().length()) : "");
                                } else {
                                    td.setAccountnumber(Util.hasText(tran.getAccountnumber()) ? tran.getAccountnumber().substring(tran.getAccountnumber().length() - 4, tran.getAccountnumber().length()) : "");
                                }
                                //==========================================================================

                                td.setBranchname(tran.getBranchname());
                                //td.setMerchantid(tran.getMerchantid());
                                //td.setMerchantname(tran.getMerchantname());
                                td.setMerchantid(Util.hasText(tran.getMerchantid()) ? tran.getMerchantid() : tran.getBillerid());
                                td.setMerchantname(Util.hasText(tran.getMerchantname()) ? tran.getMerchantname() : tran.getBillername());

                                // Asim Shahzad, Date : 13th Aug 2020, Desc : For issues in IBFT listings
                                if (Util.hasText(tran.getBenebankcode())) {
                                    td.setBankcode(tran.getBenebankcode());
                                } else {
                                    td.setBankcode(tran.getBankcode());
                                }
                                //==========================================================================

                                td.setDepositslipnumber(tran.getSlipnumber());
                                //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
                                td.setTaxamount(tran.getNayapaytaxamount());
                                td.setOriginalapi(tran.getOriginalapi());
                                td.setOriginaldatetime(tran.getOrigdataelement());
                                td.setOriginalrrn(tran.getOrigretrefno());
                                td.setOriginalstan(tran.getOrigstan());
                                td.setNpticket(tran.getNpticket());
                                td.setVrolticket(tran.getVrolticket());
                                td.setRefundtype(tran.getReserved());
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                wsmodel.setTransactionDetail(td);

                                /*
                                TransactionDetail transactionDetail = new TransactionDetail();
                                transactionDetail.setParentid(walletCMSWsEntity.getParentid());
                                transactionDetail.setMerchantid(walletCMSWsEntity.getMerchantid());
                                transactionDetail.setTransrefnum(walletCMSWsEntity.getTranrefnumber());
                                transactionDetail.setStan(walletCMSWsEntity.getStan());
                                transactionDetail.setNayapaytype(walletCMSWsEntity.getServicename());
                                transactionDetail.setCurrency(walletCMSWsEntity.getCurrency());
                                transactionDetail.setAmount(walletCMSWsEntity.getAmounttransaction());
                                transactionDetail.setAgentid(walletCMSWsEntity.getAgentid());
                                transactionDetail.setTransdatetime(walletCMSWsEntity.getTransdatetime());
                                transactionDetail.setOriginaltransactionid(walletCMSWsEntity.getOrigdataelement());
                                transactionDetail.setSrccharge(walletCMSWsEntity.getSrcchargeamount());
                                transactionDetail.setTerminalloc(walletCMSWsEntity.getTermloc());
                                transactionDetail.setBankcode(walletCMSWsEntity.getBankcode());
                                transactionDetail.setDestcharge(walletCMSWsEntity.getDestchargeamount());
                                wsmodel.setTransactionDetail(transactionDetail);
                                */

                                wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            } else {
                                logger.error("Transactions not found for Merchant Id [" + wsmodel.getMerchantid() + "]");
                                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                            }

                            break;
                        } else {
                            logger.error("Invalid Card Number, rejecting ...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND);
                        }
                    }
                }

                if (!walletFlag || !cardFlag) {
                    logger.error("No Prepaid Wallet/Prepaid Card Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                }

                return wsmodel;
            } else {
                logger.error("No Account Relation Found for Merchant [ " + wsmodel.getMerchantid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetMerchantDebitCardTransactionDetails..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetUserID(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetUserID Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + CMSCustomer.class.getName() + " c where c.MobileNumber = :SEARCH_TEXT";
            params = new HashMap<String, Object>();
            params.put("SEARCH_TEXT", wsmodel.getSearchtext());
            CMSCustomer cmsCustomer = (CMSCustomer) GeneralDao.Instance.find(dbQuery, params);

            if (cmsCustomer != null) {
                if (cmsCustomer.getStatus().equals("00")) {

                    logger.info("Customer found with active status, searching account for User ID ...");
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.customer = :CUSTOMER and c.Status = '00'";
                    params = new HashMap<String, Object>();
                    params.put("CUSTOMER", cmsCustomer);
                    List<CMSAccount> cmsAccountList = GeneralDao.Instance.find(dbQuery, params);
                    if (cmsAccountList != null && cmsAccountList.size() > 0) {
                        logger.info("Account found, populating User ID ...");
                        wsmodel.setUserid(cmsAccountList.get(0).getUserId());
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    } else {
                        logger.error("Account not found for Customer with Mobile Number [" + wsmodel.getMobilenumber() + "], rejecting ...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND);
                    }
                } else {
                    logger.error("Customer is not active, rejecting ...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE);
                }
                return wsmodel;
            } else {
                logger.error("Customer not found with Mobile No [" + wsmodel.getMobilenumber() + "], rejecting ...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND);
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetUserID..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteSettlementLoadMerchantWallet(WalletCMSWsEntity wsmodel) {
        logger.info("Executing " + wsmodel.getServicename() + " Request...");

        try {
            String dbQuery;
            Map<String, Object> params;
            boolean walletFlag = false;
            CMSAccount merchantWallet;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getMerchantid());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //List<NayaPayRelation> nayaPayRelationList = GeneralDao.Instance.find(dbQuery, params);
            List<NayaPayRelation> nayaPayRelationList = GeneralDao.Instance.find(dbQuery, params, "c", LockMode.UPGRADE);

            if (nayaPayRelationList != null && nayaPayRelationList.size() > 0) {
                for (NayaPayRelation nayaPayRelation : nayaPayRelationList) {
                    merchantWallet = nayaPayRelation.getAccount();

                    if (merchantWallet != null && merchantWallet.getCategory().equals(AccType.CAT_MERCHANT_WALLET_VALUE)) {

                        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                        merchantWallet = (CMSAccount) GeneralDao.Instance.getCurrentSession().get(CMSAccount.class, merchantWallet.getId(), LockMode.UPGRADE);
                        GeneralDao.Instance.getCurrentSession().refresh(merchantWallet);
                        ////////////////////////////////////////////////////////////////////////////////////

                        walletFlag = true;
                        logger.info("Merchant Wallet found, proceeding ...");

                        if (merchantWallet.getStatus().equals("04") || merchantWallet.getStatus().equals("07")
                                || merchantWallet.getStatus().equals("09")) {
                            logger.info("Merchant Wallet is Fraud/AML/Admin block, rejecting ...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION);

                        } else {
                            if (FinanceManager.MerchantSettlementLoadWallet(wsmodel, merchantWallet)) {
                                logger.info("Merchant Settlement Load Wallet successful, returning ...");
                                wsmodel.setDestaccount(merchantWallet.getAccountNumber());
                                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                            } else {
                                logger.error("Merchant Settlement Load Wallet failed, rejecting ...");
                            }
                        }

                        break;
                    }
                }

                if (!walletFlag) {
                    logger.error("No Wallet Found for Merchant [" + wsmodel.getMerchantid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                }

                return wsmodel;
            } else {
                logger.error("No Account Relation Found for Merchant [" + wsmodel.getMerchantid() + "], rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_DATA_NOT_FOUND);
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing " + wsmodel.getServicename() + "..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    public static void FetchTransactionCharge(WalletCMSWsEntity wsmodel, CMSProduct cmsProduct, String isIntlTxnFlag) {
        Map<String, Object> params = new HashMap<String, Object>();
        String dbQuery = "from " + TransactionCharges.class.getName() + " t where " +
                "t.txnType = :TXN_TYPE " +
                "and t.channelId = :CHANNEL_ID " +
                "and t.product = :PRODUCT_ID " +
                "and t.status = 1 " +
                //m.rehman: Euronet integration, adding local/international txn check
                "and t.isIntlTxn = :IS_INTL_TXN_FLAG ";
        params.put("TXN_TYPE", GlobalContext.getInstance().getTransactionCodeDescbyCode(wsmodel.getServicename()).getTxncode());
        params.put("CHANNEL_ID", wsmodel.getChannelid());
        params.put("PRODUCT_ID", cmsProduct);
        //m.rehman: Euronet integration, adding local/international txn check
        params.put("IS_INTL_TXN_FLAG", isIntlTxnFlag);

        //TransactionCharges transactionCharges = (TransactionCharges) GeneralDao.Instance.findObject(dbQuery, params);
        List<TransactionCharges> transactionChargesList = GeneralDao.Instance.find(dbQuery, params);

        if (transactionChargesList != null && transactionChargesList.size() > 0) {

            TransactionCharges transactionCharges = null;
            if (transactionChargesList.size() > 1) {    //more than one row, check slab
                for (TransactionCharges transactionChargesFromList : transactionChargesList) {
                    if (Util.hasText(transactionChargesFromList.getIsSlab()) && transactionChargesFromList.getIsSlab().equals("1")) {

                        //m.rehman: 25-02-2021, Euronet integration, amount must deduct in local currency
                        //Long trxAmount = (Util.hasText(wsmodel.getAmounttransaction())) ? Long.parseLong(wsmodel.getAmounttransaction()) : 0L;
                        Long trxAmount = 0L;
                        if (Util.hasText(wsmodel.getCbillamount())) {
                            trxAmount = (Util.hasText(wsmodel.getCbillamount())) ? Long.parseLong(wsmodel.getCbillamount()) : 0L;
                        } else {
                            trxAmount = (Util.hasText(wsmodel.getAmounttransaction())) ? Long.parseLong(wsmodel.getAmounttransaction()) : 0L;
                        }
                        ///////////////////////////////////////////////////////////////////////////////////////////////

                        Long minAmount = (Util.hasText(transactionChargesFromList.getMinSlabAmount())) ? Long.parseLong(transactionChargesFromList.getMinSlabAmount()) : 0L;
                        Long maxAmount = (Util.hasText(transactionChargesFromList.getMaxSlabAmount())) ? Long.parseLong(transactionChargesFromList.getMaxSlabAmount()) : 0L;

                        if (trxAmount >= minAmount && trxAmount <= maxAmount) {
                            logger.info("Charge Slab found for transaction, Minimum Amount [" + minAmount.toString() + "] and Maximum Amount [" + maxAmount.toString() + "]");
                            transactionCharges = transactionChargesFromList;
                        }
                    }
                }
            } else {
                transactionCharges = transactionChargesList.get(0);
            }

            if (transactionCharges != null) {
                logger.info("Charges found");
                Double chargeAmount = 0.0;
                if (transactionCharges.getAmountType() != null
                        && transactionCharges.getAmountType().equals(TaxType.PERCENTAGE_VALUE.toString())) {
                    chargeAmount = (Double.parseDouble(transactionCharges.getAmountValue()) / 100.0)
                            //m.rehman: 25-02-2021, Euronet integration, amount must deduct in local currency
                            * (Double.parseDouble((Util.hasText(wsmodel.getCbillamount()) ? wsmodel.getCbillamount() : wsmodel.getAmounttransaction())) / 100.0);
                    logger.info("Update amount for Charge [" + chargeAmount + "]");

                } else {
                    chargeAmount = (Double.parseDouble(transactionCharges.getAmountValue()) / 100.0);
                    logger.info("Update amount for Charge [" + chargeAmount + "]");
                }

                //calculating tax amount
                Double taxAmount = 0.0;
                if (transactionCharges.getTax() != null) {
                    logger.info("Tax rate found, calculating amount ...");
                    Tax tax = transactionCharges.getTax();
                    if (tax.getValueType().equals(TaxType.PERCENTAGE_VALUE.toString())) {
                        taxAmount = (Double.parseDouble(tax.getValue()) / 100.0) * chargeAmount;
                        logger.info("Update amount for Tax [" + taxAmount + "]");
                    } else {
                        taxAmount = (Double.parseDouble(tax.getValue()) / 100.0);
                        logger.info("Update amount for Tax [" + taxAmount + "]");
                    }

                    DecimalFormat dft = new DecimalFormat("0.00");
                    String updateTaxAmountStr = dft.format(taxAmount);
                    updateTaxAmountStr = updateTaxAmountStr.replace(".", "");
                    logger.info("Final amount for Tax [" + updateTaxAmountStr + "]");
                    wsmodel.setNayapaytaxamount(StringUtils.leftPad(updateTaxAmountStr, 12, "0"));

                } else {
                    logger.info("Tax rate not found ..");
                }

                chargeAmount = chargeAmount + taxAmount;
                logger.info("Update amount for Charge with Tax [" + chargeAmount + "]");
                DecimalFormat df = new DecimalFormat("0.00");
                String updateAmountStr = df.format(chargeAmount);
                updateAmountStr = updateAmountStr.replace(".", "");
                logger.info("Final amount for Charge [" + updateAmountStr + "]");
                wsmodel.setSrcchargeamount(StringUtils.leftPad(updateAmountStr, 12, "0"));

                //wsmodel.setRespcode(ISOResponseCodes.APPROVED);
            } else {
                logger.error("No Charges found for transaction [" + wsmodel.getServicename() + "] ...");
                wsmodel.setSrcchargeamount(StringUtils.leftPad("0", 12, "0"));
            }

        } else {
            logger.error("No Charges found for transaction [" + wsmodel.getServicename() + "] ...");
            wsmodel.setSrcchargeamount(StringUtils.leftPad("0", 12, "0"));
        }
    }

    public static WalletCMSWsEntity ExecuteTitleFetch(WalletCMSWsEntity wsmodel) {

        logger.info("Executing TitleFetch Request...");
        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            // Asim Shahzad, Date : 29th June 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
            if (Util.hasText(wsmodel.getUserid())) {

                logger.info("Resolving wallet using user id....");

                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getUserid());
                params.put("CAT", AccType.CAT_WALLET.StringValue());
            } else {

                logger.info("Resolving wallet using IBAN....");

                dbQuery = "from " + CMSAccount.class.getName() + " c where c.iBan= :IBAN" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("IBAN", wsmodel.getMobilenumber());
                params.put("CAT", AccType.CAT_WALLET.StringValue());
            }
            // ======================================================================================

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null) {

                //Arsalan Akhter, Date: 19th Nov 2021, TrackingID: VC-NAP-202111023(IBFTIn Transaction not posted)
                //if (!userwallet.getStatus().equals("00")) {
                if (userwallet.getStatus().equals("04") //Fraud Block
                        || userwallet.getStatus().equals("07") //KYC Block
                        || userwallet.getStatus().equals("09") //AML Block
                        || userwallet.getStatus().equals("90") //Admin Block
                ) {
                    logger.error("Invalid account status, rejecting..."); //Arsalan Akhter, Date: 19th Nov 2021, TrackingID: VC-NAP-202111023(IBFTIn Transaction not posted)
                    wsmodel.setRespcode(ISOResponseCodes.ACCOUNT_INACTIVE);

                } else if (!userwallet.getCustomer().getStatus().equals("00")) {
                    wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_INACTIVE);

                } else {
                    String recordData = wsmodel.getReserved();

                    // Asim Shahzad, Date : 7th May 2021, Tracking ID : VP-NAP-202105051 / VG-NAP-202105051/ VC-NAP-202105051
                    if (Util.hasText(recordData)) {
                        //Arsalan Akhter, Date: 04-Aug-2021
                        if (recordData.length() >= 250 && recordData.length() <= 280) {
                            wsmodel.setCnic(recordData.substring(250, 280)); // sender CNIC
                        }
                        if (recordData.length() >= 280 && recordData.length() <= 295) {
                            wsmodel.setDestcnic(recordData.substring(280, 295)); // beneficiary CNIC
                        }
                        //==================================
                    }
                    // ======================================================================================================

                    // Asim Shahzad, Date : 11th Aug 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                    if (!wsmodel.getMobilenumber().startsWith("PK")) {
                        recordData = StringUtils.rightPad(wsmodel.getMobilenumber(), 20) +
                                StringUtils.rightPad(userwallet.getAccountTitle(), 30) +
                                recordData.substring(50, recordData.length());
                    } else {
                        recordData = StringUtils.rightPad(wsmodel.getMobilenumber().substring(0, wsmodel.getMobilenumber().length() - 4), 20) +
                                StringUtils.rightPad(userwallet.getAccountTitle(), 30) +
                                recordData.substring(50, recordData.length());
                    }
                    // =====================================================================================

                    logger.info("Updated Record data [" + recordData + "]");
                    wsmodel.setReserved(recordData);

                    //Arsalan Akhter, Date: 28-Apr-2021, Ticket# VC-NAP-202104161_VP-NAP-202104161, RC01 of Title Fetch when amount exceeds beneficiary load limit
                    if (Util.hasText(wsmodel.getAmounttransaction()) && Long.parseLong(wsmodel.getAmounttransaction()) > 0) {
                        String serviceName = wsmodel.getServicename();
                        wsmodel.setServicename("IBFTIn");
                        if (!WalletCMSFunctions.VerifyWalletLimit(wsmodel, userwallet, null, false)) {
                            logger.error("Limit processing failed, rejecting...");
                            return wsmodel;
                        }
                        wsmodel.setServicename(serviceName);
                    }
                    ///////////////////////////////////////////////////////////////////////////////////////////
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                }
                return wsmodel;
                /*
                if (Long.parseLong(wsmodel.getAmounttransaction()) <= 0) {
                    logger.error("Invalid Amount for Withdrawal Transaction, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.LOW_BALANCE); //04 - Low Balance ; refer to Doc
                    return wsmodel;
                }

                //getting transaction charges
                FetchTransactionCharge(wsmodel, userwallet.getProduct());

                //process wallet limit
                //if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, card, Boolean.TRUE))
                if (!WalletCMSFunctions.ProcessCreditWalletLimit(wsmodel, userwallet, null, Boolean.TRUE)) {
                    logger.error("Limit processing failed, rejecting...");
                    return wsmodel;
                }

                logger.info("Going to process IBFT in Wallet...");

                if (FinanceManager.IBFTIn(wsmodel, userwallet)) {
                    logger.info("IBFT in Wallet Done successfully!");
                    //setting account balance
                    wsmodel.setAccountnumber(userwallet.getAccountNumber());
                    if (userwallet.getCategory() != null && userwallet.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                        wsmodel.setMerchantid(userwallet.getUserId());
                    } else {
                        wsmodel.setUserid(userwallet.getUserId());
                    }
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                } else {
                    logger.info("Unable to do IBFT in Wallet... **********Manual Process Required!**********");

                    //process wallet limit
                    logger.info("Revertsing Limit ...");
                    String respCode = wsmodel.getRespcode();
                    //if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, card, Boolean.FALSE))
                    if (!WalletCMSFunctions.ProcessCreditWalletLimit(wsmodel, userwallet, null, Boolean.FALSE)) {
                        logger.error("Limit reversing failed, rejecting...");
                        return wsmodel;
                    }
                    wsmodel.setRespcode(respCode);
                    return wsmodel;
                }
                */
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing IBFT..!");
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //Raza Refer to Document '12'
            return wsmodel;
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteIBFTIn(WalletCMSWsEntity wsmodel) {

        logger.info("Executing IBFTIn Request...");
        try {
            String dbQuery;
            Map<String, Object> params;

            // Asim Shahzad, Date : 11th Aug 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            if (Util.hasText(wsmodel.getUserid())) {
                logger.info("Resolving wallet using user id....");

                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getUserid());
                params.put("CAT", AccType.CAT_WALLET.StringValue());
            } else {
                logger.info("Resolving wallet using IBAN....");

                dbQuery = "from " + CMSAccount.class.getName() + " c where c.iBan= :IBAN" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("IBAN", wsmodel.getMobilenumber());
                params.put("CAT", AccType.CAT_WALLET.StringValue());
            }

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

            if (null == userwallet) {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //90 Customer not found
                return wsmodel;
            }
            // =====================================================================================

            //m.rehman: 16-04-2021, Duplicate IBFTIn on Production
            dbQuery = "from " + WalletCMSWsEntity.class.getName() + " w where " +
                    "w.servicename = :SERVICENAME " +
                    "and w.userid = :USERID " +
                    "and w.stan = :STAN " +
                    "and w.rrn = :RRN " +
                    "and w.tranauthid = :TRANAUTHID " +
                    "and w.amounttransaction = :AMOUNTTRAN " +
                    "and w.accountnumber = :ACCTNUM " +
                    //"and w.mobilenumber = :DESTACCT " +   //m.rehman: 08-07-2021 - VC-NAP-202107051 - Duplicate IBFTIn
                    "and w.id not in (:ID) ";
            params = new HashMap<>();
            params.put("SERVICENAME", wsmodel.getServicename());
            logger.info("Servicename [" + wsmodel.getServicename() + "]");

            // Asim Shahzad, Date : 11th Aug 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
//            params.put("USERID", wsmodel.getUserid());
//            logger.info("USERID [" + wsmodel.getUserid() + "]");
            params.put("USERID", userwallet.getUserId());
            logger.info("USERID [" + userwallet.getUserId() + "]");
            // =====================================================================================

            params.put("STAN", wsmodel.getStan());
            logger.info("STAN [" + wsmodel.getStan() + "]");
            params.put("RRN", wsmodel.getRrn());
            logger.info("RRN [" + wsmodel.getRrn() + "]");
            params.put("TRANAUTHID", wsmodel.getTranauthid());
            logger.info("TRANAUTHID [" + wsmodel.getTranauthid() + "]");
            params.put("AMOUNTTRAN", wsmodel.getAmounttransaction());
            logger.info("AMOUNTTRAN [" + wsmodel.getAmounttransaction() + "]");
            params.put("ACCTNUM", wsmodel.getAccountnumber());
            logger.info("ACCTNUM [" + wsmodel.getAccountnumber() + "]");
            //params.put("DESTACCT", wsmodel.getMobilenumber());    //m.rehman: 08-07-2021 - VC-NAP-202107051 - Duplicate IBFTIn
            //logger.info("DESTACCT [" + wsmodel.getMobilenumber() + "]");
            params.put("ID", wsmodel.getId());
            logger.info("ID [" + wsmodel.getId() + "]");

            List<WalletCMSWsEntity> duplicateTxns = GeneralDao.Instance.find(dbQuery, params);
            logger.info("Duplicate transactions count [" + duplicateTxns.size() + "]");
            if (duplicateTxns != null && duplicateTxns.size() > 0) {
                logger.info("Duplicate transaction found, checking status ...");
                for (WalletCMSWsEntity wsEntity : duplicateTxns) {
                    if (Util.hasText(wsEntity.getRespcode()) && wsEntity.getRespcode().equals("00")) {
                        logger.error("Approved IBFTIn found with same identifiers, rejecting transaction ...");
                        wsmodel.setRespcode(ISOResponseCodes.DUPLICATE_TRANSACTION);
                        return wsmodel;
                    }
                }
            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            //if (userwallet != null) { // Asim Shahzad, Date : 11th Aug 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241

            // Asim Shahzad, Date : 11th Nov 2021, Tracking ID : VC-NAP-202111023
            if (userwallet.getStatus().equals("04") //Fraud Block
                    || userwallet.getStatus().equals("07") //KYC Block
                    || userwallet.getStatus().equals("09") //AML Block
                    || userwallet.getStatus().equals("90") //Admin Block
            ) {
                logger.error("Invalid account status, rejecting..."); // Asim Shahzad, Date : 11th Nov 2021, Tracking ID : VC-NAP-202111023
                wsmodel.setRespcode(ISOResponseCodes.ACCOUNT_INACTIVE);
                return wsmodel;

            } else if (!userwallet.getCustomer().getStatus().equals("00")) {
                wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_INACTIVE);
                return wsmodel;

            } else {

                if (Long.parseLong(wsmodel.getAmounttransaction()) <= 0) {
                    logger.error("Invalid Amount for Withdrawal Transaction, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.LOW_BALANCE); //04 - Low Balance ; refer to Doc
                    return wsmodel;
                }

                // Asim Shahzad, Date : 17th Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                if (Util.hasText(userwallet.getAccountTitle())) {
                    wsmodel.setDestusername(userwallet.getAccountTitle());
                }
                //if(Util.hasText(userwallet.getAccountNumber())) {
                //    wsmodel.setAccountnumber(userwallet.getAccountNumber());
                //}
                wsmodel.setDestaccount(userwallet.getAccountNumber());
                if (Util.hasText(wsmodel.getBranchname())) {
                    wsmodel.setBankcode(wsmodel.getBranchname());
                }
                // =====================================================================================

                //m.rehman: Euronet integration, add local/international flag in charges
                //getting transaction charges
                FetchTransactionCharge(wsmodel, userwallet.getProduct(), "0");      //0-false

                //process wallet limit
                //if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, card, Boolean.TRUE))
                if (!WalletCMSFunctions.ProcessCreditWalletLimit(wsmodel, userwallet, null, Boolean.TRUE)) {
                    logger.error("Limit processing failed, rejecting...");

                    // Asim Shahzad, Date : 29th Sep 2020, Tracking ID : VC-NAP-202009253
                    logger.error("Updating suspense account balances and logging...");
                    FinanceManager.UpdateandLogSuspenseAccount(wsmodel, userwallet.getCurrency(), TxnFlag.CREDIT, true, false, false);

                    logger.error("Updating 1Link Receivable settlement account balances and logging...");
                    FinanceManager.UpdateandLog1LinkReceivableAccount(wsmodel, userwallet.getCurrency(), TxnFlag.DEBIT, true, false, false);
                    // ==================================================================

                    return wsmodel;
                }

                logger.info("Going to process IBFT in Wallet...");

                if (FinanceManager.IBFTIn(wsmodel, userwallet)) {
                    logger.info("IBFT in Wallet Done successfully!");
                    //setting account balance
                    //wsmodel.setAccountnumber(userwallet.getAccountNumber());
                    String sourceName = "", recordData = wsmodel.getReserved();
                    if (Util.hasText(recordData)) {

                        if (recordData.length() >= 148) {
                            sourceName = recordData.substring(118, 148);
                            wsmodel.setUsername(sourceName);

                            // Asim Shahzad, Date : 7th May 2021, Tracking ID : VP-NAP-202105051 / VG-NAP-202105051/ VC-NAP-202105051
                            //Arsalan Akhter, Date: 04-Aug-2021
                            if (recordData.length() >= 250 && recordData.length() <= 280) {
                                logger.info("Record Data (sender CNIC) : [" + recordData + "]");
                                wsmodel.setCnic(recordData.substring(250, 280)); // sender CNIC
                            }
                            if (recordData.length() >= 280 && recordData.length() <= 295) {
                                logger.info("Record Data (beneficiary CNIC) : [" + recordData + "]");
                                wsmodel.setDestcnic(recordData.substring(280, 295)); // beneficiary CNIC
                            }
                            //=====================================
                            // ======================================================================================================
                        }
                    }
                    if (userwallet.getCategory() != null && userwallet.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                        wsmodel.setMerchantid(userwallet.getUserId());
                    } else {
                        wsmodel.setUserid(userwallet.getUserId());
                    }
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                    //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                    wsmodel.setIncludeinstatement(1);
                    ////////////////////////////////////////////////////////////////////////////////////////////////////

                    return wsmodel;
                } else {
                    logger.info("Unable to do IBFT in Wallet... **********Manual Process Required!**********");

                    //process wallet limit
                    logger.info("Revertsing Limit ...");
                    String respCode = wsmodel.getRespcode();
                    //if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, card, Boolean.FALSE))
                    if (!WalletCMSFunctions.ProcessCreditWalletLimit(wsmodel, userwallet, null, Boolean.FALSE)) {
                        logger.error("Limit reversing failed, rejecting...");
                        return wsmodel;
                    }
                    wsmodel.setRespcode(respCode);
                    return wsmodel;
                }
                //wsmodel.setRespcode(ISOResponseCodes.APPROVED);
            }

            /*
            if (userwallet != null && userwallet.getStatus().equals("00") && userwallet.getCustomer().getStatus().equals("00")) {

                if (Long.parseLong(wsmodel.getAmounttransaction()) <= 0) {
                    logger.error("Invalid Amount for Withdrawal Transaction, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.LOW_BALANCE); //04 - Low Balance ; refer to Doc
                    return wsmodel;
                }

                //getting transaction charges
                FetchTransactionCharge(wsmodel, userwallet.getProduct());

                //process wallet limit
                //if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, card, Boolean.TRUE))
                if (!WalletCMSFunctions.ProcessCreditWalletLimit(wsmodel, userwallet, null, Boolean.TRUE)) {
                    logger.error("Limit processing failed, rejecting...");
                    return wsmodel;
                }

                logger.info("Going to process IBFT in Wallet...");

                if (FinanceManager.IBFTIn(wsmodel, userwallet)) {
                    logger.info("IBFT in Wallet Done successfully!");
                    //setting account balance
                    wsmodel.setAccountnumber(userwallet.getAccountNumber());
                    if (userwallet.getCategory() != null && userwallet.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                        wsmodel.setMerchantid(userwallet.getUserId());
                    } else {
                        wsmodel.setUserid(userwallet.getUserId());
                    }
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                } else {
                    logger.info("Unable to do IBFT in Wallet... **********Manual Process Required!**********");

                    //process wallet limit
                    logger.info("Revertsing Limit ...");
                    String respCode = wsmodel.getRespcode();
                    //if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, card, Boolean.FALSE))
                    if (!WalletCMSFunctions.ProcessCreditWalletLimit(wsmodel, userwallet, null, Boolean.FALSE)) {
                        logger.error("Limit reversing failed, rejecting...");
                        return wsmodel;
                    }
                    wsmodel.setRespcode(respCode);
                    return wsmodel;
                }
                */
            // Asim Shahzad, Date : 11th Aug 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
//            }
//            else
//            {
//                logger.info("No Account Relation Found for UserId [ "+ wsmodel.getUserid() +", rejecting...");
//                wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //90 Customer not found
//                return wsmodel;
//            }
            // =====================================================================================
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing IBFT..!");
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //Raza Refer to Document '12'
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteOnelinkTopupBillPayment(WalletCMSWsEntity wsmodel) {
        logger.info("Executing OnelinkTopupBillPayment Request...");
        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            // Asim Shahzad, Date : 29th June 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
            if (Util.hasText(wsmodel.getUserid())) {
                logger.info("Resolving wallet using user id....");

                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("USERID", wsmodel.getUserid());
                params.put("CAT", AccType.CAT_WALLET.StringValue());
            } else {
                logger.info("Resolving wallet using IBAN....");

                dbQuery = "from " + CMSAccount.class.getName() + " c where c.iBan= :IBAN" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("IBAN", wsmodel.getConsumerno());
                params.put("CAT", AccType.CAT_WALLET.StringValue());
            }
            // ======================================================================================

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //CMSAccount userwallet = (CMSAccount)GeneralDao.Instance.findObject(dbQuery, params);
            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

            if (userwallet != null && !userwallet.getStatus().equals("04") //Fraud Block
                    && !userwallet.getStatus().equals("07") //KYC Block
                    && !userwallet.getStatus().equals("09") //AML Block
                    && !userwallet.getStatus().equals("90") //Admin Block
                    && userwallet.getCustomer().getStatus().equals("00")) // Asim Shahzad, Date : 10th Nov 2021, Tracking ID : VC-NAP-202111023
            {
                //amount fields validation start
                logger.info("Verifying Amounts....");
                if (Long.parseLong(wsmodel.getAmounttransaction()) == 0L) {
                    logger.error("Zero Amount Received! rejecting..");
                    wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED);
                    return wsmodel;
                }
                //amount fields validation end

                //m.rehman: Euronet integration, add local/international flag in charges
                //getting transaction charges
                FetchTransactionCharge(wsmodel, userwallet.getProduct(), "0");      //0-false

                //process wallet limit
                if (!WalletCMSFunctions.ProcessCreditWalletLimit(wsmodel, userwallet, null, Boolean.TRUE)) {
                    if (Util.hasText(wsmodel.getRespcode()) && wsmodel.getRespcode().equals(ISOResponseCodes.NP_SRC_LIMIT_EXCEEDED)) {
                        wsmodel.setRespcode(ISOResponseCodes.LIMIT_EXCEEDED);
                    } else {
                        wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS);
                    }
                    logger.error("Limit processing failed, rejecting...");
                    return wsmodel;
                }

                logger.info("Going to process Topup Bill Payment in Wallet...");

                if (FinanceManager.TopupBillPayment(wsmodel, userwallet)) {

                    //for transaction detail
                    wsmodel.setDestusername(userwallet.getAccountTitle());

                    logger.info("Topup Bill Payment done successfully!");
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                    //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                    wsmodel.setIncludeinstatement(1);
                    ////////////////////////////////////////////////////////////////////////////////////////////////////

                } else {
                    logger.info("Unable to process Topup Bill Payment in Wallet... **********Manual Process Required!**********");

                    //reversing wallet limit
                    logger.info("Reversing Limit ...");
                    String respCode = wsmodel.getRespcode();
                    if (!WalletCMSFunctions.ProcessCreditWalletLimit(wsmodel, userwallet, null, Boolean.FALSE)) {
                        if (Util.hasText(wsmodel.getRespcode()) && wsmodel.getRespcode().equals(ISOResponseCodes.NP_SRC_LIMIT_EXCEEDED)) {
                            wsmodel.setRespcode(ISOResponseCodes.LIMIT_EXCEEDED);
                        } else {
                            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS);
                        }
                        logger.error("Limit reversing failed, rejecting...");
                        return wsmodel;
                    }
                    wsmodel.setRespcode(respCode);
                }
            } else {
                logger.error("Wallet not found or Invalid wallet or Customer status, rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT_STATUS);
            }
            return wsmodel;
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing OnelinkTopupBillPayment..!");
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //Raza Refer to Document '12'
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteFundManagement(WalletCMSWsEntity wsmodel) {
        logger.info("Executing FundManagement Request...");
        try {

            if (FinanceManager.FundManagement(wsmodel)) {
                logger.info("Fund Management ledger entries done successfully!");
                wsmodel.setRespcode(ISOResponseCodes.APPROVED);

            } else {
                logger.info("Unable to process Fund Management ledger entries... **********Manual Process Required!**********");
                wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS);
            }
            return wsmodel;
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing FundManagement..!");
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //Raza Refer to Document '12'
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    // Author: Asim Shahzad, Date : 25th Feb 2020, Desc : For getting Nayapay mobile application download counts from middleware
    public static WalletCMSWsEntity ExecuteGetAppDownloadCount(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing GetAppDownloadCount Request...");
            logger.info("Setting Response Code Approved...");

            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
            return wsmodel;
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetAppDownloadCount..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetUserCardTransactionList(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetUserCardTransactionList Request...");
        try {
            String dbQuery;
            Map<String, Object> params;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (usernprel != null) {
                if (!usernprel.getAccount().getStatus().equals("00") || !usernprel.getAccount().getCustomer().getStatus().equals("00")) {
                    logger.error("Invalid Account or Customer Status, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Inactive Account/Customer ; refer NayaPay Doc
                    return wsmodel;
                } else {

                    List<UserTransaction> usertxns = new ArrayList<UserTransaction>();
                    //m.rehman: 10-11-2021 - Nayapay Optimization
                    //List<MVFinancialLog> dbtranlist = null; // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                    List<WalletCMSWsListingEntity> dbtranlist = null;

                    //checking card info in system
                    dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARD_NO";
                    params = new HashMap<String, Object>();
                    params.put("CARD_NO", wsmodel.getCardnumber());
                    CMSCard cmsCard = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);

                    if (cmsCard != null) {
                        logger.info("Getting User Card Transaction List ...");

                        //m.rehman: 30-09-2020, VP-NAP-202009241 - Original and Reversed transaction in transaction listing
                        /*
                        dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where " +
                                //" c.userid= :USERID " +
                                " c.cardnumber = :CARD_NO " +
                                " and c.servicename in ('CashWithDrawal','Purchase') " +
                                " and c.tranrefnumber != :TXN_REF_NUM " +
                                " and c.respcode = :RESPCODE ";

                        params = new HashMap<String, Object>();
                        params.put("CARD_NO", wsmodel.getCardnumber());
                        params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());
                        params.put("RESPCODE", "00");
                        */

                        // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115

                        params = new HashMap<String, Object>();

                        if (wsmodel.getTypefilter() == null) {
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                    //" c.userid= :USERID " +
                                    " c.cardnumber = :CARD_NO " +
                                    " and " +
                                    //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                    //m.rehman: 07-05-2021, VG-NAP-202104271 / VP-NAP-202104261 / VC-NAP-202104261==>[ Efforts updated ]==> VISA transaction charging update - adding WithHoldingTax
                                    //adding online transaction in the list
                                    //m.rehman: 26-07-2021, VC-NAP-202107261 - Reverse transaction when 0120 message received from Visa
                                    //adding STIP
                                    " (c.servicename in ('CashWithDrawal','Purchase','BalanceInquiry','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund','WithHoldingTax','STIP') " +
                                    " or " +
                                    " c.originalapi in ('CashWithDrawal','Purchase','BalanceInquiry','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund','WithHoldingTax','STIP')) ";
                        } else {
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                    //" c.userid= :USERID " +
                                    " c.cardnumber = :CARD_NO " +
                                    " and " +
                                    //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                    //adding online transaction in the list
                                    " (c.servicename in (:TRNTYPE) " +
                                    " or " +
                                    " c.originalapi in (:TRNTYPE)) ";

                            params.put("TRNTYPE", wsmodel.getTypefilter());
                        }
                        dbQuery += " and c.tranrefnumber != :TXN_REF_NUM " +
                                " and c.respcode in (:RESPCODE) ";
                        // =======================================================================================

                        params.put("CARD_NO", wsmodel.getCardnumber());
                        params.put("TXN_REF_NUM", wsmodel.getTranrefnumber());

                        List<String> respcode = new ArrayList<>();
                        respcode.add("00");
                        respcode.add("36");
                        params.put("RESPCODE", respcode);
                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

                        // Asim Shahzad, Date : 17th March 2021, Tracking ID : VP-NAP-202103115 / VC-NAP-202103115
//                        if (Util.hasText(wsmodel.getTypefilter())) {
//                            dbQuery += " and c.servicename = :TRNTYPE ";
//                            params.put("TRNTYPE", wsmodel.getTypefilter());
//                        }
//                        if (wsmodel.getTypefilter() != null) {
//                            dbQuery += " and c.servicename in (:TRNTYPE) ";
//                            params.put("TRNTYPE", wsmodel.getTypefilter());
//                        }
                        // ========================================================================================

                        //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                        //adding more filters
                        if (Util.hasText(wsmodel.getStartdate())) {
                            dbQuery += " and substr(c.transdatetime,0,8) >= :START_DATE ";
                            params.put("START_DATE", new SimpleDateFormat("yyyyMMdd").format(new SimpleDateFormat("dd-MM-yyyy").parse(wsmodel.getStartdate())));
                        }

                        if (Util.hasText(wsmodel.getEnddate())) {
                            dbQuery += " and substr(c.transdatetime,0,8) <= :END_DATE ";
                            params.put("END_DATE", new SimpleDateFormat("yyyyMMdd").format(new SimpleDateFormat("dd-MM-yyyy").parse(wsmodel.getEnddate())));
                        }
                        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

                        //Arsalan Akhter, Date:15-June-2021, Ticket: VC-NAP-202106141(Change transdatetime to id)
                        //Arsalan Akhter, Date: 10-Aug-2021, Ticket: VC-NAP-202108101-Transactions order issue in Listing Calls
                        dbQuery += " order by c.transdatetime desc, c.id desc ";

                        String query = "select count(*) " + dbQuery;
                        Long size = (Long) GeneralDao.Instance.findObject(query, params);
                        wsmodel.setTotalcount(size + "");
                        logger.info("Total Count [" + size + "]");

                        //Arsalan Akhter, Date: 12-July-2021, Ticket: VC-NAP-202107123 (Amount Spent in Get User Debit Card Transaction list)
                        //m.rehman: 10-11-2021 - Nayapay Optimization
                        //List<MVFinancialLog> dbtranlist1 = null; // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                        List<WalletCMSWsListingEntity> dbtranlist1 = null;
                        Query query2 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                        query2.setProperties(params);
                        dbtranlist1 = query2.list();

                        if (dbtranlist1 != null && dbtranlist1.size() > 0) {
                            Long totalAmount = 0L;
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //for (MVFinancialLog txn1 : dbtranlist1) { // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            for (WalletCMSWsListingEntity txn1 : dbtranlist1) {
                                try {
                                    //Arsalan Akhter, Date: 12-July-2021, Ticket: VC-NAP-202107123 (Amount Spent in Get User Debit Card Transaction list)
                                    if (Util.hasText(txn1.getRespcode()) && !txn1.getRespcode().equals(ISOResponseCodes.ACQUIRER_REVERSAL)
                                            && !txn1.getServicename().contains("Reversal") && !txn1.getServicename().contains("WithHolding")) {
                                        //totalAmount = totalAmount + Long.parseLong(txn.getAmounttransaction());
                                        totalAmount = totalAmount + ((Util.hasText(txn1.getCbillamount())) ? Long.parseLong(txn1.getCbillamount()) : ((Util.hasText(txn1.getAmounttransaction())) ? Long.parseLong(txn1.getAmounttransaction()) : 0L));
                                        totalAmount = totalAmount + ((Util.hasText(txn1.getSrcchargeamount())) ? Long.parseLong(txn1.getSrcchargeamount()) : 0L);
                                        totalAmount = totalAmount + ((Util.hasText(txn1.getWithholdingtaxamount())) ? Long.parseLong(txn1.getWithholdingtaxamount()) : 0L);
                                    }
                                    //===============================================================================
                                } catch (Exception e) {
                                    logger.error(e);//s.mehtab on 25-11-2020
                                    logger.error("Unable to Add Txn [" + txn1.getServicename() + "] TxnRefNum [" + txn1.getTranrefnumber() + "] to List Reason [" + e.getMessage() + "]");
                                }
                            }
                            wsmodel.setTotalamountspent(StringUtils.leftPad(totalAmount.toString(), 12, "0"));
                        } else {
                            logger.error("No Transaction found in DB for Src UserId [" + wsmodel.getUserid() + "]");
                        }
                        //=================================================================================

                        logger.info("Page Count [" + wsmodel.getPagecount() + "] Page Size [" + wsmodel.getPagesize() + "]");
                        Integer pageCount = Integer.parseInt(wsmodel.getPagecount());
                        Integer pageSize = Integer.parseInt(wsmodel.getPagesize());
                        logger.info("Converted Page Count [" + pageCount + "] Converted Page Size [" + pageSize + "]");
                        Integer startPosition = (pageCount * pageSize) - pageSize;
                        logger.info("Start Position [" + startPosition + "]");
                        Query query1 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                        query1.setProperties(params);
                        query1.setFirstResult(startPosition);
                        query1.setMaxResults(pageSize);

                        dbtranlist = query1.list(); //GeneralDao.Instance.find(dbQuery, params);
                        usertxns = new ArrayList<UserTransaction>();

                        if (dbtranlist != null && dbtranlist.size() > 0) {
                            logger.info("Transaction records found in db for UserId as Src, processing...");
                            Currency currency;

                            //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                            //Arsalan Akhter, Date: 12-July-2021, Ticket: VC-NAP-202107123 (Amount Spent in Get User Debit Card Transaction list)
                            //Long totalAmount = 0L;

                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //for (MVFinancialLog txn : dbtranlist) { // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            for (WalletCMSWsListingEntity txn : dbtranlist) {
                                logger.info("Service Name from DB [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "]");
                                try {
                                    SwitchTransactionCodes switchTransactionCodes = GlobalContext.getInstance().getTransactionCodeDescbyCode(txn.getServicename());
                                    if (switchTransactionCodes != null && switchTransactionCodes.getIsfinancial()) {
                                        UserTransaction utxn = new UserTransaction();
                                        utxn.setTransrefnum(txn.getStan());

                                        //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                                        //utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                        //m.rehman: 08-10-2020, VP-NAP-202010081/ VC-NAP-202010081 - Deployment 08-10-2020
                                        //utxn.setNayapaytype(wsEntity.getServicename());
                                        if (txn.getServicename().contains("Reversal")) {
                                            utxn.setNayapaytype(txn.getServicename());
                                        } else {
                                            utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                        }
                                        ////////////////////////////////////////////////////////////////////////////

                                        //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                                        utxn.setCardlastdigits(cmsCard.getCardNoLastDigits());
                                        //===============================================================================================================
                                        utxn.setSrcnayapayid(txn.getNayapayid());
                                        if (Util.hasText(txn.getTrancurrency())) {
                                            currency = GlobalContext.getInstance().getCurrency(Integer.parseInt(txn.getTrancurrency()));
                                        } else {
                                            currency = GlobalContext.getInstance().getBaseCurrency();
                                        }
                                        utxn.setCurrency(currency.getName());

                                        //m.rehman: 26-02-2021, Euronet Integration
                                        //utxn.setAmount(txn.getAmounttransaction());
                                        utxn.setAmount((Util.hasText(txn.getCbillamount())) ? txn.getCbillamount() : txn.getAmounttransaction());
                                        /////////////////////////////////////////////////////////////////////////////////////////

                                        utxn.setTransdatetime(txn.getTransdatetime());
                                        utxn.setMerchanttype(txn.getCategoryid());
                                        utxn.setNetinstidno(txn.getBranchcode());
                                        utxn.setAcqinstidcode(txn.getBranchname());
                                        utxn.setTerminalloc(txn.getTermloc());
                                        utxn.setRrn(txn.getRrn());
                                        // Mehtab, Date : 15th Dec 2020, Tracking ID : VC-NAP-202012152
                                        utxn.setCardscheme(txn.getCardscheme());
                                        utxn.setNpticket(txn.getNpticket());
                                        utxn.setVrolticket(txn.getVrolticket());
                                        utxn.setRefundtype(txn.getReserved());

                                        //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                        //calculating total amount of transactions
                                        //Arsalan Akhter, Date: 12-July-2021, Ticket: VC-NAP-202107123 (Amount Spent in Get User Debit Card Transaction list)
//                                        if (Util.hasText(txn.getRespcode()) && !txn.getRespcode().equals(ISOResponseCodes.ACQUIRER_REVERSAL)
//                                            && !txn.getServicename().contains("Reversal") && !txn.getServicename().contains("WithHolding")) {
//                                            //totalAmount = totalAmount + Long.parseLong(txn.getAmounttransaction());
//                                            totalAmount = totalAmount + ((Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : ((Util.hasText(txn.getAmounttransaction())) ? Long.parseLong(txn.getAmounttransaction()) : 0L));
//                                            totalAmount = totalAmount + ((Util.hasText(txn.getSrcchargeamount())) ? Long.parseLong(txn.getSrcchargeamount()) : 0L);
//                                            totalAmount = totalAmount + ((Util.hasText(txn.getWithholdingtaxamount())) ? Long.parseLong(txn.getWithholdingtaxamount()) : 0L);
//                                        }
                                        //===============================================================================
                                        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

                                        // Asim Shahzad, Date : 18th March 2021, Tracking ID : VP-NAP-202103117 / VC-NAP-202103116

                                        //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                        //adding check for original channel of dispute transaction
                                        if (txn.getChannelid().equals(ChannelCodes.EURONET)
                                                || (Util.hasText(txn.getOrigChannelId()) && txn.getOrigChannelId().equals(ChannelCodes.EURONET))) {
                                            utxn.setAcquiringcurrency(Util.hasText(txn.getTrancurrency()) ? CustomerService.findCurrency(Integer.valueOf(txn.getTrancurrency())).getName() : "");
                                            utxn.setAcquiringamount(Util.hasText(txn.getAmounttransaction()) ? txn.getAmounttransaction() : "");
                                            utxn.setConversionrate(Util.hasText(txn.getSettlementrate()) ? txn.getSettlementrate() : "");

                                            //utxn.setInternationaltransactionflag(Util.hasText(txn.getIsInternationalTxnsEnabled()) ? Boolean.valueOf(txn.getIsInternationalTxnsEnabled()) : false);
                                            boolean intlFlag = false;
                                            if (Util.hasText(txn.getBranchcode()) &&
                                                    (txn.getBranchcode().equals("PSI") || txn.getBranchcode().equals("ESI") || txn.getBranchcode().equals("ATM"))) {
                                                intlFlag = true;
                                            }
                                            utxn.setInternationaltransactionflag(intlFlag);

                                            //utxn.setTotalamount((Util.hasText(tran.getCbillamount()) && Util.hasText(tran.getSrcchargeamount())) ? String.valueOf(Long.parseLong(tran.getCbillamount()) + Long.parseLong(tran.getSrcchargeamount())) : "");
                                            Long etotalAmount = (Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : 0L;
                                            if (Util.hasText(txn.getSrcchargeamount())) {
                                                etotalAmount = etotalAmount + Long.parseLong(txn.getSrcchargeamount());
                                            }
                                            if (Util.hasText(txn.getWithholdingtaxamount())) {
                                                etotalAmount = etotalAmount + Long.parseLong(txn.getWithholdingtaxamount());
                                            }
                                            //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                            //converting to ISO format
                                            utxn.setTotalamount(StringUtils.leftPad(etotalAmount.toString(), 12, "0"));

                                            utxn.setBaseamountafterconversion(Util.hasText(txn.getCbillamount()) ? txn.getCbillamount() : "");

                                            //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                            //converting to ISO format
                                            utxn.setForeigntransactionfee((Util.hasText(txn.getSrcchargeamount()) && Util.hasText(txn.getNayapaytaxamount())) ? StringUtils.leftPad(String.valueOf(Long.parseLong(txn.getSrcchargeamount()) - Long.parseLong(txn.getNayapaytaxamount())), 12, "0") : "");

                                            utxn.setTaxappliedonforeigntransactionfee(Util.hasText(txn.getNayapaytaxamount()) ? txn.getNayapaytaxamount() : "");
                                            utxn.setWithholdingtax(Util.hasText(txn.getWithholdingtaxamount()) ? txn.getWithholdingtaxamount() : "");
                                        }

                                        // =======================================================================================

                                        //Arsalan Akhter, Date: 10-Nov-2021, Ticket: VC-NAP-202111053(Source Charges to be returned in GetUserCardTransactionList API)
                                        utxn.setSrccharge(Util.hasText(txn.getSrcchargeamount()) ? txn.getSrcchargeamount() : "");
                                        utxn.setTaxamount(Util.hasText(txn.getNayapaytaxamount()) ? txn.getNayapaytaxamount() : "");
                                        //============================================================================================================================

                                        // Asim Shahzad, Date : 25th May 2021, Tracking ID : VP-NAP-202105212 / VC-NAP-202105211

                                        if (txn.getServicename().equals("WithHoldingTax")) {
                                            utxn.setAmount(txn.getAmounttransaction());
                                            utxn.setOriginaltxnamount(Util.hasText(txn.getCbillamount()) ? txn.getCbillamount() : "");

                                            Long amtTran = Long.parseLong(txn.getAmounttransaction());
                                            Long cBillAmt = Long.parseLong(utxn.getOriginaltxnamount());
                                            double withHoldingTaxPercentage = Math.round((double) amtTran / (double) cBillAmt * 100);

                                            utxn.setWithholdingtaxpercentage(String.valueOf(withHoldingTaxPercentage));
                                        }

                                        // =====================================================================================

                                        // Asim Shahzad, Date : 29th June 2021, Tracking ID : VP-NAP-202106241 / VC-NAP-202106241
                                        if (Util.hasText(txn.getIban())) {
                                            utxn.setIban(txn.getIban());
                                        }
                                        // ======================================================================================
                                        //Arsalan Akhter,Date: 23-July-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                                        utxn.setJustification(txn.getJustification());
                                        //================================================================================

                                        // Asim Shahzad, Date : 1st Sep 2021, Tracking ID : VC-NAP-202108271
                                        if (Util.hasText(txn.getAmountFCY())) {
                                            utxn.setAmountFCY(txn.getAmountFCY());
                                        }

                                        if (Util.hasText(txn.getCurrencyFCY())) {
                                            utxn.setCurrencyFCY(txn.getCurrencyFCY());
                                        }

                                        if (Util.hasText(txn.getExchangeRate())) {
                                            utxn.setExchangeRate(txn.getExchangeRate());
                                        }
                                        // =================================================================

                                        usertxns.add(utxn);
                                    }
                                } catch (Exception e) {
                                    logger.error(e);//s.mehtab on 25-11-2020
                                    logger.error("Unable to Add Txn [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "] to List Reason [" + e.getMessage() + "]");
                                }
                            }

                            //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                            //Arsalan Akhter, Date: 12-July-2021, Ticket: VC-NAP-202107123 (Amount Spent in Get User Debit Card Transaction list)
                            //wsmodel.setTotalamountspent(StringUtils.leftPad(totalAmount.toString(), 12, "0"));
                            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        } else {
                            logger.error("No Transaction found in DB for Src UserId [" + wsmodel.getUserid() + "]");
                        }

                    } else {
                        logger.error("No card found in DB with Card Number [" + wsmodel.getCardnumber() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND);
                        return wsmodel;
                    }
                    wsmodel.setTotalcount((Util.hasText(wsmodel.getTotalcount())) ? wsmodel.getTotalcount() : "0");
                    wsmodel.setUsertransactions(usertxns);
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetUserCardTransactionList..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteReorderDebitCard(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing ExecuteReorderDebitCard Request...");
            String dbQuery;
            Map<String, Object> params;
            boolean chargesFlag = true;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);
            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

            if (nprel != null) {

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                nprel.setAccount((CMSAccount) GeneralDao.Instance.getCurrentSession().get(CMSAccount.class, nprel.getAccount().getId(), LockMode.UPGRADE));
                GeneralDao.Instance.getCurrentSession().refresh(nprel.getAccount());
                ////////////////////////////////////////////////////////////////////////////////////

                if ((!nprel.getAccount().getStatus().equals("00")) || (!nprel.getAccount().getCustomer().getStatus().equals("00"))) {
                    logger.error("Invalid Wallet State or Status, card request not allowed, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Inactive Account/Customer ; refer NayaPay Doc
                    return wsmodel;
                }

                //Change Wallet PIN
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", nprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + nprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //93
                    return wsmodel;
                }

                dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO order by c.id desc";
                params = new HashMap<String, Object>();
                params.put("CARDNO", wsmodel.getCardnumber());
                List<CMSCard> cardList = GeneralDao.Instance.find(dbQuery, params);

                if (cardList != null && cardList.size() > 0) {
                    for (CMSCard card : cardList) {

                        if (card.getCardStatus().equals("14")) {
                            logger.error("Card is in Fresh State found, cannot Reorder Card with a fresh card already available, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION); //32 Inactive Account/Customer ; refer NayaPay Doc
                            return wsmodel;

                        } else {

                            //Verify WalletPIN
                            if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                                logger.error("PIN validation failed, rejecting...");
                                wsmodel.setRespcode(ISOResponseCodes.NP_BAD_PIN); //24-BAD PIN; refer to Doc
                                return wsmodel;
                            }

                            Date currDate = DateTime.now().toDate();
                            Date expiry = new SimpleDateFormat("yyyyMMdd").parse(card.getExpiryDate());
                            Long daysDiff = ChronoUnit.DAYS.between(expiry.toInstant(), currDate.toInstant());
                            Long cardRenewDays = (Util.hasText(card.getProduct().getProductDetail().getRenewalDays())) ?
                                    Long.parseLong(card.getProduct().getProductDetail().getRenewalDays()) : 0L;

                            if ((daysDiff < 0 && daysDiff >= -cardRenewDays) || (daysDiff > 0 && daysDiff <= cardRenewDays)) {

                                //if COD flag is false, need to calculate charges and deduct from wallet
                                if (Util.hasText(wsmodel.getCodflag()) && wsmodel.getCodflag().equals("false")) {
                                    logger.info("COD flag is false, need to calculate card issuance charges, if any, and deduct from wallet ...");

                                    //m.rehman: Euronet integration, add local/international flag in charges
                                    //getting transaction charges
                                    FetchTransactionCharge(wsmodel, nprel.getAccount().getProduct(), "0");      //0-false

                                    //deduct from wallet
                                    if (!FinanceManager.DebitCardRequest(wsmodel, nprel.getAccount())) {
                                        logger.error("Unable to apply charges for Reorder Debit Card Request ...");
                                        return wsmodel;
                                    }

                                    //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                                    wsmodel.setIncludeinstatement(1);
                                    ////////////////////////////////////////////////////////////////////////////////////////////////////

                                } else {
                                    logger.info("COD flag is true, no need to calculate card issuance charges ...");
                                }

                                logger.info("Renewing Card ...");
                                if (WalletCMSFunctions.RenewCardProfile(wsmodel, nprel.getAccount(), card)) {
                                    logger.info("Card Reordering done successfully ... ");
                                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                    return wsmodel;

                                } else {
                                    logger.info("Card Reordering failed, rejecting ... ");
                                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED);
                                    return wsmodel;
                                }
                            } else {
                                logger.error("Unable to renew card due to days difference, rejecting ...");
                                wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION);
                                return wsmodel;
                            }
                        }
                    }

                    return wsmodel;
                } else {
                    logger.error("Card not found for UserId [" + wsmodel.getUserid() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //05 Card not found refer to Document
                    return wsmodel;
                }

            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot verify wallet Pin. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing EnableDebitCard ..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteMerchantSettlementLogging(WalletCMSWsEntity wsmodel) {
        logger.info("Executing " + wsmodel.getServicename() + " Request...");

        try {
            if (FinanceManager.MerchantSettlementLogging(wsmodel)) {
                logger.info("Merchant Settlement Logging successful, returning ...");
                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
            } else {
                logger.error("Merchant Settlement Logging failed, rejecting ...");
            }
            return wsmodel;
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing " + wsmodel.getServicename() + "..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    //m.rehman: Euronet Integration
    @Transactional
    public static WalletCMSWsEntity ExecuteECommerce(WalletCMSWsEntity wsmodel) {
        logger.info("Executing ECommerce Request...");
        try {
            String dbQuery;
            Map<String, Object> params;

            //m.rehman: 08-10-2020, VP-NAP-202010081/ VC-NAP-202010081 - Deployment 08-10-2020
            if (Util.hasText(wsmodel.getBranchname())) {
                wsmodel.setBankcode(wsmodel.getBranchname());
            }
            //////////////////////////////////////////////////////////////////////////////////

            if (Util.hasText(wsmodel.getCardnumber())) {
                //dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO ";
                dbQuery = "from " + CMSCard.class.getName() + " c where " +
                        " c.cardNumber= :CARDNO " +
                        " and substr(c.expiryDate,3,4) = :EXPDATE ";
                params = new HashMap<String, Object>();
                params.put("CARDNO", wsmodel.getCardnumber());
                params.put("EXPDATE", wsmodel.getCardexpiry());

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                //CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);
                CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                //Arsalan Akhter, Date: 15-Oct-2021, Ticket: VP-NAP-202110051 / VC-NAP-202110053(Document 4.9.1 - Notifications Update)
                //Raza Account & Customer Status validation start ; TODO should be updated

                if (card.getList_CustAccounts() == null) {
                    logger.error("No Account Found for CardNo [" + wsmodel.getCardnumber() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                    return wsmodel;
                }

                CMSAccount account = null; //TODO: Raza should Update THIS with default
                for (CMSAccount acct : card.getList_CustAccounts()) {
                    account = acct;
                    if (!acct.getStatus().equals("00") || !acct.getCustomer().getStatus().equals("00")) {
                        logger.error("Inactive Account or Customer Found in DB for CardNo [" + wsmodel.getCardnumber() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_INACTIVE); //32 - Inactive Account/Customer Status ; Refer to Doc
                        return wsmodel;
                    }
                }

                ///m.rehman: 24-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 1
                if (account == null) {
                    dbQuery = "from " + CMSAccount.class.getName() + " a where a.customer = :CUST_ID and a.category = 'WLLT' ";
                    params = new HashMap<>();
                    params.put("CUST_ID", card.getCustomer());
                    account = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
                }
                /////////////////////////////////////////////////////////////////////////////////////////

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                account = (CMSAccount) GeneralDao.Instance.getCurrentSession().get(CMSAccount.class, account.getId(), LockMode.UPGRADE);
                GeneralDao.Instance.getCurrentSession().refresh(account);
                ////////////////////////////////////////////////////////////////////////////////////

                //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                if (account.getCategory() != null && account.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                    wsmodel.setMerchantid(account.getUserId());
                } else {
                    wsmodel.setUserid(account.getUserId());
                }
                ////////////////////////////////////////////////////////////////////////////////////////////

                //Raza Account & Customer Status validation end ; TODO should be updated
                //=====================================================================================================================

                if (card == null) {
                    logger.error("Card not Found in DB with CardNo [" + wsmodel.getCardnumber() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                    return wsmodel;
                } else {
                    String PAN = WebServiceUtil.getPANDecryptedValue(wsmodel.getCardnumber());
                    if (!card.getCardStatus().equals("00")) {
                        //m.rehman: Euronet Integration
                        if (card.getCardStatus().equals("90")) {
                            logger.error("Card in Blocked State, rejcting...");
                            wsmodel.setRespcode(ISOResponseCodes.HOT_CARD); //15-Hot Card ; Refer to Doc
                            //return wsmodel;
                        } else if (card.getCardStatus().equals("03")) {
                            logger.error("Card in Warm State, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.WARM_CARD); //14-Warm Card ; Refer to Doc
                            //return wsmodel;
                        } else {
                            logger.error("Invalid Card Auth Status [ " + card.getCardStatus() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.BAD_CARD_STATUS); //16-BadCardStatus ; Refer to Doc
                            //return wsmodel;
                        }

                        // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                        //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                        wsmodel.setCardlastdigits(PAN.substring(PAN.length() - 4, PAN.length()));
                        //===============================================================================================================
                        // ====================================================================================

                        //m.rehman: 25-06-2021, Visa certification
                        if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
                            if (Util.hasText(wsmodel.getIcccarddata())) {
                                //TODO: need to update below according to scheme requirement
                                //setting icc data without 9F26 (Application Cryptogram) tag for 1Link
                                String iccData = wsmodel.getIcccarddata();
                                String iccDataUpdate;
                                int index = iccData.indexOf(EMVTags.APP_CRYPT);
                                iccDataUpdate = iccData.substring(0, index);
                                iccDataUpdate += iccData.substring(index + 22, iccData.length());
                                wsmodel.setIcccarddata(iccDataUpdate);
                            }

                            String emvData = wsmodel.getSelfdefinedata();
                            if (Util.hasText(emvData))
                                emvData = emvData.substring(0, 2) + "0";
                            wsmodel.setSelfdefinedata(emvData);
                        }

                        return wsmodel;
                        ////////////////////////////////////////////////////////////////////////////////////////////////

                        /*
                        logger.error("Inactive Card Found in DB with CardNo [" + wsmodel.getCardnumber() + "] Status [" + card.getCardStatus() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12- Transaction Invalid ; Refer to Doc
                        return wsmodel;
                        */
                    } else {
                        // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009251 / VP-NAP-202009251
                        //String Bin = PAN.substring(0,6);
                        String Bin = PAN.substring(0, 8);
                        // =====================================================================================

                        dbQuery = "from " + IMD.class.getName() + " n where " +
                                "n.IMD = :CARD_BIN ";
                        params = new HashMap<String, Object>();
                        params.put("CARD_BIN", Bin);

                        IMD obj_Bin = (IMD) GeneralDao.Instance.findObject(dbQuery, params);

                        if (null == obj_Bin) {
                            Bin = PAN.substring(0, 6);

                            dbQuery = "from " + IMD.class.getName() + " n where " +
                                    "n.IMD = :CARD_BIN ";
                            params = new HashMap<String, Object>();
                            params.put("CARD_BIN", Bin);

                            obj_Bin = (IMD) GeneralDao.Instance.findObject(dbQuery, params);
                        }

                        //m.rehman: 23-02-202, Euronet integration
                        if (obj_Bin != null) {
                            wsmodel.setCardscheme(obj_Bin.getCardScheme());
                        }
                        // =====================================================================================

                        //Arsalan Akhter, Date: 07-Oct-2021, Ticket: VP-NAP-202110051 / VC-NAP-202110053(Document 4.9.1 - Notifications Update)
                        wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                        //=====================================================================================================================

                        //m.rehman: 21-01-2020, VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 - VISA (Switch-Middleware Integration document v 4.7.6) - Release 4
                        //checking operation permission on card
                        if (!WalletCMSFunctions.CheckCardControls(wsmodel, card)) {
                            logger.error("Transaction not allowed on this card, rejecting ...");
                            wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED);
                            return wsmodel;
                        }

                        //Arsalan Akhter, Date: 15-Oct-2021, Ticket: VP-NAP-202110051 / VC-NAP-202110053(Document 4.9.1 - Notifications Update)
//                        //Raza Account & Customer Status validation start ; TODO should be updated
//
//                        if(card.getList_CustAccounts() == null)
//                        {
//                            logger.error("No Account Found for CardNo [" + wsmodel.getCardnumber() + "]");
//                            wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
//                            return wsmodel;
//                        }
//
//                        CMSAccount account= null; //TODO: Raza should Update THIS with default
//                        for(CMSAccount acct : card.getList_CustAccounts())
//                        {
//                            account = acct;
//                            if(!acct.getStatus().equals("00") || !acct.getCustomer().getStatus().equals("00"))
//                            {
//                                logger.error("Inactive Account or Customer Found in DB for CardNo [" + wsmodel.getCardnumber() + "]");
//                                wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_INACTIVE); //32 - Inactive Account/Customer Status ; Refer to Doc
//                                return wsmodel;
//                            }
//                        }
//
//                        ///m.rehman: 24-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 1
//                        if (account == null) {
//                            dbQuery = "from " + CMSAccount.class.getName() + " a where a.customer = :CUST_ID and a.category = 'WLLT' ";
//                            params = new HashMap<>();
//                            params.put("CUST_ID", card.getCustomer());
//                            account = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
//                        }
//                        /////////////////////////////////////////////////////////////////////////////////////////
//
//                        //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
//                        if (account.getCategory() != null && account.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
//                            wsmodel.setMerchantid(account.getUserId());
//                        } else {
//                            wsmodel.setUserid(account.getUserId());
//                        }
//                        ////////////////////////////////////////////////////////////////////////////////////////////
//
//                        //Raza Account & Customer Status validation end ; TODO should be updated
                        //=====================================================================================================================

                        dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                        params = new HashMap<String, Object>();
                        params.put("relation", card.getCardNumberExpiryRelation());
                        params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                        CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                        if (cardrelation == null) {
                            logger.error("Card Relation not found for relation [" + card.getCardNumberExpiryRelation() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_RECORD); //Invalid Card Record ; Raza update THIS
                            return wsmodel;
                        }

                        //m.rehman: setting last digits in WSEntity object for verification after decryption
                        //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                        wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                        //===============================================================================================================
                        //TODO: need to check following
                        //m.rehman: Euronet integration, commenting CAVV validation as it is done at Visa end according to Nayapay
                        /*
                        if (WalletCMSFunctions.CAVVCheckRequired(wsmodel)) {
                            if (!WalletCMSFunctions.ValidateCAVV(wsmodel, cardrelation)) {
                                logger.error("CAVV Validation failed, rejecting ...");
                                wsmodel.setRespcode(ISOResponseCodes.SECURITY_VIOLATION);
                                return wsmodel;
                            }
                            logger.info("CAVV validation successful ... ");

                        } else {
                            logger.info("No CAVV data found, ECommerce without 3DS received ...");
                        }
                        */

                        if (WalletCMSFunctions.CVV2CheckRequired(wsmodel)) {
                            if (!WalletCMSFunctions.ValidateCVV(wsmodel, cardrelation, Boolean.FALSE)) {
                                logger.error("CVV2 Validation failed, rejecting ...");
                                wsmodel.setRespcode(ISOResponseCodes.SECURITY_VIOLATION);
                                return wsmodel;
                            }
                            logger.info("CVV2 validation successful ...");

                        } else {
                            logger.error("No CVV2 found for ECommerce transaction, rejecting ...");

                            /*if (Util.hasText(wsmodel.getPosentrymode()) && wsmodel.getPosentrymode().substring(0, 2).equals(ISOPOSEntryMode.PANEntryMode.CREDENTIALS_ON_FILE)
                                    && (Util.hasText(wsmodel.getSelfdefinedata()) && !wsmodel.getSelfdefinedata().substring(8,10).equals("07"))) {*/
                            if (Util.hasText(wsmodel.getPosentrymode()) && wsmodel.getPosentrymode().substring(0, 2).equals(ISOPOSEntryMode.PANEntryMode.CREDENTIALS_ON_FILE)) {
                                logger.info("Credential on File subsequent transaction, no need to decline ...");

                            } else if (Util.hasText(wsmodel.getPosentrymode()) && wsmodel.getPosentrymode().substring(0, 2).equals(ISOPOSEntryMode.PANEntryMode.MANUAL_ENTRY)
                                    && (Util.hasText(wsmodel.getSelfdefinedata()) && wsmodel.getSelfdefinedata().substring(8, 10).equals("07"))) {
                                logger.info("Credential on File initial transaction, no need to decline ...");

                            } else if (WalletCMSFunctions.CAVVCheckRequired(wsmodel)) {
                                logger.info("Transaction is 3DS, CVV2 validation is optional, no need to decline ...");

                            } else {
                                wsmodel.setRespcode(ISOResponseCodes.SECURITY_VIOLATION);
                                return wsmodel;
                            }
                        }

                        if (Long.parseLong(wsmodel.getAmounttransaction()) <= 0) {
                            logger.error("Invalid Amount for Purchase Transaction, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.LOW_BALANCE); //04 - Low Balance ; refer to Doc
                            return wsmodel;
                        }

                        //m.rehman: Euronet Integration
                        //getting transaction charges
                        //FetchTransactionCharge(wsmodel, account.getProduct());

                        //process wallet limit
                        //m.rehman: 22-04-2021, Euronet Integration - need to check both card and account limit
                        //if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, null, Boolean.TRUE))
                        if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, card, Boolean.TRUE)) {
                            logger.error("Limit processing failed, rejecting...");
                            return wsmodel;
                        }

                        logger.info("Going to perform ECommerce in Wallet...");

                        //m.rehman: Euronet Integration
                        boolean fmFlag = false;
                        String channelid = wsmodel.getChannelid();
                        if (Util.hasText(channelid) && channelid.equals(ChannelCodes.ONELINK)) {
                            fmFlag = FinanceManager.Purchase(wsmodel, account);

                        } else if (Util.hasText(channelid) && channelid.equals(ChannelCodes.EURONET)) {
                            if (Util.hasText(wsmodel.getBranchcode()) && wsmodel.getBranchcode().equals("ESI")) {
                                //m.rehman: Euronet integration, add local/international flag in charges
                                //getting transaction charges
                                FetchTransactionCharge(wsmodel, account.getProduct(), "1");      //1-true
                                fmFlag = FinanceManager.InternationalPurchaseFromEuronet(wsmodel, account);
                            } else {
                                //m.rehman: Euronet integration, add local/international flag in charges
                                //getting transaction charges
                                FetchTransactionCharge(wsmodel, account.getProduct(), "0");      //0-false
                                fmFlag = FinanceManager.LocalPurchaseFromEuronet(wsmodel, account);
                            }
                        }

                        if (fmFlag) {
                            logger.info("ECommerce from Wallet Done successfully!");
                            //setting account balance
                            wsmodel.setAccountnumber(account.getAccountNumber());
                            if (account.getCategory() != null && account.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                                wsmodel.setMerchantid(account.getUserId());
                            } else {
                                wsmodel.setUserid(account.getUserId());
                            }
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                            wsmodel.setIncludeinstatement(1);
                            ////////////////////////////////////////////////////////////////////////////////////////////////////

                            return wsmodel;
                        } else {
                            logger.info("Unable to Perform ECommerce in Wallet... **********Manual Process Required!**********");

                            //process wallet limit
                            logger.info("Reversing Limit ...");
                            String respCode = wsmodel.getRespcode();
                            //m.rehman: 22-04-2021, Euronet Integration - need to check both card and account limit
                            //if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, null, Boolean.FALSE))
                            if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, card, Boolean.FALSE)) {
                                logger.error("Limit reversing failed, rejecting...");
                                return wsmodel;
                            }
                            wsmodel.setRespcode(respCode);
                            return wsmodel;
                        }
                    }
                }
            } else {
                logger.error("No Identifier Found for NayaPay customer");
                wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                return wsmodel;
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("Exception caught while Executing ECommerce..!");
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //Raza Refer to Document '12'
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            GeneralDao.Instance.endTransaction();
            GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
        }
    }

    //m.rehman: Euronet Integration
    public static WalletCMSWsEntity ExecuteVCASStepup(WalletCMSWsEntity wsmodel) {
        logger.info("Executing VCASStepup Request...");
        try {
            String dbQuery, cardExpiry;
            Map<String, Object> params;

            if (Util.hasText(wsmodel.getCardnumber()) && Util.hasText(wsmodel.getCardexpiry())) {
                cardExpiry = wsmodel.getCardexpiry();
                if (cardExpiry.length() > 4) {
                    cardExpiry = cardExpiry.substring(2, cardExpiry.length());
                }

                dbQuery = "from " + CMSCard.class.getName() + " c where " +
                        " c.cardNumber= :CARDNO " +
                        " and substr(c.expiryDate,3,4) = :EXPDATE ";
                params = new HashMap<String, Object>();
                params.put("CARDNO", wsmodel.getCardnumber());
                params.put("EXPDATE", cardExpiry);
                CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);

                if (card == null) {
                    logger.error("Card not Found in DB with CardNo [" + wsmodel.getCardnumber() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                    return wsmodel;
                } else {
                    if (!card.getCardStatus().equals("00")) {
                        logger.error("Inactive Card Found in DB with CardNo [" + wsmodel.getCardnumber() + "] Status [" + card.getCardStatus() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12- Transaction Invalid ; Refer to Doc
                        return wsmodel;
                    } else {
                        //Raza Account & Customer Status validation start ; TODO should be updated

                        //Arsalan Akhter, Date:02-June-2021, Tikcet# VC-NAP-202106021 (Reject step-up if e-commerce is disabled)
                        String posentrymode = wsmodel.getPosentrymode();
                        wsmodel.setPosentrymode("01");
                        if (!WalletCMSFunctions.CheckCardControls(wsmodel, card)) {
                            logger.error("Transaction not allowed on this card, rejecting ...");
                            wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED);

                            wsmodel.setPosentrymode(posentrymode);
                            return wsmodel;
                        }
                        wsmodel.setPosentrymode(posentrymode);
                        //======================================================================================
                        if (card.getList_CustAccounts() == null) {
                            logger.error("No Account Found for CardNo [" + wsmodel.getCardnumber() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                            return wsmodel;
                        }

                        for (CMSAccount acct : card.getList_CustAccounts()) {
                            if (!acct.getStatus().equals("00") || !acct.getCustomer().getStatus().equals("00")) {
                                logger.error("Inactive Account or Customer Found in DB for CardNo [" + wsmodel.getCardnumber() + "]");
                                wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_INACTIVE); //32 - Inactive Account/Customer Status ; Refer to Doc
                                return wsmodel;
                            } else {
                                wsmodel.setUserid(acct.getUserId());
                            }
                        }

                        ///m.rehman: 24-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 1
                        if (!Util.hasText(wsmodel.getUserid())) {
                            dbQuery = "from " + CMSAccount.class.getName() + " a where a.customer = :CUST_ID and a.category = 'WLLT' ";
                            params = new HashMap<>();
                            params.put("CUST_ID", card.getCustomer());
                            CMSAccount account = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
                            wsmodel.setUserid(account.getUserId());
                        }
                        /////////////////////////////////////////////////////////////////////////////////////////

                        /*
                        dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                        params = new HashMap<String, Object>();
                        params.put("relation", card.getCardNumberExpiryRelation());
                        params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                        CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                        if(cardrelation == null)
                        {
                            logger.error("Card Relation not found for relation [" + card.getCardNumberExpiryRelation() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_RECORD); //Invalid Card Record ; Raza update THIS
                            return wsmodel;
                        }
                        */

                        if (Util.hasText(wsmodel.getCustomername())) {
                            if (!card.getCardName().toUpperCase().equals(wsmodel.getCustomername().toUpperCase())) {
                                logger.error("Incoming Card Name doest not match with available Card Name, rejecting ...");
                                wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT);
                                return wsmodel;
                            }
                        }

                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    }
                }
            } else {
                logger.error("No Identifier Found for NayaPay customer");
                wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                return wsmodel;
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("Exception caught while Executing VCASStepup..!");
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //Raza Refer to Document '12'
            return wsmodel;
        }
    }

    //m.rehman: Euronet Integration
    public static WalletCMSWsEntity ExecuteQRMerchantPayment(WalletCMSWsEntity wsmodel) {

        logger.info("Executing QRMerchantPayment Request...");
        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null) {

                if (!userwallet.getStatus().equals("00")) {
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE);
                    return wsmodel;

                } else if (!userwallet.getCustomer().getStatus().equals("00")) {
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE);
                    return wsmodel;

                } else {

                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                    params = new HashMap<String, Object>();
                    params.put("relation", userwallet.getAccountNumber());
                    params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                    CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                    if (cardrelation == null) {
                        logger.error("Card Relation not found for relation [" + userwallet.getAccountNumber() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                        return wsmodel;
                    }

                    if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                        logger.error("PIN validation failed, rejecting...");
                        //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                        return wsmodel;
                    }

                    logger.info("Wallet Pin verified through HSM ...");

                    if (Long.parseLong(wsmodel.getAmounttransaction()) <= 0) {
                        logger.error("Invalid Amount for Withdrawal Transaction, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INSUFFICEIENT_BALANCE); //04 - Low Balance ; refer to Doc
                        return wsmodel;
                    }

                    //m.rehman: Euronet integration, add local/international flag in charges
                    //getting transaction charges
                    FetchTransactionCharge(wsmodel, userwallet.getProduct(), "0");      //0-false

                    //process wallet limit
                    if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, userwallet, null, Boolean.TRUE)) {
                        logger.error("Limit processing failed, rejecting...");
                        return wsmodel;
                    }

                    logger.info("Going to process QRMerchantPayment in Wallet...");

                    if (FinanceManager.QRMerchantPayment(wsmodel, userwallet)) {
                        logger.info("QRMerchantPayment in Wallet Done successfully!");
                        wsmodel.setAccountnumber(userwallet.getAccountNumber());
                        wsmodel.setCustomername(userwallet.getAccountTitle());
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;

                    } else {
                        logger.info("Unable to do QRMerchantPayment in Wallet... **********Manual Process Required!**********");

                        //process wallet limit
                        logger.info("Reversing Limit ...");
                        String respCode = wsmodel.getRespcode();
                        if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, userwallet, null, Boolean.FALSE)) {
                            logger.error("Limit reversing failed, rejecting...");
                            wsmodel.setRespcode(respCode);
                        }
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("Exception caught while Executing QRMerchantPayment..!");
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //Raza Refer to Document '12'
            return wsmodel;
        }
    }

    //m.rehman: Euronet Integration
    @Transactional
    public static WalletCMSWsEntity ExecuteQRMerchantPaymentReversal(WalletCMSWsEntity wsmodel) {

        logger.info("Executing QRMerchantPaymentReversal Request...");
        try {
            String dbQuery;
            Map<String, Object> params;
            WalletCMSWsEntity origTxn;

            //fetching original transaction
            if (!Util.hasText(wsmodel.getOrigdataelement())) {
                logger.error("Original data element not found, rejecting ...");
                wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_TRANSACTION_NOT_FOUND);
                return wsmodel;

            } else {
                dbQuery = "from " + WalletCMSWsEntity.class.getName() + " a where a.tranrefnumber = :TXN_REF_NO";
                params = new HashMap<>();
                params.put("TXN_REF_NO", wsmodel.getOrigdataelement());

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                //origTxn = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params);
                origTxn = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params, "origTxn", LockMode.UPGRADE);

                if (origTxn == null) {
                    logger.error("Original transaction not found, rejecting ...");
                    wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_TRANSACTION_NOT_FOUND);
                    return wsmodel;

                } else if (Util.hasText(origTxn.getRespcode()) && origTxn.getRespcode().equals(ISOResponseCodes.ACQUIRER_REVERSAL)) {
                    logger.error("Original transaction already reversed, rejecting ...");
                    wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_ALREADY_REVERSED);
                    return wsmodel;

                } else if (Util.hasText(origTxn.getRespcode()) && !origTxn.getRespcode().equals(ISOResponseCodes.APPROVED)) {
                    logger.error("Original transaction not approved, rejecting ...");
                    wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_ALREADY_REJECTED);
                    return wsmodel;

                } else {
                    logger.info("Original transaction found, proceeding ...");
                }
            }

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

            if (userwallet != null) {

                if (!userwallet.getStatus().equals("00")) {
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE);
                    return wsmodel;

                } else if (!userwallet.getCustomer().getStatus().equals("00")) {
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE);
                    return wsmodel;

                } else {

                    if (Long.parseLong(wsmodel.getAmounttransaction()) <= 0) {
                        logger.error("Invalid Amount for Withdrawal Transaction, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INSUFFICEIENT_BALANCE); //04 - Low Balance ; refer to Doc
                        return wsmodel;
                    }

                    //m.rehman: Euronet integration, add local/international flag in charges
                    //getting transaction charges
                    FetchTransactionCharge(wsmodel, userwallet.getProduct(), "0");      //0-false

                    //process wallet limit
                    if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, userwallet, null, Boolean.FALSE)) {
                        logger.error("Limit processing failed, rejecting...");
                        return wsmodel;
                    }

                    logger.info("Going to process QRMerchantPaymentReversal in Wallet...");

                    if (FinanceManager.QRMerchantPaymentReversal(wsmodel, userwallet)) {
                        logger.info("QRMerchantPaymentReversal in Wallet Done successfully!");
                        logger.info("Marking transaction as reversed in System ....");
                        origTxn.setRespcode(ISOResponseCodes.ACQUIRER_REVERSAL);
                        GeneralDao.Instance.saveOrUpdate(origTxn);
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;

                    } else {
                        logger.info("Unable to do QRMerchantPaymentReversal in Wallet... **********Manual Process Required!**********");

                        //process wallet limit
                        logger.info("Reversing Limit ...");
                        String respCode = wsmodel.getRespcode();
                        if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, userwallet, null, Boolean.TRUE)) {
                            logger.error("Limit reversing failed, rejecting...");
                            wsmodel.setRespcode(respCode);
                        }
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("Exception caught while Executing QRMerchantPaymentReversal..!");
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //Raza Refer to Document '12'
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            GeneralDao.Instance.endTransaction();
            GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
        }
    }

    //m.rehman: Euronet Integration
    @Transactional
    public static WalletCMSWsEntity ExecuteQRMerchantPaymentRefund(WalletCMSWsEntity wsmodel) {

        logger.info("Executing QRMerchantPaymentRefund Request...");
        try {
            String dbQuery;
            Map<String, Object> params;
            WalletCMSWsEntity origTxn;

            //fetching original transaction
            if (!Util.hasText(wsmodel.getOrigdataelement())) {
                logger.error("Original data element not found, rejecting ...");
                wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_TRANSACTION_NOT_FOUND);
                return wsmodel;

            } else {
                dbQuery = "from " + WalletCMSWsEntity.class.getName() + " a where a.tranrefnumber = :TXN_REF_NO";
                params = new HashMap<>();
                params.put("TXN_REF_NO", wsmodel.getOrigdataelement());

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                //origTxn = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params);
                origTxn = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params, "a", LockMode.UPGRADE);

                if (origTxn == null) {
                    logger.error("Original transaction not found, rejecting ...");
                    wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_TRANSACTION_NOT_FOUND);
                    return wsmodel;

                } else if (Util.hasText(origTxn.getRespcode()) && origTxn.getRespcode().equals(ISOResponseCodes.ACQUIRER_REVERSAL)) {
                    logger.error("Original transaction already reversed, rejecting ...");
                    wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_ALREADY_REVERSED);
                    return wsmodel;

                } else if (Util.hasText(origTxn.getRespcode()) && !origTxn.getRespcode().equals(ISOResponseCodes.APPROVED)) {
                    logger.error("Original transaction not approved, rejecting ...");
                    wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_ALREADY_REJECTED);
                    return wsmodel;

                } else {
                    logger.info("Original transaction found, proceeding ...");
                }
            }

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

            if (userwallet != null) {

                if (!userwallet.getStatus().equals("00")) {
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE);
                    return wsmodel;

                } else if (!userwallet.getCustomer().getStatus().equals("00")) {
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE);
                    return wsmodel;

                } else {

                    //check if multiple refunds available, add amount and check with orig txn amount
                    Long refundAmount = 0L;
                    dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where " +
                            " c.origdataelement = :ORIG_DATA_ELEM " +
                            " and c.servicename = :SERVICE_NAME";
                    params = new HashMap<>();
                    params.put("ORIG_DATA_ELEM", wsmodel.getOrigdataelement());
                    params.put("SERVICE_NAME", wsmodel.getServicename());

                    //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                    //List<WalletCMSWsEntity> refundList = GeneralDao.Instance.find(dbQuery, params);
                    List<WalletCMSWsEntity> refundList = GeneralDao.Instance.find(dbQuery, params, "c", LockMode.UPGRADE);
                    if (refundList != null && refundList.size() > 0) {      //refunds already available against original transaction
                        for (WalletCMSWsEntity wsEntity : refundList) {
                            refundAmount = refundAmount + Long.parseLong(wsEntity.getAmounttransaction());
                        }
                        logger.info("Total already refunded amount [" + refundAmount + "] against original transction [" + wsmodel.getOrigdataelement() + "]");
                    }

                    if (Long.parseLong(wsmodel.getAmounttransaction()) <= 0
                            || Long.parseLong(wsmodel.getAmounttransaction()) > Long.parseLong(origTxn.getAmounttransaction())
                            || (refundAmount + Long.parseLong(wsmodel.getAmounttransaction())) > Long.parseLong(origTxn.getAmounttransaction())) {
                        logger.error("Invalid Amount for QRMerchantPaymentRefund Transaction, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION);
                        return wsmodel;
                    }

                    //m.rehman: Euronet integration, add local/international flag in charges
                    //getting transaction charges
                    FetchTransactionCharge(wsmodel, userwallet.getProduct(), "0");      //0-false

                    //process wallet limit
                    if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, userwallet, null, Boolean.TRUE)) {
                        logger.error("Limit processing failed, rejecting...");
                        return wsmodel;
                    }

                    logger.info("Going to process QRMerchantPaymentRefund in Wallet...");

                    if (FinanceManager.QRMerchantPaymentRefund(wsmodel, userwallet)) {
                        logger.info("QRMerchantPaymentRefund in Wallet Done successfully!!");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;

                    } else {
                        logger.info("Unable to do QRMerchantPaymentRefund in Wallet... **********Manual Process Required!**********");

                        //process wallet limit
                        logger.info("Reversing Limit ...");
                        String respCode = wsmodel.getRespcode();
                        if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, userwallet, null, Boolean.FALSE)) {
                            logger.error("Limit reversing failed, rejecting...");
                            wsmodel.setRespcode(respCode);
                        }
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("Exception caught while Executing QRMerchantPaymentRefund..!");
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //Raza Refer to Document '12'
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            GeneralDao.Instance.endTransaction();
            GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
        }
    }

    @Transactional
    public static WalletCMSWsEntity ExecuteIBFT(WalletCMSWsEntity wsmodel) {

        logger.info("Executing IBFT Request...");
        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

            if (userwallet != null) {

                if (!userwallet.getStatus().equals("00") || !userwallet.getCustomer().getStatus().equals("00")) {
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE);
                    return wsmodel;

                } else {

                    // Asim Shahzad, Date : 21st Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                    if (Util.hasText(userwallet.getAccountTitle())) {
                        wsmodel.setCustomername(userwallet.getAccountTitle());
                    }
                    // =====================================================================================

                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                    params = new HashMap<String, Object>();
                    params.put("relation", userwallet.getAccountNumber());
                    params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                    CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                    if (cardrelation == null) {
                        logger.error("Card Relation not found for relation [" + userwallet.getAccountNumber() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                        return wsmodel;
                    }

                    if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                        logger.error("PIN validation failed, rejecting...");
                        return wsmodel;
                    }

                    logger.info("Wallet Pin verified through HSM ...");

                    if (Long.parseLong(wsmodel.getAmounttransaction()) <= 0) {
                        logger.error("Invalid Amount for IBFT Transaction, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INSUFFICEIENT_BALANCE); //04 - Low Balance ; refer to Doc
                        return wsmodel;
                    }

                    //m.rehman: Euronet integration, add local/international flag in charges
                    //getting transaction charges
                    FetchTransactionCharge(wsmodel, userwallet.getProduct(), "0");      //0-false

                    //process wallet limit
                    if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, userwallet, null, Boolean.TRUE)) {
                        logger.error("Limit processing failed, rejecting...");
                        return wsmodel;
                    }

                    logger.info("Going to process IBFT in Wallet...");

                    if (FinanceManager.IBFT(wsmodel, userwallet)) {
                        logger.info("IBFT in Wallet Done successfully!");
                        wsmodel.setAccountnumber(userwallet.getAccountNumber());
                        wsmodel.setCustomername(userwallet.getAccountTitle());

                        // Asim Shahzad, Date : 7th May 2021, Tracking ID : VP-NAP-202105051 / VG-NAP-202105051/ VC-NAP-202105051
                        wsmodel.setCnic(userwallet.getCustomer().getCnic());
                        ////////////////////////////////////////////////////////////////////////////////////////////////

                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                        wsmodel.setIncludeinstatement(1);
                        ////////////////////////////////////////////////////////////////////////////////////////////////////

                        return wsmodel;

                    } else {
                        logger.info("Unable to do IBFT in Wallet... **********Manual Process Required!**********");

                        //process wallet limit
                        logger.info("Reversing Limit ...");
                        String respCode = wsmodel.getRespcode();
                        if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, userwallet, null, Boolean.FALSE)) {
                            logger.error("Limit reversing failed, rejecting...");
                            wsmodel.setRespcode(respCode);
                        }
                        //m.rehman: 16-03-2021, VC-NAP-202103162 - Low balance issue in IBFT
                        wsmodel.setRespcode(respCode);
                        ////////////////////////////////////////////////////////////////////
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing IBFT..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //Raza Refer to Document '12'
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    public static WalletCMSWsEntity ExecuteTitleFetchInquiry(WalletCMSWsEntity wsmodel) {

        logger.info("Executing TitleFetchInquiry Request...");
        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null) {

                if (!userwallet.getStatus().equals("00") || !userwallet.getCustomer().getStatus().equals("00")) {
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE);
                    return wsmodel;

                } else {

                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                    params = new HashMap<String, Object>();
                    params.put("relation", userwallet.getAccountNumber());
                    params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                    CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                    if (cardrelation == null) {
                        logger.error("Card Relation not found for relation [" + userwallet.getAccountNumber() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                        return wsmodel;
                    }

                    logger.info("TitleFetchInquiry Done successfully!");
                    wsmodel.setAccountnumber(userwallet.getAccountNumber());
                    wsmodel.setCustomername(userwallet.getAccountTitle());
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing TitleFetchInquiry..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //Raza Refer to Document '12'
            return wsmodel;
        }
    }

    //m.rehman: Euronet Integration
    public static WalletCMSWsEntity ExecuteChallengeMPIN(WalletCMSWsEntity wsmodel) {
        logger.info("Executing ChallengeMPIN Request...");
        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null) {

                if (!userwallet.getStatus().equals("00") || !userwallet.getCustomer().getStatus().equals("00")) {
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE);
                    return wsmodel;

                } else {

                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                    params = new HashMap<String, Object>();
                    params.put("relation", userwallet.getAccountNumber());
                    params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                    CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                    if (cardrelation == null) {
                        logger.error("Card Relation not found for relation [" + userwallet.getAccountNumber() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                        return wsmodel;
                    }

                    if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                        logger.error("PIN validation failed, rejecting...");
                        return wsmodel;
                    }

                    logger.info("Wallet Pin verified through HSM ...");
                    logger.info("ChallengeMPIN Done successfully!");
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("Exception caught while Executing ChallengeMPIN..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //Raza Refer to Document '12'
            return wsmodel;
        }
    }

    // Asim Shahzad, Date : 17th Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
    public static WalletCMSWsEntity ExecuteLoadWalletInquiryWithoutMPIN(WalletCMSWsEntity wsmodel) {
        logger.info("Executing LoadWalletInquiryWithoutMPIN Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            // Asim Shahzad, Date : 10th Dec 2020, Tracking ID : VP-NAP-202011131 / VC-NAP-202011131 / VG-NAP-202011131
            //Mehtab, Date 29th Dec 2020
            if (Util.hasText(wsmodel.getNayapaytrantype()) &&
                    (wsmodel.getNayapaytrantype().toLowerCase().equals("MerchantRetailTransaction".toLowerCase()) ||
                            wsmodel.getNayapaytrantype().toLowerCase().equals("MerchantBillerTransaction".toLowerCase()))) {

                dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();

                if (Util.hasText(wsmodel.getBillerid())) {
                    params.put("USERID", wsmodel.getBillerid());
                }
                if (Util.hasText(wsmodel.getMerchantid())) {
                    params.put("USERID", wsmodel.getMerchantid());
                }

                params.put("CAT", AccType.CAT_MERCHANT_WALLET.StringValue());

                CMSAccount merchantwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                if (merchantwallet != null) {

                    Long actualbalance = (Util.hasText(merchantwallet.getActualBalance()) ? Long.parseLong(merchantwallet.getActualBalance()) : 0L);
                    Long txnamount = (Util.hasText(wsmodel.getAmounttransaction()) ? Long.parseLong(wsmodel.getAmounttransaction()) : 0L);
                    Long maxlimit = (Util.hasText(wsmodel.getMaxmerchantwalletlimit()) ? Long.parseLong(wsmodel.getMaxmerchantwalletlimit()) : 0L);

                    if ((actualbalance + txnamount) > maxlimit) {
                        logger.error("Destination balance limit breached for merchant wallet, rejecting transaction ...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_DEST_LIMIT_EXCEEDED);
                        return wsmodel;
                    }
                }
            }

            // ========================================================================================================

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID " + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null && userwallet.getStatus().equals("00") && userwallet.getCustomer().getStatus().equals("00")) {

                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", userwallet.getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for account [" + userwallet.getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //90-Customer not Found ; Refer to Doc
                    return wsmodel;
                } else {
                    /*if(!WalletCMSFunctions.ValidatePIN(wsmodel,cardrelation))
                    {
                        logger.error("PIN validation failed, rejecting...");
                        //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                        return wsmodel;
                    }

                    //verify maximum balance limit
                    /*if (!WalletCMSFunctions.VerifyMaxBalanceLimit(wsmodel, userwallet))
                    {
                        logger.error("Maximum Balance Limit verification failed, rejecting...");
                        return wsmodel;
                    }

                    //verify wallet limit
                    if (!WalletCMSFunctions.VerifyWalletLimit(wsmodel, userwallet))
                    {
                        logger.error("Limit verification failed, rejecting...");
                        return wsmodel;
                    }*/

                    logger.info("Verifying Linked Account...");
                    dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.acctId = :ACCTID " + " and c.category = :CAT ";
                    params = new HashMap<String, Object>();
                    params.put("USERID", wsmodel.getUserid());
                    params.put("ACCTID", wsmodel.getAcctid());
                    params.put("CAT", AccType.CAT_LINKED.StringValue());

                    CMSAccount linkedaccount = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

                    if (linkedaccount != null && linkedaccount.getStatus().equals("00")) {
                        //TODO Verify PIN
                        logger.info("Linked Account Verified OK!");
                        wsmodel.setAccountnumber(linkedaccount.getAccountNumber());
                        wsmodel.setBankcode(linkedaccount.getBranchId());
                        wsmodel.setCnic(linkedaccount.getCustomer().getCnic());
                        wsmodel.setDestaccount(userwallet.getAccountNumber());
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        logger.error("Invalid or No Linked Account found for [" + wsmodel.getAcctid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //02 Invalid Account -- refer to Document
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + "], rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing LoadWalletInquiryWithoutMPIN..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    // ====================================================================================================
    //m.rehman: Euronet integration
    public static WalletCMSWsEntity ExecuteAccountVerification(WalletCMSWsEntity wsmodel) {
        logger.info("Executing AccountVerification Request...");
        try {
            String dbQuery;
            Map<String, Object> params;

            if (Util.hasText(wsmodel.getCardnumber())) {
                //dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO ";
                dbQuery = "from " + CMSCard.class.getName() + " c where " +
                        " c.cardNumber= :CARDNO " +
                        " and substr(c.expiryDate,3,4) = :EXPDATE ";
                params = new HashMap<String, Object>();
                params.put("CARDNO", wsmodel.getCardnumber());
                params.put("EXPDATE", wsmodel.getCardexpiry());
                CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);

                if (card == null) {
                    logger.error("Card not Found in DB with CardNo [" + wsmodel.getCardnumber() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                    return wsmodel;
                } else {
                    if (!card.getCardStatus().equals("00")) {
                        //m.rehman: Euronet Integration
                        if (card.getCardStatus().equals("90")) {
                            logger.error("Card in Blocked State, rejcting...");
                            wsmodel.setRespcode(ISOResponseCodes.HOT_CARD); //15-Hot Card ; Refer to Doc
                            return wsmodel;
                        } else if (card.getCardStatus().equals("03")) {
                            logger.error("Card in Warm State, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.WARM_CARD); //14-Warm Card ; Refer to Doc
                            return wsmodel;
                        } else {
                            logger.error("Invalid Card Auth Status [ " + card.getCardStatus() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.BAD_CARD_STATUS); //16-BadCardStatus ; Refer to Doc
                            return wsmodel;
                        }
                        /*
                        logger.error("Inactive Card Found in DB with CardNo [" + wsmodel.getCardnumber() + "] Status [" + card.getCardStatus() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12- Transaction Invalid ; Refer to Doc
                        return wsmodel;
                        */
                    } else {
                        //Raza Account & Customer Status validation start ; TODO should be updated

                        if (card.getList_CustAccounts() == null) {
                            logger.error("No Account Found for CardNo [" + wsmodel.getCardnumber() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                            return wsmodel;
                        }

                        CMSAccount account = null; //TODO: Raza should Update THIS with default
                        for (CMSAccount acct : card.getList_CustAccounts()) {
                            account = acct;
                            if (!acct.getStatus().equals("00") || !acct.getCustomer().getStatus().equals("00")) {
                                logger.error("Inactive Account or Customer Found in DB for CardNo [" + wsmodel.getCardnumber() + "]");
                                wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_INACTIVE); //32 - Inactive Account/Customer Status ; Refer to Doc
                                return wsmodel;
                            }
                        }

                        ///m.rehman: 24-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 1
                        if (account == null) {
                            dbQuery = "from " + CMSAccount.class.getName() + " a where a.customer = :CUST_ID and a.category = 'WLLT' ";
                            params = new HashMap<>();
                            params.put("CUST_ID", card.getCustomer());
                            account = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
                        }
                        /////////////////////////////////////////////////////////////////////////////////////////

                        dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                        params = new HashMap<String, Object>();
                        params.put("relation", card.getCardNumberExpiryRelation());
                        params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                        CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                        if (cardrelation == null) {
                            logger.error("Card Relation not found for relation [" + card.getCardNumberExpiryRelation() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_RECORD); //Invalid Card Record ; Raza update THIS
                            return wsmodel;
                        }

                        //m.rehman: setting last digits in WSEntity object for verification after decryption
                        //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                        wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                        //===============================================================================================================
                        if (Util.hasText(wsmodel.getCardpindata())) {
                            if (!WalletCMSFunctions.ValidateCardPIN(wsmodel, cardrelation)) {
                                logger.error("PIN validation failed, rejecting...");
                                //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
                                return wsmodel;
                            }
                            logger.info("PIN validated successfully");
                        }

                        if (WalletCMSFunctions.CVVCheckRequired(wsmodel) || WalletCMSFunctions.ICVVCheckRequired(wsmodel)) {
                            if (!WalletCMSFunctions.ValidateCVV(wsmodel, cardrelation, true)) {
                                logger.error("CVV/ICVV validation failed, rejecting...");
                                //wsmodel.setRespcode(ISOResponseCodes.SECURITY_VIOLATION); //24-BAD PIN; refer to Doc
                                return wsmodel;
                            }
                            logger.info("CVV/ICVV validated successfully");
                        }

                        if (Util.hasText(wsmodel.getIcccarddata())) {
                            if (!WalletCMSFunctions.ValidateCryptogram(wsmodel, cardrelation)) {
                                logger.error("Cryptogram validation failed, rejecting...");
                                //wsmodel.setRespcode(ISOResponseCodes.SECURITY_VIOLATION); //24-BAD PIN; refer to Doc
                                return wsmodel;
                            }
                            logger.info("Cryptogram validated successfully");
                        }

                        if (WalletCMSFunctions.CVV2CheckRequired(wsmodel)) {
                            if (!WalletCMSFunctions.ValidateCVV(wsmodel, cardrelation, Boolean.FALSE)) {
                                logger.error("CVV2 Validation failed, rejecting ...");
                                wsmodel.setRespcode(ISOResponseCodes.SECURITY_VIOLATION);
                                return wsmodel;
                            }
                            logger.info("CVV2 validation successful ...");
                        }

                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    }
                }
                return wsmodel;
            } else {
                logger.error("No Identifier Found for NayaPay customer");
                wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                return wsmodel;
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("Exception caught while Executing AccountVerification..!");
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //Raza Refer to Document '12'
            return wsmodel;
        }
    }

    //m.rehman: Euronet integration
    @Transactional
    public static WalletCMSWsEntity ExecuteSTIP(WalletCMSWsEntity wsmodel) {
        logger.info("Executing STIP Request...");
        //m.rehman: 26-07-2021, VC-NAP-202107261 - Reverse transaction when 0120 message received from Visa
        //adding reversal flow in STIP
        /*
        try {
            logger.info("Logging STIP transaction in System, returning ...");
            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
            return wsmodel;
        }
        catch (Exception e)
        {
            e.printStackTrace();
            logger.error("Exception caught while Executing STIP..!");
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //Raza Refer to Document '12'
            return wsmodel;
        }
        */

        try {

            //m.rehman: 08-10-2020, VP-NAP-202010081/ VC-NAP-202010081 - Deployment 08-10-2020
            if (Util.hasText(wsmodel.getBranchname())) {
                wsmodel.setBankcode(wsmodel.getBranchname());
            }
            //////////////////////////////////////////////////////////////////////////////////

            Map<String, Object> params;

            //find original transaction first
            String dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c " +
                    "where " +
                    "c.stan= :ORIG_STAN " +
                    "and c.rrn= :ORIG_RRN " +
                    "and c.cardnumber= :CARD_NO " +
                    "and c.terminalid= :TERMINAL_ID " +
                    "and c.merchantid= :MERCHANT_ID " +
                    "and c.servicename != 'STIP' ";
            params = new HashMap<String, Object>();
            params.put("ORIG_STAN", wsmodel.getTranauthid());
            params.put("ORIG_RRN", wsmodel.getRrn());
            params.put("CARD_NO", wsmodel.getCardnumber());
            params.put("TERMINAL_ID", wsmodel.getTerminalid());
            params.put("MERCHANT_ID", wsmodel.getMerchantid());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //WalletCMSWsEntity origTransaction = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params);
            WalletCMSWsEntity origTransaction = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);
            if (origTransaction == null) {

                //m.rehman: 05-12-2021, Reversal not getting auto  Posted in Customer's Wallet - Production
                //adding another txn fetch without stan
                logger.info("Original transaction not found with Ref Num [" + wsmodel.getRrn() + "] and Stan [" + wsmodel.getTranauthid() + "], returning ...");
                logger.info("Trying to find transaction with Ref Num [" + wsmodel.getRrn() + "] only ...");
                dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c " +
                        "where " +
                        "c.rrn= :ORIG_RRN " +
                        "and c.cardnumber= :CARD_NO " +
                        "and c.terminalid= :TERMINAL_ID " +
                        "and c.merchantid= :MERCHANT_ID " +
                        "and c.servicename != 'STIP' ";
                params = new HashMap<String, Object>();
                params.put("ORIG_RRN", wsmodel.getRrn());
                params.put("CARD_NO", wsmodel.getCardnumber());
                params.put("TERMINAL_ID", wsmodel.getTerminalid());
                params.put("MERCHANT_ID", wsmodel.getMerchantid());

                origTransaction = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                if (origTransaction == null) {
                    logger.error("Original transaction not found with Ref Num [" + wsmodel.getRrn() + "], returning ...");
                    wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_TRANSACTION_NOT_FOUND); //30 Original transaction not found - refer document
                    return wsmodel;
                }

            } else if (origTransaction != null && origTransaction.getRespcode().equals(ISOResponseCodes.ACQUIRER_REVERSAL)) {
                logger.error("Original transaction found and already reversed with Ref Num [" + wsmodel.getOrigdataelement() + "], returning ...");
                wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_ALREADY_REVERSED); //35 Already reversed - refer document
                return wsmodel;

            } else if (origTransaction != null && !origTransaction.getRespcode().equals(ISOResponseCodes.APPROVED)) {
                logger.error("Original transaction found but is not Approved with Ref Num [" + wsmodel.getOrigdataelement() + "], returning ...");
                wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_NOT_AUTHORIZED); //34 Original Not Authorized - refer document
                return wsmodel;

            } else {
                logger.info("Original Transaction found with Approved response ...");
            }

            if (Util.hasText(wsmodel.getCardnumber())) {
                //dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO ";
                dbQuery = "from " + CMSCard.class.getName() + " c where " +
                        " c.cardNumber= :CARDNO " +
                        " and substr(c.expiryDate,3,4) = :EXPDATE ";
                params = new HashMap<String, Object>();
                params.put("CARDNO", wsmodel.getCardnumber());
                params.put("EXPDATE", origTransaction.getCardexpiry());

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                //CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);
                CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                if (card == null) {
                    logger.error("Card not Found in DB with CardNo [" + wsmodel.getCardnumber() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                    return wsmodel;
                } else {
                    if (!card.getCardStatus().equals("00")) {
                        logger.error("Inactive Card Found in DB with CardNo [" + wsmodel.getCardnumber() + "] Status [" + card.getCardStatus() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12 - Invalid Card Status ; Refer to Doc
                        return wsmodel;
                    } else {
                        //Raza Account & Customer Status validation start ; TODO should be updated


                        if (card.getList_CustAccounts() == null) {
                            logger.error("No Account Found for CardNo [" + wsmodel.getCardnumber() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                            return wsmodel;
                        }

                        CMSAccount account = null; //TODO: Raza should Update THIS with default
                        for (CMSAccount acct : card.getList_CustAccounts()) {
                            account = acct;
                            if (!acct.getStatus().equals("00") || !acct.getCustomer().getStatus().equals("00")) {
                                logger.error("Inactive Account or Customer Found in DB for CardNo [" + wsmodel.getCardnumber() + "]");
                                wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_INACTIVE); //32 - Inactive Account/Customer Status ; Refer to Doc
                                return wsmodel;
                            }
                        }
                        //Raza Account & Customer Status validation end ; TODO should be updated

                        ///m.rehman: 24-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 1
                        if (account == null) {
                            //m.rehman: 15-07-2021, VC-NAP-202107151 - Total amount not crediting in Visa Local Cash Withdrawal/ECommerce reversal amount not crediting in wallet
                            //adding category
                            dbQuery = "from " + CMSAccount.class.getName() + " a where a.customer = :CUST_ID  and a.category = 'WLLT' ";
                            params = new HashMap<>();
                            params.put("CUST_ID", card.getCustomer());
                            account = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
                        }
                        /////////////////////////////////////////////////////////////////////////////////////////

                        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                        account = (CMSAccount) GeneralDao.Instance.getCurrentSession().get(CMSAccount.class, account.getId(), LockMode.UPGRADE);
                        GeneralDao.Instance.getCurrentSession().refresh(account);
                        ////////////////////////////////////////////////////////////////////////////////////

                        dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                        params = new HashMap<String, Object>();
                        params.put("relation", card.getCardNumberExpiryRelation());
                        params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                        CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                        if (cardrelation == null) {
                            logger.error("Card Relation not found for relation [" + card.getCardNumberExpiryRelation() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_RECORD); //Invalid Card Record ; Raza update THIS
                            return wsmodel;
                        }

                        if (Long.parseLong(wsmodel.getAmounttransaction()) <= 0) {
                            logger.error("Invalid Amount for " + origTransaction.getServicename() + ", rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.LOW_BALANCE); //04 - Low Balance ; refer to Doc
                            return wsmodel;
                        }

                        logger.info("Going to Reverse " + origTransaction.getServicename() + " in Wallet...");

                        //m.rehman: 30-09-2020, VP-NAP-202009241 - Original and Reversed transaction in transaction listing
                        //setting original api in reversal for listing purpose
                        wsmodel.setOriginalapi(origTransaction.getServicename());
                        //////////////////////////////////////////////////////////////////////////////////////////////////

                        wsmodel.setNayapaycharges(origTransaction.getNayapaycharges());
                        wsmodel.setNayapaytaxamount(origTransaction.getNayapaytaxamount());
                        wsmodel.setBankcharges(origTransaction.getBankcharges());
                        wsmodel.setBanktaxamount(origTransaction.getBanktaxamount());
                        wsmodel.setSrcchargeamount(origTransaction.getSrcchargeamount());
                        wsmodel.setAmttranfee(origTransaction.getAmttranfee());

                        //Arsalan Akhter, Date: 29-June-2021, Added for listing purpose
                        wsmodel.setOrigretrefno(origTransaction.getRrn());
                        wsmodel.setOrigstan(origTransaction.getStan());
                        wsmodel.setOrigtransdatetime(origTransaction.getTransdatetime());
                        //===============================================================

                        //m.rehman: Euronet Integration
                        boolean fmFlag = false;
                        String channelid = wsmodel.getChannelid();
                        if (Util.hasText(channelid) && channelid.equals(ChannelCodes.ONELINK)) {
                            fmFlag = FinanceManager.CardBasedReversal(wsmodel, account);

                        } else if (Util.hasText(channelid) && channelid.equals(ChannelCodes.EURONET)) {
                            wsmodel.setCbillamount(origTransaction.getCbillamount());
                            wsmodel.setWithholdingtaxamount(origTransaction.getWithholdingtaxamount());
                            wsmodel.setBranchcode(origTransaction.getBranchcode());
                            if (wsmodel.getServicename().equals("PreAuthorizationReversal")) {
                                if (Util.hasText(wsmodel.getBranchcode()) && wsmodel.getBranchcode().equals("PSI")) {
                                    fmFlag = FinanceManager.InternationalPreAuthorizationReversalFromEuronet(wsmodel, account);
                                } else {
                                    fmFlag = FinanceManager.LocalPreAuthorizationReversalFromEuronet(wsmodel, account);
                                }
                            } else {
                                if (Util.hasText(wsmodel.getBranchcode())
                                        && (wsmodel.getBranchcode().equals("PSI") || wsmodel.getBranchcode().equals("ESI"))
                                        || wsmodel.getBranchcode().equals("ATM")) {
                                    fmFlag = FinanceManager.InternationalCardBasedReversalFromEuronet(wsmodel, account);
                                } else {
                                    fmFlag = FinanceManager.LocalCardBasedReversalFromEuronet(wsmodel, account);
                                }
                            }
                        }

                        if (fmFlag) {
                            logger.info("Reversal from Wallet Done successfully!");
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            //process wallet limit
                            logger.info("Reversing Limit ...");
                            //m.rehman: 22-04-2021, Euronet Integration - need to check both card and account limit
                            //if (!WalletCMSFunctions.ProcessDebitWalletLimit(origTransaction, account, null, Boolean.FALSE))
                            String serviceName = origTransaction.getServicename();
                            if (origTransaction.getServicename().equals("PreAuthorization")) {
                                origTransaction.setServicename("Purchase");
                            }
                            if (!WalletCMSFunctions.ProcessDebitWalletLimit(origTransaction, account, card, Boolean.FALSE)) {
                                logger.error("Limit reversing failed, rejecting...");
                                wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED);
                                return wsmodel;
                            }
                            origTransaction.setServicename(serviceName);

                            logger.info("Setting Reversal Response Code to Original transaction ...");
                            origTransaction.setRespcode(ISOResponseCodes.ACQUIRER_REVERSAL);    //36 - Acquirer Reversal
                            GeneralDao.Instance.saveOrUpdate(origTransaction);
                            logger.info("Reversal from Wallet Done successfully!");
                            if (account.getCategory() != null && account.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                                wsmodel.setMerchantid(account.getUserId());
                            } else {
                                wsmodel.setUserid(account.getUserId());
                            }
                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                            wsmodel.setIncludeinstatement(1);
                            ////////////////////////////////////////////////////////////////////////////////////////////////////

                            //m.rehman: 10-11-2021, Nayapay Optimization
                            //find original transaction first
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c " +
                                    "where " +
                                    "c.stan= :ORIG_STAN " +
                                    "and c.rrn= :ORIG_RRN " +
                                    "and c.cardnumber= :CARD_NO " +
                                    "and c.terminalid= :TERMINAL_ID " +
                                    "and c.merchantid= :MERCHANT_ID " +
                                    "and c.servicename != 'STIP' ";
                            params = new HashMap<String, Object>();
                            params.put("ORIG_STAN", origTransaction.getStan());
                            params.put("ORIG_RRN", origTransaction.getRrn());
                            params.put("CARD_NO", wsmodel.getCardnumber());
                            params.put("TERMINAL_ID", wsmodel.getTerminalid());
                            params.put("MERCHANT_ID", wsmodel.getMerchantid());

                            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                            //WalletCMSWsListingEntity origTransaction = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, params);
                            WalletCMSWsListingEntity origTxnListing = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);
                            if (origTxnListing != null) {
                                logger.info("Original transaction found, updating status ...");
                                origTxnListing.setRespcode(ISOResponseCodes.ACQUIRER_REVERSAL);
                                GeneralDao.Instance.saveOrUpdate(origTxnListing);
                            } else {
                                logger.error("Original transaction listing not found ...");
                            }

                            return wsmodel;

                        } else {

                            logger.info("Unable to Reverse in Wallet... **********Manual Process Required!**********");
                            //m.rehman: 22-04-2021, Euronet Integration - need to check both card and account limit
                            //if (!WalletCMSFunctions.ProcessDebitWalletLimit(origTransaction, account, null, Boolean.TRUE))
                            String serviceName = origTransaction.getServicename();
                            if (origTransaction.getServicename().equals("PreAuthorization")) {
                                origTransaction.setServicename("Purchase");
                            }
                            if (!WalletCMSFunctions.ProcessDebitWalletLimit(origTransaction, account, card, Boolean.TRUE)) {
                                logger.error("Limit reversing failed, rejecting...");
                                wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED);
                                return wsmodel;
                            }
                            origTransaction.setServicename(serviceName);
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_IMD);
                            return wsmodel;
                        }
                    }
                }
            } else {
                logger.error("No Identifier Found for NayaPay customer");
                wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(WebServiceUtil.getStrException(e));//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing STIP..!");
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //Raza Refer to Document '12'
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }

    //m.rehman: Euronet integration
    public static WalletCMSWsEntity ExecuteGetUserIDFromPAN(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetUserID Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO order by c.id desc ";
            params = new HashMap<String, Object>();
            params.put("CARDNO", wsmodel.getCardnumber());
            CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);

            if (card != null) {
                logger.info("Card no found, setting User id ...");
                for (CMSAccount account : card.getList_CustAccounts()) {
                    wsmodel.setUserid(account.getUserId());
                    break;
                }
                wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                return wsmodel;
            } else {
                logger.error("Card not found with Mobile No [" + wsmodel.getMobilenumber() + "], rejecting ...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND);
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);
            logger.error("Exception caught while Executing GetUserID..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    //m.rehman: VP-NAP-202008211 / VC-NAP-202008211 - 17-09-2020 - Creation of Dispute transactions settlement feature (Phase I)
    @Transactional
    public static WalletCMSWsEntity ExecuteDisputeRefundTransaction(WalletCMSWsEntity wsmodel) {
        logger.info("Executing DisputeRefundFromPortal Request...");
        try {
            String dbQuery, origServiceName;
            Map<String, Object> params;

            //checking refund already exist for original txn
            dbQuery = "from " + WalletCMSWsEntity.class.getName() + " w where " +
                    " w.servicename = :SERVICE_NAME " +
                    " and w.respcode = '00' ";

            params = new HashMap<>();
            params.put("SERVICE_NAME", wsmodel.getServicename());

            if (Util.hasText(wsmodel.getOrigdataelement())) {
                dbQuery += " and w.origdataelement = :ORIG_REF_NO ";
                params.put("ORIG_REF_NO", wsmodel.getOrigdataelement());
            }

            if (Util.hasText(wsmodel.getOrigstan())) {
                dbQuery += " and w.origstan = :ORIG_STAN ";
                params.put("ORIG_STAN", wsmodel.getOrigstan());
            }

            if (Util.hasText(wsmodel.getOrigtransdatetime())) {
                dbQuery += " and w.origtransdatetime = :ORIG_TRAN_DATE_TIME ";
                params.put("ORIG_TRAN_DATE_TIME", wsmodel.getOrigtransdatetime());
            }

            if (Util.hasText(wsmodel.getOrigretrefno())) {
                dbQuery += " and w.origretrefno = :ORIG_RET_REF_NO ";
                params.put("ORIG_RET_REF_NO", wsmodel.getOrigretrefno());
            }


            WalletCMSWsEntity refundTxn = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params);
            if (refundTxn != null) {
                logger.error("Refund transaction already exist, rejecting ... ");
                wsmodel.setRespcode(ISOResponseCodes.DUPLICATE_TRANSACTION);
                return wsmodel;
            }

            //fetching transaction
            dbQuery = "from " + WalletCMSWsEntity.class.getName() + " w where servicename = :ORIG_API ";
            params = new HashMap<String, Object>();
            params.put("ORIG_API", wsmodel.getOriginalapi());

            if (Util.hasText(wsmodel.getOrigdataelement())) {
                dbQuery += " and w.tranrefnumber = :ORIG_REF_NO ";
                params.put("ORIG_REF_NO", wsmodel.getOrigdataelement());
            }

            if (Util.hasText(wsmodel.getOrigstan())) {
                dbQuery += " and w.stan = :ORIG_STAN ";
                params.put("ORIG_STAN", wsmodel.getOrigstan());
            }

            if (Util.hasText(wsmodel.getOrigtransdatetime())) {
                dbQuery += " and w.transdatetime = :ORIG_TRAN_DATE_TIME ";
                params.put("ORIG_TRAN_DATE_TIME", wsmodel.getOrigtransdatetime());
            }

            if (Util.hasText(wsmodel.getOrigretrefno())) {
                dbQuery += " and w.rrn = :ORIG_RET_REF_NO ";
                params.put("ORIG_RET_REF_NO", wsmodel.getOrigretrefno());
            }

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //WalletCMSWsEntity origTxn = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params);
            WalletCMSWsEntity origTxn = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params, "w", LockMode.UPGRADE);

            if (origTxn == null) {
                logger.error("Original Transaction not found, rejecting ...");
                wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_TRANSACTION_NOT_FOUND);

            } else if (Util.hasText(origTxn.getRespcode()) && origTxn.getRespcode().equals(ISOResponseCodes.ACQUIRER_REVERSAL)) {
                logger.error("Original Transaction found but transaction is reversed, rejecting ...");
                wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_ALREADY_REVERSED);

            } else if (Util.hasText(origTxn.getRespcode()) && !origTxn.getRespcode().equals(ISOResponseCodes.APPROVED)) {
                logger.error("Original Transaction found with negative response code, rejecting ...");
                wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_ALREADY_REJECTED);

            } else {
                logger.info("Original Transaction found with approved response, proceeding ...");

                //taking backup of original service name
                origServiceName = origTxn.getServicename();

                //Arsalan Akhter, Date: 03-Aug-2021, Tikcet: VP-NAP-202103292 / VC-NAP-202103293
                Long amountTran = ((Util.hasText(wsmodel.getCbillamount())) ? Long.parseLong(wsmodel.getCbillamount())
                        : ((Util.hasText(wsmodel.getAmounttransaction())) ? Long.parseLong(wsmodel.getAmounttransaction()) : 0L));
                //checking amount
                if (Long.parseLong(Util.hasText(wsmodel.getAmounttransaction()) ? wsmodel.getAmounttransaction() : "0") > amountTran) {
                    //===============================================================================
                    logger.error("Refund Amount [" + wsmodel.getAmounttransaction() + "] is greater than Original Amount [" + origTxn.getAmounttransaction() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.BAD_AMOUNT);

                } else {
                    //checking consumer accounts
                    //Added by mehtab 24-12-2020 # VP-NAP-202012241 / VC-NAP-202012241
                    dbQuery = "from " + CMSAccount.class.getName() + " a where a.userId = :USER_ID and a.category = :CAT";
                    params = new HashMap<>();
                    params.put("USER_ID", origTxn.getUserid());
                    params.put("CAT", AccType.CAT_WALLET_VALUE);

                    //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                    //CMSAccount userWallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
                    CMSAccount userWallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "a", LockMode.UPGRADE);
                    if (userWallet == null) {
                        logger.error("Wallet not found against user id [" + origTxn.getUserid() + "], rejecting ...");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT);

                    } else if (userWallet.getStatus().equals("04")     //Fraud Block
                            || userWallet.getStatus().equals("07")     //KYC Block
                            || userWallet.getStatus().equals("09")     //AML Block
                            || userWallet.getStatus().equals("90")     //Admin Block
                            || userWallet.getCustomer().getStatus().equals("04")     //Fraud Block
                            || userWallet.getCustomer().getStatus().equals("07")     //KYC Block
                            || userWallet.getCustomer().getStatus().equals("09")     //AML Block
                            || userWallet.getCustomer().getStatus().equals("90"))     //Admin Block
                    {
                        logger.error("Destination Wallet is blocked with status [" + userWallet.getStatus() + "], rejecting ...");
                        wsmodel.setRespcode(ISOResponseCodes.ACCOUNT_INACTIVE);

                    } else {
                        logger.info("Wallet is in valid state, proceeding ...");

                        //calculating amount
                        logger.info("Calculating total amount ...");
                        Long totalAmount = 0L;
                        String amountTransaction, srcChargeAmount, nayapayTaxAmount, tranRefNumber, transDateTime,
                                serviceName, originalAPI;
                        amountTransaction = origTxn.getAmounttransaction();
                        srcChargeAmount = origTxn.getSrcchargeamount();
                        nayapayTaxAmount = origTxn.getNayapaytaxamount();
                        tranRefNumber = origTxn.getTranrefnumber();
                        transDateTime = origTxn.getTransdatetime();
                        serviceName = origTxn.getServicename();
                        originalAPI = origTxn.getOriginalapi();
                        if (Util.hasText(wsmodel.getReserved()) && wsmodel.getReserved().equals("full")) {
                            totalAmount = Long.parseLong(Util.hasText(origTxn.getAmounttransaction()) ? origTxn.getAmounttransaction() : "0")
                                    + Long.parseLong(Util.hasText(origTxn.getSrcchargeamount()) ? origTxn.getSrcchargeamount() : "0");

                            //FetchTransactionCharge(origTxn, userWallet.getProduct());

                            //m.rehman: 11-11-2020, Deployment 10-11-2020, getting original txn from merchant transaction log
                            //values are missing
                            wsmodel.setSrcchargeamount(origTxn.getSrcchargeamount());
                            wsmodel.setNayapaytaxamount(origTxn.getNayapaytaxamount());

                        } else {
                            totalAmount = Long.parseLong(Util.hasText(wsmodel.getAmounttransaction()) ? wsmodel.getAmounttransaction() : "0")
                                    + Long.parseLong(Util.hasText(wsmodel.getNayapaycharges()) ? wsmodel.getNayapaycharges() : "0")
                                    + Long.parseLong(Util.hasText(wsmodel.getNayapaytaxamount()) ? wsmodel.getNayapaytaxamount() : "0");
                            origTxn.setAmounttransaction(wsmodel.getAmounttransaction());
                            origTxn.setSrcchargeamount(wsmodel.getNayapaycharges());
                            origTxn.setNayapaytaxamount(wsmodel.getNayapaytaxamount());

                            //m.rehman: 11-11-2020, Deployment 10-11-2020, getting original txn from merchant transaction log
                            //values are missing
                            wsmodel.setSrcchargeamount(wsmodel.getNayapaycharges());
                        }
                        logger.info("Total Amount for refund is [" + totalAmount.toString() + "]");

                        //setting current transaction parameters to original transaction
                        origTxn.setTranrefnumber(wsmodel.getTranrefnumber());
                        origTxn.setTransdatetime(wsmodel.getTransdatetime());
                        origTxn.setServicename(wsmodel.getServicename());
                        origTxn.setOriginalapi(origServiceName);

                        //checking cases for refund ...
                        if (origTxn.getOriginalapi().equals("WalletTransaction")) {
                            logger.info("Refunding WalletTransaction ...");

                            //checking destiantion consumer accounts
                            dbQuery = "from " + CMSAccount.class.getName() + " a where a.userId = :USER_ID";
                            params = new HashMap<>();
                            params.put("USER_ID", origTxn.getDestuserid());

                            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                            //CMSAccount destUserWallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
                            CMSAccount destUserWallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "a", LockMode.UPGRADE);
                            if (destUserWallet == null) {
                                logger.error("Wallet not found against user id [" + origTxn.getDestuserid() + "], rejecting ...");
                                wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT);

                            } else if (destUserWallet.getStatus().equals("04")     //Fraud Block
                                    || destUserWallet.getStatus().equals("07")     //KYC Block
                                    || destUserWallet.getStatus().equals("09")     //AML Block
                                    || destUserWallet.getStatus().equals("90")     //Admin Block
                                    || destUserWallet.getCustomer().getStatus().equals("04")     //Fraud Block
                                    || destUserWallet.getCustomer().getStatus().equals("07")     //KYC Block
                                    || destUserWallet.getCustomer().getStatus().equals("09")     //AML Block
                                    || destUserWallet.getCustomer().getStatus().equals("90"))     //Admin Block
                            {
                                logger.error("Source Wallet is blocked with status [" + destUserWallet.getStatus() + "], rejecting ...");
                                wsmodel.setRespcode(ISOResponseCodes.ACCOUNT_INACTIVE);

                            } else {
                                logger.info("Source Wallet found, proceeding ...");

                                //m.rehman: 05-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                                //updating logic below
                                /*
                                //checking balance
                                if (totalAmount > Long.parseLong(destUserWallet.getAvailableBalance())) {
                                    logger.info("Source Wallet with user id [" + destUserWallet.getUserId() + "] has Low Balance, rejecting ...");
                                    wsmodel.setRespcode(ISOResponseCodes.LOW_BALANCE);

                                } else {

                                    if (FinanceManager.RefundWalletTransaction(origTxn, destUserWallet, userWallet)) {
                                        logger.info("Refund Wallet Transaction completed, setting approved response and returning ...");
                                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                    } else {
                                        logger.error("Refund Wallet Transaction failed to complete, rejecting ...");
                                        //s.mehtab: 15-10-2020 - VP-NAP-202008211 / VC-NAP-202008211- Creation of Dispute transactions settlement feature
                                        wsmodel.setRespcode(origTxn.getRespcode());
                                    }
                                }
                                */
                                if (Util.hasText(wsmodel.getReserved()) && wsmodel.getReserved().equals("partial")) {
                                    if (FinanceManager.PartialRefundWalletTransaction(origTxn, destUserWallet, userWallet, wsmodel)) {
                                        logger.info("Partial Refund Wallet Transaction completed, setting approved response and returning ...");
                                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                    } else {
                                        logger.error("Partial Refund Wallet Transaction failed to complete, rejecting ...");
                                        //s.mehtab: 15-10-2020 - VP-NAP-202008211 / VC-NAP-202008211- Creation of Dispute transactions settlement feature
                                        wsmodel.setRespcode(origTxn.getRespcode());
                                    }
                                } else {
                                    if (FinanceManager.CompleteRefundWalletTransaction(origTxn, destUserWallet, userWallet, wsmodel)) {
                                        logger.info("Complete Refund Wallet Transaction completed, setting approved response and returning ...");
                                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                    } else {
                                        logger.error("Complete Refund Wallet Transaction failed to complete, rejecting ...");
                                        //s.mehtab: 15-10-2020 - VP-NAP-202008211 / VC-NAP-202008211- Creation of Dispute transactions settlement feature
                                        wsmodel.setRespcode(origTxn.getRespcode());
                                    }
                                }
                            }
                        } else if (origTxn.getOriginalapi().equals("MerchantBillerTransaction")
                                || origTxn.getOriginalapi().equals("MerchantRetailTransaction")
                                || origTxn.getOriginalapi().equals("MerchantBillerCoreTransaction")
                                || origTxn.getOriginalapi().equals("MerchantRetailCoreTransaction")) {
                            logger.info("Refunding " + origTxn.getServicename());

                            //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                            //applying logic for settle/unsettle transaction
                            if (Util.hasText(wsmodel.getSettledflag()) && wsmodel.getSettledflag().equals("false")) {
                                if (FinanceManager.RefundMerchantTransaction(origTxn, userWallet, wsmodel)) {
                                    logger.info("Refund for Unsettled " + origServiceName + " completed, setting approved response and returning ...");
                                    //s.mehtab: 13-11-2020 - VP-NAP-202008211 / VC-NAP-202008211- Creation of Dispute transactions settlement feature
                                    wsmodel.setParentid(origTxn.getParentid());
                                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                    origTxn.setDisputeflag("");

                                } else {
                                    logger.error("Refund " + origServiceName + " failed to complete, rejecting ...");
                                    //s.mehtab: 15-10-2020 - VP-NAP-202008211 / VC-NAP-202008211- Creation of Dispute transactions settlement feature
                                    wsmodel.setRespcode(origTxn.getRespcode());
                                }
                            } else {
                                origTxn.setMerchantfavorflag(wsmodel.getMerchantfavorflag());
                                if (FinanceManager.RefundSettledMerchantTransaction(origTxn, userWallet, wsmodel)) {
                                    logger.info("Refund for Settled " + origServiceName + " completed, setting approved response and returning ...");
                                    //s.mehtab: 13-11-2020 - VP-NAP-202008211 / VC-NAP-202008211- Creation of Dispute transactions settlement feature
                                    wsmodel.setParentid(origTxn.getParentid());
                                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                    origTxn.setDisputeflag("");

                                } else {
                                    logger.error("Refund " + origServiceName + " failed to complete, rejecting ...");
                                    //s.mehtab: 15-10-2020 - VP-NAP-202008211 / VC-NAP-202008211- Creation of Dispute transactions settlement feature
                                    wsmodel.setRespcode(origTxn.getRespcode());
                                }
                            }
                        } else if (origTxn.getOriginalapi().equals("OneLinkBillPayment")
                                || origTxn.getOriginalapi().equals("OnelinkBillerCoreTransaction")) {
                            logger.info("Refunding " + origTxn.getServicename());

                            if (FinanceManager.RefundOnelinkBillerTransaction(origTxn, userWallet, wsmodel)) {
                                logger.info("Refund " + origServiceName + " completed, setting approved response and returning ...");
                                wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            } else {
                                logger.error("Refund " + origServiceName + " failed to complete, rejecting ...");
                                //s.mehtab: 15-10-2020 - VP-NAP-202008211 / VC-NAP-202008211- Creation of Dispute transactions settlement feature
                                wsmodel.setRespcode(origTxn.getRespcode());
                            }
                        } else if (origTxn.getOriginalapi().equals("CNICBasedCashWithdrawal")) {
                            logger.info("Refunding " + origTxn.getServicename());

                            if (FinanceManager.RefundCNICBasedCashWithdrawal(origTxn, userWallet, wsmodel)) {
                                logger.info("Refund " + origServiceName + " completed, setting approved response and returning ...");
                                wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            } else {
                                logger.error("Refund " + origServiceName + " failed to complete, rejecting ...");
                                //s.mehtab: 15-10-2020 - VP-NAP-202008211 / VC-NAP-202008211- Creation of Dispute transactions settlement feature
                                wsmodel.setRespcode(origTxn.getRespcode());
                            }
                        } else if (origTxn.getOriginalapi().equals("Purchase")
                                || origTxn.getOriginalapi().equals("CashWithDrawal")
                                || origTxn.getOriginalapi().equals("ECommerce")
                                //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
                                //adding more card based transactions
                                || origTxn.getOriginalapi().equals("MOTO")
                                || origTxn.getOriginalapi().equals("PreAuthorization")
                            ///////////////////////////////////////////////////////////////////////////////////////////////////

                        ) {
                            logger.info("Refunding " + origTxn.getServicename());

                            //Arsalan Akhter, Date: 03-Aug-2021, Tikcet: VP-NAP-202103292 / VC-NAP-202103293(Refund Module Part 2)
                            String tempAmount = origTxn.getAmounttransaction();
                            String tempSrcCharge = origTxn.getSrcchargeamount();
                            String tempTax = origTxn.getNayapaytaxamount();
                            String tempWithHoldTax = origTxn.getWithholdingtaxamount();
                            String tempReserved = (Util.hasText(origTxn.getReserved()) ? origTxn.getReserved() : "");

                            if (Util.hasText(wsmodel.getReserved()) && wsmodel.getReserved().equals("partial")) {
                                origTxn.setAmounttransaction(Util.hasText(wsmodel.getAmounttransaction()) ? wsmodel.getAmounttransaction() : "0");

                                // Asim Shahzad, Date : 25th Aug 2021, Tracking ID : VP-NAP-202108161 / VC-NAP-202108161

                                //origTxn.setSrcchargeamount(Util.hasText(wsmodel.getSrcchargeamount()) ? wsmodel.getSrcchargeamount() : "0");

                                Long SrcChargeAmount = (Util.hasText(wsmodel.getNayapaycharges()) ? Long.parseLong(wsmodel.getNayapaycharges()) : 0L);
                                Long tax = (Util.hasText(wsmodel.getNayapaytaxamount()) ? Long.parseLong(wsmodel.getNayapaytaxamount()) : 0L);

                                SrcChargeAmount = SrcChargeAmount + tax;
                                origTxn.setSrcchargeamount(StringUtils.leftPad(SrcChargeAmount.toString(), 12, "0"));

                                // ====================================================================================

                                origTxn.setNayapaytaxamount(Util.hasText(wsmodel.getNayapaytaxamount()) ? wsmodel.getNayapaytaxamount() : "0");
                                origTxn.setWithholdingtaxamount(Util.hasText(wsmodel.getWithholdingtaxamount()) ? wsmodel.getWithholdingtaxamount() : "0");
                                origTxn.setReserved(Util.hasText(wsmodel.getReserved()) ? wsmodel.getReserved() : "");
                            }
                            //==================================================================================================

                            // Asim Shahzad, Date : 3rd March 2021, Tracking ID : VC-NAP-202103033
                            logger.info("Channel ID for Refund Transaction : " + origTxn.getChannelid());
                            String channelid = origTxn.getChannelid();

                            if (Util.hasText(channelid) && channelid.equals(ChannelCodes.ONELINK)) {
                                if (FinanceManager.RefundCardBasedTransaction(origTxn, userWallet, wsmodel)) {
                                    logger.info("Refund " + origServiceName + " completed, setting approved response and returning ...");
                                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                } else {
                                    logger.error("Refund " + origServiceName + " failed to complete, rejecting ...");
                                    //s.mehtab: 15-10-2020 - VP-NAP-202008211 / VC-NAP-202008211- Creation of Dispute transactions settlement feature
                                    wsmodel.setRespcode(origTxn.getRespcode());
                                }
                            }
                            if (Util.hasText(channelid) && channelid.equals(ChannelCodes.EURONET)) {
                                if (Util.hasText(origTxn.getBranchcode()) && origTxn.getBranchcode().equals("PSI")) {
                                    wsmodel.setBranchcode(origTxn.getBranchcode());
                                    if (FinanceManager.RefundInternationalPurchaseFromEuronet(origTxn, userWallet, wsmodel)) {
                                        logger.info("Refund for VISA International " + origServiceName + " completed, setting approved response and returning ...");
                                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                    } else {
                                        logger.error("Refund for VISA International " + origServiceName + " failed to complete, rejecting ...");
                                        wsmodel.setRespcode(origTxn.getRespcode());
                                    }
                                }
                                if (Util.hasText(origTxn.getBranchcode()) && origTxn.getBranchcode().equals("PSL")) {
                                    wsmodel.setBranchcode(origTxn.getBranchcode());
                                    if (FinanceManager.RefundLocalPurchaseFromEuronet(origTxn, userWallet, wsmodel)) {
                                        logger.info("Refund for VISA Local " + origServiceName + " completed, setting approved response and returning ...");
                                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                    } else {
                                        logger.error("Refund for VISA Local " + origServiceName + " failed to complete, rejecting ...");
                                        wsmodel.setRespcode(origTxn.getRespcode());
                                    }
                                }
                                if (Util.hasText(origTxn.getBranchcode()) && origTxn.getBranchcode().equals("ATM")) {
                                    wsmodel.setBranchcode(origTxn.getBranchcode());
                                    if (FinanceManager.RefundInternationalCashWithDrawalFromEuronet(origTxn, userWallet, wsmodel)) {
                                        logger.info("Refund for VISA International " + origServiceName + " completed, setting approved response and returning ...");
                                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                    } else {
                                        logger.error("Refund for VISA International " + origServiceName + " failed to complete, rejecting ...");
                                        wsmodel.setRespcode(origTxn.getRespcode());
                                    }
                                }
                                if (Util.hasText(origTxn.getBranchcode()) && origTxn.getBranchcode().equals("ESI")) {
                                    wsmodel.setBranchcode(origTxn.getBranchcode());
                                    if (FinanceManager.RefundInternationalPurchaseFromEuronet(origTxn, userWallet, wsmodel)) {
                                        logger.info("Refund for VISA International " + origServiceName + " completed, setting approved response and returning ...");
                                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                    } else {
                                        logger.error("Refund for VISA International " + origServiceName + " failed to complete, rejecting ...");
                                        wsmodel.setRespcode(origTxn.getRespcode());
                                    }
                                }
                                if (Util.hasText(origTxn.getBranchcode()) && origTxn.getBranchcode().equals("ESL")) {
                                    wsmodel.setBranchcode(origTxn.getBranchcode());
                                    if (FinanceManager.RefundLocalPurchaseFromEuronet(origTxn, userWallet, wsmodel)) {
                                        logger.info("Refund for VISA Local " + origServiceName + " completed, setting approved response and returning ...");
                                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                                    } else {
                                        logger.error("Refund for VISA Local " + origServiceName + " failed to complete, rejecting ...");
                                        wsmodel.setRespcode(origTxn.getRespcode());
                                    }
                                }
                            }
                            //Arsalan Akhter, Date: 03-Aug-2021, Tikcet: VP-NAP-202103292 / VC-NAP-202103293(Refund Module Part 2)
                            origTxn.setAmounttransaction(tempAmount);
                            origTxn.setSrcchargeamount(tempSrcCharge);
                            origTxn.setNayapaytaxamount(tempTax);
                            origTxn.setWithholdingtaxamount(tempWithHoldTax);
                            origTxn.setReserved(Util.hasText(tempReserved) ? tempReserved : "");
                            // =========================================================================================
                            // ===================================================================
                        } else if (origTxn.getOriginalapi().equals("IBFT")) {

                            if (FinanceManager.RefundIBFT(origTxn, userWallet, wsmodel)) {
                                logger.info("Refund " + origServiceName + " completed, setting approved response and returning ...");
                                wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            } else {
                                logger.error("Refund " + origServiceName + " failed to complete, rejecting ...");
                                //s.mehtab: 15-10-2020 - VP-NAP-202008211 / VC-NAP-202008211- Creation of Dispute transactions settlement feature
                                wsmodel.setRespcode(origTxn.getRespcode());
                            }
                        } else if (origTxn.getOriginalapi().equals("DebitCardRequest")) {

                            if (FinanceManager.RefundDebitCardRequest(origTxn, userWallet, wsmodel)) {
                                logger.info("Refund " + origServiceName + " completed, setting approved response and returning ...");
                                wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                            } else {
                                logger.error("Refund " + origServiceName + " failed to complete, rejecting ...");
                                //s.mehtab: 15-10-2020 - VP-NAP-202008211 / VC-NAP-202008211- Creation of Dispute transactions settlement feature
                                wsmodel.setRespcode(origTxn.getRespcode());
                            }
                        } else {
                            logger.error("No Refund flow available for original transaction [" + origTxn.getOriginalapi() + "], rejecting ...");
                            wsmodel.setRespcode(ISOResponseCodes.BAD_TRANSACTION_TYPE);
                        }

                        //saving original values
                        origTxn.setAmounttransaction(amountTransaction);
                        origTxn.setSrcchargeamount(srcChargeAmount);
                        origTxn.setNayapaytaxamount(nayapayTaxAmount);
                        origTxn.setTranrefnumber(tranRefNumber);
                        origTxn.setTransdatetime(transDateTime);
                        origTxn.setServicename(serviceName);
                        origTxn.setOriginalapi(originalAPI);
                    }
                }
            }

            if (wsmodel.getRespcode().equals(ISOResponseCodes.APPROVED)) {
                if (!Util.hasText(wsmodel.getSrcchargeamount())) {
                    wsmodel.setSrcchargeamount(origTxn.getSrcchargeamount());
                }
                if (!Util.hasText(wsmodel.getNayapaytaxamount())) {
                    wsmodel.setNayapaytaxamount(origTxn.getNayapaytaxamount());
                }
                //s.mehtab: 18/11/2020 - Deployment 10-11-2020
                wsmodel.setUserid(origTxn.getDestuserid());
                wsmodel.setMerchantid(origTxn.getMerchantid());
                wsmodel.setCategoryid(origTxn.getCategoryid());
                wsmodel.setBillerid(origTxn.getBillerid());
                wsmodel.setMerchantamount(origTxn.getMerchantamount());
                wsmodel.setDestchargeamount(origTxn.getDestchargeamount());
                wsmodel.setMerchantname(origTxn.getMerchantname());
                wsmodel.setBillername(origTxn.getBillername());
                wsmodel.setDestusername(origTxn.getDestusername());
                //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                wsmodel.setCardlastdigits(origTxn.getCardlastdigits());
                //===============================================================================================================
                wsmodel.setCardnumber(origTxn.getCardnumber());
                //m.rehman: 11-11-2020, Deployment 10-11-2020, getting original txn from merchant transaction log
                //values are missing
                wsmodel.setDestuserid(origTxn.getUserid());

                // Asim Shahzad, Date : 25th March 2021, Tracking ID : VP-NAP-202103116
                wsmodel.setUsername(origTxn.getUsername());
                // ====================================================================

                //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                if (!Util.hasText(wsmodel.getTrancurrency())) {
                    wsmodel.setTrancurrency(origTxn.getTrancurrency());
                }

                if (!Util.hasText(wsmodel.getSettlementamount())) {
                    wsmodel.setSettlementamount(origTxn.getSettlementamount());
                }

                if (!Util.hasText(wsmodel.getSettlementrate())) {
                    wsmodel.setSettlementrate(origTxn.getSettlementrate());
                }

                if (!Util.hasText(wsmodel.getCbillamount())) {
                    wsmodel.setCbillamount(origTxn.getCbillamount());
                }

                if (!Util.hasText(wsmodel.getCbillcurrency())) {
                    wsmodel.setCbillcurrency(origTxn.getCbillcurrency());
                }

                if (!Util.hasText(wsmodel.getStan())) {
                    wsmodel.setStan(origTxn.getStan());
                }

                if (!Util.hasText(wsmodel.getRrn())) {
                    wsmodel.setRrn(origTxn.getRrn());
                }

                if (!Util.hasText(wsmodel.getTranauthid())) {
                    wsmodel.setTranauthid(origTxn.getTranauthid());
                }

                if (!Util.hasText(wsmodel.getWithholdingtaxamount())) {
                    wsmodel.setWithholdingtaxamount(origTxn.getWithholdingtaxamount());
                }

                wsmodel.setNayapayid(origTxn.getNayapayid());
                wsmodel.setDestnayapayid(origTxn.getDestnayapayid());
                wsmodel.setCurrency(origTxn.getCurrency());
                wsmodel.setBankcode(origTxn.getBankcode());
                wsmodel.setBranchname(origTxn.getBranchname());
                wsmodel.setPosentrymode(origTxn.getPosentrymode());
                wsmodel.setCardexpiry(origTxn.getCardexpiry());
                wsmodel.setTerminalid(origTxn.getTerminalid());
                wsmodel.setTermloc(origTxn.getTermloc());
                wsmodel.setAmttranfee(origTxn.getAmttranfee());
                wsmodel.setAcqbin(origTxn.getAcqbin());
                wsmodel.setAccountnumber(origTxn.getAccountnumber());
                wsmodel.setDestaccount(origTxn.getDestaccount());
                wsmodel.setCardscheme(origTxn.getCardscheme());
                wsmodel.setCardtype(origTxn.getCardtype());
                wsmodel.setBenebankcode(origTxn.getBenebankcode());
                wsmodel.setBenebankaccountno(origTxn.getBenebankaccountno());
                wsmodel.setCustomername(origTxn.getCustomername());
                wsmodel.setMapid(origTxn.getMapid());
                wsmodel.setNayapaycharges(origTxn.getNayapaycharges());
                wsmodel.setSlipnumber(origTxn.getSlipnumber());
                wsmodel.setIban(origTxn.getIban());
                wsmodel.setOrigdataelement(origTxn.getTransdatetime());
                wsmodel.setOrigstan(origTxn.getStan());
                wsmodel.setOrigretrefno(origTxn.getRrn());
                wsmodel.setBranchcode(origTxn.getBranchcode());
                wsmodel.setOrigChannelId(origTxn.getChannelid());       //need to check impact of this line
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////

                //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                wsmodel.setIncludeinstatement(1);
                ////////////////////////////////////////////////////////////////////////////////////////////////////

            }
            //Arsalan Akhter, Date: 09-Sept-2021, Ticket: VC-NAP-202108231(Complete transaction details missing in dispute refund transaction)
            wsmodel.setReserved3(origTxn.getAmounttransaction());
            //==================================================================================================================

            origTxn.setRespcode(ISOResponseCodes.APPROVED);
            GeneralDao.Instance.evict(origTxn);
            return wsmodel;
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing DisputeRefundFromPortal..!");
            //s.mehtab: 26-10-2020 - VP-NAP-202008211 / VC-NAP-202008211- Creation of Dispute transactions settlement feature
            logger.error(e);
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //Raza Refer to Document '12'
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            GeneralDao.Instance.endTransaction();
            GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
        }
    }

    // Asim Shahzad, Date : 13th Jan 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 (Release # 1)
    public static WalletCMSWsEntity ExecuteUpdateCardControls(WalletCMSWsEntity wsmodel) {
        logger.info("Executing ExecuteUpdateCardControls Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO order by c.id desc ";
            params = new HashMap<String, Object>();
            params.put("CARDNO", wsmodel.getCardnumber());
            CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);

            if (card != null) {
                if (WalletCMSFunctions.UpdateCardControls(wsmodel, card)) {
                    logger.info("Card Controls updated successfully!");
                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                } else {
                    logger.info("Unable to Update Card Controls for Card Number [ " + wsmodel.getCardnumber() + ", rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //90 Customer not found
                    return wsmodel;
                }
            } else {
                logger.error("Card not found for Card Number [" + wsmodel.getCardnumber() + "], rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //05 Card not found refer to Document
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);
            logger.error("Exception caught while Executing ExecuteUpdateCardControls..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //46- Unable to Process
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteSupportPortalUpdateCardControls(WalletCMSWsEntity wsmodel) {
        logger.info("Executing ExecuteSupportPortalUpdateCardControls Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            //if (userwallet != null && userwallet.getStatus().equals("00")) {
            if (userwallet != null) {
                logger.info("Wallet found, verifying data...");
                WebServiceUtil.dobdFormat.setLenient(false);
                logger.info("wsmodel DateOfBirth [" + wsmodel.getDateofbirth() + "] DB DateOfBirth [" + WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth()) + "]");
                logger.info("wsmodel Cnic [" + wsmodel.getCnic() + "] DB Cnic [" + userwallet.getCustomer().getCnic() + "]");
                if ((!wsmodel.getDateofbirth().equals(WebServiceUtil.dobdFormat.format(userwallet.getCustomer().getDateofBirth())))
                        || !wsmodel.getCnic().equals(userwallet.getCustomer().getCnic())) {
                    logger.error("Invalid Input Fields, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED); //02 for Invalid Account refer NayaPay Doc
                    return wsmodel;
                }

                dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO order by c.id desc ";
                params = new HashMap<String, Object>();
                params.put("CARDNO", wsmodel.getCardnumber());
                CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);

                if (card != null) {
                    if (WalletCMSFunctions.UpdateCardControls(wsmodel, card)) {
                        logger.info("Card Controls updated successfully!");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        logger.info("Unable to Update Card Controls for Card Number [ " + wsmodel.getCardnumber() + ", rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //90 Customer not found
                        return wsmodel;
                    }
                } else {
                    logger.error("Card not found for Card Number [" + wsmodel.getCardnumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //05 Card not found refer to Document
                    return wsmodel;
                }
            } else {
                logger.info("No Wallet Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }

        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing ExecuteSupportPortalUpdateCardControls..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }
    // =========================================================================================================================


    // Asim Shahzad, Date : 20th Jan 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 (Release # 2)

    public static WalletCMSWsEntity ExecuteGetUserVirtualCardCvvTwo(WalletCMSWsEntity wsmodel) {
        logger.info("Executing ExecuteGetUserVirtualCardCvvTwo Request...");

        try {
            String dbQuery;
            Map<String, Object> params;
            CardObject cardObject;
            List<CardObject> cardObjectList;

            // Asim Shahzad, Date : 18th Jan 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 (Release # 2)
            HardwareSecurityModule hsm = new HardwareSecurityModule();
            // ========================================================================================================

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);


            if (usernprel != null) {
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", usernprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                } else {
                    if (usernprel != null && usernprel.getAccount().getStatus().equals("00") && usernprel.getAccount().getCustomer().equals(usernprel.getAccount().getCustomer())) {

                        if (!WalletCMSFunctions.ValidatePIN(wsmodel, cardrelation)) {
                            logger.error("PIN validation failed, rejecting...");
                            return wsmodel;
                        }

                        logger.info("Wallet Pin verified through HSM...");
                        logger.info("Getting User Debit Card...");

                        //m.rehman: 23-02-2021, VP-NAP-202102191 / VC-NAP-202102191 - CVV2 for Physical cards
                        //changing below logic, fetch record for received card number only
                        /*
                        dbQuery = "from " + CMSCard.class.getName() + " c where c.customer= :custID and lower(c.product.productType)=:cardType ";
                        params = new HashMap<String, Object>();
                        params.put("custID", usernprel.getAccount().getCustomer());
                        params.put("cardType", wsmodel.getCardtype());
                        List<CMSCard> cardList = GeneralDao.Instance.find(dbQuery, params);
                        */
                        dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARD_NO ";
                        params = new HashMap<>();
                        params.put("CARD_NO", wsmodel.getCardnumber());
                        List<CMSCard> cardList = GeneralDao.Instance.find(dbQuery, params);

                        if (cardList != null && cardList.size() > 0) {
                            cardObjectList = new ArrayList<CardObject>();
                            for (CMSCard cmsCard : cardList) {

                                //m.rehman: 23-02-2021, VP-NAP-202102191 / VC-NAP-202102191 - CVV2 for Physical cards
                                //first valaidate card type of cardnumber received in request
                                if (((cmsCard.getProduct().getProductType().equals("CARD_LVL0") || cmsCard.getProduct().getProductType().equals("CARD_LVL1"))
                                        && !wsmodel.getCardtype().equals("paypak_physical"))
                                        ||
                                        (cmsCard.getProduct().getProductType().equals("VISA_DEBIT") && !wsmodel.getCardtype().equals("visa_physical"))
                                        ||
                                        (cmsCard.getProduct().getProductType().equals("VISA_VIRTUAL") && !wsmodel.getCardtype().equals("visa_virtual"))
                                ) {
                                    logger.error("Received card type [" + wsmodel.getCardtype() + "] do not match with Card type in system, rejecting ...");
                                    wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION);
                                    return wsmodel;
                                }
                                ///////////////////////////////////////////////////////////////////////////////////////////////

                                cardObject = new CardObject();
                                cardObject.setId(cmsCard.getId().toString());
                                cardObject.setCardnumber(cmsCard.getCardNumber());
                                cardObject.setCardexpiry((Util.hasText(cmsCard.getExpiryDate())) ? cmsCard.getExpiryDate().substring(2, 6) : "");
                                cardObject.setCreationdate((Util.hasText(cmsCard.getRequestDate())) ? cmsCard.getRequestDate().substring(0, 8) : "");
                                cardObject.setCardstatus(cmsCard.getCardStatus());
                                cardObject.setCardnumberlastdigits(cmsCard.getCardNoLastDigits());
                                cardObject.setActivationdate((Util.hasText(cmsCard.getActivationDate())) ? cmsCard.getActivationDate().substring(0, 8) : "");
                                cardObject.setNayapaylimits(new ArrayList<NayaPayLimit>());

                                //m.rehman: 30-08-2021, VC-NAP-202108021 - Limit Structure update
                                //updating query below
                                /*
                                dbQuery = "from " + CMSDebitRemainingLimit.class.getName() + " c where c.relation= :ACCTNUMBER and c.limitId.isActive='1' ";
                                params = new HashMap<String, Object>();
                                params.put("ACCTNUMBER", cardObject.getCardnumber());
                                List<CMSDebitRemainingLimit> debitRemainingLimits = GeneralDao.Instance.find(dbQuery, params);
                                if (debitRemainingLimits != null && debitRemainingLimits.size() > 0) {
                                    for (CMSDebitRemainingLimit debitRemainingLimit : debitRemainingLimits) {
                                        if (debitRemainingLimit.getLimitId().getTransactionType() != null
                                                && debitRemainingLimit.getLimitId().getTransactionType().getTxndesc().toUpperCase().contains("PURCHASE")) {
                                            NayaPayLimit nayaPayLimit = new NayaPayLimit();
                                            nayaPayLimit.setTransaction(debitRemainingLimit.getLimitId().getTransactionType().getTxndesc());

                                            // Asim, Logging to be removed
                                            logger.info("Current cycle date : [" + debitRemainingLimit.getCycleEndDate() + "]");
                                            logger.info("Checking for month : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4,6) + "]");
                                            logger.info("Checking for year : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2,4) + "]");
                                            logger.info("Checking for current date : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()) + "]");
                                            // =================================

                                            // Asim Shahzad, Date : 6th Oct 2020, Tracking ID : VC-NAP-202009231
                                            CMSLimitCycleType cmsLimitCycleType = new CMSLimitCycleType(Integer.parseInt(debitRemainingLimit.getLimitId().getCycleLengthType()));

                                            if(cmsLimitCycleType.equals(CMSLimitCycleType.DAILY)) {
                                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).equals(debitRemainingLimit.getCycleEndDate())) {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                                } else {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                                    logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                                }
                                            }

                                            if(cmsLimitCycleType.equals(CMSLimitCycleType.MONTHLY)) {
                                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6).equals(debitRemainingLimit.getCycleEndDate().substring(4, 6))) {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                                } else {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                                    logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                                }
                                            }

                                            if(cmsLimitCycleType.equals(CMSLimitCycleType.YEARLY)) {
                                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4).equals(debitRemainingLimit.getCycleEndDate().substring(2, 4))) {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                                } else {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                                    logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                                }
                                            }
                                            // ================================================================

                                            nayaPayLimit.setAmount(debitRemainingLimit.getTxnAmount());
                                            cardObject.getNayapaylimits().add(nayaPayLimit);
                                        }
                                    }
                                }
                                */


                                dbQuery = "from " + CMSDebitRemainingLimit.class.getName() + " c where (c.relation= :ACCTNUMBER or c.relation= :CARD_NO) and c.limitId.isActive= '1' ";
                                params = new HashMap<String, Object>();

                                params.put("CARD_NO", cardObject.getCardnumber());
                                params.put("ACCTNUMBER", usernprel.getAccount().getAccountNumber());

                                List<CMSDebitRemainingLimit> debitRemainingLimits = GeneralDao.Instance.find(dbQuery, params);
                                if (debitRemainingLimits != null && debitRemainingLimits.size() > 0) {
                                    for (CMSDebitRemainingLimit debitRemainingLimit : debitRemainingLimits) {

                                        NayaPayLimit nayaPayLimit = new NayaPayLimit();

                                        if (Util.hasText(debitRemainingLimit.getLimitId().getDescription())) {
                                            nayaPayLimit.setTransaction(debitRemainingLimit.getLimitId().getDescription());
                                        } else {
                                            nayaPayLimit.setTransaction(debitRemainingLimit.getLimitId().getTransactionType().getTxndesc());
                                        }

                                        logger.info("Current cycle date : [" + debitRemainingLimit.getCycleEndDate() + "]");
                                        logger.info("Checking for month : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6) + "]");
                                        logger.info("Checking for year : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4) + "]");
                                        logger.info("Checking for current date : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()) + "]");

                                        CMSLimitCycleType cmsLimitCycleType = new CMSLimitCycleType(Integer.parseInt(debitRemainingLimit.getLimitId().getCycleLengthType()));

                                        if (cmsLimitCycleType.equals(CMSLimitCycleType.DAILY)) {
                                            if (WebServiceUtil.limitcycleDateFormat.format(new Date()).equals(debitRemainingLimit.getCycleEndDate())) {
                                                nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                                nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                                logger.info("Executing Daily Limit flow...");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                Long amount = 0L;
                                                if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                        && debitRemainingLimit.getIndividualLimitId() != null) {
                                                    amount = Long.parseLong(debitRemainingLimit.getIndividualLimitId().getAmount())
                                                            - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                                } else {
                                                    amount = Long.parseLong(debitRemainingLimit.getLimitId().getAmount())
                                                            - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                                }
                                                nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                                logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                            } else {
                                                if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                        && debitRemainingLimit.getIndividualLimitId() != null) {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                } else {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                                }

                                                nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                                logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                                logger.info("Executing Daily Limit flow...");
                                                logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                                logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                            }
                                        }

                                        if (cmsLimitCycleType.equals(CMSLimitCycleType.MONTHLY)) {
                                            if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6).equals(debitRemainingLimit.getCycleEndDate().substring(4, 6))) {
                                                nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                                nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                                logger.info("Executing Daily Limit flow...");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                Long amount = 0L;
                                                if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                        && debitRemainingLimit.getIndividualLimitId() != null) {
                                                    amount = Long.parseLong(debitRemainingLimit.getIndividualLimitId().getAmount())
                                                            - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                                } else {
                                                    amount = Long.parseLong(debitRemainingLimit.getLimitId().getAmount())
                                                            - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                                }
                                                nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                                logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                            } else {
                                                if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                        && debitRemainingLimit.getIndividualLimitId() != null) {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                } else {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                                }

                                                logger.info("Executing Daily Limit flow...");
                                                logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                                logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                                logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                            }
                                        }

                                        if (cmsLimitCycleType.equals(CMSLimitCycleType.YEARLY)) {
                                            if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4).equals(debitRemainingLimit.getCycleEndDate().substring(2, 4))) {
                                                nayaPayLimit.setAvaillimit(debitRemainingLimit.getRemainingAmount());
                                                nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getRemainingFrequency());

                                                logger.info("Executing Daily Limit flow...");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                Long amount = 0L;
                                                if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                        && debitRemainingLimit.getIndividualLimitId() != null) {
                                                    amount = Long.parseLong(debitRemainingLimit.getIndividualLimitId().getAmount())
                                                            - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                                } else {
                                                    amount = Long.parseLong(debitRemainingLimit.getLimitId().getAmount())
                                                            - Long.parseLong(debitRemainingLimit.getRemainingAmount());
                                                }
                                                nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                                logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                            } else {
                                                //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                                if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                        && debitRemainingLimit.getIndividualLimitId() != null) {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getIndividualLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                } else {
                                                    nayaPayLimit.setAvaillimit(debitRemainingLimit.getLimitId().getAmount());
                                                    nayaPayLimit.setAvaillimitfreq(debitRemainingLimit.getLimitId().getFrequencyLength());
                                                }

                                                logger.info("Executing Daily Limit flow...");
                                                logger.info("Current Debit Limit : [" + debitRemainingLimit.getId() + "]");
                                                logger.info("Debit Limit : [" + debitRemainingLimit.getLimitId().getId() + "]");
                                                logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                                logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                            }
                                        }

                                        if (Util.hasText(debitRemainingLimit.getIsIndividual()) && debitRemainingLimit.getIsIndividual().equals("1")
                                                && debitRemainingLimit.getIndividualLimitId() != null) {
                                            nayaPayLimit.setCustomlimitflag("true");
                                        } else {
                                            nayaPayLimit.setCustomlimitflag("false");
                                        }

                                        cardObject.getNayapaylimits().add(nayaPayLimit);

                                    }
                                }

                                dbQuery = "from " + CMSCreditRemainingLimit.class.getName() + " c where (c.relation= :ACCTNUMBER or c.relation= :CARD_NO) and c.limitId.isActive='1' ";
                                params = new HashMap<String, Object>();
                                params.put("CARD_NO", cardObject.getCardnumber());
                                params.put("ACCTNUMBER", usernprel.getAccount().getAccountNumber());
                                List<CMSCreditRemainingLimit> cmsCreditRemainingLimits = GeneralDao.Instance.find(dbQuery, params);

                                if (cmsCreditRemainingLimits != null && cmsCreditRemainingLimits.size() > 0) {
                                    for (CMSCreditRemainingLimit cmsCreditRemainingLimit : cmsCreditRemainingLimits) {
                                        if (cmsCreditRemainingLimit.getLimitId().getProductId().equals(usernprel.getAccount().getProduct())) {
                                            NayaPayLimit nayaPayLimit = new NayaPayLimit();

                                            if (Util.hasText(cmsCreditRemainingLimit.getLimitId().getDescription())) {
                                                nayaPayLimit.setTransaction(cmsCreditRemainingLimit.getLimitId().getDescription());
                                            } else {
                                                nayaPayLimit.setTransaction(cmsCreditRemainingLimit.getLimitId().getTransactionType().getTxndesc());
                                            }

                                            logger.info("Current cycle date : [" + cmsCreditRemainingLimit.getCycleEndDate() + "]");
                                            logger.info("Checking for month : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6) + "]");
                                            logger.info("Checking for year : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4) + "]");
                                            logger.info("Checking for current date : [" + WebServiceUtil.limitcycleDateFormat.format(new Date()) + "]");

                                            CMSLimitCycleType cmsLimitCycleType = new CMSLimitCycleType(Integer.parseInt(cmsCreditRemainingLimit.getLimitId().getCycleLengthType()));

                                            if (cmsLimitCycleType.equals(CMSLimitCycleType.DAILY)) {
                                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).equals(cmsCreditRemainingLimit.getCycleEndDate())) {
                                                    nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getRemainingAmount());
                                                    nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getRemainingFrequency());

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                    Long amount = 0L;
                                                    if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                            && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                        amount = Long.parseLong(cmsCreditRemainingLimit.getIndividualLimitId().getAmount())
                                                                - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                                    } else {
                                                        amount = Long.parseLong(cmsCreditRemainingLimit.getLimitId().getAmount())
                                                                - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                                    }
                                                    nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                                    logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                                } else {
                                                    if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                            && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                        nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getIndividualLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                    } else {
                                                        nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getLimitId().getFrequencyLength());
                                                    }

                                                    nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                                    logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Current Debit Limit : [" + cmsCreditRemainingLimit.getId() + "]");
                                                    logger.info("Debit Limit : [" + cmsCreditRemainingLimit.getLimitId().getId() + "]");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");
                                                }
                                            }

                                            if (cmsLimitCycleType.equals(CMSLimitCycleType.MONTHLY)) {
                                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(4, 6).equals(cmsCreditRemainingLimit.getCycleEndDate().substring(4, 6))) {
                                                    nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getRemainingAmount());
                                                    nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getRemainingFrequency());

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                    Long amount = 0L;
                                                    if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                            && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                        amount = Long.parseLong(cmsCreditRemainingLimit.getIndividualLimitId().getAmount())
                                                                - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                                    } else {
                                                        amount = Long.parseLong(cmsCreditRemainingLimit.getLimitId().getAmount())
                                                                - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                                    }
                                                    nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                                    logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");

                                                } else {
                                                    if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                            && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                        nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getIndividualLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                    } else {
                                                        nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getLimitId().getFrequencyLength());
                                                    }

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Current Debit Limit : [" + cmsCreditRemainingLimit.getId() + "]");
                                                    logger.info("Debit Limit : [" + cmsCreditRemainingLimit.getLimitId().getId() + "]");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                    nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                                    logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                                }
                                            }

                                            if (cmsLimitCycleType.equals(CMSLimitCycleType.YEARLY)) {
                                                if (WebServiceUtil.limitcycleDateFormat.format(new Date()).substring(2, 4).equals(cmsCreditRemainingLimit.getCycleEndDate().substring(2, 4))) {
                                                    nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getRemainingAmount());
                                                    nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getRemainingFrequency());

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                    Long amount = 0L;
                                                    if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                            && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                        amount = Long.parseLong(cmsCreditRemainingLimit.getIndividualLimitId().getAmount())
                                                                - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                                    } else {
                                                        amount = Long.parseLong(cmsCreditRemainingLimit.getLimitId().getAmount())
                                                                - Long.parseLong(cmsCreditRemainingLimit.getRemainingAmount());
                                                    }
                                                    nayaPayLimit.setAmount(StringUtils.leftPad(amount.toString(), 12, "0"));
                                                    logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                                } else {
                                                    //m.rehman: 15-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 2
                                                    if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                            && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                        nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getIndividualLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getIndividualLimitId().getFrequencyLength());
                                                    } else {
                                                        nayaPayLimit.setAvaillimit(cmsCreditRemainingLimit.getLimitId().getAmount());
                                                        nayaPayLimit.setAvaillimitfreq(cmsCreditRemainingLimit.getLimitId().getFrequencyLength());
                                                    }

                                                    logger.info("Executing Daily Limit flow...");
                                                    logger.info("Current Debit Limit : [" + cmsCreditRemainingLimit.getId() + "]");
                                                    logger.info("Debit Limit : [" + cmsCreditRemainingLimit.getLimitId().getId() + "]");
                                                    logger.info("Available Limit : [" + nayaPayLimit.getAvaillimit() + "]");
                                                    logger.info("Available Frequency : [" + nayaPayLimit.getAvaillimitfreq() + "]");

                                                    nayaPayLimit.setAmount(StringUtils.leftPad("0", 12, "0"));
                                                    logger.info("Limit used : [" + nayaPayLimit.getAmount() + "]");
                                                }
                                            }

                                            if (Util.hasText(cmsCreditRemainingLimit.getIsIndividual()) && cmsCreditRemainingLimit.getIsIndividual().equals("1")
                                                    && cmsCreditRemainingLimit.getIndividualLimitId() != null) {
                                                nayaPayLimit.setCustomlimitflag("true");
                                            } else {
                                                nayaPayLimit.setCustomlimitflag("false");
                                            }

                                            cardObject.getNayapaylimits().add(nayaPayLimit);
                                        }
                                    }
                                }
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////

                                // Asim Shahzad, Date : 14th Jan 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 (Release # 1)

                                dbQuery = "from " + CMSCardControlConfig.class.getName() + " c where c.card= :card ";
                                params = new HashMap<String, Object>();
                                params.put("card", cmsCard);
                                CMSCardControlConfig obj_CardControlConfig = (CMSCardControlConfig) GeneralDao.Instance.findObject(dbQuery, params);

                                //m.rehman: 16-02-2021, in case card control not found, set default controls
                                if (obj_CardControlConfig == null) {
                                    obj_CardControlConfig = new CMSCardControlConfig();
                                    obj_CardControlConfig.setOnlineEnabled(true);
                                    obj_CardControlConfig.setNFCEnabled(true);
                                    obj_CardControlConfig.setMagStripeEnabled(true);
                                    obj_CardControlConfig.setInternationalTxnsEnabled(true);
                                    obj_CardControlConfig.setCashWithdrawalEnabled(true);
                                    obj_CardControlConfig.setChipPinEnabled(true);
                                }

                                cardObject.setIsChipPinEnabled((obj_CardControlConfig.getChipPinEnabled() ? "true" : "false"));
                                cardObject.setIsMagStripeEnabled((obj_CardControlConfig.getMagStripeEnabled() ? "true" : "false"));
                                cardObject.setIsCashWithdrawalEnabled((obj_CardControlConfig.getCashWithdrawalEnabled() ? "true" : "false"));
                                cardObject.setIsNFCEnabled((obj_CardControlConfig.getNFCEnabled() ? "true" : "false"));
                                cardObject.setIsOnlineEnabled((obj_CardControlConfig.getOnlineEnabled() ? "true" : "false"));
                                cardObject.setIsInternationalTxnsEnabled((obj_CardControlConfig.getInternationalTxnsEnabled() ? "true" : "false"));

                                // ========================================================================================================

                                // Asim Shahzad, Date : 18th Jan 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 (Release # 2)
                                String pan = WebServiceUtil.getPANDecryptedValue(cardObject.getCardnumber());
                                String systemGeneratedCVV2 = hsm.CVVGeneration(cmsCard.getProduct().getProductDetail().getServiceCode(), pan, cmsCard.getExpiryDate(), cmsCard.getProduct().getProductKeys(), false, false);

                                String encrypted_Cvv2 = WebServiceUtil.getPANEncryptedValue(systemGeneratedCVV2);
                                wsmodel.setCvv2(encrypted_Cvv2);
                                // ========================================================================================================

                                // Asim Shahzad, Date : 4th Feb 2021, Tracking ID : VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 (Release # 3)

                                if (cmsCard.getProduct().getProductType().equals("CARD_LVL0") || cmsCard.getProduct().getProductType().equals("CARD_LVL1")) {
                                    cardObject.setCardtype("paypak_physical");
                                }
                                if (cmsCard.getProduct().getProductType().equals("VISA_DEBIT")) {
                                    cardObject.setCardtype("visa_physical");
                                }
                                if (cmsCard.getProduct().getProductType().equals("VISA_VIRTUAL")) {
                                    cardObject.setCardtype("visa_virtual");
                                }

                                // ========================================================================================================

                                cardObjectList.add(cardObject);
                            }

                            if (cardObjectList != null && cardObjectList.size() > 0) {
                                wsmodel.setCardobjectlist(cardObjectList);
                            }

                            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                            return wsmodel;
                        } else {
                            logger.error("No Card Record found, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND); //05 Invalid Card refer To Document Update THIS
                            return wsmodel;
                        }
                    } else {
                        logger.error("No Linked Account found for [" + wsmodel.getAcctid() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //03 Account Inactive -- refer to Document
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(WebServiceUtil.getStrException(e));
            logger.error(e);
            logger.error("Exception caught while Executing ExecuteGetUserVirtualCardCvvTwo..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    // =========================================================================================================================

    //m.rehman: 21-01-2020, VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 - VISA (Switch-Middleware Integration document v 4.7.6) - Release 4
    public static WalletCMSWsEntity ExecuteUpdateCardLimits(WalletCMSWsEntity wsmodel) {
        logger.info("Executing UpdateCardLimits Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID" + " and c.category = :CAT ";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET.StringValue());

            CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwallet != null) {

                if (!userwallet.getStatus().equals("00") || !userwallet.getCustomer().getStatus().equals("00")) {
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE);
                    return wsmodel;

                } else {

                    //dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO ";
                    dbQuery = "from " + CMSCard.class.getName() + " c where " +
                            " c.cardNumber= :CARDNO " +
                            " order by c.id desc ";
                    params = new HashMap<String, Object>();
                    params.put("CARDNO", wsmodel.getCardnumber());
                    CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);

                    if (card == null) {
                        logger.error("Card not Found in DB with CardNo [" + wsmodel.getCardnumber() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SEC_DATA_ELEM_NOT_FOUND);
                        return wsmodel;

                    } else {
                        if (!card.getCardStatus().equals("00")) {
                            logger.error("Inactive Card Found in DB with CardNo [" + wsmodel.getCardnumber() + "] Status [" + card.getCardStatus() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.NP_DEST_INVALID_STATE); //12- Transaction Invalid ; Refer to Doc
                            return wsmodel;

                        } else {

                            /*
                            if (card.getList_CustAccounts() == null) {
                                logger.error("No Account Found for CardNo [" + wsmodel.getCardnumber() + "]");
                                wsmodel.setRespcode(ISOResponseCodes.NP_DEST_NOT_FOUND);
                                return wsmodel;
                            }

                            CMSAccount account = null; //TODO: Raza should Update THIS with default
                            for (CMSAccount acct : card.getList_CustAccounts()) {
                                account = acct;
                                if (!acct.getStatus().equals("00") || !acct.getCustomer().getStatus().equals("00")) {
                                    logger.error("Inactive Account or Customer Found in DB for CardNo [" + wsmodel.getCardnumber() + "]");
                                    wsmodel.setRespcode(ISOResponseCodes.NP_DEST_NOT_FOUND);
                                    return wsmodel;
                                }
                            }
                            */

                            logger.info("Card found in active state, updating limits ...");
                            if (!WalletCMSFunctions.UpdateCardLimits(wsmodel, userwallet, card)) {
                                logger.error("Update Card Limits failed, rejecting ...");
                                return wsmodel;
                            }
                            //logger.info("Cards limits updated successfully ...");
                            //wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        }
                        return wsmodel;
                    }

                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);
            logger.error("Exception caught while Executing UpdateCardLimits..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    //m.rehman: 05-03-2021, VP-NAP-202103041/ VC-NAP-202103041 - Merchant Transaction Listing Issue
    public static WalletCMSWsEntity ExecuteGetMerchantTransactionList(WalletCMSWsEntity wsmodel) {

        logger.info("Executing GetMerchantTransactionList Request...");

        try {

            String dbQuery;
            Map<String, Object> param = new HashMap<String, Object>();

            logger.info("Getting Merchant Transaction List from System ...");
            //m.rehman: 10-11-2021 - Nayapay Optimization
            //dbQuery = "from " + MVFinancialLog.class.getName() + " e" + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " e" +
                    " where e.parentid = :parent_id" +
                    " and e.respcode in ('00','36')";
            param.put("parent_id", wsmodel.getParentid());

            if (Util.hasText(wsmodel.getInvoiceid())) {
                dbQuery += " and e.invoiceid = :invoice_id";
                param.put("invoice_id", wsmodel.getInvoiceid());
            }
            if (Util.hasText(wsmodel.getReferencenumber())) {
                dbQuery += " and e.referencenumber = :reference_number";
                param.put("reference_number", wsmodel.getReferencenumber());
            }
            if (Util.hasText(wsmodel.getOrigdataelement())) {
                dbQuery += " and e.tranrefnumber = :tran_ref_number";
                param.put("tran_ref_number", wsmodel.getOrigdataelement());
            }
            if (Util.hasText(wsmodel.getPosinvoiceref())) {
                dbQuery += " and e.posinvoiceref = :pos_invoice_ref";
                param.put("pos_invoice_ref", wsmodel.getPosinvoiceref());
            }
            if (Util.hasText(wsmodel.getNayapayid())) {
                dbQuery += " and e.nayapayid = :nayapay_id";
                param.put("nayapay_id", wsmodel.getNayapayid());
            }
            if (Util.hasText(wsmodel.getMerchantid())) {
                dbQuery += " and e.merchantid = :merchant_id";
                param.put("merchant_id", wsmodel.getMerchantid());
            }
            if (Util.hasText(wsmodel.getTerminalid())) {
                dbQuery += " and e.terminalid = :terminal_id";
                param.put("terminal_id", wsmodel.getTerminalid());
            }
            if (Util.hasText(wsmodel.getAgentid())) {
                dbQuery += " and e.agentid = :agent_id";
                param.put("agent_id", wsmodel.getAgentid());
            }
            if (Util.hasText(wsmodel.getDisputeflag())) {
                dbQuery += " and e.disputedflag = :disputed_flag";
                param.put("disputed_flag", wsmodel.getDisputeflag());
            }
            //dbQuery += " and e.respcode = '00'";
            //s.mehtab Jan 19th, 2021: Tracking Id: VP-NAP-202101111 / VC-NAP-202101111
            dbQuery += " and (e.servicename in ('MerchantBillerTransaction','MerchantRetailTransaction','MerchantBillerCoreTransaction','MerchantRetailCoreTransaction')";
            //s.mehtab: 13/11/2020, VP-NAP-202008211 / VC-NAP-202008211
            dbQuery += " or e.originalapi in ('MerchantBillerTransaction','MerchantBillerCoreTransaction','MerchantRetailTransaction','MerchantRetailCoreTransaction'))";
            dbQuery += " order by e.id desc";

            String query = "select count(*) " + dbQuery;
            Long size = (Long) GeneralDao.Instance.findObject(query, param);
            wsmodel.setTotalcount(size + "");

            //m.rehman: working for pagination
            logger.info("Page Count [" + wsmodel.getPagecount() + "] Page Size [" + wsmodel.getPagesize() + "]");
            Integer pageCount = Integer.parseInt(wsmodel.getPagecount());
            Integer pageSize = Integer.parseInt(wsmodel.getPagesize());
            logger.info("Converted Page Count [" + pageCount + "] Converted Page Size [" + pageSize + "]");
            Integer startPosition = (pageCount * pageSize) - pageSize;
            logger.info("Start Position [" + startPosition + "]");
            Query query1 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
            query1.setProperties(param);
            query1.setFirstResult(startPosition);
            query1.setMaxResults(pageSize);

            //m.rehman: 10-11-2021 - Nayapay Optimization
            //List<MVFinancialLog> webServiceEntityList = query1.list(); // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
            List<WalletCMSWsListingEntity> webServiceEntityList = query1.list();

            if (webServiceEntityList != null && webServiceEntityList.size() > 0) {
                logger.info("Merchant Transaction List found, with count [" + webServiceEntityList.size() + "]");

                //m.rehman: 10-11-2021 - Nayapay Optimization
                //for (MVFinancialLog wsEntity : webServiceEntityList) { // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                for (WalletCMSWsListingEntity wsEntity : webServiceEntityList) {
                    logger.info("Service name [" + wsEntity.getServicename() + "] Txn Ref Num [" + wsEntity.getTranrefnumber() + "]");
                    wsEntity.setReserved(wsEntity.getServicename());
                    wsEntity.setSecurityparams(null);
                }
                wsmodel.setWsloglist(webServiceEntityList);
            } else {
                logger.info("Not Merchant Transaction List found, returning ...");
            }
            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

            return wsmodel;
        } catch (Exception e) {
            logger.error(WebServiceUtil.getStrException(e));
            logger.error("Exception caught while Executing GetMerchantTransactionList..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    public static WalletCMSWsEntity ExecuteGetMerchantTransaction(WalletCMSWsEntity wsmodel) {

        logger.info("Executing GetMerchantTransaction Request...");

        try {

            logger.info("Getting Merchant Transaction from System ...");

            String dbQuery;
            Map<String, Object> param = new HashMap<String, Object>();
            //m.rehman: 10-11-2021 - Nayapay Optimization
            //dbQuery = "from " + MVFinancialLog.class.getName() + " e" + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " e" +
                    " where e.parentid = :parent_id" +
                    " and e.tranrefnumber = :tran_ref_number";
            param.put("tran_ref_number", wsmodel.getOrigdataelement());
            param.put("parent_id", wsmodel.getParentid());

            //m.rehman: 10-11-2021 - Nayapay Optimization
            //MVFinancialLog nayaPayWsEntity = (MVFinancialLog) GeneralDao.Instance.findObject(dbQuery, param); // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
            WalletCMSWsListingEntity nayaPayWsEntity = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, param);
            if (nayaPayWsEntity != null) {
                logger.info("Merchant Transaction found ...");
                logger.info("Service name [" + nayaPayWsEntity.getServicename() + "] Txn Ref Num [" + nayaPayWsEntity.getTranrefnumber() + "]");
                nayaPayWsEntity.setReserved(nayaPayWsEntity.getServicename());
                nayaPayWsEntity.setSecurityparams(null);
                wsmodel.setWslog(nayaPayWsEntity);

            } else {
                logger.info("Not Merchant Transaction found, returning ...");
            }
            wsmodel.setRespcode(ISOResponseCodes.APPROVED);

            return wsmodel;
        } catch (Exception e) {
            logger.error(WebServiceUtil.getStrException(e));
            logger.error("Exception caught while Executing GetMerchantTransaction..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////


    // Asim Shahzad, Date : 11th March 2021, Tracking ID : VP-NAP-202103111 / VC-NAP-202103111
    public static WalletCMSWsEntity ExecuteCloseWallet(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing CloseWallet Request...");

            String dbQuery, status, prevStatus;
            Map<String, Object> params;
            CMSActivityLog cmsActivityLog;

            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                if (nprel.getAccount().getStatus().equals("10")) {
                    logger.error("Account already closed, not updating Status! rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION);
                    return wsmodel;
                } else {
                    if (FinanceManager.CloseWallet(wsmodel, nprel.getAccount())) {
                        logger.info("CloseWallet in Wallet Done successfully!");

                        String sourceName = "", recordData = wsmodel.getReserved();
                        if (Util.hasText(recordData)) {

                            if (recordData.length() >= 148) {
                                sourceName = recordData.substring(118, 148);
                                wsmodel.setUsername(sourceName);
                            }
                        }
                        if (nprel.getAccount().getCategory() != null && nprel.getAccount().getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                            wsmodel.setMerchantid(nprel.getAccount().getUserId());
                        } else {
                            wsmodel.setUserid(nprel.getAccount().getUserId());
                        }

                        logger.info("Closing Account ....");

                        prevStatus = nprel.getAccount().getStatus();
                        nprel.getAccount().setStatus("10");
                        nprel.getAccount().setLastUpdateDate(new Date());
                        GeneralDao.Instance.saveOrUpdate(nprel.getAccount());

                        logger.info("Saving wallet activity ....");
                        cmsActivityLog = new CMSActivityLog();
                        cmsActivityLog.setRelation(nprel.getAccount().getAccountNumber());
                        cmsActivityLog.setPreviousStatus(prevStatus);
                        cmsActivityLog.setCurrentStatus(nprel.getAccount().getStatus());
                        cmsActivityLog.setSourceType("API");
                        cmsActivityLog.setSourceName(wsmodel.getServicename());
                        cmsActivityLog.setActivityDateTime(DateTime.now());

                        // Asim Shahzad, Date : 11th March 2021, Tracking ID : VP-NAP-202103111 / VC-NAP-202103111

                        cmsActivityLog.setReasonOfClosure(wsmodel.getReasonofclosure());
                        cmsActivityLog.setApprovingUser(wsmodel.getApprovinguser());
                        cmsActivityLog.setClosureRequestDateTime(wsmodel.getClosurerequestdatetime());

                        // =======================================================================================

                        GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                        //m.rehman: 06-05-2021 - VC-NAP-202104272 - Wallet Re-creation issue after wallet closure
                        prevStatus = nprel.getAccount().getCustomer().getStatus();
                        nprel.getAccount().getCustomer().setStatus("10");
                        nprel.getAccount().getCustomer().setLastUpdateDate(new Date());
                        GeneralDao.Instance.saveOrUpdate(nprel.getAccount().getCustomer());

                        logger.info("Saving customer activity ....");
                        cmsActivityLog = new CMSActivityLog();
                        cmsActivityLog.setRelation(nprel.getAccount().getCustomer().getCustomerId());
                        cmsActivityLog.setPreviousStatus(prevStatus);
                        cmsActivityLog.setCurrentStatus(nprel.getAccount().getCustomer().getStatus());
                        cmsActivityLog.setSourceType("API");
                        cmsActivityLog.setSourceName(wsmodel.getServicename());
                        cmsActivityLog.setActivityDateTime(DateTime.now());
                        cmsActivityLog.setReasonOfClosure(wsmodel.getReasonofclosure());
                        cmsActivityLog.setApprovingUser(wsmodel.getApprovinguser());
                        cmsActivityLog.setClosureRequestDateTime(wsmodel.getClosurerequestdatetime());
                        GeneralDao.Instance.saveOrUpdate(cmsActivityLog);
                        ////////////////////////////////////////////////////////////////////////////////////////////

                        logger.info("Blocking all debit cards for CloseWallet...");

                        dbQuery = "from " + CMSCard.class.getName() +
                                " c where c.customer= :CUSTOMER " +
                                " order by c.id desc ";
                        params = new HashMap<String, Object>();
                        params.put("CUSTOMER", nprel.getAccount().getCustomer());
                        List<CMSCard> card = GeneralDao.Instance.find(dbQuery, params);

                        if (card.size() > 0) {
                            for (int i = 0; i < card.size(); i++) {
                                if (card.get(i).getCardStatus().equals("10")) {
                                    logger.error("Card already in Blocked State...");
                                } else {
                                    logger.info("Blocking Card ...");
                                    prevStatus = card.get(i).getCardStatus();
                                    card.get(i).setCardStatus("90");
                                    GeneralDao.Instance.saveOrUpdate(card.get(i));

                                    logger.info("Saving card activity ....");
                                    cmsActivityLog = new CMSActivityLog();
                                    cmsActivityLog.setRelation(card.get(i).getCardNumber());
                                    cmsActivityLog.setPreviousStatus(prevStatus);
                                    cmsActivityLog.setCurrentStatus(card.get(i).getCardStatus());
                                    cmsActivityLog.setSourceType("API");
                                    cmsActivityLog.setSourceName(wsmodel.getServicename());
                                    cmsActivityLog.setActivityDateTime(DateTime.now());

                                    // Asim Shahzad, Date : 11th March 2021, Tracking ID : VP-NAP-202103111 / VC-NAP-202103111

                                    cmsActivityLog.setReasonOfClosure(wsmodel.getReasonofclosure());
                                    cmsActivityLog.setApprovingUser(wsmodel.getApprovinguser());
                                    cmsActivityLog.setClosureRequestDateTime(wsmodel.getClosurerequestdatetime());

                                    // =======================================================================================

                                    GeneralDao.Instance.saveOrUpdate(cmsActivityLog);
                                }
                            }

                        } else {
                            logger.error("Card not found for UserId [" + wsmodel.getUserid() + "]...");
                        }

                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    } else {
                        logger.info("Unable to do CloseWallet in Wallet...");

                        wsmodel.setRespcode(wsmodel.getRespcode());
                        return wsmodel;
                    }
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot close wallet. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);
            logger.error("Exception caught while Executing CloseWallet..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }
    // ===============================================================================================

    //Arsalan Akhter, Date: 08_Apr_2021, Ticket# VP-NAP-202103291_VC-NAP-202103291 Change in Debit card charges
    public static void FetchTransactionCharge(WalletCMSWsEntity wsmodel, CMSProduct cmsProduct, String isIntlTxnFlag, String isPrevAvailFlag) {
        Map<String, Object> params = new HashMap<String, Object>();
        String dbQuery = "from " + TransactionCharges.class.getName() + " t where " +
                "t.txnType = :TXN_TYPE " +
                "and t.channelId = :CHANNEL_ID " +
                "and t.product = :PRODUCT_ID " +
                "and t.status = 1 " +
                //m.rehman: Euronet integration, adding local/international txn check
                "and t.isIntlTxn = :IS_INTL_TXN_FLAG " +
                //Arsalan Akhter, Date: 08_Apr_2021, Ticket# VP-NAP-202103291_VC-NAP-202103291 Change in Debit card charges
                "and t.isPrevAvail = :IS_PREV_AVAIL_FLAG ";
        params.put("TXN_TYPE", GlobalContext.getInstance().getTransactionCodeDescbyCode(wsmodel.getServicename()).getTxncode());
        params.put("CHANNEL_ID", wsmodel.getChannelid());
        params.put("PRODUCT_ID", cmsProduct);
        //m.rehman: Euronet integration, adding local/international txn check
        params.put("IS_INTL_TXN_FLAG", isIntlTxnFlag);
        //Arsalan Akhter, Date: 08_Apr_2021, Ticket# VP-NAP-202103291_VC-NAP-202103291 Change in Debit card charges
        params.put("IS_PREV_AVAIL_FLAG", isPrevAvailFlag);

        //TransactionCharges transactionCharges = (TransactionCharges) GeneralDao.Instance.findObject(dbQuery, params);
        List<TransactionCharges> transactionChargesList = GeneralDao.Instance.find(dbQuery, params);

        if (transactionChargesList != null && transactionChargesList.size() > 0) {

            TransactionCharges transactionCharges = null;
            if (transactionChargesList.size() > 1) {    //more than one row, check slab
                for (TransactionCharges transactionChargesFromList : transactionChargesList) {
                    if (Util.hasText(transactionChargesFromList.getIsSlab()) && transactionChargesFromList.getIsSlab().equals("1")) {

                        //m.rehman: 25-02-2021, Euronet integration, amount must deduct in local currency
                        //Long trxAmount = (Util.hasText(wsmodel.getAmounttransaction())) ? Long.parseLong(wsmodel.getAmounttransaction()) : 0L;
                        Long trxAmount = 0L;
                        if (Util.hasText(wsmodel.getCbillamount())) {
                            trxAmount = (Util.hasText(wsmodel.getCbillamount())) ? Long.parseLong(wsmodel.getCbillamount()) : 0L;
                        } else {
                            trxAmount = (Util.hasText(wsmodel.getAmounttransaction())) ? Long.parseLong(wsmodel.getAmounttransaction()) : 0L;
                        }
                        ///////////////////////////////////////////////////////////////////////////////////////////////

                        Long minAmount = (Util.hasText(transactionChargesFromList.getMinSlabAmount())) ? Long.parseLong(transactionChargesFromList.getMinSlabAmount()) : 0L;
                        Long maxAmount = (Util.hasText(transactionChargesFromList.getMaxSlabAmount())) ? Long.parseLong(transactionChargesFromList.getMaxSlabAmount()) : 0L;

                        if (trxAmount >= minAmount && trxAmount <= maxAmount) {
                            logger.info("Charge Slab found for transaction, Minimum Amount [" + minAmount.toString() + "] and Maximum Amount [" + maxAmount.toString() + "]");
                            transactionCharges = transactionChargesFromList;
                        }
                    }
                }
            } else {
                transactionCharges = transactionChargesList.get(0);
            }

            if (transactionCharges != null) {
                logger.info("Charges found");
                Double chargeAmount = 0.0;
                if (transactionCharges.getAmountType() != null
                        && transactionCharges.getAmountType().equals(TaxType.PERCENTAGE_VALUE.toString())) {
                    chargeAmount = (Double.parseDouble(transactionCharges.getAmountValue()) / 100.0)
                            //m.rehman: 25-02-2021, Euronet integration, amount must deduct in local currency
                            * (Double.parseDouble((Util.hasText(wsmodel.getCbillamount()) ? wsmodel.getCbillamount() : wsmodel.getAmounttransaction())) / 100.0);
                    logger.info("Update amount for Charge [" + chargeAmount + "]");

                } else {
                    chargeAmount = (Double.parseDouble(transactionCharges.getAmountValue()) / 100.0);
                    logger.info("Update amount for Charge [" + chargeAmount + "]");
                }

                //calculating tax amount
                Double taxAmount = 0.0;
                if (transactionCharges.getTax() != null) {
                    logger.info("Tax rate found, calculating amount ...");
                    Tax tax = transactionCharges.getTax();
                    if (tax.getValueType().equals(TaxType.PERCENTAGE_VALUE.toString())) {
                        taxAmount = (Double.parseDouble(tax.getValue()) / 100.0) * chargeAmount;
                        logger.info("Update amount for Tax [" + taxAmount + "]");
                    } else {
                        taxAmount = (Double.parseDouble(tax.getValue()) / 100.0);
                        logger.info("Update amount for Tax [" + taxAmount + "]");
                    }

                    DecimalFormat dft = new DecimalFormat("0.00");
                    String updateTaxAmountStr = dft.format(taxAmount);
                    updateTaxAmountStr = updateTaxAmountStr.replace(".", "");
                    logger.info("Final amount for Tax [" + updateTaxAmountStr + "]");
                    wsmodel.setNayapaytaxamount(StringUtils.leftPad(updateTaxAmountStr, 12, "0"));

                } else {
                    logger.info("Tax rate not found ..");
                }

                chargeAmount = chargeAmount + taxAmount;
                logger.info("Update amount for Charge with Tax [" + chargeAmount + "]");
                DecimalFormat df = new DecimalFormat("0.00");
                String updateAmountStr = df.format(chargeAmount);
                updateAmountStr = updateAmountStr.replace(".", "");
                logger.info("Final amount for Charge [" + updateAmountStr + "]");
                wsmodel.setSrcchargeamount(StringUtils.leftPad(updateAmountStr, 12, "0"));

                //wsmodel.setRespcode(ISOResponseCodes.APPROVED);
            } else {
                logger.error("No Charges found for transaction [" + wsmodel.getServicename() + "] ...");
                wsmodel.setSrcchargeamount(StringUtils.leftPad("0", 12, "0"));
            }

        } else {
            logger.error("No Charges found for transaction [" + wsmodel.getServicename() + "] ...");
            wsmodel.setSrcchargeamount(StringUtils.leftPad("0", 12, "0"));
        }
    }

    // ===============================================================================================
    // ===============================================================================================
    //m.rehman: 12-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2
    @Transactional
    public static WalletCMSWsEntity ExecuteOpenDebitCredit(WalletCMSWsEntity wsmodel) {
        logger.info("Executing OpenDebitCredit Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //if debit account is wallet
            if (Util.hasText(wsmodel.getDebitwalletflag()) && wsmodel.getDebitwalletflag().equals("true")) {

                dbQuery = "from " + CMSAccount.class.getName() + " c where c.AccountNumber= :ACCT_NO" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("ACCT_NO", wsmodel.getAccountnumber());
                params.put("CAT", AccType.CAT_WALLET.StringValue());

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                //CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
                CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                if (userwallet != null) {

                    if (userwallet.getStatus().equals("04")     //Fraud Block
                            || userwallet.getStatus().equals("07")     //KYC Block
                            || userwallet.getStatus().equals("09")     //AML Block
                            || userwallet.getStatus().equals("90")     //Admin Block
                            || userwallet.getCustomer().getStatus().equals("04")     //Fraud Block
                            || userwallet.getCustomer().getStatus().equals("07")     //KYC Block
                            || userwallet.getCustomer().getStatus().equals("09")     //AML Block
                            || userwallet.getCustomer().getStatus().equals("90"))     //Admin Block
                    {
                        logger.error("Debit Wallet not in active state, rejecting ...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE);
                        return wsmodel;

                    } else {
                        logger.info("Active Debit Wallet found, proceeding ...");
                        if (FinanceManager.DebitWallet(wsmodel, userwallet)) {
                            logger.info("Debit Wallet completed, proceeding ...");
                            wsmodel.setUserid(userwallet.getUserId());
                            wsmodel.setUsername(userwallet.getAccountTitle());

                            //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                            wsmodel.setIncludeinstatement(1);
                            ////////////////////////////////////////////////////////////////////////////////////////////////////
                        }
                    }
                } else {
                    logger.error("Debit Wallet not found, rejecting ...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND);
                    return wsmodel;
                }
            }

            //if credit account is wallet
            if (Util.hasText(wsmodel.getCreditwalletflag()) && wsmodel.getCreditwalletflag().equals("true")) {
                dbQuery = "from " + CMSAccount.class.getName() + " c where c.AccountNumber= :ACCT_NO" + " and c.category = :CAT ";
                params = new HashMap<String, Object>();
                params.put("ACCT_NO", wsmodel.getDestaccount());
                params.put("CAT", AccType.CAT_WALLET.StringValue());

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                //CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
                CMSAccount userwallet = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                if (userwallet != null) {

                    logger.info("Credit Wallet found, proceeding ...");
                    if (FinanceManager.CreditWallet(wsmodel, userwallet)) {
                        logger.info("Credit Wallet completed, proceeding ...");
                        wsmodel.setDestuserid(userwallet.getUserId());
                        wsmodel.setDestusername(userwallet.getAccountTitle());

                        //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                        wsmodel.setIncludeinstatement(1);
                        ////////////////////////////////////////////////////////////////////////////////////////////////////
                    }
                } else {
                    logger.error("Credit Wallet not found, rejecting ...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_DEST_NOT_FOUND);
                    return wsmodel;
                }
            }

            //if debit account is GL
            if (Util.hasText(wsmodel.getDebitwalletflag()) && wsmodel.getDebitwalletflag().equals("false")) {
                dbQuery = "from " + CMSEMIAccountCollection.class.getName() + " c where c.AccountNumber= :ACCT_NO ";
                params = new HashMap<String, Object>();
                params.put("ACCT_NO", wsmodel.getAccountnumber());

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                //CMSEMIAccountCollection account = (CMSEMIAccountCollection) GeneralDao.Instance.findObject(dbQuery, params);
                CMSEMIAccountCollection account = (CMSEMIAccountCollection) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                if (account != null) {
                    logger.info("EMI Account found, proceeding ...");
                    FinanceManager.updateAndLogEMICollectionAccount(wsmodel, account, TxnFlag.DEBIT);

                } else {
                    logger.error("EMI Account not found, rejecting ...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND);
                    return wsmodel;
                }
            }

            //if credit account is GL
            if (Util.hasText(wsmodel.getCreditwalletflag()) && wsmodel.getCreditwalletflag().equals("false")) {
                dbQuery = "from " + CMSEMIAccountCollection.class.getName() + " c where c.AccountNumber= :ACCT_NO ";
                params = new HashMap<String, Object>();
                params.put("ACCT_NO", wsmodel.getDestaccount());

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                //CMSEMIAccountCollection account = (CMSEMIAccountCollection) GeneralDao.Instance.findObject(dbQuery, params);
                CMSEMIAccountCollection account = (CMSEMIAccountCollection) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                if (account != null) {
                    logger.info("EMI Account found, proceeding ...");
                    FinanceManager.updateAndLogEMICollectionAccount(wsmodel, account, TxnFlag.CREDIT);

                } else {
                    logger.error("EMI Account not found, rejecting ...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND);
                    return wsmodel;
                }
            }

            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
            return wsmodel;

        } catch (Exception e) {
            logger.error(WebServiceUtil.getStrException(e));
            logger.error("Exception caught while Executing MarkUserWalletCnicExpired..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
            //m.rehman: 26-07-2022, VC-NAP-202207261 - Transaction rollback on DB Exception
            //commenting below as it is handled in FinanceManager
            /*
            try {
                GeneralDao.Instance.endTransaction();
                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
            } catch (Exception e) {
                logger.error(e);//s.mehtab on 25-11-2020
                logger.error(WebServiceUtil.getStrException(e));
                logger.error("Exception caught while committing ..!");
                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
                return wsmodel;
            }
            */
        }
    }
    /////////////////////////////////////////////////////////////////////////////////////////////

    //m.rehman: 29-04-2021, VG-NAP-202104271 / VP-NAP-202104261 / VC-NAP-202104261 - VISA transaction charging update
    public static WalletCMSWsEntity ExecuteGetDebitCardCharge(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetDebitCardCharge Request...");
        try {
            String dbQuery, serviceName;
            Map<String, Object> params;
            CMSAccount userwalletSrc, userwalletDest, linkedaccount;
            CMSAuth cardrelation;
            Long availBalance, actualBalance, amount, sourceCharge, fee;
            boolean isDebit;

            //Raza Wallet Must be verified before every transaction, as if it is blocked, every thing should be rejected
            dbQuery = "from " + CMSAccount.class.getName() + " c where c.userId= :USERID " + " and category= :CAT";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());
            params.put("CAT", AccType.CAT_WALLET_VALUE);

            userwalletSrc = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);

            if (userwalletSrc != null) {
                if (userwalletSrc.getStatus().equals("00") && userwalletSrc.getCustomer().getStatus().equals("00")) {
                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                    params = new HashMap<String, Object>();
                    params.put("relation", userwalletSrc.getAccountNumber());
                    params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc) or Permission
                    cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                    if (cardrelation == null) {
                        logger.error("Card Relation not found for account [" + userwalletSrc.getAccountNumber() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                        return wsmodel;
                    }
                } else {
                    logger.info("Invalid Wallet.Customer State, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_WALLET_TRAN_NOT_ALLOWED);
                    return wsmodel;
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot change wallet PIN. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }

            Currency currency = GlobalContext.getInstance().getCurrency(Integer.parseInt(userwalletSrc.getCurrency()));
            if (currency != null) {
                wsmodel.setCurrency(currency.getName());
            } else {
                wsmodel.setCurrency(GlobalContext.getInstance().getBaseCurrency().getName());
            }
            //wsmodel.setCurrency(GlobalContext.getInstance().getCurrency(Integer.parseInt(userwalletSrc.getCurrency())).getName());

            //get transaction charges
            serviceName = wsmodel.getServicename();
            wsmodel.setServicename(wsmodel.getNayapaytrantype());

            if (!Util.hasText(wsmodel.getAmounttransaction())) {
                wsmodel.setAmounttransaction(StringUtils.leftPad("0", 12, "0"));
            }

            List<CardCharge> cardChargeList = new ArrayList<>();
            CardCharge cardCharge = new CardCharge();
            String productType = "";
            productType = "VISA_VIRTUAL";
            if (wsmodel.getNayapaytrantype().equals("DebitCardRequest")) {
                dbQuery = "from " + CMSCard.class.getName() + " c where " +
                        " c.customer= :CUSTOMER " +
                        //" and c.product.productType = 'VISA_VIRTUAL' " +
                        " and c.product.productType = :PRODUCT_TYPE " +
                        " order by c.id desc ";
                params = new HashMap<String, Object>();
                params.put("CUSTOMER", userwalletSrc.getCustomer()); //.getCustomerId());
                params.put("PRODUCT_TYPE", productType);
                List<CMSCard> existingCard = GeneralDao.Instance.find(dbQuery, params);

                if (existingCard != null && existingCard.size() > 0) {      //previous card exists
                    logger.info("Previous card exists for card type [visa_virtual]");
                    FetchTransactionCharge(wsmodel, existingCard.get(0).getProduct(), "0", "1");
                } else {
                    logger.info("No Previous card exists for card type [visa_virtual]");

                    dbQuery = "from " + CMSProduct.class.getName() + " p where " +
                            " p.productType = :PRODUCT_TYPE " +
                            " order by p.id desc ";
                    params = new HashMap<String, Object>();
                    params.put("PRODUCT_TYPE", productType);
                    CMSProduct product = (CMSProduct) GeneralDao.Instance.findObject(dbQuery, params);

                    FetchTransactionCharge(wsmodel, product, "0", "0");
                }
            } else {
                dbQuery = "from " + CMSProduct.class.getName() + " p where " +
                        " p.productType = :PRODUCT_TYPE " +
                        " order by p.id desc ";
                params = new HashMap<String, Object>();
                params.put("PRODUCT_TYPE", productType);
                CMSProduct product = (CMSProduct) GeneralDao.Instance.findObject(dbQuery, params);

                FetchTransactionCharge(wsmodel, product, "0", "0");
            }
            cardCharge.setType("visa_virtual");
            cardCharge.setCharge(wsmodel.getSrcchargeamount());
            cardChargeList.add(cardCharge);

            cardCharge = new CardCharge();
            productType = "VISA_DEBIT";
            if (wsmodel.getNayapaytrantype().equals("DebitCardRequest")) {
                dbQuery = "from " + CMSCard.class.getName() + " c where " +
                        " c.customer= :CUSTOMER " +
                        //" and c.product.productType = 'VISA_VIRTUAL' " +
                        " and c.product.productType = :PRODUCT_TYPE " +
                        " order by c.id desc ";
                params = new HashMap<String, Object>();
                params.put("CUSTOMER", userwalletSrc.getCustomer()); //.getCustomerId());
                params.put("PRODUCT_TYPE", productType);
                List<CMSCard> existingCard = GeneralDao.Instance.find(dbQuery, params);

                if (existingCard != null && existingCard.size() > 0) {      //previous card exists
                    logger.info("Previous card exists for card type [visa_physical]");
                    FetchTransactionCharge(wsmodel, existingCard.get(0).getProduct(), "0", "1");
                } else {
                    logger.info("No Previous card exists for card type [visa_physical]");

                    dbQuery = "from " + CMSProduct.class.getName() + " p where " +
                            " p.productType = :PRODUCT_TYPE " +
                            " order by p.id desc ";
                    params = new HashMap<String, Object>();
                    params.put("PRODUCT_TYPE", productType);
                    CMSProduct product = (CMSProduct) GeneralDao.Instance.findObject(dbQuery, params);

                    FetchTransactionCharge(wsmodel, product, "0", "0");
                }
            } else {
                dbQuery = "from " + CMSProduct.class.getName() + " p where " +
                        " p.productType = :PRODUCT_TYPE " +
                        " order by p.id desc ";
                params = new HashMap<String, Object>();
                params.put("PRODUCT_TYPE", productType);
                CMSProduct product = (CMSProduct) GeneralDao.Instance.findObject(dbQuery, params);

                FetchTransactionCharge(wsmodel, product, "0", "0");
            }
            cardCharge.setType("visa_physical");
            cardCharge.setCharge(wsmodel.getSrcchargeamount());
            cardChargeList.add(cardCharge);

            cardCharge = new CardCharge();
            if (userwalletSrc.getLevel().equals("0")) {
                productType = "CARD_LVL0";
            } else {
                productType = "CARD_LVL1";
            }
            if (wsmodel.getNayapaytrantype().equals("DebitCardRequest")) {
                dbQuery = "from " + CMSCard.class.getName() + " c where " +
                        " c.customer= :CUSTOMER " +
                        //" and c.product.productType = 'VISA_VIRTUAL' " +
                        " and c.product.productType = :PRODUCT_TYPE " +
                        " order by c.id desc ";
                params = new HashMap<String, Object>();
                params.put("CUSTOMER", userwalletSrc.getCustomer()); //.getCustomerId());
                params.put("PRODUCT_TYPE", productType);
                List<CMSCard> existingCard = GeneralDao.Instance.find(dbQuery, params);

                if (existingCard != null && existingCard.size() > 0) {      //previous card exists
                    logger.info("Previous card exists for card type [paypak_physical]");
                    FetchTransactionCharge(wsmodel, existingCard.get(0).getProduct(), "0", "1");
                } else {
                    logger.info("No Previous card exists for card type [paypak_physical]");

                    dbQuery = "from " + CMSProduct.class.getName() + " p where " +
                            " p.productType = :PRODUCT_TYPE " +
                            " order by p.id desc ";
                    params = new HashMap<String, Object>();
                    params.put("PRODUCT_TYPE", productType);
                    CMSProduct product = (CMSProduct) GeneralDao.Instance.findObject(dbQuery, params);

                    FetchTransactionCharge(wsmodel, product, "0", "0");
                }
            } else {
                dbQuery = "from " + CMSProduct.class.getName() + " p where " +
                        " p.productType = :PRODUCT_TYPE " +
                        " order by p.id desc ";
                params = new HashMap<String, Object>();
                params.put("PRODUCT_TYPE", productType);
                CMSProduct product = (CMSProduct) GeneralDao.Instance.findObject(dbQuery, params);

                FetchTransactionCharge(wsmodel, product, "0", "0");
            }
            cardCharge.setType("paypak_physical");
            cardCharge.setCharge(wsmodel.getSrcchargeamount());
            cardChargeList.add(cardCharge);

            wsmodel.setCardchargeslist(cardChargeList);
            wsmodel.setServicename(serviceName);

            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
            return wsmodel;
        } catch (Exception e) {
            logger.error(WebServiceUtil.getStrException(e));
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetDebitCardCharge..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // Asim Shahzad, Date : 10 Aug 2021, Tracking ID : VP-NAP-202108091 / VC-NAP-202108093/ VG-NAP-202108091
    public static WalletCMSWsEntity ExecuteGetUserWalletStatement(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetUserWalletStatement Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (usernprel != null) {
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", usernprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid());
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                } else {
                    if (!usernprel.getAccount().getStatus().equals("00") || !usernprel.getAccount().getCustomer().getStatus().equals("00")) {
                        logger.error("Invalid Account or Customer Status, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Inactive Account/Customer ; refer NayaPay Doc
                        return wsmodel;
                    } else {
                        List<UserTransaction> usertxns = new ArrayList<UserTransaction>();
                        //m.rehman: 10-11-2021 - Nayapay Optimization
                        //List<MVFinancialLog> dbtranlist = null; // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                        List<WalletCMSWsListingEntity> dbtranlist = null;

                        logger.info("Getting User Transaction List from DB for ALL Debit/out&Credit/in Transactions...");

                        params = new HashMap<String, Object>();

                        if (wsmodel.getTypefilter() == null) {

                            //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                            //updating below logic
                            /*
                            dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                                    //Arsalan Akhter, Date:13-Sept-2021, Tikcet: VC-NAP-202109132 (Issues in Wallet Statement)
                                    " ((c.userid= :USERID and c.servicename in ('LoadWallet','WalletTransaction','CashDeposit','UnloadWallet','MerchantBillerTransaction','MerchantRetailTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','DebitCardRequest','OnelinkTopupBillPayment','CNICBasedCashWithdrawal','IBFTIn','IBFT','BalanceInquiry','OpenDebitCredit','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund','STIP','MerchantBillerCoreTransaction','MerchantRetailCoreTransaction','MerchantUnloadWallet','MerchantLoadDebitCard','MerchantUnloadDebitCard','OnelinkBillerCoreTransaction','ConfirmBankOtp','ConfirmFraudOtp','MarkDisputedTransaction')) " +
                                    " or " +

                                    " (c.destuserid= :USERID and c.servicename in ('WalletTransaction','MerchantRefundTransaction','DisputeRefundTransaction','OpenDebitCredit')) " +
                                    " or " +

                                    " (c.userid= :USERID and c.originalapi in ('LoadWallet','WalletTransaction','CashDeposit','UnloadWallet','MerchantBillerTransaction','MerchantRetailTransaction','CashWithDrawal','Purchase','OneLinkBillPayment','OnelinkBillerTransaction','DebitCardRequest','OnelinkTopupBillPayment','CNICBasedCashWithdrawal','IBFTIn','IBFT','BalanceInquiry','WithHoldingTax','ECommerce','PreAuthorization','PreAuthCompletion','MOTO','Refund','STIP','MerchantBillerCoreTransaction','MerchantRetailCoreTransaction','MerchantUnloadWallet','MerchantLoadDebitCard','MerchantUnloadDebitCard','OnelinkBillerCoreTransaction','ConfirmBankOtp','ConfirmFraudOtp','MarkDisputedTransaction')) " +
                                    " or " +
                                    //=========================================================================

                                    " (c.destuserid= :USERID and c.originalapi in ('WalletTransaction','MerchantRefundTransaction','DisputeRefundTransaction'))) ";
                            */
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " +
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +
                                    " (c.userid= :USERID or c.destuserid= :USERID) "
                                    +
                                    " and c.includeinstatement=1 ";
                            ////////////////////////////////////////////////////////////////////////////////////////////////////

                        } else {
                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //dbQuery = "from " + MVFinancialLog.class.getName() + " c where " + // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where " +

                                    " ((c.userid= :USERID and c.servicename in (:TRNTYPE)) " +
                                    " or " +

                                    " (c.destuserid= :USERID and c.servicename in (:TRNTYPE)) " +
                                    " or " +
                                    " (c.userid= :USERID and c.originalapi in (:TRNTYPE)) " +
                                    " or " +

                                    " (c.destuserid= :USERID and c.originalapi in (:TRNTYPE))) ";

                            params.put("TRNTYPE", wsmodel.getTypefilter());
                        }

                        dbQuery += " and c.respcode in (:RESPCODE) ";
                        // =======================================================================================

                        params.put("USERID", wsmodel.getUserid());

                        List<String> respcode = new ArrayList<>();
                        respcode.add("00");
                        respcode.add("36");
                        params.put("RESPCODE", respcode);

                        if (Util.hasText(wsmodel.getFromdatetime()) && Util.hasText(wsmodel.getTodatetime())) {
                            dbQuery += " and substr(c.transdatetime,0,6) between :FROM_DATE and :TO_DATE";
                            params.put("FROM_DATE", new SimpleDateFormat("yyyyMM").format(new SimpleDateFormat("MM/yyyy").parse(wsmodel.getFromdatetime())));
                            params.put("TO_DATE", new SimpleDateFormat("yyyyMM").format(new SimpleDateFormat("MM/yyyy").parse(wsmodel.getTodatetime())));
                        }
                        //Arsalan Akhter, Date: 06-Sept-2021, Ticket ID: VC-NAP-202109061(Sorting for Wallet Statement in ascending order)
                        //Changing order sequence by desc to asc
                        //dbQuery += " order by c.transdatetime asc, c.id asc ";
                        dbQuery += " order by c.id asc ";

                        Query query1 = GeneralDao.Instance.getCurrentSession().createQuery(dbQuery);
                        query1.setProperties(params);

                        dbtranlist = query1.list();

                        wsmodel.setTotalcount(dbtranlist.size() + "");
                        logger.info("Total Count [" + dbtranlist.size() + "]");

                        //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                        String monthOpeningBal = "0", monthClosingBal = "0";

                        usertxns = new ArrayList<UserTransaction>();

                        if (dbtranlist != null && dbtranlist.size() > 0) {
                            logger.info("Transaction records found in db for UserId as Src, processing...");

                            //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                            monthOpeningBal = dbtranlist.get(0).getOpeningbalance();
                            monthClosingBal = dbtranlist.get(dbtranlist.size() - 1).getClosingbalance();
                            ///////////////////////////////////////////////////////////////////////////////////////////

                            //m.rehman: 10-11-2021 - Nayapay Optimization
                            //for (MVFinancialLog txn : dbtranlist) { // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                            for (WalletCMSWsListingEntity txn : dbtranlist) {
                                //logger.info("Service Name from DB [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "]");
                                try {
                                    SwitchTransactionCodes switchTransactionCodes = GlobalContext.getInstance().getTransactionCodeDescbyCode(txn.getServicename());
                                    if (switchTransactionCodes != null && switchTransactionCodes.getIsfinancial()) {
                                        UserTransaction utxn = new UserTransaction();
                                        utxn.setTransrefnum(txn.getTranrefnumber());

                                        if (txn.getServicename().contains("Reversal")) {
                                            utxn.setNayapaytype(txn.getServicename());
                                        } else {
                                            utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                        }

                                        utxn.setAcctalias(txn.getAcctalias());

                                        if (Util.hasText(txn.getUsername())) {
                                            utxn.setSrcname(txn.getUsername());
                                        } else {
                                            utxn.setSrcname(txn.getCustomername());
                                        }

                                        utxn.setSrcnayapayid(txn.getNayapayid());
                                        utxn.setDestname(txn.getDestusername());
                                        utxn.setDestnayapayid(txn.getDestnayapayid());
                                        utxn.setCurrency(txn.getCurrency());

                                        utxn.setAmount((Util.hasText(txn.getCbillamount())) ? txn.getCbillamount() : txn.getAmounttransaction());

                                        utxn.setTransdatetime(txn.getTransdatetime());

                                        if (Util.hasText(txn.getBenebankcode())) {
                                            utxn.setBankcode(txn.getBenebankcode());
                                        } else {
                                            utxn.setBankcode(txn.getBankcode());
                                        }


                                        if (Util.hasText(txn.getBenebankaccountno())) {
                                            utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno() : "");
                                        } else {
                                            utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber() : "");
                                        }

                                        utxn.setBranchname(txn.getBranchname());
                                        utxn.setSrcid(txn.getUserid());
                                        utxn.setDestid(txn.getDestuserid());
                                        utxn.setTerminalloc(txn.getTermloc());
                                        utxn.setMapid(txn.getMapid());
                                        utxn.setMerchantid(Util.hasText(txn.getMerchantid()) ? txn.getMerchantid() : txn.getBillerid());
                                        utxn.setMerchantname(Util.hasText(txn.getMerchantname()) ? txn.getMerchantname() : txn.getBillername());
                                        utxn.setDepositorname(txn.getCustomername());
                                        utxn.setBankcharge(txn.getNayapaycharges());

                                        if (Util.hasText(txn.getSlipnumber())) {
                                            utxn.setDepositorslipnumber(txn.getSlipnumber());
                                        }
                                        //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                                        if (Util.hasText(txn.getCardlastdigits())) {
                                            utxn.setCardlastdigits(txn.getCardlastdigits());
                                        }
                                        //===============================================================================================================
                                        if (Util.hasText(txn.getCardscheme())) {
                                            utxn.setCardscheme(txn.getCardscheme());
                                        }
                                        if (Util.hasText(txn.getPosentrymode())) {
                                            utxn.setPosentrymode(txn.getPosentrymode());
                                        }
                                        if (Util.hasText(txn.getTerminalid())) {
                                            utxn.setTerminalid(txn.getTerminalid());
                                        }
                                        if (Util.hasText(txn.getCategoryid())) {
                                            utxn.setMerchantcategorycode(txn.getCategoryid());
                                        }
                                        utxn.setSrccharge(txn.getSrcchargeamount());
                                        utxn.setDestcharge(txn.getDestchargeamount());

                                        utxn.setTaxamount(txn.getNayapaytaxamount());
                                        utxn.setOriginalapi(txn.getOriginalapi());
                                        utxn.setOriginaldatetime(txn.getOrigtransdatetime());
                                        utxn.setOriginalrrn(txn.getOrigretrefno());
                                        utxn.setOriginalstan(txn.getOrigstan());
                                        utxn.setNpticket(txn.getNpticket());
                                        utxn.setVrolticket(txn.getVrolticket());
                                        utxn.setRefundtype(txn.getReserved());

                                        if (
                                                txn.getServicename().equals("LoadWallet") ||
                                                        txn.getServicename().equals("CashDeposit") ||
                                                        txn.getServicename().equals("OnelinkTopupBillPayment") ||
                                                        txn.getServicename().equals("IBFTIn") ||
                                                        (
                                                                wsmodel.getUserid().equals(txn.getDestuserid()) &&
                                                                        (
                                                                                txn.getServicename().equals("WalletTransaction") ||
                                                                                        txn.getServicename().equals("MerchantRefundTransaction") ||
                                                                                        txn.getServicename().equals("DisputeRefundTransaction")
                                                                                        || txn.getServicename().equals("OpenDebitCredit")  //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2 - adding open debit credit
                                                                        )
                                                        )
                                                        ||
                                                        (
                                                                Util.hasText(txn.getOriginalapi()) &&
                                                                        (txn.getOriginalapi().equals("WalletTransaction") ||
                                                                                txn.getOriginalapi().equals("MerchantRefundTransaction") ||
                                                                                txn.getOriginalapi().equals("DisputeRefundTransaction"))
                                                        )
                                                        ||

                                                        (
                                                                Util.hasText(txn.getServicename()) &&
                                                                        txn.getServicename().contains("Reversal")
                                                        )
                                        ) {

                                            //logger.info("Calculating amount received...");

                                            if (Util.hasText(wsmodel.getFromdatetime()) && Util.hasText(wsmodel.getTodatetime())) {
                                                Long receivedAmount = (Util.hasText(wsmodel.getTotalamountreceived()) ? Long.parseLong(wsmodel.getTotalamountreceived()) : 0L);
                                                //logger.info("receivedAmount : [" + receivedAmount + "]");
                                                receivedAmount = receivedAmount + ((Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : ((Util.hasText(txn.getAmounttransaction())) ? Long.parseLong(txn.getAmounttransaction()) : 0L));
                                                receivedAmount = receivedAmount + ((Util.hasText(txn.getSrcchargeamount())) ? Long.parseLong(txn.getSrcchargeamount()) : 0L);
                                                receivedAmount = receivedAmount + ((Util.hasText(txn.getWithholdingtaxamount())) ? Long.parseLong(txn.getWithholdingtaxamount()) : 0L);
                                                wsmodel.setTotalamountreceived(String.valueOf(receivedAmount));
                                                //logger.info("Calculated totalamountreceived : [" + wsmodel.getTotalamountreceived() + "]");
                                            }
                                        } else {

                                            //logger.info("Calculating amount spent...");
                                            if (Util.hasText(wsmodel.getFromdatetime()) && Util.hasText(wsmodel.getTodatetime())) {
                                                Long spentAmount = (Util.hasText(wsmodel.getTotalamountspent()) ? Long.parseLong(wsmodel.getTotalamountspent()) : 0L);
                                                //logger.info("spentAmount : [" + spentAmount + "]");
                                                spentAmount = spentAmount + ((Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : ((Util.hasText(txn.getAmounttransaction())) ? Long.parseLong(txn.getAmounttransaction()) : 0L));
                                                spentAmount = spentAmount + ((Util.hasText(txn.getSrcchargeamount())) ? Long.parseLong(txn.getSrcchargeamount()) : 0L);
                                                spentAmount = spentAmount + ((Util.hasText(txn.getWithholdingtaxamount())) ? Long.parseLong(txn.getWithholdingtaxamount()) : 0L);
                                                wsmodel.setTotalamountspent(String.valueOf(spentAmount));
                                                //logger.info("Calculated totalamountspent : [" + wsmodel.getTotalamountspent() + "]");
                                            }

                                        }

                                        //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                        //adding check for original channel of dispute transaction
                                        if (txn.getChannelid().equals(ChannelCodes.EURONET)
                                                || (Util.hasText(txn.getOrigChannelId()) && txn.getOrigChannelId().equals(ChannelCodes.EURONET))) {
                                            utxn.setAcquiringcurrency(Util.hasText(txn.getTrancurrency()) ? CustomerService.findCurrency(Integer.valueOf(txn.getTrancurrency())).getName() : "");
                                            utxn.setAcquiringamount(Util.hasText(txn.getAmounttransaction()) ? txn.getAmounttransaction() : "");
                                            utxn.setConversionrate(Util.hasText(txn.getSettlementrate()) ? txn.getSettlementrate() : "");


                                            boolean intlFlag = false;
                                            if (Util.hasText(txn.getBranchcode()) &&
                                                    (txn.getBranchcode().equals("PSI") || txn.getBranchcode().equals("ESI") || txn.getBranchcode().equals("ATM"))) {
                                                intlFlag = true;
                                            }
                                            utxn.setInternationaltransactionflag(intlFlag);


                                            Long totalAmount = (Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : 0L;
                                            if (Util.hasText(txn.getSrcchargeamount())) {
                                                totalAmount = totalAmount + Long.parseLong(txn.getSrcchargeamount());
                                            }
                                            if (Util.hasText(txn.getWithholdingtaxamount())) {
                                                totalAmount = totalAmount + Long.parseLong(txn.getWithholdingtaxamount());
                                            }
                                            //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                            //converting to ISO format
                                            utxn.setTotalamount(StringUtils.leftPad(totalAmount.toString(), 12, "0"));

                                            utxn.setBaseamountafterconversion(Util.hasText(txn.getCbillamount()) ? txn.getCbillamount() : "");

                                            //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                            //converting to ISO format
                                            utxn.setForeigntransactionfee((Util.hasText(txn.getSrcchargeamount()) && Util.hasText(txn.getNayapaytaxamount())) ? StringUtils.leftPad(String.valueOf(Long.parseLong(txn.getSrcchargeamount()) - Long.parseLong(txn.getNayapaytaxamount())), 12, "0") : "");

                                            utxn.setTaxappliedonforeigntransactionfee(Util.hasText(txn.getNayapaytaxamount()) ? txn.getNayapaytaxamount() : "");
                                            utxn.setWithholdingtax(Util.hasText(txn.getWithholdingtaxamount()) ? txn.getWithholdingtaxamount() : "");
                                        }

                                        utxn.setJustification(txn.getJustification());

                                        if (Util.hasText(txn.getIban())) {
                                            utxn.setIban(txn.getIban());
                                        }

                                        //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                                        //utxn.setBalancebeforetxn(StringUtils.leftPad(WebServiceUtil.GetWalletTxnBalance(txn.getTranrefnumber(), txn.getTransdatetime(), "asc", usernprel.getAccount()), 12, "0")); // Asim Shahzad, Date : 1st Sep 2021, Tracking : to be logged
                                        //utxn.setBalanceaftertxn(StringUtils.leftPad(WebServiceUtil.GetWalletTxnBalance(txn.getTranrefnumber(), txn.getTransdatetime(), "desc", usernprel.getAccount()), 12, "0")); // Asim Shahzad, Date : 1st Sep 2021, Tracking : to be logged
                                        utxn.setBalancebeforetxn(StringUtils.leftPad(txn.getOpeningbalance(), 12, "0")); // Asim Shahzad, Date : 1st Sep 2021, Tracking : to be logged
                                        utxn.setBalanceaftertxn(StringUtils.leftPad(txn.getClosingbalance(), 12, "0")); // Asim Shahzad, Date : 1st Sep 2021, Tracking : to be logged
                                        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                        usertxns.add(utxn);
                                    }
                                } catch (Exception e) {
                                    logger.error(e);
                                    logger.error("Unable to Add Txn [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "] to List Reason [" + e.getMessage() + "]");
                                }
                            }
                        } else {
                            logger.error("No Transaction found in DB for Src UserId [" + wsmodel.getUserid() + "]");
                        }

                        wsmodel.setTotalcount((Util.hasText(wsmodel.getTotalcount())) ? wsmodel.getTotalcount() : "0");
                        wsmodel.setUsertransactions(usertxns);

                        //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                        //wsmodel.setMonthstartingbalance(StringUtils.leftPad(WebServiceUtil.GetWalletBalance(new SimpleDateFormat("yyyyMM").format(new SimpleDateFormat("MM/yyyy").parse(wsmodel.getFromdatetime())), new SimpleDateFormat("yyyyMM").format(new SimpleDateFormat("MM/yyyy").parse(wsmodel.getTodatetime())), "asc", usernprel.getAccount()), 12, "0"));
                        //wsmodel.setMonthendingbalance(StringUtils.leftPad(WebServiceUtil.GetWalletBalance(new SimpleDateFormat("yyyyMM").format(new SimpleDateFormat("MM/yyyy").parse(wsmodel.getFromdatetime())), new SimpleDateFormat("yyyyMM").format(new SimpleDateFormat("MM/yyyy").parse(wsmodel.getTodatetime())), "desc", usernprel.getAccount()), 12, "0"));
                        wsmodel.setMonthstartingbalance(StringUtils.leftPad(monthOpeningBal, 12, "0"));
                        wsmodel.setMonthendingbalance(StringUtils.leftPad(monthClosingBal, 12, "0"));
                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                        return wsmodel;
                    }
                }
            } else {
                logger.error("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ". rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetUserWalletStatement..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }

    // =====================================================================================================

    //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
    public static WalletCMSWsEntity ExecuteGetUserWalletStatementbyDB(WalletCMSWsEntity wsmodel) {
        logger.info("Executing GetUserWalletStatementbyDB Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //new start
            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation usernprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (usernprel != null) {
                dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                params = new HashMap<String, Object>();
                params.put("relation", usernprel.getAccount().getAccountNumber());
                params.put("chnnl", wsmodel.getChannelid());
                CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                if (cardrelation == null) {
                    logger.error("Card Relation not found for relation [" + usernprel.getAccount().getAccountNumber() + "], rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_PERMISSION_DENIED); //Invalid Card Record ; Raza update THIS
                    return wsmodel;
                } else if (!usernprel.getAccount().getStatus().equals("00") || !usernprel.getAccount().getCustomer().getStatus().equals("00")) {
                    logger.error("Invalid Account or Customer Status, rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INVALID_STATE); //32 Inactive Account/Customer ; refer NayaPay Doc
                    return wsmodel;
                } else {
                    List<UserTransaction> usertxns = new ArrayList<UserTransaction>();
                    //m.rehman: 10-11-2021 - Nayapay Optimization
                    //List<MVFinancialLog> dbtranlist = null; // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                    List<WalletCMSWsListingEntity> dbtranlist = null;

                    logger.info("Getting User Transaction List from DB for ALL Debit/out&Credit/in Transactions...");

                    //m.rehman: 10-11-2021 - Nayapay Optimization
                    //Query query = GeneralDao.Instance.getCurrentSession().createSQLQuery("CALL PACKAGE_OPERATIONS.GetUserWalletStatement(:USER_ID,:FILTER,:FROM_DATE,:TO_DATE)").addEntity(MVFinancialLog.class)
                    Query query = GeneralDao.Instance.getCurrentSession().createSQLQuery("CALL PACKAGE_OPERATIONS.GetUserWalletStatement(:USER_ID,:FILTER,:FROM_DATE,:TO_DATE)").addEntity(WalletCMSWsListingEntity.class)
                            .setParameter("USER_ID", wsmodel.getUserid())
                            .setParameter("FROM_DATE", new SimpleDateFormat("yyyyMM").format(new SimpleDateFormat("MM/yyyy").parse(wsmodel.getFromdatetime())))
                            .setParameter("TO_DATE", new SimpleDateFormat("yyyyMM").format(new SimpleDateFormat("MM/yyyy").parse(wsmodel.getTodatetime())));

                    if (wsmodel.getTypefilter() != null && wsmodel.getTypefilter().size() > 0) {
                        String typeFilter = "";
                        for (String tf : wsmodel.getTypefilter()) {
                            typeFilter = "\'" + tf + "\',";
                        }
                        typeFilter = typeFilter.substring(0, typeFilter.length() - 1);
                        query.setParameter("FILTER", typeFilter);
                    } else {
                        query.setParameter("FILTER", "-");
                    }

                    List result = query.list();
                    //m.rehman: 10-11-2021 - Nayapay Optimization
                    //dbtranlist = (List<MVFinancialLog>)result.get(0);
                    dbtranlist = (List<WalletCMSWsListingEntity>) result.get(0);

                    wsmodel.setTotalcount(dbtranlist.size() + "");
                    logger.info("Total Count [" + dbtranlist.size() + "]");

                    usertxns = new ArrayList<UserTransaction>();

                    String monthOpeningBal = "0";
                    String monthClosingBal = "0";

                    if (dbtranlist != null && dbtranlist.size() > 0) {
                        logger.info("Transaction records found in db for UserId as Src, processing...");

                        monthOpeningBal = dbtranlist.get(0).getOpeningbalance();
                        monthClosingBal = dbtranlist.get(dbtranlist.size() - 1).getClosingbalance();

                        //m.rehman: 10-11-2021 - Nayapay Optimization
                        //for (MVFinancialLog txn : dbtranlist) { // Asim Shahzad, Date : 12th Oct 2021, Tracking ID : PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301
                        for (WalletCMSWsListingEntity txn : dbtranlist) {
                            //logger.info("Service Name from DB [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "]");
                            try {
                                SwitchTransactionCodes switchTransactionCodes = GlobalContext.getInstance().getTransactionCodeDescbyCode(txn.getServicename());
                                if (switchTransactionCodes != null && switchTransactionCodes.getIsfinancial()) {
                                    UserTransaction utxn = new UserTransaction();
                                    utxn.setTransrefnum(txn.getTranrefnumber());

                                    if (txn.getServicename().contains("Reversal")) {
                                        utxn.setNayapaytype(txn.getServicename());
                                    } else {
                                        utxn.setNayapaytype(Util.hasText(txn.getNayapaytrantype()) ? txn.getNayapaytrantype() : txn.getServicename());
                                    }

                                    utxn.setAcctalias(txn.getAcctalias());

                                    if (Util.hasText(txn.getUsername())) {
                                        utxn.setSrcname(txn.getUsername());
                                    } else {
                                        utxn.setSrcname(txn.getCustomername());
                                    }

                                    utxn.setSrcnayapayid(txn.getNayapayid());
                                    utxn.setDestname(txn.getDestusername());
                                    utxn.setDestnayapayid(txn.getDestnayapayid());
                                    utxn.setCurrency(txn.getCurrency());

                                    utxn.setAmount((Util.hasText(txn.getCbillamount())) ? txn.getCbillamount() : txn.getAmounttransaction());

                                    utxn.setTransdatetime(txn.getTransdatetime());

                                    if (Util.hasText(txn.getBenebankcode())) {
                                        utxn.setBankcode(txn.getBenebankcode());
                                    } else {
                                        utxn.setBankcode(txn.getBankcode());
                                    }


                                    if (Util.hasText(txn.getBenebankaccountno())) {
                                        utxn.setAccountnumber(Util.hasText(txn.getBenebankaccountno()) ? txn.getBenebankaccountno() : "");
                                    } else {
                                        utxn.setAccountnumber(Util.hasText(txn.getAccountnumber()) ? txn.getAccountnumber() : "");
                                    }

                                    utxn.setBranchname(txn.getBranchname());
                                    utxn.setSrcid(txn.getUserid());
                                    utxn.setDestid(txn.getDestuserid());
                                    utxn.setTerminalloc(txn.getTermloc());
                                    utxn.setMapid(txn.getMapid());
                                    utxn.setMerchantid(Util.hasText(txn.getMerchantid()) ? txn.getMerchantid() : txn.getBillerid());
                                    utxn.setMerchantname(Util.hasText(txn.getMerchantname()) ? txn.getMerchantname() : txn.getBillername());
                                    utxn.setDepositorname(txn.getCustomername());
                                    utxn.setBankcharge(txn.getNayapaycharges());

                                    if (Util.hasText(txn.getSlipnumber())) {
                                        utxn.setDepositorslipnumber(txn.getSlipnumber());
                                    }
                                    //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                                    if (Util.hasText(txn.getCardlastdigits())) {
                                        utxn.setCardlastdigits(txn.getCardlastdigits());
                                    }
                                    //===============================================================================================================
                                    if (Util.hasText(txn.getCardscheme())) {
                                        utxn.setCardscheme(txn.getCardscheme());
                                    }
                                    if (Util.hasText(txn.getPosentrymode())) {
                                        utxn.setPosentrymode(txn.getPosentrymode());
                                    }
                                    if (Util.hasText(txn.getTerminalid())) {
                                        utxn.setTerminalid(txn.getTerminalid());
                                    }
                                    if (Util.hasText(txn.getCategoryid())) {
                                        utxn.setMerchantcategorycode(txn.getCategoryid());
                                    }
                                    utxn.setSrccharge(txn.getSrcchargeamount());
                                    utxn.setDestcharge(txn.getDestchargeamount());

                                    utxn.setTaxamount(txn.getNayapaytaxamount());
                                    utxn.setOriginalapi(txn.getOriginalapi());
                                    utxn.setOriginaldatetime(txn.getOrigtransdatetime());
                                    utxn.setOriginalrrn(txn.getOrigretrefno());
                                    utxn.setOriginalstan(txn.getOrigstan());
                                    utxn.setNpticket(txn.getNpticket());
                                    utxn.setVrolticket(txn.getVrolticket());
                                    utxn.setRefundtype(txn.getReserved());

                                    if (
                                            txn.getServicename().equals("LoadWallet") ||
                                                    txn.getServicename().equals("CashDeposit") ||
                                                    txn.getServicename().equals("OnelinkTopupBillPayment") ||
                                                    txn.getServicename().equals("IBFTIn") ||
                                                    (
                                                            wsmodel.getUserid().equals(txn.getDestuserid()) &&
                                                                    (
                                                                            txn.getServicename().equals("WalletTransaction") ||
                                                                                    txn.getServicename().equals("MerchantRefundTransaction") ||
                                                                                    txn.getServicename().equals("DisputeRefundTransaction")
                                                                                    || txn.getServicename().equals("OpenDebitCredit")  //m.rehman: 07-04-2021, VP-NAP-202103292 / VC-NAP-202103293 - Refund Module Part 2 - adding open debit credit
                                                                    )
                                                    )
                                                    ||
                                                    (
                                                            Util.hasText(txn.getOriginalapi()) &&
                                                                    (txn.getOriginalapi().equals("WalletTransaction") ||
                                                                            txn.getOriginalapi().equals("MerchantRefundTransaction") ||
                                                                            txn.getOriginalapi().equals("DisputeRefundTransaction"))
                                                    )
                                                    ||

                                                    (
                                                            Util.hasText(txn.getServicename()) &&
                                                                    txn.getServicename().contains("Reversal")
                                                    )
                                    ) {

                                        //logger.info("Calculating amount received...");

                                        if (Util.hasText(wsmodel.getFromdatetime()) && Util.hasText(wsmodel.getTodatetime())) {
                                            Long receivedAmount = (Util.hasText(wsmodel.getTotalamountreceived()) ? Long.parseLong(wsmodel.getTotalamountreceived()) : 0L);
                                            //logger.info("receivedAmount : [" + receivedAmount + "]");
                                            receivedAmount = receivedAmount + ((Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : ((Util.hasText(txn.getAmounttransaction())) ? Long.parseLong(txn.getAmounttransaction()) : 0L));
                                            receivedAmount = receivedAmount + ((Util.hasText(txn.getSrcchargeamount())) ? Long.parseLong(txn.getSrcchargeamount()) : 0L);
                                            receivedAmount = receivedAmount + ((Util.hasText(txn.getWithholdingtaxamount())) ? Long.parseLong(txn.getWithholdingtaxamount()) : 0L);
                                            wsmodel.setTotalamountreceived(String.valueOf(receivedAmount));
                                            //logger.info("Calculated totalamountreceived : [" + wsmodel.getTotalamountreceived() + "]");
                                        }
                                    } else {

                                        //logger.info("Calculating amount spent...");
                                        if (Util.hasText(wsmodel.getFromdatetime()) && Util.hasText(wsmodel.getTodatetime())) {
                                            Long spentAmount = (Util.hasText(wsmodel.getTotalamountspent()) ? Long.parseLong(wsmodel.getTotalamountspent()) : 0L);
                                            //logger.info("spentAmount : [" + spentAmount + "]");
                                            spentAmount = spentAmount + ((Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : ((Util.hasText(txn.getAmounttransaction())) ? Long.parseLong(txn.getAmounttransaction()) : 0L));
                                            spentAmount = spentAmount + ((Util.hasText(txn.getSrcchargeamount())) ? Long.parseLong(txn.getSrcchargeamount()) : 0L);
                                            spentAmount = spentAmount + ((Util.hasText(txn.getWithholdingtaxamount())) ? Long.parseLong(txn.getWithholdingtaxamount()) : 0L);
                                            wsmodel.setTotalamountspent(String.valueOf(spentAmount));
                                            //logger.info("Calculated totalamountspent : [" + wsmodel.getTotalamountspent() + "]");
                                        }

                                    }

                                    //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                    //adding check for original channel of dispute transaction
                                    if (txn.getChannelid().equals(ChannelCodes.EURONET)
                                            || (Util.hasText(txn.getOrigChannelId()) && txn.getOrigChannelId().equals(ChannelCodes.EURONET))) {
                                        utxn.setAcquiringcurrency(Util.hasText(txn.getTrancurrency()) ? CustomerService.findCurrency(Integer.valueOf(txn.getTrancurrency())).getName() : "");
                                        utxn.setAcquiringamount(Util.hasText(txn.getAmounttransaction()) ? txn.getAmounttransaction() : "");
                                        utxn.setConversionrate(Util.hasText(txn.getSettlementrate()) ? txn.getSettlementrate() : "");


                                        boolean intlFlag = false;
                                        if (Util.hasText(txn.getBranchcode()) &&
                                                (txn.getBranchcode().equals("PSI") || txn.getBranchcode().equals("ESI") || txn.getBranchcode().equals("ATM"))) {
                                            intlFlag = true;
                                        }
                                        utxn.setInternationaltransactionflag(intlFlag);


                                        Long totalAmount = (Util.hasText(txn.getCbillamount())) ? Long.parseLong(txn.getCbillamount()) : 0L;
                                        if (Util.hasText(txn.getSrcchargeamount())) {
                                            totalAmount = totalAmount + Long.parseLong(txn.getSrcchargeamount());
                                        }
                                        if (Util.hasText(txn.getWithholdingtaxamount())) {
                                            totalAmount = totalAmount + Long.parseLong(txn.getWithholdingtaxamount());
                                        }
                                        //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                        //converting to ISO format
                                        utxn.setTotalamount(StringUtils.leftPad(totalAmount.toString(), 12, "0"));

                                        utxn.setBaseamountafterconversion(Util.hasText(txn.getCbillamount()) ? txn.getCbillamount() : "");

                                        //m.rehman: 31-08-2021, VC-NAP-202108231 - Complete transaction details missing in dispute refund transaction
                                        //converting to ISO format
                                        utxn.setForeigntransactionfee((Util.hasText(txn.getSrcchargeamount()) && Util.hasText(txn.getNayapaytaxamount())) ? StringUtils.leftPad(String.valueOf(Long.parseLong(txn.getSrcchargeamount()) - Long.parseLong(txn.getNayapaytaxamount())), 12, "0") : "");

                                        utxn.setTaxappliedonforeigntransactionfee(Util.hasText(txn.getNayapaytaxamount()) ? txn.getNayapaytaxamount() : "");
                                        utxn.setWithholdingtax(Util.hasText(txn.getWithholdingtaxamount()) ? txn.getWithholdingtaxamount() : "");
                                    }

                                    utxn.setJustification(txn.getJustification());

                                    if (Util.hasText(txn.getIban())) {
                                        utxn.setIban(txn.getIban());
                                    }

                                    //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                                    //utxn.setBalancebeforetxn(StringUtils.leftPad(WebServiceUtil.GetWalletTxnBalance(txn.getTranrefnumber(), txn.getTransdatetime(), "asc", usernprel.getAccount()), 12, "0")); // Asim Shahzad, Date : 1st Sep 2021, Tracking : to be logged
                                    //utxn.setBalanceaftertxn(StringUtils.leftPad(WebServiceUtil.GetWalletTxnBalance(txn.getTranrefnumber(), txn.getTransdatetime(), "desc", usernprel.getAccount()), 12, "0")); // Asim Shahzad, Date : 1st Sep 2021, Tracking : to be logged
                                    utxn.setBalancebeforetxn(StringUtils.leftPad(txn.getOpeningbalance(), 12, "0")); // Asim Shahzad, Date : 1st Sep 2021, Tracking : to be logged
                                    utxn.setBalanceaftertxn(StringUtils.leftPad(txn.getClosingbalance(), 12, "0")); // Asim Shahzad, Date : 1st Sep 2021, Tracking : to be logged
                                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                    usertxns.add(utxn);
                                }
                            } catch (Exception e) {
                                logger.error(e);
                                logger.error("Unable to Add Txn [" + txn.getServicename() + "] TxnRefNum [" + txn.getTranrefnumber() + "] to List Reason [" + e.getMessage() + "]");
                            }
                        }
                    } else {
                        logger.error("No Transaction found in DB for Src UserId [" + wsmodel.getUserid() + "]");
                    }

                    wsmodel.setTotalcount((Util.hasText(wsmodel.getTotalcount())) ? wsmodel.getTotalcount() : "0");
                    wsmodel.setUsertransactions(usertxns);

                    //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                    //wsmodel.setMonthstartingbalance(StringUtils.leftPad(WebServiceUtil.GetWalletBalance(new SimpleDateFormat("yyyyMM").format(new SimpleDateFormat("MM/yyyy").parse(wsmodel.getFromdatetime())), new SimpleDateFormat("yyyyMM").format(new SimpleDateFormat("MM/yyyy").parse(wsmodel.getTodatetime())), "asc", usernprel.getAccount()), 12, "0"));
                    //wsmodel.setMonthendingbalance(StringUtils.leftPad(WebServiceUtil.GetWalletBalance(new SimpleDateFormat("yyyyMM").format(new SimpleDateFormat("MM/yyyy").parse(wsmodel.getFromdatetime())), new SimpleDateFormat("yyyyMM").format(new SimpleDateFormat("MM/yyyy").parse(wsmodel.getTodatetime())), "desc", usernprel.getAccount()), 12, "0"));
                    wsmodel.setMonthstartingbalance(StringUtils.leftPad(monthOpeningBal, 12, "0"));
                    wsmodel.setMonthendingbalance(StringUtils.leftPad(monthClosingBal, 12, "0"));
                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                }
            } else {
                logger.error("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ". rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_PRI_DATA_ELEM_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing GetUserWalletStatement..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }
    //////////////////////////////////////////////////////////////////////////////////////////

    //Arsalan Akhter, Date: 23rd-Aug-2021, Tracking ID: VP-NAP-202108091 / VC-NAP-202108093/ VG-NAP-202108091
    public static WalletCMSWsEntity ExecuteSetWalletStatusLock(WalletCMSWsEntity wsmodel) {
        try {
            logger.info("Executing SetWalletStatusLock Request...");

            String dbQuery, status, prevStatus;
            Map<String, Object> params;
            CMSActivityLog cmsActivityLog;

            dbQuery = "from " + NayaPayRelation.class.getName() + " c where c.User_Acct_Id= :USERID";
            params = new HashMap<String, Object>();
            params.put("USERID", wsmodel.getUserid());

            NayaPayRelation nprel = (NayaPayRelation) GeneralDao.Instance.findObject(dbQuery, params);

            if (nprel != null) {
                if (nprel.getAccount().getStatus().equals("03") || nprel.getAccount().getStatus().equals("04") ||
                        nprel.getAccount().getStatus().equals("07") || nprel.getAccount().getStatus().equals("09") ||
                        nprel.getAccount().getStatus().equals("90")) {
                    logger.error("Account already locked, not updating Status! rejecting...");
                    wsmodel.setRespcode(ISOResponseCodes.NP_INVALID_OPERATION);
                    return wsmodel;
                } else {
                    logger.info("Locking Account ....");

                    prevStatus = nprel.getAccount().getStatus();
                    nprel.getAccount().setStatus("03");
                    nprel.getAccount().setLastUpdateDate(new Date());
                    GeneralDao.Instance.saveOrUpdate(nprel.getAccount());

                    logger.info("Saving wallet activity ....");
                    cmsActivityLog = new CMSActivityLog();
                    cmsActivityLog.setRelation(nprel.getAccount().getAccountNumber());
                    cmsActivityLog.setPreviousStatus(prevStatus);
                    cmsActivityLog.setCurrentStatus(nprel.getAccount().getStatus());
                    cmsActivityLog.setSourceType("API");
                    cmsActivityLog.setSourceName(wsmodel.getServicename());
                    cmsActivityLog.setActivityDateTime(DateTime.now());
                    GeneralDao.Instance.saveOrUpdate(cmsActivityLog);

                    wsmodel.setRespcode(ISOResponseCodes.APPROVED);
                    return wsmodel;
                }
            } else {
                logger.info("No Account Relation Found for UserId [ " + wsmodel.getUserid() + ", cannot Lock wallet. rejecting...");
                wsmodel.setRespcode(ISOResponseCodes.NP_SRC_NOT_FOUND); //90 Customer not found
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);
            logger.error("Exception caught while Executing SetWalletStatusLock..!");
            wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
            return wsmodel;
        }
    }
    //===============================================================================================

    //m.rehman: 10-12-2021 - VP-NAP-202111291 / VC-NAP-202111291 / VG-NAP-202111291 - Meezan ATM On-Us Withdrawal/Balance Inquiry and Reversal
    @Transactional
    public static WalletCMSWsEntity ExecuteOnUsATMCashWithdrawalReversal(WalletCMSWsEntity wsmodel) {
        logger.info("Executing OnUsATMCashWithdrawalReversal Request...");

        try {
            String dbQuery;
            Map<String, Object> params;

            //find original transaction first
            dbQuery = "from " + WalletCMSWsEntity.class.getName() + " c where c.cardnumber= :CARDNO " +
                    "and c.amounttransaction= :AMOUNT " +
                    "and c.tranrefnumber= :TRANREFNUM " +
                    "and c.terminalid= :TERMID " +
                    "order by c.id desc ";
            params = new HashMap<String, Object>();
            params.put("CARDNO", wsmodel.getCardnumber());
            params.put("TRANREFNUM", wsmodel.getOrigdataelement());
            params.put("AMOUNT", wsmodel.getAmounttransaction());
            params.put("TERMID", wsmodel.getTerminalid());

            //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
            //WalletCMSWsEntity origTransaction = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params);
            WalletCMSWsEntity origTransaction = (WalletCMSWsEntity) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);
            if (origTransaction == null) {
                logger.error("Original transaction not found with Ref Num [" + wsmodel.getOrigdataelement() + "], returning ...");
                wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_TRANSACTION_NOT_FOUND); //30 Original transaction not found - refer document
                wsmodel.setMessage("Original Transaction not found");
                return wsmodel;

            } else if (origTransaction != null && origTransaction.getRespcode().equals(ISOResponseCodes.ACQUIRER_REVERSAL)) {
                logger.error("Original transaction found and already reversed with Ref Num [" + wsmodel.getOrigdataelement() + "], returning ...");
                wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_ALREADY_REVERSED); //35 Already reversed - refer document
                wsmodel.setMessage("Original Transaction is already reversed");

                return wsmodel;

            } else if (origTransaction != null && !origTransaction.getRespcode().equals(ISOResponseCodes.APPROVED)) {
                logger.error("Original transaction found but is not Approved with Ref Num [" + wsmodel.getOrigdataelement() + "], returning ...");
                wsmodel.setRespcode(ISOResponseCodes.ORIGINAL_NOT_AUTHORIZED); //34 Original Not Authorized - refer document
                wsmodel.setMessage("Original Transaction is not approved");
                return wsmodel;

            } else {
                logger.info("Original Transaction found with Approved response ...");
            }

            if (Util.hasText(wsmodel.getCardnumber())) {
                dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO " +
                        " order by c.id desc ";
                params = new HashMap<String, Object>();
                params.put("CARDNO", wsmodel.getCardnumber());

                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                //CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);
                CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                if (card == null) {
                    logger.error("Card not Found in DB with CardNo [" + wsmodel.getCardnumber() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                    wsmodel.setMessage("INVALID ACCOUNT");
                    return wsmodel;
                } else {
                    //Arsalan Akhter, Date: 17-Nov-2021, Ticket: VP-NAP-202111091(Transaction Reversal not Posted on WCMS UI-Production)
//                    if(!card.getCardStatus().equals("00"))
//                    {
//                        logger.error("Inactive Card Found in DB with CardNo [" + wsmodel.getCardnumber() + "] Status [" + card.getCardStatus() + "]");
//                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12 - Invalid Card Status ; Refer to Doc
//                        return wsmodel;
//                    }
//
//                    else
//                    {
                    //==================================================================================================================

                    //Raza Account & Customer Status validation start ; TODO should be updated


                    if (card.getList_CustAccounts() == null) {
                        logger.error("No Account Found for CardNo [" + wsmodel.getCardnumber() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                        wsmodel.setMessage("INVALID ACCOUNT");
                        return wsmodel;
                    }

                    CMSAccount account = null; //TODO: Raza should Update THIS with default
                    for (CMSAccount acct : card.getList_CustAccounts()) {
                        account = acct;
                        //Arsalan Akhter, Date: 17-Nov-2021, Ticket: VP-NAP-202111091(Transaction Reversal not Posted on WCMS UI-Production)
                        //if(!acct.getStatus().equals("00") || !acct.getCustomer().getStatus().equals("00"))
                        if (acct != null && acct.getStatus().equals("04") //Fraud Block
                                && acct.getStatus().equals("07") //KYC Block
                                && acct.getStatus().equals("09") //AML Block
                                && acct.getStatus().equals("90") //Admin Block
                                && !acct.getCustomer().getStatus().equals("00"))
                        //==================================================================================================================
                        {
                            logger.error("Inactive Account or Customer Found in DB for CardNo [" + wsmodel.getCardnumber() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_INACTIVE); //32 - Inactive Account/Customer Status ; Refer to Doc
                            wsmodel.setMessage("ACCOUNT INACTIVE");
                            return wsmodel;
                        }
                    }
                    //Raza Account & Customer Status validation end ; TODO should be updated

                    ///m.rehman: 24-02-2021, VP-NAP-202102101 / VC-NAP-202102101 - Visa - Switch Middleware Integration Document V_4.7.7-A - Release 1
                    if (account == null) {
                        //m.rehman: 15-07-2021, VC-NAP-202107151 - Total amount not crediting in Visa Local Cash Withdrawal/ECommerce reversal amount not crediting in wallet
                        //adding category
                        dbQuery = "from " + CMSAccount.class.getName() + " a where a.customer = :CUST_ID  and a.category = 'WLLT' ";
                        params = new HashMap<>();
                        params.put("CUST_ID", card.getCustomer());
                        account = (CMSAccount) GeneralDao.Instance.findObject(dbQuery, params);
                    }
                    /////////////////////////////////////////////////////////////////////////////////////////

                    //Arsalan Akhter, Date: 17-Nov-2021, Ticket: VP-NAP-202111091(Transaction Reversal not Posted on WCMS UI-Production)
                    //if(!acct.getStatus().equals("00") || !acct.getCustomer().getStatus().equals("00"))
                    if (account != null && account.getStatus().equals("04") //Fraud Block
                            && account.getStatus().equals("07") //KYC Block
                            && account.getStatus().equals("09") //AML Block
                            && account.getStatus().equals("90") //Admin Block
                            && !account.getCustomer().getStatus().equals("00")) {
                        logger.error("Inactive Account or Customer Found in DB for CardNo [" + wsmodel.getCardnumber() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_INACTIVE); //32 - Inactive Account/Customer Status ; Refer to Doc
                        wsmodel.setMessage("ACCOUNT INACTIVE");
                        return wsmodel;
                    }
                    //==================================================================================================================

                    //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                    account = (CMSAccount) GeneralDao.Instance.getCurrentSession().get(CMSAccount.class, account.getId(), LockMode.UPGRADE);
                    GeneralDao.Instance.getCurrentSession().refresh(account);
                    ////////////////////////////////////////////////////////////////////////////////////

                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                    params = new HashMap<String, Object>();
                    params.put("relation", card.getCardNumberExpiryRelation());
                    params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                    CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                    if (cardrelation == null) {
                        logger.error("Card Relation not found for relation [" + card.getCardNumberExpiryRelation() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_RECORD); //Invalid Card Record ; Raza update THIS
                        wsmodel.setMessage("INVALID CARD RECORD");
                        return wsmodel;
                    }

                    if (Long.parseLong(wsmodel.getAmounttransaction()) <= 0) {
                        logger.error("Invalid Amount for Withdrawal Transaction, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.LOW_BALANCE); //04 - Low Balance ; refer to Doc
                        wsmodel.setMessage("LOW BALANCE");
                        return wsmodel;
                    }

                    logger.info("Going to Reverse Withdrawal Cash in Wallet...");

                    //m.rehman: 30-09-2020, VP-NAP-202009241 - Original and Reversed transaction in transaction listing
                    //setting original api in reversal for listing purpose
                    wsmodel.setOriginalapi(origTransaction.getServicename());
                    //////////////////////////////////////////////////////////////////////////////////////////////////

                    wsmodel.setNayapaycharges(origTransaction.getNayapaycharges());
                    wsmodel.setNayapaytaxamount(origTransaction.getNayapaytaxamount());
                    wsmodel.setBankcharges(origTransaction.getBankcharges());
                    wsmodel.setBanktaxamount(origTransaction.getBanktaxamount());
                    wsmodel.setSrcchargeamount(origTransaction.getSrcchargeamount());
                    wsmodel.setAmttranfee(origTransaction.getAmttranfee());

                    //Arsalan Akhter, Date: 29-June-2021, Added for listing purpose
                    wsmodel.setOrigretrefno(origTransaction.getRrn());
                    wsmodel.setOrigstan(origTransaction.getStan());
                    wsmodel.setOrigtransdatetime(origTransaction.getTransdatetime());
                    //===============================================================

                    //Arsalan Akhter, Date: 12-Aug-2021, Tikcet: VC-NAP-202108121(Missing details in reversal transactions)
                    //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                    wsmodel.setCardlastdigits(Util.hasText(origTransaction.getCardlastdigits()) ?
                            origTransaction.getCardlastdigits() : "");
                    //===============================================================================================================

                    wsmodel.setCardscheme(Util.hasText(origTransaction.getCardscheme()) ?
                            origTransaction.getCardscheme() : "");
                    //==============================================================================================


                    //Huzaifa Adding Fields for Reversal - 15012024
                    wsmodel.setBankcharges(origTransaction.getBankcharges());
                    wsmodel.setBalanceinquirycharges(origTransaction.getBalanceinquirycharges());
                    wsmodel.setReceiptcharges(origTransaction.getReceiptcharges());

                    //m.rehman: Euronet Integration
                    boolean fmFlag = false;
                    String channelid = wsmodel.getChannelid();
                    fmFlag = FinanceManager.CNICBasedCashWithdrawalOnUSReversal(wsmodel, account);

                    if (fmFlag) {
                        logger.info("Reversal from Wallet Done successfully!");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        //process wallet limit
                        logger.info("Reversing Limit ...");
                        if (!WalletCMSFunctions.ProcessDebitWalletLimit(origTransaction, account, card, Boolean.FALSE)) {
                            logger.error("Limit reversing failed, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED);
                            wsmodel.setMessage("PERMISSION DENIED");
                            return wsmodel;
                        }

                        logger.info("Setting Reversal Response Code to Original transaction ...");
                        origTransaction.setRespcode(ISOResponseCodes.ACQUIRER_REVERSAL);    //36 - Acquirer Reversal
                        GeneralDao.Instance.saveOrUpdate(origTransaction);
                        logger.info("Reversal from Wallet Done successfully!");
                        if (account.getCategory() != null && account.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                            wsmodel.setMerchantid(account.getUserId());
                        } else {
                            wsmodel.setUserid(account.getUserId());
                        }
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                        wsmodel.setIncludeinstatement(1);
                        wsmodel.setNayapaytrantype(wsmodel.getServicename());
                        ////////////////////////////////////////////////////////////////////////////////////////////////////

                        //m.rehman: 10-11-2021, Nayapay Optimization
                        //find original transaction first
                        dbQuery = "from " + WalletCMSWsListingEntity.class.getName() + " c where c.cardnumber= :CARDNO " +
                                "and c.amounttransaction= :AMOUNT " +
                                "and c.tranrefnumber= :TRANREFNUM " +
                                "and c.terminalid= :TERMID " +
                                "order by c.id desc ";
                        params = new HashMap<String, Object>();
                        params.put("CARDNO", wsmodel.getCardnumber());
                        params.put("TRANREFNUM", wsmodel.getOrigdataelement());
                        params.put("AMOUNT", wsmodel.getAmounttransaction());
                        params.put("TERMID", wsmodel.getTerminalid());

                        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                        //WalletCMSWsListingEntity origTransaction = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, params);
                        WalletCMSWsListingEntity oriTxnListing = (WalletCMSWsListingEntity) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                        if (oriTxnListing != null) {

                            logger.info("Original transaction listing found, updating status ...");
                            oriTxnListing.setRespcode(ISOResponseCodes.ACQUIRER_REVERSAL);
                            GeneralDao.Instance.saveOrUpdate(oriTxnListing);
                        } else {
                            logger.error("Original transaction listing not found ...");
                        }
                        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

                        return wsmodel;

                    } else {
                        //process wallet limit
                        String respCode = wsmodel.getRespcode();
                        try{
                            logger.info("Unable to Reverse in Wallet... **********Manual Process Required!**********");
                            if (!WalletCMSFunctions.ProcessDebitWalletLimit(origTransaction, account, card, Boolean.TRUE))
                            {
                                logger.error("Limit reversing failed, rejecting...");
                                // Moiz, Date : 25th July 2024, Desc : Added for ORA-0001 issue
								//wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED);
                                //wsmodel.setMessage("PERMISSION DENIED");
                                //return wsmodel;
                            }

                        }
                        catch (Exception e){
                            // Moiz, Date : 25th July 2024, Desc : Added for ORA-0001 issue
							logger.error("Exception caught while reversing limit, ignoring...");
                            logger.error(WebServiceUtil.getStrException(e));
                        }
                        wsmodel.setRespcode(respCode);
                        wsmodel.setMessage("LOW BALANCE/UNABLE TO PROCESS");
                        return wsmodel;
                    }
                    //}//Arsalan Akhter, Date: 17-Nov-2021, Ticket: VP-NAP-202111091(Transaction Reversal not Posted on WCMS UI-Production)
                }
            } else {
                logger.error("No Identifier Found for NayaPay customer");
                wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                wsmodel.setMessage("INVALID ACCOUNT");
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(e);//s.mehtab on 25-11-2020
            logger.error("Exception caught while Executing OnUsATMCashWithdrawalReversal..!");
            logger.error(WebServiceUtil.getStrException(e));
            wsmodel.setRespcode(ISOResponseCodes.UNABLE_TO_PROCESS); //46 - Unable to process -- refer to document
            wsmodel.setMessage("UNABLE TO PROCESS");
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        // Moiz, Date : 25th July 2024, Desc : Added for ORA-0001 issue
		/*finally {
            GeneralDao.Instance.endTransaction();
            GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
        }
         */
    }


    // Asim Shahzad, Date : 6th June 2023, Tracking ID : VP-NAP-202303091
    @Transactional
    public static WalletCMSWsEntity ExecuteOnUsCashWithDrawalInquiry(WalletCMSWsEntity wsmodel) {
        logger.info("Executing OnUsCashWithDrawalInquiry Request...");
        try {
            String dbQuery;
            Map<String, Object> params;

            if (Util.hasText(wsmodel.getBranchname())) {
                wsmodel.setBankcode(wsmodel.getBranchname());
            }
            DateFormat dateFormat = new SimpleDateFormat("yyyyMM");//Added By Huzaifa 11-07-2024

            if (Util.hasText(wsmodel.getCardnumber())) {
                //m.rehman: 10-12-2021 - VP-NAP-202111291 / VC-NAP-202111291 / VG-NAP-202111291 - Meezan ATM On-Us Withdrawal/Balance Inquiry and Reversal
                // Huzaifa: 11/08/2023: FW: NAP-P5-23 ==> [ Logging email ] ==> Segregation of ATM On Us Channels Bank - UBL & BAFL
                if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.UNILONUSATM) && !Util.hasText(wsmodel.getCardexpiry())) {
                    dbQuery = "from " + CMSCard.class.getName() + " c where " +
                            " c.cardNumber= :CARDNO " +
                            //" and c.cardStatus= '00' " + // Arsalan Akhter, Date: 27-Oct-2022, Ticket ID: VP-NAP-202206212 / VC-NAP-202206211
                            " order by c.id desc ";
                    params = new HashMap<String, Object>();
                    params.put("CARDNO", wsmodel.getCardnumber());

                } else {
                    //dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO ";
                    dbQuery = "from " + CMSCard.class.getName() + " c where " +
                            " c.cardNumber= :CARDNO " +
                            " and substr(c.expiryDate,3,4) = :EXPDATE ";
                    params = new HashMap<String, Object>();
                    params.put("CARDNO", wsmodel.getCardnumber());
                    params.put("EXPDATE", wsmodel.getCardexpiry());
                }

                //m.rehman: 21-03-2023 - VP-NAP-202303171 - Notification Issues - Production Urgent
                //reverting lock on cms card
                //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);
                //CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params, "c", LockMode.UPGRADE);

                if (card == null) {
                    logger.error("Card not Found in DB with CardNo [" + wsmodel.getCardnumber() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                    wsmodel.setMessage("INVALID ACCOUNT");
                    return wsmodel;
                }
                //Added By Huzaifa 11-07-2024
                else if (Long.parseLong(((card.getExpiryDate()).substring(0,6))) < Long.parseLong(dateFormat.format(new Date()))){
                    logger.error("Card is Expired");
                    wsmodel.setRespcode(ISOResponseCodes.CARD_EXPIRED); //Raza Refer to Document '02' no account
                    return wsmodel;
                }
                else
                {
                    //m.rehman: 21-03-2023 - VP-NAP-202303171 - Notification Issues - Production Urgent
                    String cardType = "", cardScheme = "";
                    if ("7702".equals(card.getProduct().getProductId())) {
                        cardType = "Visa Physical";
                        cardScheme = "Visa";
                    } else if ("7703".equals(card.getProduct().getProductId())) {
                        cardType = "Visa Virtual";
                        cardScheme = "Visa";
                    } else {
                        cardType = "PayPak Physical";
                        cardScheme = "PayPak";
                    }

                    wsmodel.setCardscheme(cardScheme);
                    wsmodel.setCardtype(cardType);
                        //////////////////////////////////////////////////////////////////////////////////////



                    wsmodel.setCardnumber(card.getCardNumber());
                    ///////////////////////////////////////////////////////////////////////////////////////

                    //m.rehman: 10-02-2021, VP-NAP-202011102/ VC-NAP-202011101 - Document version 4.7.3 [Updates]
                    ////////////////////////////////////////////////////////////////////////////////////////////
                    if (card.getList_CustAccounts() == null) {
                        logger.error("No Account Found for CardNo [" + wsmodel.getCardnumber() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                        wsmodel.setMessage("INVALID ACCOUNT");
                        return wsmodel;
                    }


                    CMSAccount account = null; //TODO: Raza should Update THIS with default
                    for (CMSAccount acct : card.getList_CustAccounts()) {
                        account = acct;
                        if (!acct.getStatus().equals("00") || !acct.getCustomer().getStatus().equals("00")) {
                            logger.error("Inactive Account or Customer Found in DB for CardNo [" + wsmodel.getCardnumber() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_INACTIVE); //32 - Inactive Account/Customer Status ; Refer to Doc
                            wsmodel.setMessage("ACCOUNT INACTIVE");
                            return wsmodel;
                        }
                    }
                    //Raza Account & Customer Status validation end ; TODO should be updated

                    if (account == null) {
                        logger.error("No account linked to debit card, rejecting ...");
                        wsmodel.setRespcode(ISOResponseCodes.NO_ACCOUNTS_LINKED);
                        wsmodel.setMessage("NO ACCOUNTS LINKED");
                        return wsmodel;
                    }

                    //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                    account = (CMSAccount) GeneralDao.Instance.getCurrentSession().get(CMSAccount.class, account.getId(), LockMode.UPGRADE);
                    GeneralDao.Instance.getCurrentSession().refresh(account);
                    ////////////////////////////////////////////////////////////////////////////////////

                    //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                    if (account.getCategory() != null && account.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                        wsmodel.setMerchantid(account.getUserId());
                    } else {
                        wsmodel.setUserid(account.getUserId());
                    }
                    ////////////////////////////////////////////////////////////////////////////////////////////

                    logger.info("User ID: [" + wsmodel.getUserid() + "]");

                    wsmodel.setAcctbalance(account.getAvailableBalance());

                    //Arsalan Akhter, Ticket# VP-NAP-202102111 / VG-NAP-202102111, Date: 31-May-2021(Need to cater acquiring country code for card based transactions)
                    if (!card.getCardStatus().equals("00")) {
                        if (card.getCardStatus().equals("90")) {
                            logger.error("Card in Blocked State, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.HOT_CARD); //15-Hot Card ; Refer to Doc
                            wsmodel.setMessage("HOT CARD");
                            // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                            wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                            // ====================================================================================
                            //m.rehman: 25-06-2021, Visa certification
                            //return wsmodel;
                        } else if (card.getCardStatus().equals("03")) {
                            logger.error("Card in Warm State, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.WARM_CARD); //14-Warm Card ; Refer to Doc
                            wsmodel.setMessage("WARM CARD");
                            // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                            wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                            // ====================================================================================
                            //m.rehman: 25-06-2021, Visa certification
                            //return wsmodel;
                        } else {
                            logger.error("Invalid Card Auth Status [ " + card.getCardStatus() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.BAD_CARD_STATUS); //16-BadCardStatus ; Refer to Doc
                            wsmodel.setMessage("BAD STATUS");
                            // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                            wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                            // ====================================================================================
                            //m.rehman: 25-06-2021, Visa certification
                            //return wsmodel;
                        }

                        //m.rehman: 25-06-2021, Visa certification
                        if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
                            if (Util.hasText(wsmodel.getIcccarddata())) {
                                //TODO: need to update below according to scheme requirement
                                //setting icc data without 9F26 (Application Cryptogram) tag for 1Link
                                String iccData = wsmodel.getIcccarddata();
                                String iccDataUpdate;
                                int index = iccData.indexOf(EMVTags.APP_CRYPT);
                                iccDataUpdate = iccData.substring(0, index);
                                iccDataUpdate += iccData.substring(index + 22, iccData.length());
                                wsmodel.setIcccarddata(iccDataUpdate);
                            }

                            String emvData = wsmodel.getSelfdefinedata();
                            if (Util.hasText(emvData))
                                emvData = emvData.substring(0, 2) + "0";
                            wsmodel.setSelfdefinedata(emvData);
                        }

                        return wsmodel;
                        ////////////////////////////////////////////////////////////////////////////////////////////////
                    }

                    //=======================================================================================================

                    //m.rehman: 21-01-2020, VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 - VISA (Switch-Middleware Integration document v 4.7.6) - Release 4
                    //checking operation permission on card
                    if (!WalletCMSFunctions.CheckCardControls(wsmodel, card)) {
                        logger.error("Transaction not allowed on this card, rejecting ...");
                        wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED);
                        wsmodel.setMessage("PERMISSION DENIED");
                        return wsmodel;
                    }

                    // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                    // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                    String PAN = WebServiceUtil.getPANDecryptedValue(wsmodel.getCardnumber());

                    //TODO: remove this logging
                    logger.debug("PAN: " + PAN);

                    // Asim Shahzad, Date : 29th Sep 2020, Tracking ID : VC-NAP-202009251 / VP-NAP-202009251
                    //String Bin = PAN.substring(0,6);
                    String Bin = PAN.substring(0, 8);
                    // ======================================================================================

                    dbQuery = "from " + IMD.class.getName() + " n where " +
                            "n.IMD = :CARD_BIN ";
                    params = new HashMap<String, Object>();
                    params.put("CARD_BIN", Bin);

                    IMD obj_Bin = (IMD) GeneralDao.Instance.findObject(dbQuery, params);

                    if (null == obj_Bin) {
                        Bin = PAN.substring(0, 6);

                        dbQuery = "from " + IMD.class.getName() + " n where " +
                                "n.IMD = :CARD_BIN ";
                        params = new HashMap<String, Object>();
                        params.put("CARD_BIN", Bin);

                        obj_Bin = (IMD) GeneralDao.Instance.findObject(dbQuery, params);
                    }

                    //m.rehman: 23-02-202, Euronet integration
                    if (obj_Bin != null) {
                        wsmodel.setCardscheme(obj_Bin.getCardScheme());
                    }

                    // =====================================================================================

                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                    params = new HashMap<String, Object>();
                    params.put("relation", card.getCardNumberExpiryRelation());
                    params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                    CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                    if (cardrelation == null) {
                        logger.error("Card Relation not found for relation [" + card.getCardNumberExpiryRelation() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_RECORD); //Invalid Card Record ; Raza update THIS
                        wsmodel.setMessage("INVALID CARD RECORD");
                        return wsmodel;
                    }

                    //m.rehman: setting last digits in WSEntity object for verification after decryption
                    wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                    //m.rehman: Euronet Integration
                    if (!(Util.hasText(wsmodel.getPosentrymode()) &&
                            (wsmodel.getPosentrymode().substring(0, 2).equals(ISOPOSEntryMode.PANEntryMode.MANUAL_ENTRY)
                                    || wsmodel.getPosentrymode().substring(2, 3).equals(ISOPOSEntryMode.PINEntryCapability.TERMINAL_CANNOT_ACCEPT_PINS)))) {
                         //Commented By Waleed
                        if (!WalletCMSFunctions.ValidateCardPIN(wsmodel, cardrelation)) {
                            logger.error("PIN validation failed, rejecting...");
                            //wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc

                            if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
                                if (Util.hasText(wsmodel.getIcccarddata())) {
                                    //TODO: need to update below according to scheme requirement
                                    //setting icc data without 9F26 (Application Cryptogram) tag for 1Link
                                    String iccData = wsmodel.getIcccarddata();
                                    String iccDataUpdate;
                                    int index = iccData.indexOf(EMVTags.APP_CRYPT);
                                    iccDataUpdate = iccData.substring(0, index);
                                    iccDataUpdate += iccData.substring(index + 22, iccData.length());
                                    wsmodel.setIcccarddata(iccDataUpdate);
                                }

                                String emvData = wsmodel.getSelfdefinedata();
                                if (Util.hasText(emvData))
                                    emvData = emvData.substring(0, 2) + "0";
                                wsmodel.setSelfdefinedata(emvData);
                            }
                            wsmodel.setMessage("INVALID PIN/PIN VALIDATION FAILED");
                            return wsmodel;
                        }

                    }
                    logger.info("PIN validated successfully or Transaction is Manual Cash ...");

                    if (WalletCMSFunctions.CVVCheckRequired(wsmodel) || WalletCMSFunctions.ICVVCheckRequired(wsmodel)) {
                        //Commented By Waleed
                       if (!WalletCMSFunctions.ValidateCVV(wsmodel, cardrelation, true)) {
                            logger.error("CVV/ICVV validation failed, rejecting...");

                            //m.rehman: Euronet Integration
                            if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
                                if (Util.hasText(wsmodel.getIcccarddata())) {
                                    //TODO: need to update below according to scheme requirement
                                    //setting icc data without 9F26 (Application Cryptogram) tag for 1Link
                                    String iccData = wsmodel.getIcccarddata();
                                    String iccDataUpdate;
                                    int index = iccData.indexOf(EMVTags.APP_CRYPT);
                                    iccDataUpdate = iccData.substring(0, index);
                                    iccDataUpdate += iccData.substring(index + 22, iccData.length());
                                    wsmodel.setIcccarddata(iccDataUpdate);
                                }

                                String emvData = wsmodel.getSelfdefinedata();
                                if (Util.hasText(emvData))
                                    emvData = emvData.substring(0, 2) + "0";
                                wsmodel.setSelfdefinedata(emvData);
                            }
                            return wsmodel;
                        }

                        logger.info("CVV/ICVV validated successfully");
                    }

                    if (Util.hasText(wsmodel.getIcccarddata())) {
                         //Commented By Waleed
                        if (!WalletCMSFunctions.ValidateCryptogram(wsmodel, cardrelation)) {
                            logger.error("Cryptogram validation failed, rejecting...");
                            //wsmodel.setRespcode(ISOResponseCodes.SECURITY_VIOLATION); //24-BAD PIN; refer to Doc
                            return wsmodel;
                        }

                        logger.info("Cryptogram validated successfully");
                    } else if (Util.hasText(wsmodel.getPosentrymode()) && wsmodel.getPosentrymode().substring(0, 2).equals(ISOPOSEntryMode.PANEntryMode.ICC_READ_FAIL_MST_READ)) {
                        //m.rehman: Euronet Integration
//                        if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
//                            logger.error("Fallback case: Cryptogram validation not performed!");
//                            String emvData = wsmodel.getSelfdefinedata();
//                            if (Util.hasText(emvData))
//                                emvData = emvData.substring(0, 2) + "0";
//                            wsmodel.setSelfdefinedata(emvData);
//                        }
                    }

                    if (Util.hasText(wsmodel.getAmounttransaction())) //This check is added by waleed on Huzaifa's recommendation :24/05/2024
                    {
                        if (Long.parseLong(wsmodel.getAmounttransaction()) <= 0) {
                            logger.error("Invalid Amount for Withdrawal Transaction, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.LOW_BALANCE); //04 - Low Balance ; refer to Doc
                            wsmodel.setMessage("LOW BALANCE");
                            return wsmodel;
                        }

                        //Huzaifa added, before verifying limits and adding charges at NayaPay's insistence.
                        Long AcctAvailBalance = Long.parseLong(account.getAvailableBalance());
                        Long finalAmount = Long.parseLong(wsmodel.getAmounttransaction());
                        if (finalAmount > AcctAvailBalance) {
                            logger.error("Insufficient Amount for CashWithdrawal Transaction, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.NP_SRC_INSUFFICEIENT_BALANCE); //04 - Low Balance ; refer to Doc
                            // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                            wsmodel.setAcctbalance(AcctAvailBalance.toString());
                            // ====================================================================================
                            return wsmodel;
                        }

                        //m.rehman: 04-12-2023, NAP-P7-23 / VP-NAP-202405061 - Switch-middleware integration v 5.1.9 (Cash Withdrawal Limit for L1)
                        dbQuery = "from " + SystemConfig.class.getName() + " c where c.identifier= :IDF ";
                        params = new HashMap<String, Object>();
                        params.put("IDF", "CASH_WITHDRAWAL_UPPER_BOUND_LIMIT");

                        SystemConfig systemConfig = (SystemConfig) GeneralDao.Instance.findObject(dbQuery, params);

                        if (systemConfig != null && Long.parseLong(wsmodel.getAmounttransaction()) > Long.parseLong(systemConfig.getValue())) {
                            logger.error("Transaction Amount is Greater That Upper Bound Limit for Withdrawal Transaction, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.LIMIT_EXCEEDED); //04 - Low Balance ; refer to Doc
                            wsmodel.setMessage("LIMIT EXCEEDED");
                            return wsmodel;
                        }
                        //================================================================================================

                    }
                }

                List<CardObject> listCardObj = new ArrayList<>();
                CardObject objCard = new CardObject();
                objCard.setCardexpiry(card.getExpiryDate());
                objCard.setCardstatus(card.getCardStatus());

                if (card.getProduct().getProductType().equals("CARD_LVL0") || card.getProduct().getProductType().equals("CARD_LVL1")) {
                    objCard.setCardtype("paypak_physical");
                }
                if (card.getProduct().getProductType().equals("VISA_DEBIT")) {
                    objCard.setCardtype("visa_physical");
                }
                if (card.getProduct().getProductType().equals("VISA_VIRTUAL")) {
                    objCard.setCardtype("visa_virtual");
                }
                listCardObj.add(objCard);
                wsmodel.setCardobjectlist(listCardObj);
            } else {
                logger.error("No Identifier Found for NayaPay customer");
                wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                wsmodel.setMessage("INVALID ACCOUNT");
                return wsmodel;
            }


            wsmodel.setRespcode(ISOResponseCodes.APPROVED);
            return wsmodel;
        } catch (Exception e) {
            logger.error(WebServiceUtil.getStrException(e));
            logger.error(e);
            logger.error("Exception caught while Executing OnUsCashWithDrawalInquiry..!");
            wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT);
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
        finally {
//            try {
//                GeneralDao.Instance.endTransaction();
//                GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
//            } catch (Exception e) {
//                logger.error(e);//s.mehtab on 25-11-2020
//                logger.error(WebServiceUtil.getStrException(e));
//                logger.error("Exception caught while committing ..!");
//                wsmodel.setRespcode(ISOResponseCodes.NP_AUTHENTICATION_FAILED);
//                return wsmodel;
//            }
        }
    }

    // ===========================================================================================
    //Added by Huzaifa VP-NAP-202405061 => link CW (OffUs) channel Limit Authentication Change

    @Transactional
    public static WalletCMSWsEntity ExecuteOnUsCashWithDrawal(WalletCMSWsEntity wsmodel) {
        logger.info("Executing On Us CashWithdrawal Request...");
        try {
            String dbQuery;
            Map<String, Object> params;

            if (Util.hasText(wsmodel.getCardnumber())) {
                // Huzaifa: 11/08/2023: FW: NAP-P5-23 ==> [ Logging email ] ==> Segregation of ATM On Us Channels Bank - UBL & BAFL
                if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.UNILONUSATM) && !Util.hasText(wsmodel.getCardexpiry())) {
                    dbQuery = "from " + CMSCard.class.getName() + " c where " +
                            " c.cardNumber= :CARDNO " +
                            //" and c.cardStatus= '00' " + // Arsalan Akhter, Date: 27-Oct-2022, Ticket ID: VP-NAP-202206212 / VC-NAP-202206211
                            " order by c.id desc ";
                    params = new HashMap<String, Object>();
                    params.put("CARDNO", wsmodel.getCardnumber());

                } else {
                    //dbQuery = "from " + CMSCard.class.getName() + " c where c.cardNumber= :CARDNO ";
                    dbQuery = "from " + CMSCard.class.getName() + " c where " +
                            " c.cardNumber= :CARDNO " +
                            " and substr(c.expiryDate,3,4) = :EXPDATE ";
                    params = new HashMap<String, Object>();
                    params.put("CARDNO", wsmodel.getCardnumber());
                    params.put("EXPDATE", wsmodel.getCardexpiry());
                }

                CMSCard card = (CMSCard) GeneralDao.Instance.findObject(dbQuery, params);

                if (card == null) {
                    logger.error("Card not Found in DB with CardNo [" + wsmodel.getCardnumber() + "]");
                    wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                    wsmodel.setMessage("INVALID ACCOUNT");
                    return wsmodel;
                } else {

                    //m.rehman: 21-03-2023 - VP-NAP-202303171 - Notification Issues - Production Urgent
                    String cardType = "", cardScheme = "";
                    if ("7702".equals(card.getProduct().getProductId())) {
                        cardType = "Visa Physical";
                        cardScheme = "Visa";
                    } else if ("7703".equals(card.getProduct().getProductId())) {
                        cardType = "Visa Virtual";
                        cardScheme = "Visa";
                    } else {
                        cardType = "PayPak Physical";
                        cardScheme = "PayPak";
                    }

                    wsmodel.setCardtype(cardType);
                    wsmodel.setCardscheme(cardScheme);
                    wsmodel.setCardnumber(card.getCardNumber());
                    ///////////////////////////////////////////////////////////////////////////////////////

                    //Arsalan Akhter, Ticket# VP-NAP-202102111 / VG-NAP-202102111, Date: 31-May-2021(Need to cater acquiring country code for card based transactions)
                    if (!card.getCardStatus().equals("00")) {
                        if (card.getCardStatus().equals("90")) {
                            logger.error("Card in Blocked State, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.HOT_CARD); //15-Hot Card ; Refer to Doc
                            wsmodel.setMessage("HOT CARD");
                            // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                            //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                            wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                            //===============================================================================================================
                            // ====================================================================================
                            //m.rehman: 25-06-2021, Visa certification
                            //return wsmodel;
                        } else if (card.getCardStatus().equals("03")) {
                            logger.error("Card in Warm State, rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.WARM_CARD); //14-Warm Card ; Refer to Doc
                            wsmodel.setMessage("WARM CARD");
                            // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                            //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                            wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                            //===============================================================================================================
                            // ====================================================================================
                            //m.rehman: 25-06-2021, Visa certification
                            //return wsmodel;
                        } else {
                            logger.error("Invalid Card Auth Status [ " + card.getCardStatus() + "], rejecting...");
                            wsmodel.setRespcode(ISOResponseCodes.BAD_CARD_STATUS); //16-BadCardStatus ; Refer to Doc
                            wsmodel.setMessage("BAD STATUS");
                            // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                            //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                            wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                            //===============================================================================================================
                            // ====================================================================================
                            //m.rehman: 25-06-2021, Visa certification
                            //return wsmodel;
                        }

                        //m.rehman: 25-06-2021, Visa certification
                        if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
                            if (Util.hasText(wsmodel.getIcccarddata())) {
                                //TODO: need to update below according to scheme requirement
                                //setting icc data without 9F26 (Application Cryptogram) tag for 1Link
                                String iccData = wsmodel.getIcccarddata();
                                String iccDataUpdate;
                                int index = iccData.indexOf(EMVTags.APP_CRYPT);
                                iccDataUpdate = iccData.substring(0, index);
                                iccDataUpdate += iccData.substring(index + 22, iccData.length());
                                wsmodel.setIcccarddata(iccDataUpdate);
                            }

                            String emvData = wsmodel.getSelfdefinedata();
                            if (Util.hasText(emvData))
                                emvData = emvData.substring(0, 2) + "0";
                            wsmodel.setSelfdefinedata(emvData);
                        }

                        return wsmodel;
                        ////////////////////////////////////////////////////////////////////////////////////////////////

                        /*
                        logger.error("Inactive Card Found in DB with CardNo [" + wsmodel.getCardnumber() + "] Status [" + card.getCardStatus() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12 - Invalid Card Status ; Refer to Doc
                        return wsmodel;
                        */
                    }

                    //=======================================================================================================

                    //m.rehman: 10-02-2021, VP-NAP-202011102/ VC-NAP-202011101 - Document version 4.7.3 [Updates]
                    ////////////////////////////////////////////////////////////////////////////////////////////
                    if (card.getList_CustAccounts() == null) {
                        logger.error("No Account Found for CardNo [" + wsmodel.getCardnumber() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                        wsmodel.setMessage("INVALID ACCOUNT");
                        return wsmodel;
                    }


                    CMSAccount account = null; //TODO: Raza should Update THIS with default
                    for (CMSAccount acct : card.getList_CustAccounts()) {
                        account = acct;
                        if (!acct.getStatus().equals("00") || !acct.getCustomer().getStatus().equals("00")) {
                            logger.error("Inactive Account or Customer Found in DB for CardNo [" + wsmodel.getCardnumber() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_INACTIVE); //32 - Inactive Account/Customer Status ; Refer to Doc
                            wsmodel.setMessage("ACCOUNT INACTIVE");
                            return wsmodel;
                        }
                    }
                    //Raza Account & Customer Status validation end ; TODO should be updated

                    //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
                    account = (CMSAccount) GeneralDao.Instance.getCurrentSession().get(CMSAccount.class, account.getId(), LockMode.UPGRADE);
                    GeneralDao.Instance.getCurrentSession().refresh(account);
                    ////////////////////////////////////////////////////////////////////////////////////

                    //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                    if (account.getCategory() != null && account.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                        wsmodel.setMerchantid(account.getUserId());
                    } else {
                        wsmodel.setUserid(account.getUserId());
                    }
                    ////////////////////////////////////////////////////////////////////////////////////////////

                    //m.rehman: 21-01-2020, VC-NAP-202101071 / VP-NAP-202101071 / VG-NAP-202101071 - VISA (Switch-Middleware Integration document v 4.7.6) - Release 4
                    //checking operation permission on card
                    if (!WalletCMSFunctions.CheckCardControls(wsmodel, card)) {
                        logger.error("Transaction not allowed on this card, rejecting ...");
                        wsmodel.setRespcode(ISOResponseCodes.PERMISSION_DENIED);
                        wsmodel.setMessage("PERMISSION DENIED");
                        return wsmodel;
                    }

                    // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
                    // Asim Shahzad, Date : 22nd Sep 2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                    String PAN = WebServiceUtil.getPANDecryptedValue(wsmodel.getCardnumber());

                    // Asim Shahzad, Date : 29th Sep 2020, Tracking ID : VC-NAP-202009251 / VP-NAP-202009251
                    //String Bin = PAN.substring(0,6);
                    String Bin = PAN.substring(0, 8);
                    // ======================================================================================

                    dbQuery = "from " + IMD.class.getName() + " n where " +
                            "n.IMD = :CARD_BIN ";
                    params = new HashMap<String, Object>();
                    params.put("CARD_BIN", Bin);

                    IMD obj_Bin = (IMD) GeneralDao.Instance.findObject(dbQuery, params);

                    if (null == obj_Bin) {
                        Bin = PAN.substring(0, 6);

                        dbQuery = "from " + IMD.class.getName() + " n where " +
                                "n.IMD = :CARD_BIN ";
                        params = new HashMap<String, Object>();
                        params.put("CARD_BIN", Bin);

                        obj_Bin = (IMD) GeneralDao.Instance.findObject(dbQuery, params);
                    }

                    //m.rehman: 23-02-202, Euronet integration
                    if (obj_Bin != null) {
                        wsmodel.setCardscheme(obj_Bin.getCardScheme());
                    }

                    // =====================================================================================
                    // ==== Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101 ====

                    // Arsalan commited, Ticket# VP-NAP-202102111 / VG-NAP-202102111, Date: 31-May-2021
//                    if(!card.getCardStatus().equals("00"))
//                    {
//                        if(card.getCardStatus().equals("90"))
//                        {
//                            logger.error("Card in Blocked State, rejecting...");
//                            wsmodel.setRespcode(ISOResponseCodes.HOT_CARD); //15-Hot Card ; Refer to Doc
//                            // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
//                            wsmodel.setCardnolastdigits(card.getCardNoLastDigits());
//                            // ====================================================================================
//                            return wsmodel;
//                        }
//                        else if(card.getCardStatus().equals("03"))
//                        {
//                            logger.error("Card in Warm State, rejecting...");
//                            wsmodel.setRespcode(ISOResponseCodes.WARM_CARD); //14-Warm Card ; Refer to Doc
//                            // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
//                            wsmodel.setCardnolastdigits(card.getCardNoLastDigits());
//                            // ====================================================================================
//                            return wsmodel;
//                        }
//                        else
//                        {
//                            logger.error("Invalid Card Auth Status [ " + card.getCardStatus() + "], rejecting...");
//                            wsmodel.setRespcode(ISOResponseCodes.BAD_CARD_STATUS); //16-BadCardStatus ; Refer to Doc
//                            // Asim Shahzad, Date : 24th Nov 2020, Tracking ID : VP-NAP-202011102/ VC-NAP-202011101
//                            wsmodel.setCardnolastdigits(card.getCardNoLastDigits());
//                            // ====================================================================================
//                            return wsmodel;
//                        }
//
//                        /*
//                        logger.error("Inactive Card Found in DB with CardNo [" + wsmodel.getCardnumber() + "] Status [" + card.getCardStatus() + "]");
//                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_STATUS); //12 - Invalid Card Status ; Refer to Doc
//                        return wsmodel;
//                        */
//                    }
//                    else {

                    // Arsalan commited, Ticket# VP-NAP-202102111 / VG-NAP-202102111, Date: 31-May-2021=========================

                    //Raza Account & Customer Status validation start ; TODO should be updated


                    //m.rehman: 10-02-2021, VP-NAP-202011102/ VC-NAP-202011101 - Document version 4.7.3 [Updates]
                    ////////////////////////////////////////////////////////////////////////////////////////////
                        /*
                        if(card.getList_CustAccounts() == null)
                        {
                            logger.error("No Account Found for CardNo [" + wsmodel.getCardnumber() + "]");
                            wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                            return wsmodel;
                        }


                        CMSAccount account= null; //TODO: Raza should Update THIS with default
                        for(CMSAccount acct : card.getList_CustAccounts())
                        {
                            account = acct;
                            if(!acct.getStatus().equals("00") || !acct.getCustomer().getStatus().equals("00"))
                            {
                                logger.error("Inactive Account or Customer Found in DB for CardNo [" + wsmodel.getCardnumber() + "]");
                                wsmodel.setRespcode(ISOResponseCodes.CUSTOMER_INACTIVE); //32 - Inactive Account/Customer Status ; Refer to Doc
                                return wsmodel;
                            }
                        }
                        //Raza Account & Customer Status validation end ; TODO should be updated

                        //m.rehman: 07-10-2020, Tracking ID : VC-NAP-202009101 / VP-NAP-202009104
                        if (account.getCategory() != null && account.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                            wsmodel.setMerchantid(account.getUserId());
                        } else {
                            wsmodel.setUserid(account.getUserId());
                        }
                        */

                    dbQuery = "from " + CMSAuth.class.getName() + " c where c.relation= :relation " + " and c.channelId = :chnnl ";
                    params = new HashMap<String, Object>();
                    params.put("relation", card.getCardNumberExpiryRelation());
                    params.put("chnnl", wsmodel.getChannelid()); //This is the middleware channel //Raza it should be in request model, as Pin varies for Channel (App, Portal, IB etc)
                    CMSAuth cardrelation = (CMSAuth) GeneralDao.Instance.findObject(dbQuery, params);

                    if (cardrelation == null) {
                        logger.error("Card Relation not found for relation [" + card.getCardNumberExpiryRelation() + "], rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.INVALID_CARD_RECORD); //Invalid Card Record ; Raza update THIS
                        wsmodel.setMessage("INVALID CARD RECORD");
                        return wsmodel;
                    }

                    //m.rehman: setting last digits in WSEntity object for verification after decryption
                    //Arsalan Akhter, Date:15-Sept-2021, Ticket:VP-NAP-202109151/VC-NAP-202109151(cardlastdigits parameter name should be same in all relevant calls)
                    wsmodel.setCardlastdigits(card.getCardNoLastDigits());
                    //===============================================================================================================
                    if (!(Util.hasText(wsmodel.getPosentrymode()) &&
                            (wsmodel.getPosentrymode().substring(0, 2).equals(ISOPOSEntryMode.PANEntryMode.MANUAL_ENTRY)
                                    || wsmodel.getPosentrymode().substring(2, 3).equals(ISOPOSEntryMode.PINEntryCapability.TERMINAL_CANNOT_ACCEPT_PINS)))) {
                        //Commented By Waleed
                        if (!WalletCMSFunctions.ValidateCardPIN(wsmodel, cardrelation)) {
                            logger.error("PIN validation failed, rejecting...");
                            wsmodel.setMessage("INVALID PIN/PIN VALIDATION FAILED");
                            wsmodel.setRespcode(ISOResponseCodes.BAD_PIN); //24-BAD PIN; refer to Doc
//
//                                if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
//                                    if (Util.hasText(wsmodel.getIcccarddata())) {
//                                        //TODO: need to update below according to scheme requirement
//                                        //setting icc data without 9F26 (Application Cryptogram) tag for 1Link
//                                        String iccData = wsmodel.getIcccarddata();
//                                        String iccDataUpdate;
//                                        int index = iccData.indexOf(EMVTags.APP_CRYPT);
//                                        iccDataUpdate = iccData.substring(0, index);
//                                        iccDataUpdate += iccData.substring(index + 22, iccData.length());
//                                        wsmodel.setIcccarddata(iccDataUpdate);
//                                    }
//
//                                    String emvData = wsmodel.getSelfdefinedata();
//                                    if (Util.hasText(emvData))
//                                        emvData = emvData.substring(0, 2) + "0";
//                                    wsmodel.setSelfdefinedata(emvData);
//                                }
                            return wsmodel;
                        }

                    }
                    logger.info("PIN validated successfully or Transaction is Manual Cash ...");

                    if (WalletCMSFunctions.CVVCheckRequired(wsmodel) || WalletCMSFunctions.ICVVCheckRequired(wsmodel)) {
                        //Commented By Waleed
                        if (!WalletCMSFunctions.ValidateCVV(wsmodel, cardrelation, true)) {
                            logger.error("CVV/ICVV validation failed, rejecting...");
                            //wsmodel.setRespcode(ISOResponseCodes.SECURITY_VIOLATION); //24-BAD PIN; refer to Doc

                            //m.rehman: Euronet Integration
                            if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
                                if (Util.hasText(wsmodel.getIcccarddata())) {
                                    //TODO: need to update below according to scheme requirement
                                    //setting icc data without 9F26 (Application Cryptogram) tag for 1Link
                                    String iccData = wsmodel.getIcccarddata();
                                    String iccDataUpdate;
                                    int index = iccData.indexOf(EMVTags.APP_CRYPT);
                                    iccDataUpdate = iccData.substring(0, index);
                                    iccDataUpdate += iccData.substring(index + 22, iccData.length());
                                    wsmodel.setIcccarddata(iccDataUpdate);
                                }

                                String emvData = wsmodel.getSelfdefinedata();
                                if (Util.hasText(emvData))
                                    emvData = emvData.substring(0, 2) + "0";
                                wsmodel.setSelfdefinedata(emvData);
                            }
                            wsmodel.setMessage("CVV/ICVV VALIDATION FAILED");
                            return wsmodel;
                        }
                        logger.info("CVV/ICVV validated successfully");
                    }

                    if (Util.hasText(wsmodel.getIcccarddata())) {
                        //Commented By Waleed
                        if (!WalletCMSFunctions.ValidateCryptogram(wsmodel, cardrelation)) {
                            logger.error("Cryptogram validation failed, rejecting...");
                            wsmodel.setMessage("CRYPTOGRAM VALIDATION FAILED");
                            //wsmodel.setRespcode(ISOResponseCodes.SECURITY_VIOLATION); //24-BAD PIN; refer to Doc
                            return wsmodel;
                        }
                        logger.info("Cryptogram validated successfully");
                    } else if (Util.hasText(wsmodel.getPosentrymode()) && wsmodel.getPosentrymode().substring(0, 2).equals(ISOPOSEntryMode.PANEntryMode.ICC_READ_FAIL_MST_READ)) {
                        //m.rehman: Euronet Integration
//                            if (Util.hasText(wsmodel.getChannelid()) && wsmodel.getChannelid().equals(ChannelCodes.ONELINK)) {
//                                logger.error("Fallback case: Cryptogram validation not performed!");
//                                String emvData = wsmodel.getSelfdefinedata();
//                                if (Util.hasText(emvData))
//                                    emvData = emvData.substring(0, 2) + "0";
//                                wsmodel.setSelfdefinedata(emvData);
//                            }
                    }

                    if (Long.parseLong(wsmodel.getAmounttransaction()) <= 0) {
                        logger.error("Invalid Amount for Withdrawal Transaction, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.LOW_BALANCE); //04 - Low Balance ; refer to Doc
                        wsmodel.setMessage("LOW BALANCE");
                        return wsmodel;
                    }

                    //m.rehman: 04-12-2023, NAP-P7-23 / VP-NAP-202405061 - Switch-middleware integration v 5.1.9 (Cash Withdrawal Limit for L1)
                    dbQuery = "from " + SystemConfig.class.getName() + " c where c.identifier= :IDF ";
                    params = new HashMap<String, Object>();
                    params.put("IDF", "CASH_WITHDRAWAL_UPPER_BOUND_LIMIT");

                    SystemConfig systemConfig = (SystemConfig) GeneralDao.Instance.findObject(dbQuery, params);

                    if (systemConfig != null && Long.parseLong(wsmodel.getAmounttransaction()) > Long.parseLong(systemConfig.getValue())) {
                        logger.error("Transaction Amount is Greater That Upper Bound Limit for Withdrawal Transaction, rejecting...");
                        wsmodel.setRespcode(ISOResponseCodes.LIMIT_EXCEEDED); //04 - Low Balance ; refer to Doc
                        wsmodel.setMessage("LIMIT EXCEEDED");
                        return wsmodel;
                    }
                    //================================================================================================

                    //m.rehman: Euronet integration
                    //need to fetch charged according to local or international txn, taking charges under channel check below
                    //getting transaction charges
                    //FetchTransactionCharge(wsmodel, account.getProduct());

                    //process wallet limit
                    //m.rehman: 22-04-2021, Euronet Integration - need to check both card and account limit
                    //if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, null, Boolean.TRUE))
                    if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, card, Boolean.TRUE)) {
                        logger.error("Limit processing failed, rejecting...");
                        wsmodel.setMessage("LIMIT EXCEEDED");
                        return wsmodel;
                    }

                    logger.info("Going to perform On Us Withdrawal in Wallet...");

                    //m.rehman: Euronet Integration
                    boolean fmFlag = false;
                    String channelid = wsmodel.getChannelid();
                    if (Util.hasText(channelid) && channelid.equals(ChannelCodes.ONELINK)) {
//                //m.rehman: Euronet integration, add local/international flag in charges
//                //getting transaction charges
//                FetchTransactionCharge(wsmodel, account.getProduct(), "0");      //0-false
//
//                //Arsalan Akhter, Date: 18-May-2021, Ticket: VP-NAP-202103261/ VC-NAP-202103261 Change in transaction fee at ATM (Additional Rs 2.5 for paper receipt)
//                String Reserved = wsmodel.getReserved();
//                if (Util.hasText(Reserved)) {
//                    if (Reserved.substring(0, 1).contains("Y")) {
//                        String serviceName = wsmodel.getServicename();
//                        String srcCharge = wsmodel.getSrcchargeamount();
//                        Long amount = 0L;
//                        wsmodel.setServicename("ReceiptCharge");
//                        FetchTransactionCharge(wsmodel, account.getProduct(), "0");      //0-false
//                        wsmodel.setServicename(serviceName);
//
//                        amount = Long.parseLong(srcCharge) + Long.parseLong(wsmodel.getSrcchargeamount());
//                        srcCharge = String.valueOf(amount);
//                        wsmodel.setSrcchargeamount(srcCharge);
//                    }
//                }
//                //////////////////////////////////////////////////////////////////////////////////

//                fmFlag = FinanceManager.CashWithDrawalOnUs(wsmodel, account);

                    } /*else if (Util.hasText(channelid) && channelid.equals(ChannelCodes.EURONET)) {
                //m.rehman: Euronet integration, add local/international flag in charges
                //getting transaction charges
                FetchTransactionCharge(wsmodel, account.getProduct(), "1");      //1-true
                fmFlag = FinanceManager.InternationalCashWithDrawalFromEuronet(wsmodel, account);

            }*/
                    //m.rehman: 10-12-2021 - VP-NAP-202111291 / VC-NAP-202111291 / VG-NAP-202111291 - Meezan ATM On-Us Withdrawal/Balance Inquiry and Reversal
                    // Huzaifa: 11/08/2023: FW: NAP-P5-23 ==> [ Logging email ] ==> Segregation of ATM On Us Channels Bank - UBL & BAFL
                    else if (Util.hasText(channelid) && channelid.equals(ChannelCodes.UNILONUSATM)) {
//                if(!wsmodel.getIsonustranx()){
//                    FetchTransactionCharge(wsmodel, account.getProduct(), "0");      //1-true
//                }

//                fmFlag = FinanceManager.CNICBasedOnUsCashWithdrawal(wsmodel, account);

                        fmFlag = FinanceManager.CashWithDrawalOnUs(wsmodel, account);
                    }

                    if (fmFlag) {
                        logger.info("On Us Cash Withdrawal from Wallet Done successfully!");
                        //setting account balance
                        wsmodel.setAccountnumber(account.getAccountNumber());
                        if (account.getCategory() != null && account.getCategory().equals(AccType.CAT_PREPAID_WALLET_VALUE)) {
                            wsmodel.setMerchantid(account.getUserId());
                        } else {
                            wsmodel.setUserid(account.getUserId());
                        }
                        //s.mehtab: 20-10-2020, VC-NAP-202010201 - DE-54 (Available Balance on Cash Withdrawal Receipt)
                        wsmodel.setAcctbalance(account.getAvailableBalance());
                        logger.info("Setting Account Balance [" + account.getAvailableBalance() + "]");
                        wsmodel.setRespcode(ISOResponseCodes.APPROVED);

                        //m.rehman: 15-10-2021, PS-VP-NAP-202109301 / PS-VC-NAP-202109301 / PS-VG-NAP-202109301 - Time-out on switch (when calling wallet-API) for wallet statement
                        wsmodel.setIncludeinstatement(1);
                        wsmodel.setNayapaytrantype(wsmodel.getServicename());
                        ////////////////////////////////////////////////////////////////////////////////////////////////////

                        return wsmodel;
                    } else {
                        logger.info("Unable to perform On Us Withdrawal Cash in Wallet... **********Manual Process Required!**********");

                        //process wallet limit
                        String respCode = wsmodel.getRespcode();
                        try{
                            logger.info("Reversing Limit ...");
                            if (!WalletCMSFunctions.ProcessDebitWalletLimit(wsmodel, account, card, Boolean.FALSE)) {
                                logger.error("Limit reversing failed, rejecting...");
                                wsmodel.setMessage("UNABLE TO PROCESS");
                                //return wsmodel;
                            }

                        }
                        catch (Exception e){
                            logger.error("Exception caught while reversing limit, ignoring...");
                            logger.error(WebServiceUtil.getStrException(e));
                        }
                        wsmodel.setRespcode(respCode);
                        wsmodel.setMessage("LOW BALANCE/UNABLE TO PROCESS");
                        return wsmodel;
                    }
                    // } // Arsalan commited, Ticket# VP-NAP-202102111 / VG-NAP-202102111, Date: 31-May-2021
                }
            } else {
                logger.error("No Identifier Found for NayaPay customer");
                wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '02' no account
                wsmodel.setMessage("INVALID ACCOUNT");
                return wsmodel;
            }
        } catch (Exception e) {
            logger.error(WebServiceUtil.getStrException(e));
            //logger.error(e);
            logger.error("Exception caught while Executing On Us CashWithdrawal..!");
            wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT); //Raza Refer to Document '12'
            wsmodel.setMessage("INVALID ACCOUNT");
            return wsmodel;
        }
        //m.rehman: 8-11-2021, VC-NAP-202111082 - Hibernate row level locking in transaction
// Moiz, Date : 25th July 2024, Desc : Added for ORA-0001 issue
//        finally {
//            GeneralDao.Instance.endTransaction();
//            GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);
//        }
    }
    // ===========================================================================================

    //Added by Huzaifa VP-NAP-202405061 => link CW (OffUs) channel Limit Authentication Change
    public static WalletCMSWsEntity ExecuteUpdateApiStatus(WalletCMSWsEntity wsmodel)
    {
        logger.info("Executing UpdateApiStatus Request...");
        try {
            WalletCMSWsListingEntity listing;
            String servicename = wsmodel.getServicename();

            GeneralDao.Instance.beginTransaction(GeneralDao.OPTIMIZER_MODE_FIRST_ROWS);

            if (Util.hasText(wsmodel.getResponsefrommiddleware())) {
                if (wsmodel.getResponsefrommiddleware().equals("60000")) {

                    logger.info("Resp Code:" + wsmodel.getRespcode());
                    logger.info("ID: " + wsmodel.getId());
                    logger.info("userId: " + wsmodel.getUserid());

                    wsmodel.setRespcode(ISOResponseCodes.NP_SRC_LIMIT_EXCEEDED);
                    wsmodel.setServicename(wsmodel.getServicenamefrommiddleware());

                    listing = new WalletCMSWsListingEntity();
                    listing = listing.copy(wsmodel);

                    logger.info("Respcode before saving the object:" + wsmodel.getRespcode());
                    logger.info("Servicename before saving the object:" + wsmodel.getServicename());
                    GeneralDao.Instance.save(wsmodel);
                    listing.setId(wsmodel.getId());
                    //GeneralDao.Instance.save(listing);

                    GeneralDao.Instance.saveOrUpdate(listing);
                    /////////////////////////////////////////////////////////////////

                    GeneralDao.Instance.flush(); //Raza Adding for Unique TxnRefNum and other Constraints for WSMODEL class
                    //GeneralDao.Instance.commit(); //Raza Testing for getiing constraint wxception for same txnrefnum & transdatetime composite key
                    logger.info("Request msg saved in Db for cashwithdrawal limit exceeded.. !");
                } else {
                    logger.info("Resp Code:" + wsmodel.getRespcode());
                    logger.info("ID: " + wsmodel.getId());
                    logger.info("userId: " + wsmodel.getUserid());

                    wsmodel.setRespcode(wsmodel.getResponsefrommiddleware());
                    wsmodel.setServicename(wsmodel.getServicenamefrommiddleware());

                    listing = new WalletCMSWsListingEntity();
                    listing = listing.copy(wsmodel);

                    logger.info("Respcode before saving the object:" + wsmodel.getRespcode());
                    logger.info("Servicename before saving the object:" + wsmodel.getServicename());
                    GeneralDao.Instance.save(wsmodel);
                    listing.setId(wsmodel.getId());
                    //GeneralDao.Instance.save(listing);
                    GeneralDao.Instance.saveOrUpdate(listing);
                    /////////////////////////////////////////////////////////////////

                    // Moiz, Date : 25th July 2024, Desc : Added for ORA-0001 issue
					GeneralDao.Instance.flush(); //Raza Adding for Unique TxnRefNum and other Constraints for WSMODEL class
                    //GeneralDao.Instance.commit(); //Raza Testing for getiing constraint wxception for same txnrefnum & transdatetime composite key
                    logger.info("Request msg saved in Db for cashwithdrawal limit exceeded.. !");
                }
            }


            wsmodel.setServicename(servicename);
            return wsmodel;
        } catch (Exception e) {
            logger.error(WebServiceUtil.getStrException(e));
            logger.error(e);
            logger.error("Exception caught while Executing UpdateApiStatus..!");
            wsmodel.setRespcode(ISOResponseCodes.INVALID_ACCOUNT);
            return wsmodel;
        } finally {
            GeneralDao.Instance.endTransaction();
        }

    }
    //========================================================================================
}
